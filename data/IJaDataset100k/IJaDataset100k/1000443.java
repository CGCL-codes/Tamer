package com.centraview.contact.group;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.naming.Context;
import javax.naming.InitialContext;
import org.apache.log4j.Logger;
import com.centraview.administration.authorization.AuthorizationLocal;
import com.centraview.administration.authorization.AuthorizationLocalHome;
import com.centraview.common.CVDal;
import com.centraview.common.CVUtility;

public class GroupEJB implements SessionBean {

    private static Logger logger = Logger.getLogger(GroupEJB.class);

    protected javax.ejb.SessionContext ctx;

    protected Context environment;

    private String dataSource = "";

    public GroupEJB() {
    }

    /**
   * Called by the container to create a session bean instance. Its parameters
   * typically contain the information the client uses to customize the bean
   * instance for its use. It requires a matching pair in the bean class and its
   * home interface.
   */
    public void ejbCreate() {
    }

    /**
   * A container invokes this method before it ends the life of the session
   * object. This happens as a result of a client's invoking a remove operation,
   * or when a container decides to terminate the session object after a
   * timeout. This method is called with no transaction context.
   */
    public void ejbRemove() {
    }

    /**
   * The activate method is called when the instance is activated from its
   * 'passive' state. The instance should acquire any resource that it has
   * released earlier in the ejbPassivate() method. This method is called with
   * no transaction context.
   */
    public void ejbActivate() {
    }

    /**
   * The passivate method is called before the instance enters the 'passive'
   * state. The instance should release any resources that it can re-acquire
   * later in the ejbActivate() method. After the passivate method completes,
   * the instance must be in a state that allows the container to use the Java
   * Serialization protocol to externalize and store away the instance's state.
   * This method is called with no transaction context.
   */
    public void ejbPassivate() {
    }

    public void setSessionContext(SessionContext ctx) {
        this.ctx = ctx;
    }

    public Vector getGroupMemberIDs(int userID, int groupId) {
        Vector v = new Vector();
        CVDal dl = new CVDal(dataSource);
        try {
            dl.setSql("contact.listgroupmembers");
            dl.setInt(1, groupId);
            Collection col = dl.executeQuery();
            Iterator it = col.iterator();
            while (it.hasNext()) {
                HashMap hm = (HashMap) it.next();
                v.addElement(hm.get("childid"));
            }
        } catch (Exception e) {
            logger.error("[getGroupMemberIDs]: Exception", e);
        } finally {
            dl.destroy();
        }
        return v;
    }

    /**
   * In this method Group Member is added to Perticular Group
   * 
   * @param userId Login UserID
   * @param contactId int array containing ContactID which is to be added in the
   *          Group.
   * @param groupId GroupID.
   */
    public void addContactToGroup(int userId, int[] contactId, int groupId) {
        CVDal dl = new CVDal(dataSource);
        try {
            for (int i = 0; i < contactId.length; i++) {
                dl.setSql("contact.createmember");
                dl.setInt(1, groupId);
                dl.setInt(2, contactId[i]);
                dl.executeUpdate();
                dl.clearParameters();
            }
        } catch (Exception e) {
            logger.error("[addContactToGroup]: Exception", e);
        } finally {
            dl.destroy();
        }
    }

    /**
   * Not Implemented.
   * 
   * @param userId Login User ID.
   * @param contactId contactID to be deleted.
   */
    public void deleteContactFromGroup(int[] contactId, int groupId) {
    }

    /**
   * In this method the group and it's member are inserted into the DataBase.
   * 
   * @param groupDetail GroupValueObject
   */
    public int createGroup(int userId, GroupVO groupDetail) {
        CVDal dl = new CVDal(dataSource);
        int gid = 0;
        try {
            dl.setSqlQuery("INSERT INTO grouptbl(Name,description, owner, createDate, modifyDate) values(?,?,?,NOW(),NOW())");
            dl.setString(1, groupDetail.getGroupName());
            dl.setString(2, groupDetail.getDescription());
            dl.setInt(3, groupDetail.getOwner());
            dl.executeUpdate();
            gid = dl.getAutoGeneratedKey();
            InitialContext ic = CVUtility.getInitialContext();
            AuthorizationLocalHome authorizationHome = (AuthorizationLocalHome) ic.lookup("local/Authorization");
            AuthorizationLocal authorizationLocal = authorizationHome.create();
            authorizationLocal.setDataSource(dataSource);
            authorizationLocal.saveCurrentDefaultPermission("Group", gid, userId);
        } catch (Exception e) {
            logger.error("[createGroup]: Exception", e);
        } finally {
            dl.destroy();
        }
        return gid;
    }

    /**
   * In this method returns the Group Value Object for Passing groupId as
   * parameter.
   * 
   * @param groupId GroupID
   * @return GroupValue Object
   */
    public GroupVO getGroupDetails(int userId, int groupId) {
        GroupVO group = null;
        CVDal dl = new CVDal(dataSource);
        try {
            dl.setSqlQuery("select GroupID,Description,Name , owner , createDate ,modifyDate  from grouptbl where groupid = ?");
            dl.setInt(1, groupId);
            Collection col = dl.executeQuery();
            if (col != null) {
                HashMap hm = (HashMap) col.iterator().next();
                group = new GroupVO();
                group.setGroupID(((Long) hm.get("GroupID")).intValue());
                group.setGroupName((String) hm.get("Name"));
                group.setDescription((String) hm.get("Description"));
                Object ownerObject = hm.get("owner");
                if (ownerObject != null) {
                    String newOwnerString = ownerObject.toString();
                    group.setOwner(Integer.parseInt(newOwnerString));
                }
                group.setCreatedate((java.util.Date) hm.get("createDate"));
                group.setModifydate((java.util.Date) hm.get("modifyDate"));
            }
        } catch (Exception e) {
            logger.error("[getGroupDetails]: Exception", e);
        } finally {
            dl.destroy();
        }
        return group;
    }

    public void updateGroup(int userId, GroupVO groupDetail) {
        CVDal dl = new CVDal(dataSource);
        try {
            dl.setSqlQuery("update grouptbl set name = ?  ,description = ? , owner = ? , modifyDate=concat(CURRENT_DATE,CURRENT_TIME)  where groupid = ? ");
            dl.setString(1, groupDetail.getGroupName());
            dl.setString(2, groupDetail.getDescription());
            dl.setInt(3, groupDetail.getOwner());
            dl.setInt(4, groupDetail.getGroupID());
            dl.executeUpdate();
        } catch (Exception e) {
            logger.error("[updateGroup]: Exception", e);
        } finally {
            dl.destroy();
        }
    }

    /**
   * This method delete the Group Member and Group from Following table 1)
   * Member 2) Grouptbl
   * 
   * groupId is the Group Id which is to be deleted.
   */
    public void deleteGroup(int groupId) {
        CVDal dl = new CVDal(dataSource);
        try {
            dl.setSql("contact.deletegroupmember");
            dl.setInt(1, groupId);
            dl.executeUpdate();
            dl.setSqlQueryToNull();
            dl.setSql("contact.deletegroup");
            dl.setInt(1, groupId);
            dl.executeUpdate();
        } catch (Exception e) {
            logger.error("[deleteGroup]: Exception", e);
        } finally {
            dl.destroy();
        }
    }

    public void deleteGroupMember(int groupid, int memberId) {
        CVDal dl = new CVDal(dataSource);
        try {
            dl.setSql("contact.deleteselectedgroupmember");
            dl.setInt(1, groupid);
            dl.setInt(2, memberId);
            dl.executeUpdate();
        } catch (Exception e) {
            logger.error("[deleteGroupMember]: Exception", e);
        } finally {
            dl.destroy();
        }
    }

    /**
   * Given a <b>groupID </b>, this method duplicates the group record in the
   * database, and also adds the origin group's members to the new group. Please
   * be sure that individualID is the ID of the <u>Individual </u> record of the
   * user who is creating this new record, <u>NOT </u> the userID.
   * 
   * @param individualID the individualID of the user who is creating the new
   *          group.
   * @param groupID the groupID orginal group which is to be duplicated.
   * @return int: newGroupID - the groupID of the newly created group.
   */
    public int duplicateGroup(int individualID, int groupID) {
        int newGroupID = 0;
        try {
            GroupVO originGroupVO = this.getGroupDetails(individualID, groupID);
            GroupVO newGroupVO = new GroupVO();
            newGroupVO.setGroupName(originGroupVO.getGroupName());
            newGroupVO.setDescription(originGroupVO.getDescription());
            newGroupVO.setOwner(individualID);
            newGroupID = this.createGroup(individualID, newGroupVO);
            if (newGroupID != 0) {
                Vector groupMembers = this.getGroupMemberIDs(individualID, groupID);
                if (groupMembers != null) {
                    Iterator it = groupMembers.iterator();
                    int memberArray[] = new int[groupMembers.size()];
                    int i = 0;
                    while (it.hasNext()) {
                        memberArray[i] = ((Long) it.next()).intValue();
                        i++;
                    }
                    this.addContactToGroup(individualID, memberArray, newGroupID);
                }
            }
        } catch (Exception e) {
            logger.error("[duplicateGroup]: Exception", e);
        }
        return (newGroupID);
    }

    /**
   * @author Kevin McAllister <kevin@centraview.com>This simply sets the target
   *         datasource to be used for DB interaction
   * @param ds A string that contains the cannonical JNDI name of the datasource
   */
    public void setDataSource(String ds) {
        this.dataSource = ds;
    }
}
