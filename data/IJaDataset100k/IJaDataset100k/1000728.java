package rpr2_d18.fixedRecordRepresentations;

import java.util.Iterator;
import java.util.ArrayList;
import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.ByteWrapper;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.encoding.HLAfixedRecord;
import rpr2_d18.fixedRecordRepresentations.WorldLocationStruct;
import rpr2_d18.enumeratedDataRepresentations.OMT13boolean;
import rpr2_d18.fixedRecordRepresentations.OrientationStruct;

/**
 * JAVADOC_COMMENTS
 * semantics : -NULL-
 *
 * @author : auto generated by DRDC FOM Generator
 */
public class SpatialStaticStruct implements HLAfixedRecord {

    private WorldLocationStruct WorldLocation;

    private OMT13boolean IsFrozen;

    private OrientationStruct Orientation;

    /**
   * Constructor
   */
    public SpatialStaticStruct() throws RTIinternalError {
        WorldLocation = new WorldLocationStruct();
        IsFrozen = new OMT13boolean();
        Orientation = new OrientationStruct();
    }

    /**
   * Encodes this element into the specified ByteWrapper.
   * 
   * @param byteWrapper
   */
    public void encode(ByteWrapper byteWrapper) {
        WorldLocation.encode(byteWrapper);
        IsFrozen.encode(byteWrapper);
        Orientation.encode(byteWrapper);
    }

    /**
   * Decodes this element from the ByteWrapper
   * 
   * @param byteWrapper
   */
    public void decode(ByteWrapper byteWrapper) throws DecoderException {
        WorldLocation.decode(byteWrapper);
        IsFrozen.decode(byteWrapper);
        Orientation.decode(byteWrapper);
    }

    /**
   * Decodes this element from the byte array
   * 
   * @param byte array
   */
    public void decode(byte[] bytes) throws DecoderException {
        WorldLocation.decode(bytes);
        IsFrozen.decode(bytes);
        Orientation.decode(bytes);
    }

    /**
   * Returns the octet boundary of this element.
   * - not really relavent for data structures
   * - return the boundary of the first field
   * 
   * @return
   */
    public int getOctetBoundary() {
        return getEncodedLength() % 4;
    }

    /**
   * convert this data structure into a byte array
   * 
   */
    public byte[] toByteArray() {
        int size = getEncodedLength();
        byte[] result = new byte[size];
        byte[] temp;
        int pos = 0;
        temp = WorldLocation.toByteArray();
        System.arraycopy(temp, 0, result, pos, WorldLocation.getEncodedLength());
        temp = IsFrozen.toByteArray();
        System.arraycopy(temp, 0, result, pos, IsFrozen.getEncodedLength());
        temp = Orientation.toByteArray();
        System.arraycopy(temp, 0, result, pos, Orientation.getEncodedLength());
        return result;
    }

    /**
   * add an element to this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param DataElement dataElement
   */
    public void add(DataElement dataElement) {
    }

    /**
   * get the full size of this data structure
   * - add up the size of each member field
   * 
   */
    public int size() {
        return getEncodedLength();
    }

    /**
   * get an element from this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param int index
   */
    public DataElement get(int index) {
        return null;
    }

    /**
   * get an iterator for this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param int index
   */
    public Iterator<DataElement> iterator() {
        return null;
    }

    /**
   * Returns the size in bytes of this element's encoding.
   * 
   * @return size
   */
    public int getEncodedLength() {
        int size = 0;
        size += WorldLocation.getEncodedLength();
        size += IsFrozen.getEncodedLength();
        size += Orientation.getEncodedLength();
        return size;
    }

    public WorldLocationStruct getWorldLocation() {
        return this.WorldLocation;
    }

    public OMT13boolean getIsFrozen() {
        return this.IsFrozen;
    }

    public OrientationStruct getOrientation() {
        return this.Orientation;
    }

    public void setWorldLocation(WorldLocationStruct WorldLocation) {
        this.WorldLocation = WorldLocation;
    }

    public void setIsFrozen(OMT13boolean IsFrozen) {
        this.IsFrozen = IsFrozen;
    }

    public void setOrientation(OrientationStruct Orientation) {
        this.Orientation = Orientation;
    }
}
