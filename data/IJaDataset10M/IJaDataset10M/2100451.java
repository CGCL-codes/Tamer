package websiteschema.analyzer.browser.left;

import com.webrenderer.swing.IMozillaBrowserCanvas;
import com.webrenderer.swing.dom.IDocument;
import com.webrenderer.swing.dom.IElement;
import com.webrenderer.swing.dom.IElementCollection;
import java.awt.BorderLayout;
import java.net.URI;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import websiteschema.analyzer.browser.SimpleBrowser;
import websiteschema.analyzer.browser.left.sample.ClusterFrame;
import websiteschema.analyzer.browser.left.sample.ClustererFrame;
import websiteschema.analyzer.browser.left.sample.SampleCollectionFrame;
import websiteschema.analyzer.browser.left.sample.SampleFrame;
import websiteschema.analyzer.browser.left.sample.TestingFrame;
import websiteschema.analyzer.context.BrowserContext;
import websiteschema.cluster.url.URLCluster;
import websiteschema.cluster.url.URLClusterer;
import websiteschema.cluster.url.URLObj;
import websiteschema.element.XPathAttributes;
import websiteschema.model.domain.Site;
import websiteschema.model.domain.Websiteschema;
import websiteschema.model.domain.cluster.Sample;
import websiteschema.model.domain.cralwer.CrawlerSettings;
import websiteschema.persistence.Mapper;
import websiteschema.persistence.hbase.SampleMapper;
import websiteschema.persistence.rdbms.SiteMapper;
import websiteschema.utils.UrlLinkUtil;

/**
 *
 * @author ray
 */
public class AnalysisPanel extends javax.swing.JPanel implements IConfigureHandler {

    BrowserContext context;

    SimpleBrowser simpleBrowser = null;

    Logger log = Logger.getLogger(AnalysisPanel.class);

    /**
     * Creates new form AnalysisPanel
     */
    public AnalysisPanel(BrowserContext context, SimpleBrowser simpleBrowser) {
        initComponents();
        this.context = context;
        this.simpleBrowser = simpleBrowser;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        WrapperTestingDialog = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        propAddDialog = new javax.swing.JDialog();
        propNameTextField = new javax.swing.JTextField();
        propValueTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        confirmAddButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        siteIdField = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        mustHaveField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dontHaveField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pageTypeField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        encodingField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        depthField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        minDateField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        maxDateField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        crawlerTypeCombo = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        viewCategoryButton = new javax.swing.JButton();
        collectSampleButton = new javax.swing.JButton();
        addLinksButton = new javax.swing.JButton();
        viewSampleButton = new javax.swing.JButton();
        trainButton = new javax.swing.JButton();
        testButton = new javax.swing.JButton();
        analyzeParamButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        propTable = new javax.swing.JTable();
        saveSettingsButton = new javax.swing.JButton();
        addPropButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        delPropButton = new javax.swing.JButton();
        WrapperTestingDialog.setMinimumSize(new java.awt.Dimension(600, 300));
        resultArea.setColumns(20);
        resultArea.setLineWrap(true);
        resultArea.setRows(5);
        jScrollPane2.setViewportView(resultArea);
        javax.swing.GroupLayout WrapperTestingDialogLayout = new javax.swing.GroupLayout(WrapperTestingDialog.getContentPane());
        WrapperTestingDialog.getContentPane().setLayout(WrapperTestingDialogLayout);
        WrapperTestingDialogLayout.setHorizontalGroup(WrapperTestingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE));
        WrapperTestingDialogLayout.setVerticalGroup(WrapperTestingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE));
        propAddDialog.setMinimumSize(new java.awt.Dimension(371, 135));
        jLabel9.setText("属性名称：");
        jLabel10.setText("属性值：");
        confirmAddButton.setText("确认");
        javax.swing.GroupLayout propAddDialogLayout = new javax.swing.GroupLayout(propAddDialog.getContentPane());
        propAddDialog.getContentPane().setLayout(propAddDialogLayout);
        propAddDialogLayout.setHorizontalGroup(propAddDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(propAddDialogLayout.createSequentialGroup().addContainerGap().addGroup(propAddDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(propAddDialogLayout.createSequentialGroup().addGroup(propAddDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel10).addComponent(jLabel9)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(propAddDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(propValueTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE).addComponent(propNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)).addContainerGap()).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propAddDialogLayout.createSequentialGroup().addComponent(confirmAddButton).addGap(149, 149, 149)))));
        propAddDialogLayout.setVerticalGroup(propAddDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(propAddDialogLayout.createSequentialGroup().addContainerGap().addGroup(propAddDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel9).addComponent(propNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(propAddDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel10).addComponent(propValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addComponent(confirmAddButton).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        jLabel1.setText("网站ID : ");
        jLabel2.setText("必须包含 :");
        jLabel3.setText("不能包含 :");
        jLabel4.setText("页面类型 :");
        jLabel5.setText("页面编码 :");
        encodingField.setText("UTF-8");
        jLabel6.setText("采集深度 :");
        depthField.setText("0");
        jLabel7.setText("页面创建时间大于 :");
        minDateField.setText("-30");
        jLabel8.setText("页面创建时间小于 :");
        maxDateField.setText("3");
        jLabel11.setText("采集器类型 : ");
        crawlerTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple", "HtmlUnit", "Firefox" }));
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(mustHaveField, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)).addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel3).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dontHaveField, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)).addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel4).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(pageTypeField, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)).addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel5).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(encodingField, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)).addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel6).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(depthField, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)).addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel7).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(minDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)).addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel8).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(maxDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)).addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel11).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(crawlerTypeCombo, 0, 148, Short.MAX_VALUE)));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel2).addComponent(mustHaveField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel3).addComponent(dontHaveField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel4).addComponent(pageTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel5).addComponent(encodingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel6).addComponent(depthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel7).addComponent(minDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel8).addComponent(maxDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(crawlerTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel11)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        viewCategoryButton.setText("查看分类");
        viewCategoryButton.setToolTipText("查看网站页面的分类");
        viewCategoryButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCategoryButtonActionPerformed(evt);
            }
        });
        collectSampleButton.setText("收集数据");
        collectSampleButton.setToolTipText("收集样本数据");
        collectSampleButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectSampleButtonActionPerformed(evt);
            }
        });
        addLinksButton.setText("添加样本");
        addLinksButton.setToolTipText("将页面上的所有链接添加为样本");
        addLinksButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLinksButtonActionPerformed(evt);
            }
        });
        viewSampleButton.setText("查看样本");
        viewSampleButton.setToolTipText("查看并添加样本");
        viewSampleButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSampleButtonActionPerformed(evt);
            }
        });
        trainButton.setText("查找结构");
        trainButton.setToolTipText("通过聚类查找网站页面的布局结构");
        trainButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });
        testButton.setText("测试抽取");
        testButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });
        analyzeParamButton.setText("分析页面");
        analyzeParamButton.setToolTipText("分析当前页面");
        analyzeParamButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeParamButtonActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(viewSampleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(addLinksButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGap(18, 18, 18).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(trainButton).addComponent(collectSampleButton))).addGroup(jPanel2Layout.createSequentialGroup().addComponent(viewCategoryButton).addGap(18, 18, 18).addComponent(analyzeParamButton)).addComponent(testButton)).addContainerGap(30, Short.MAX_VALUE)));
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(addLinksButton).addComponent(collectSampleButton)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(viewSampleButton).addComponent(trainButton)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(viewCategoryButton).addComponent(analyzeParamButton)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(testButton)));
        propTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] { "属性名称", "属性值" }) {

            Class[] types = new Class[] { java.lang.String.class, java.lang.String.class };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        jScrollPane1.setViewportView(propTable);
        saveSettingsButton.setText("保存");
        saveSettingsButton.setToolTipText("保存配置");
        saveSettingsButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsButtonActionPerformed(evt);
            }
        });
        addPropButton.setText("+");
        addPropButton.setToolTipText("添加配置");
        addPropButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPropButtonActionPerformed(evt);
            }
        });
        editButton.setText("编辑");
        editButton.setToolTipText("编辑配置");
        editButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        delPropButton.setText("-");
        delPropButton.setToolTipText("删除配置");
        delPropButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delPropButtonActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE).addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addGap(2, 2, 2).addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(siteIdField, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addComponent(addPropButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(delPropButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(editButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(saveSettingsButton))).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(siteIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel1)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(addPropButton).addComponent(editButton).addComponent(delPropButton).addComponent(saveSettingsButton)).addGap(20, 20, 20)));
    }

    private void viewCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ClusterFrame cf = new ClusterFrame(getSiteId());
        cf.setContext(context);
        cf.setVisible(true);
    }

    class FooThread implements Runnable {

        @Override
        public void run() {
            addLinksButton.setEnabled(false);
            try {
                sampleUrls();
            } finally {
                addLinksButton.setEnabled(true);
            }
        }
    }

    ;

    private int sampleUrls(IDocument doc) {
        int count = 0;
        IElementCollection links = doc.getLinks();
        String pageUrl = context.getReference();
        String charset = doc.getCharSet();
        String siteId = getSiteId();
        if (null != links && null != siteId && !"".equals(siteId)) {
            List<URI> urls = new ArrayList<URI>();
            Set<String> uniqSet = new HashSet<String>();
            for (int i = 0; i < links.length(); i++) {
                IElement ele = links.item(i);
                String href = ele.getAttribute("href", 0);
                String def = BrowserContext.getConfigure().getProperty("URLCharset", "DefaultCharset");
                Map<String, String> charsetMap = BrowserContext.getConfigure().getMapProperty("URLCharset", "CharsetMap");
                URI uri = UrlLinkUtil.getInstance().getURI(pageUrl, href, charset, charsetMap, def);
                if (null != uri && legalUrl(uri)) {
                    String url = uri.toString();
                    if (!uniqSet.contains(url)) {
                        urls.add(uri);
                        uniqSet.add(uri.toString());
                    }
                }
            }
            URLClusterer uc = new URLClusterer();
            List<URLCluster> result = uc.clustering(urls);
            if (null != result) {
                for (URLCluster cluster : result) {
                    List<URLObj> list = cluster.sampling(10);
                    for (URLObj obj : list) {
                        URI uri = obj.getUri();
                        if (null != uri && "http".equals(uri.getScheme())) {
                            context.getConsole().log("add sample: " + uri.toString());
                            if (addSampleUrl_(uri)) {
                                ++count;
                            }
                        }
                    }
                }
            }
        }
        return count;
    }

    private void sampleUrls() {
        String siteId = getSiteId();
        if (null != siteId && !"".equals(siteId)) {
            IMozillaBrowserCanvas browser = context.getBrowser();
            int url_count = sampleUrls(browser.getDocument());
            if (url_count < 50) {
                IDocument frames[] = browser.getDocument().getChildFrames();
                if (null != frames) {
                    for (IDocument frame : frames) {
                        url_count += sampleUrls(frame);
                    }
                }
            }
            JOptionPane.showMessageDialog(this, "添加完毕，链接数目为：" + url_count);
        } else {
            JOptionPane.showMessageDialog(this, "siteId是空或无效！");
        }
    }

    private void addLinksButtonActionPerformed(java.awt.event.ActionEvent evt) {
        new Thread(new FooThread()).start();
    }

    private void saveSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        save();
        JOptionPane.showMessageDialog(this, "Crawler设置保存成功！");
    }

    private Websiteschema getWebsiteschema() {
        Mapper<Websiteschema> mapper = BrowserContext.getSpringContext().getBean("websiteschemaMapper", Mapper.class);
        Websiteschema websiteschema = mapper.get(getSiteId());
        CrawlerSettings settings = getCrawlerSettings();
        Map<String, String> prop = getProperties();
        XPathAttributes attr = this.simpleBrowser.getXPathAttr();
        if (null != settings && null != websiteschema) {
            websiteschema.setCrawlerSettings(settings);
            websiteschema.setXpathAttr(attr);
            websiteschema.setLastUpdateTime(new Date());
            websiteschema.setProperties(prop);
        }
        return websiteschema;
    }

    @Override
    public void save() {
        Mapper<Websiteschema> mapper = BrowserContext.getSpringContext().getBean("websiteschemaMapper", Mapper.class);
        Websiteschema websiteschema = mapper.get(getSiteId());
        CrawlerSettings settings = getCrawlerSettings();
        Map<String, String> prop = getProperties();
        XPathAttributes attr = this.simpleBrowser.getXPathAttr();
        if (null != settings && null != websiteschema) {
            websiteschema.setCrawlerSettings(settings);
            websiteschema.setXpathAttr(attr);
            websiteschema.setLastUpdateTime(new Date());
            websiteschema.setProperties(prop);
            mapper.put(websiteschema);
        }
    }

    private void collectSampleButtonActionPerformed(java.awt.event.ActionEvent evt) {
        SampleCollectionFrame ssf = new SampleCollectionFrame();
        ssf.setSiteId(getSiteId());
        ssf.setVisible(true);
    }

    private void viewSampleButtonActionPerformed(java.awt.event.ActionEvent evt) {
        SampleFrame sf = new SampleFrame();
        sf.setSiteId(getSiteId());
        sf.setVisible(true);
        sf.loadData();
    }

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ClustererFrame cf = new ClustererFrame();
        cf.setSiteId(getSiteId());
        cf.setAnalysisPanel(this);
        cf.setTitle("聚类分析");
        cf.setVisible(true);
    }

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {
        TestingFrame tf = new TestingFrame();
        tf.setContext(context);
        tf.setSiteId(getSiteId());
        tf.setVisible(true);
    }

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel tableModel = (DefaultTableModel) propTable.getModel();
        int row = propTable.getSelectedRow();
        String propName = (String) tableModel.getValueAt(row, 0);
        String propValue = (String) tableModel.getValueAt(row, 1);
        if (null != propValue) {
            PropEditFrame pef = new PropEditFrame();
            pef.setAnalysisPanel(this);
            pef.setPropName(propName);
            pef.setPropValue(propValue);
            pef.setTitle("编辑参数: " + propName);
            pef.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "选择了错误的数据！");
        }
    }

    private void addPropButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int screenWidth = ((int) java.awt.Toolkit.getDefaultToolkit().getScreenSize().width);
        int screenHeight = ((int) java.awt.Toolkit.getDefaultToolkit().getScreenSize().height);
        int sizeWidth = propAddDialog.getWidth();
        int sizeHeight = propAddDialog.getHeight();
        propAddDialog.setLocation((screenWidth - sizeWidth) / 2, (screenHeight - sizeHeight) / 2);
        this.propAddDialog.setVisible(true);
    }

    private void analyzeParamButtonActionPerformed(java.awt.event.ActionEvent evt) {
        final JFrame popup = new JFrame("参数分析");
        popup.setSize(800, 700);
        JPanel panel = createPageAnalysisGUI();
        popup.getContentPane().add(BorderLayout.CENTER, panel);
        popup.setVisible(true);
    }

    private void delPropButtonActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel tableModel = (DefaultTableModel) propTable.getModel();
        int row = propTable.getSelectedRow();
        if (row >= 0) {
            tableModel.removeRow(row);
            save();
        }
    }

    private JPanel createPageAnalysisGUI() {
        String siteId = this.getSiteId();
        SiteMapper siteMapper = BrowserContext.getSpringContext().getBean("siteMapper", SiteMapper.class);
        Site site = siteMapper.getBySiteId(siteId);
        if (null != site) {
            String siteType = site.getSiteType();
            String panelClazz = BrowserContext.getConfigure().getProperty("PageAnalysisGUI", siteType, "websiteschema.analyzer.browser.left.NewsParamPanel");
            if (null != panelClazz) {
                try {
                    Class clazz = Class.forName(panelClazz);
                    JPanel panel = (JPanel) clazz.newInstance();
                    ISiteAnalyzer analyzer = (ISiteAnalyzer) panel;
                    analyzer.setConfigureHandler(this);
                    analyzer.setBrowserContext(context);
                    analyzer.setSiteId(siteId);
                    analyzer.start();
                    return panel;
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
        return null;
    }

    private boolean legalUrl(URI uri) {
        String url = uri.toString();
        CrawlerSettings settings = getCrawlerSettings();
        String[] mustHave = settings.getMustHave();
        String[] dontHave = settings.getDontHave();
        boolean legalUrl = UrlLinkUtil.getInstance().match_simple(url, mustHave, dontHave);
        return legalUrl;
    }

    public boolean addSampleUrl_(URI uri) {
        try {
            Mapper<Sample> mapper = BrowserContext.getSpringContext().getBean("sampleMapper", Mapper.class);
            Sample sample = new Sample();
            String rowKey = UrlLinkUtil.getInstance().convertUriToRowKey(uri, getSiteId());
            sample.setRowKey(rowKey);
            log.debug(rowKey);
            String url = uri.toString();
            sample.setUrl(url);
            sample.setSiteId(getSiteId());
            sample.setCreateTime(new Date());
            mapper.put(sample);
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return false;
    }

    public void setSiteId(String siteId) {
        this.siteIdField.setText(siteId);
        Mapper<Websiteschema> mapper = BrowserContext.getSpringContext().getBean("websiteschemaMapper", Mapper.class);
        Websiteschema websiteschema = mapper.get(siteId);
        if (null != websiteschema) {
            CrawlerSettings settings = websiteschema.getCrawlerSettings();
            setCrawlerSettings(settings);
            setProperties(websiteschema.getProperties());
        }
    }

    public String getSiteId() {
        return this.siteIdField.getText().trim();
    }

    public void startAnalysis(Site site) {
    }

    public CrawlerSettings getCrawlerSettings() {
        CrawlerSettings settings = new CrawlerSettings();
        settings.setMustHave(this.mustHaveField.getText().trim().split(","));
        settings.setDontHave(this.dontHaveField.getText().trim().split(","));
        settings.setAcceptedType(this.pageTypeField.getText().trim().split(","));
        settings.setEncoding(this.encodingField.getText().trim());
        settings.setMaxDepth(Integer.valueOf(this.depthField.getText().trim()));
        settings.setMinDate(Integer.valueOf(this.minDateField.getText().trim()));
        settings.setMaxDate(Integer.valueOf(this.maxDateField.getText().trim()));
        String crawlerType = (String) this.crawlerTypeCombo.getSelectedItem();
        if (crawlerType.contains("Simple")) {
            crawlerType = "websiteschema.crawler.SimpleHttpCrawler";
        } else if (crawlerType.contains("HtmlUnit")) {
            crawlerType = "websiteschema.crawler.htmlunit.HtmlUnitWebCrawler";
        } else if (crawlerType.contains("Firefox")) {
            crawlerType = "websiteschema.crawler.browser.BrowserWebCrawler";
        } else {
            crawlerType = "websiteschema.crawler.SimpleHttpCrawler";
        }
        settings.setCrawlerType(crawlerType);
        return settings;
    }

    @Override
    public Map<String, String> getProperties() {
        Map<String, String> prop = new HashMap<String, String>();
        DefaultTableModel tableModel = (DefaultTableModel) propTable.getModel();
        int count = propTable.getRowCount();
        for (int i = 0; i < count; i++) {
            String key = (String) tableModel.getValueAt(i, 0);
            String value = (String) tableModel.getValueAt(i, 1);
            prop.put(key, value);
        }
        return prop;
    }

    @Override
    public void setProperties(Map<String, String> prop) {
        DefaultTableModel tableModel = (DefaultTableModel) propTable.getModel();
        int rows = propTable.getRowCount();
        for (int i = 0; i < rows; i++) {
            tableModel.removeRow(0);
        }
        if (null != prop) {
            Set<String> keySet = prop.keySet();
            for (String key : keySet) {
                String value = prop.get(key);
                if (null != value) {
                    Vector row = new Vector(2);
                    row.add(key);
                    row.add(value);
                    tableModel.addRow(row);
                }
            }
        }
    }

    public void setCrawlerSettings(CrawlerSettings settings) {
        if (null != settings) {
            this.mustHaveField.setText(arrayToString(settings.getMustHave()));
            this.dontHaveField.setText(arrayToString(settings.getDontHave()));
            this.pageTypeField.setText(arrayToString(settings.getAcceptedType()));
            this.encodingField.setText(settings.getEncoding());
            this.depthField.setText(String.valueOf(settings.getMaxDepth()));
            this.minDateField.setText(String.valueOf(settings.getMinDate()));
            this.maxDateField.setText(String.valueOf(settings.getMaxDate()));
            String crawlerType = settings.getCrawlerType();
            if (null != crawlerType) {
                if (crawlerType.contains("Simple")) {
                    crawlerTypeCombo.setSelectedItem("Simple");
                } else if (crawlerType.contains("HtmlUnit")) {
                    crawlerTypeCombo.setSelectedItem("HtmlUnit");
                } else if (crawlerType.contains("BrowserWebCrawler")) {
                    crawlerTypeCombo.setSelectedItem("Firefox");
                }
            } else {
                crawlerTypeCombo.setSelectedItem("Simple");
            }
        }
    }

    private String arrayToString(String[] array) {
        StringBuilder sb = new StringBuilder();
        if (null != array) {
            for (String str : array) {
                sb.append(str).append(",");
            }
        }
        String ret = sb.toString();
        if (ret.endsWith(",")) {
            ret = ret.substring(0, ret.length() - 1);
        }
        return ret;
    }

    private javax.swing.JDialog WrapperTestingDialog;

    private javax.swing.JButton addLinksButton;

    private javax.swing.JButton addPropButton;

    private javax.swing.JButton analyzeParamButton;

    private javax.swing.JButton collectSampleButton;

    private javax.swing.JButton confirmAddButton;

    private javax.swing.JComboBox crawlerTypeCombo;

    private javax.swing.JButton delPropButton;

    private javax.swing.JTextField depthField;

    private javax.swing.JTextField dontHaveField;

    private javax.swing.JButton editButton;

    private javax.swing.JTextField encodingField;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel10;

    private javax.swing.JLabel jLabel11;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JLabel jLabel4;

    private javax.swing.JLabel jLabel5;

    private javax.swing.JLabel jLabel6;

    private javax.swing.JLabel jLabel7;

    private javax.swing.JLabel jLabel8;

    private javax.swing.JLabel jLabel9;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JSeparator jSeparator2;

    private javax.swing.JTextField maxDateField;

    private javax.swing.JTextField minDateField;

    private javax.swing.JTextField mustHaveField;

    private javax.swing.JTextField pageTypeField;

    private javax.swing.JDialog propAddDialog;

    private javax.swing.JTextField propNameTextField;

    private javax.swing.JTable propTable;

    private javax.swing.JTextField propValueTextField;

    private javax.swing.JTextArea resultArea;

    private javax.swing.JButton saveSettingsButton;

    private javax.swing.JTextField siteIdField;

    private javax.swing.JButton testButton;

    private javax.swing.JButton trainButton;

    private javax.swing.JButton viewCategoryButton;

    private javax.swing.JButton viewSampleButton;
}
