package org.proteored.miapeapi.xml.gi.util;

import org.proteored.miapeapi.cv.Accession;
import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ControlVocabularySet;
import org.proteored.miapeapi.xml.gi.autogenerated.FuGECommonOntologyCvParamType;
import org.proteored.miapeapi.xml.gi.autogenerated.FuGECommonOntologyPropertyValue;
import org.proteored.miapeapi.xml.gi.autogenerated.FuGECommonOntologyUserParamType;
import org.proteored.miapeapi.xml.gi.autogenerated.MIAPEParamUnitType;
import org.proteored.miapeapi.xml.gi.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.gi.autogenerated.ParamType;

public class GIControlVocabularyXmlFactory {

    private final ObjectFactory factory;

    private final ControlVocabularyManager controlVocabularyUtil;

    public GIControlVocabularyXmlFactory(ObjectFactory factory, ControlVocabularyManager controlVocabularyUtil) {
        this.factory = factory;
        this.controlVocabularyUtil = controlVocabularyUtil;
    }

    public ControlVocabularyManager getCvManager() {
        return this.controlVocabularyUtil;
    }

    public ParamType createCV(String name, String value, ControlVocabularySet... cvSets) {
        if (name == null) return null;
        if (cvSets == null) return createUserParam(name, value);
        ParamType param;
        if (cvSets.length == 0) return createUserParam(name, value);
        for (ControlVocabularySet cvSet : cvSets) {
            if (controlVocabularyUtil.isCV(name, cvSet)) {
                param = factory.createParamType();
                FuGECommonOntologyCvParamType ontologyCvParamType = factory.createFuGECommonOntologyCvParamType();
                Accession cvId = controlVocabularyUtil.getControlVocabularyId(name, cvSet);
                String cvRef = controlVocabularyUtil.getCVRef(cvId, cvSet);
                ontologyCvParamType.setAccession(cvId.toString());
                ontologyCvParamType.setName(name);
                ontologyCvParamType.setCvRef(cvRef);
                if (value != null) ontologyCvParamType.setValue(value);
                param.setCvParam(ontologyCvParamType);
                return param;
            }
        }
        return createUserParam(name, value);
    }

    private ParamType createUserParam(String name, String value) {
        ParamType param = factory.createParamType();
        FuGECommonOntologyUserParamType ontologyUserParamType = factory.createFuGECommonOntologyUserParamType();
        if (value != null) ontologyUserParamType.setValue(value);
        ontologyUserParamType.setName(name);
        param.setUserParam(ontologyUserParamType);
        return param;
    }

    public FuGECommonOntologyPropertyValue createProperty(String value, String unit, ControlVocabularySet... cvSets) {
        FuGECommonOntologyPropertyValue propertyValue = factory.createFuGECommonOntologyPropertyValue();
        propertyValue.setValue(value);
        if (unit == null || cvSets.length == 0) return propertyValue;
        ControlVocabularySet cvSet = cvSets[0];
        if (controlVocabularyUtil.isCV(unit, cvSet)) {
            Accession cvId = controlVocabularyUtil.getControlVocabularyId(unit, cvSet);
            propertyValue.setUnitAccession(cvId.toString());
            propertyValue.setUnitCvRef(controlVocabularyUtil.getCVRef(cvId, cvSet));
        }
        propertyValue.setUnitName(unit);
        return propertyValue;
    }

    public MIAPEParamUnitType createParamUnit(String value, String unit, ControlVocabularySet... cvSets) {
        MIAPEParamUnitType paramUnitXML = factory.createMIAPEParamUnitType();
        paramUnitXML.setValue(value);
        if (unit == null || cvSets.length == 0) return paramUnitXML;
        ControlVocabularySet section = cvSets[0];
        if (controlVocabularyUtil.isCV(unit, section)) {
            Accession unitCvId = controlVocabularyUtil.getControlVocabularyId(unit, section);
            String unitCvRef = controlVocabularyUtil.getCVRef(unitCvId, section);
            paramUnitXML.setUnitCvRef(unitCvRef);
            paramUnitXML.setUnitAccession(unitCvId.toString());
        }
        paramUnitXML.setUnitName(unit);
        return paramUnitXML;
    }

    public static String getName(ParamType paramType) {
        String ret;
        ret = "";
        if (paramType == null) return null;
        FuGECommonOntologyCvParamType cvParam = paramType.getCvParam();
        if (cvParam != null) {
            FuGECommonOntologyCvParamType fugeCVParam = cvParam;
            ret = fugeCVParam.getName();
        } else {
            FuGECommonOntologyUserParamType userParam = paramType.getUserParam();
            if (userParam != null) {
                FuGECommonOntologyUserParamType fugeUserParam = userParam;
                ret = fugeUserParam.getName();
            }
        }
        return ret;
    }

    public static String getValue(MIAPEParamUnitType paramUnitType) {
        if (paramUnitType == null) return null;
        return paramUnitType.getValue();
    }

    public static String getValue(ParamType paramType) {
        if (paramType == null) return null;
        FuGECommonOntologyCvParamType cvParam = paramType.getCvParam();
        if (cvParam != null) return cvParam.getValue();
        FuGECommonOntologyUserParamType userParam = paramType.getUserParam();
        if (userParam != null) return userParam.getValue();
        return null;
    }

    public static String getUnitName(MIAPEParamUnitType paramUnitType) {
        if (paramUnitType == null) return null;
        return paramUnitType.getUnitName();
    }
}
