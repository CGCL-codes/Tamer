package org.freeland.tool.console;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import org.freeland.tool.Layer;
import org.freeland.tool.Map;
import org.freeland.tool.Output;

public class TestOutput {

    /**
	 * @param args
	 */
    public static void main(String[] args) {
        Map level = new Map(2);
        Layer Capa1 = new Layer();
        Layer Capa2 = new Layer();
        Layer Capa3 = new Layer();
        Capa1.setIndex(1);
        Capa2.setIndex(2);
        Capa3.setIndex(3);
        Capa1.setScrollSpeed((float) 1.2);
        Capa2.setScrollSpeed((float) 1);
        Capa3.setScrollSpeed((float) 0.8);
        Capa1.setTileCountX(12);
        Capa2.setTileCountX(10);
        Capa3.setTileCountX(8);
        Capa1.setTileCountY(6);
        Capa2.setTileCountY(5);
        Capa3.setTileCountY(4);
        Capa1.setType(1);
        Capa1.setType(1);
        Capa1.setType(1);
        int tiles[][] = new int[12][6];
        tiles[0][0] = 4;
        tiles[0][1] = 21;
        tiles[0][2] = 3;
        tiles[0][3] = 5;
        tiles[0][4] = 7;
        tiles[0][5] = 9;
        tiles[1][0] = 4;
        tiles[1][1] = 21;
        tiles[1][2] = 3;
        tiles[1][3] = 5;
        tiles[1][4] = 7;
        tiles[1][5] = 9;
        tiles[2][0] = 4;
        tiles[2][1] = 21;
        tiles[2][2] = 3;
        tiles[2][3] = 5;
        tiles[2][4] = 7;
        tiles[2][5] = 9;
        tiles[3][0] = 4;
        tiles[3][1] = 21;
        tiles[3][2] = 3;
        tiles[3][3] = 5;
        tiles[3][4] = 7;
        tiles[3][5] = 9;
        tiles[4][0] = 4;
        tiles[4][1] = 21;
        tiles[4][2] = 3;
        tiles[4][3] = 5;
        tiles[4][4] = 7;
        tiles[4][5] = 9;
        tiles[5][0] = 4;
        tiles[5][1] = 21;
        tiles[5][2] = 3;
        tiles[5][3] = 5;
        tiles[5][4] = 7;
        tiles[5][5] = 9;
        tiles[6][0] = 4;
        tiles[6][1] = 21;
        tiles[6][2] = 3;
        tiles[6][3] = 5;
        tiles[6][4] = 7;
        tiles[6][5] = 9;
        tiles[7][0] = 4;
        tiles[7][1] = 21;
        tiles[7][2] = 3;
        tiles[7][3] = 5;
        tiles[7][4] = 7;
        tiles[7][5] = 9;
        tiles[8][0] = 4;
        tiles[8][1] = 21;
        tiles[8][2] = 3;
        tiles[8][3] = 5;
        tiles[8][4] = 7;
        tiles[8][5] = 9;
        tiles[9][0] = 4;
        tiles[9][1] = 21;
        tiles[9][2] = 3;
        tiles[9][3] = 5;
        tiles[9][4] = 7;
        tiles[9][5] = 9;
        tiles[10][0] = 4;
        tiles[10][1] = 21;
        tiles[10][2] = 3;
        tiles[10][3] = 5;
        tiles[10][4] = 7;
        tiles[10][5] = 9;
        tiles[11][0] = 4;
        tiles[11][1] = 21;
        tiles[11][2] = 3;
        tiles[11][3] = 5;
        tiles[11][4] = 7;
        tiles[11][5] = 9;
        Capa1.setTiles(tiles);
        int tiles2[][] = new int[10][5];
        tiles2[0][0] = 4;
        tiles2[0][1] = 21;
        tiles2[0][2] = 3;
        tiles2[0][3] = 5;
        tiles2[0][4] = 7;
        tiles2[1][0] = 4;
        tiles2[1][1] = 21;
        tiles2[1][2] = 3;
        tiles2[1][3] = 5;
        tiles2[1][4] = 7;
        tiles2[2][0] = 4;
        tiles2[2][1] = 21;
        tiles2[2][2] = 3;
        tiles2[2][3] = 5;
        tiles2[2][4] = 7;
        tiles2[3][0] = 4;
        tiles2[3][1] = 21;
        tiles2[3][2] = 3;
        tiles2[3][3] = 5;
        tiles2[3][4] = 7;
        tiles2[4][0] = 4;
        tiles2[4][1] = 21;
        tiles2[4][2] = 3;
        tiles2[4][3] = 5;
        tiles2[4][4] = 7;
        tiles2[5][0] = 4;
        tiles2[5][1] = 21;
        tiles2[5][2] = 3;
        tiles2[5][3] = 5;
        tiles2[5][4] = 7;
        tiles2[6][0] = 4;
        tiles2[6][1] = 21;
        tiles2[6][2] = 3;
        tiles2[6][3] = 5;
        tiles2[6][4] = 7;
        tiles2[7][0] = 4;
        tiles2[7][1] = 21;
        tiles2[7][2] = 3;
        tiles2[7][3] = 5;
        tiles2[7][4] = 7;
        tiles2[8][0] = 4;
        tiles2[8][1] = 21;
        tiles2[8][2] = 3;
        tiles2[8][3] = 5;
        tiles2[8][4] = 7;
        tiles2[9][0] = 4;
        tiles2[9][1] = 21;
        tiles2[9][2] = 3;
        tiles2[9][3] = 5;
        tiles2[9][4] = 7;
        Capa2.setTiles(tiles2);
        int tiles3[][] = new int[8][4];
        tiles3[0][0] = 4;
        tiles3[0][1] = 21;
        tiles3[0][2] = 3;
        tiles3[0][3] = 5;
        tiles3[1][0] = 4;
        tiles3[1][1] = 21;
        tiles3[1][2] = 3;
        tiles3[1][3] = 5;
        tiles3[2][0] = 4;
        tiles3[2][1] = 21;
        tiles3[2][2] = 3;
        tiles3[2][3] = 5;
        tiles3[3][0] = 4;
        tiles3[3][1] = 21;
        tiles3[3][2] = 3;
        tiles3[3][3] = 5;
        tiles3[4][0] = 4;
        tiles3[4][1] = 21;
        tiles3[4][2] = 3;
        tiles3[4][3] = 5;
        tiles3[5][0] = 4;
        tiles3[5][1] = 21;
        tiles3[5][2] = 3;
        tiles3[5][3] = 5;
        tiles3[6][0] = 4;
        tiles3[6][1] = 21;
        tiles3[6][2] = 3;
        tiles3[6][3] = 5;
        tiles3[7][0] = 4;
        tiles3[7][1] = 21;
        tiles3[7][2] = 3;
        tiles3[7][3] = 5;
        Capa3.setTiles(tiles3);
        level.addLayers(0, Capa1);
        level.addLayers(1, Capa2);
        level.addLayers(2, Capa3);
        level.setBackgroundIndex(4);
        Output output = new Output(level);
        byte[] binaryLevel = null;
        try {
            binaryLevel = output.toBinary();
        } catch (IOException e) {
            e.printStackTrace();
        }
        FileOutputStream ret;
        try {
            ret = new FileOutputStream("level.raw");
            try {
                ret.write(binaryLevel);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
}
