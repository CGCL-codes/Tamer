package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

import java.util.ArrayList;
import java.util.Iterator;
import org.dmd.dmc.*;
import org.dmd.dmc.types.CamelCaseName;
import org.dmd.dms.*;
import org.dmd.dms.generated.dmo.MetaDMSAG;
import org.dmd.dms.generated.types.DmcTypeModifierMV;
import org.dmd.mvw.tools.mvwgenerator.extended.Component;
import org.dmd.mvw.tools.mvwgenerator.extended.Controller;
import org.dmd.mvw.tools.mvwgenerator.extended.Presenter;
import org.dmd.mvw.tools.mvwgenerator.extended.menus.ActionBinding;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ActionBindingDMO;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ControllerDMO;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.PresenterDMO;
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.ActionBindingIterableDMW;
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.PresenterIterableDMW;
import org.dmd.mvw.tools.mvwgenerator.generated.types.ActionBindingREF;
import org.dmd.mvw.tools.mvwgenerator.generated.types.PresenterREF;

/**
 * The Controller represents a behavioural component that lives throughout
 * the entire lifecycle of an WebApplication or WebSite. Generally, it
 * manages the Presenters and Views that are displayed, but may also provide
 * behind the scenes management of things like communications, security, menu
 * structure etc. Controllers do not implement Presenter interfaces i.e. they
 * do not interact directly with Views; that is the role of Presenters. <p />
 * Because of their implied lifetime, Controllers are made part of the
 * overall RunContext for an application and are constructed during
 * initialization of the application. There is no need to instantiate
 * Controllers separately. The RunContextItem created for a controller has
 * the same name as the Controller itself with RCI appended. You may specify
 * an itemOrder for the Controller to control when it is instantiated in the
 * RunContext; use this option only if you know what you're doing! The
 * default itemOrder is 50, most base related functionality starts in
 * itemOrder 20 or lower. <p /> Controllers should not communicate with other
 * Controllers directly; this type of communication should be performed using
 * events. So, although it is possible to get the handle to another
 * Controller via the RunContext, it is discouraged. <p />
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.dumpWrapper(BaseDMWGeneratorNew.java:365)
 */
public abstract class ControllerDMW extends Component implements DmcNamedObjectIF {

    public ControllerDMW() {
        super(new ControllerDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Controller);
    }

    public ControllerDMW(DmcTypeModifierMV mods) {
        super(new ControllerDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Controller);
    }

    public Controller getModificationRecorder() {
        Controller rc = new Controller();
        rc.setControllerName(getControllerName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return (rc);
    }

    public ControllerDMW(ControllerDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Controller);
    }

    public Controller cloneIt() {
        Controller rc = new Controller();
        rc.setDmcObject(getDMO().cloneIt());
        return (rc);
    }

    public ControllerDMO getDMO() {
        return ((ControllerDMO) core);
    }

    protected ControllerDMW(ControllerDMO obj, ClassDefinition cd) {
        super(obj, cd);
    }

    public CamelCaseName getObjectName() {
        return (((ControllerDMO) core).getControllerName());
    }

    public int hashCode() {
        return (getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute() {
        return (((ControllerDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj) {
        if (obj instanceof ControllerDMW) {
            return (getObjectName().equals(((ControllerDMW) obj).getObjectName()));
        }
        return (false);
    }

    public Boolean isCentralDMPErrorHandler() {
        return (((ControllerDMO) core).isCentralDMPErrorHandler());
    }

    public void setCentralDMPErrorHandler(Object value) throws DmcValueException {
        ((ControllerDMO) core).setCentralDMPErrorHandler(value);
    }

    public void setCentralDMPErrorHandler(Boolean value) {
        ((ControllerDMO) core).setCentralDMPErrorHandler(value);
    }

    public void remCentralDMPErrorHandler() {
        ((ControllerDMO) core).remCentralDMPErrorHandler();
    }

    public Boolean isCentralRPCErrorHandler() {
        return (((ControllerDMO) core).isCentralRPCErrorHandler());
    }

    public void setCentralRPCErrorHandler(Object value) throws DmcValueException {
        ((ControllerDMO) core).setCentralRPCErrorHandler(value);
    }

    public void setCentralRPCErrorHandler(Boolean value) {
        ((ControllerDMO) core).setCentralRPCErrorHandler(value);
    }

    public void remCentralRPCErrorHandler() {
        ((ControllerDMO) core).remCentralRPCErrorHandler();
    }

    public Boolean isAddedToRunContext() {
        return (((ControllerDMO) core).isAddedToRunContext());
    }

    public void setAddedToRunContext(Object value) throws DmcValueException {
        ((ControllerDMO) core).setAddedToRunContext(value);
    }

    public void setAddedToRunContext(Boolean value) {
        ((ControllerDMO) core).setAddedToRunContext(value);
    }

    public void remAddedToRunContext() {
        ((ControllerDMO) core).remAddedToRunContext();
    }

    public int getInstantiatesPresenterSize() {
        return (((ControllerDMO) core).getInstantiatesPresenterSize());
    }

    public boolean getInstantiatesPresenterIsEmpty() {
        if (((ControllerDMO) core).getInstantiatesPresenterSize() == 0) return (true);
        return (false);
    }

    public boolean getInstantiatesPresenterHasValue() {
        if (((ControllerDMO) core).getInstantiatesPresenterSize() == 0) return (false);
        return (true);
    }

    public PresenterIterableDMW getInstantiatesPresenterIterable() {
        DmcAttribute<?> attr = core.get(MvwDMSAG.__instantiatesPresenter);
        if (attr == null) return (PresenterIterableDMW.emptyList);
        return (new PresenterIterableDMW(((ControllerDMO) core).getInstantiatesPresenter()));
    }

    public DmcAttribute<?> addInstantiatesPresenter(Presenter value) {
        DmcAttribute<?> attr = ((ControllerDMO) core).addInstantiatesPresenter(((PresenterDMO) value.getDmcObject()));
        return (attr);
    }

    public void delInstantiatesPresenter(Presenter value) {
        ((ControllerDMO) core).delInstantiatesPresenter(value.getDMO());
    }

    public ArrayList<Presenter> getInstantiatesPresenterCopy() {
        DmcAttribute<?> attr = ((ControllerDMO) core).get(MvwDMSAG.__instantiatesPresenter);
        if (attr == null) return (new ArrayList<Presenter>());
        ArrayList<Presenter> rc = new ArrayList<Presenter>(attr.getMVSize());
        PresenterIterableDMW it = getInstantiatesPresenterIterable();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void remInstantiatesPresenter() {
        ((ControllerDMO) core).remInstantiatesPresenter();
    }

    public Integer getItemOrder() {
        return (((ControllerDMO) core).getItemOrder());
    }

    public void setItemOrder(Object value) throws DmcValueException {
        ((ControllerDMO) core).setItemOrder(value);
    }

    public void setItemOrder(Integer value) {
        ((ControllerDMO) core).setItemOrder(value);
    }

    public void remItemOrder() {
        ((ControllerDMO) core).remItemOrder();
    }

    public int getImplementsActionSize() {
        return (((ControllerDMO) core).getImplementsActionSize());
    }

    public boolean getImplementsActionIsEmpty() {
        if (((ControllerDMO) core).getImplementsActionSize() == 0) return (true);
        return (false);
    }

    public boolean getImplementsActionHasValue() {
        if (((ControllerDMO) core).getImplementsActionSize() == 0) return (false);
        return (true);
    }

    public ActionBindingIterableDMW getImplementsActionIterable() {
        DmcAttribute<?> attr = core.get(MvwDMSAG.__implementsAction);
        if (attr == null) return (ActionBindingIterableDMW.emptyList);
        return (new ActionBindingIterableDMW(((ControllerDMO) core).getImplementsAction()));
    }

    public DmcAttribute<?> addImplementsAction(ActionBinding value) {
        DmcAttribute<?> attr = ((ControllerDMO) core).addImplementsAction(((ActionBindingDMO) value.getDmcObject()));
        return (attr);
    }

    public void delImplementsAction(ActionBinding value) {
        ((ControllerDMO) core).delImplementsAction(value.getDMO());
    }

    public ArrayList<ActionBinding> getImplementsActionCopy() {
        DmcAttribute<?> attr = ((ControllerDMO) core).get(MvwDMSAG.__implementsAction);
        if (attr == null) return (new ArrayList<ActionBinding>());
        ArrayList<ActionBinding> rc = new ArrayList<ActionBinding>(attr.getMVSize());
        ActionBindingIterableDMW it = getImplementsActionIterable();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void remImplementsAction() {
        ((ControllerDMO) core).remImplementsAction();
    }

    public CamelCaseName getControllerName() {
        return (((ControllerDMO) core).getControllerName());
    }

    public void setControllerName(Object value) throws DmcValueException {
        ((ControllerDMO) core).setControllerName(value);
    }

    public void setControllerName(CamelCaseName value) {
        ((ControllerDMO) core).setControllerName(value);
    }

    public void remControllerName() {
        ((ControllerDMO) core).remControllerName();
    }
}
