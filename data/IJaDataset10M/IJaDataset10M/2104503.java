package org.emftext.language.pl0.resource.pl0.ui;

/**
 * A CodeCompletionHelper can be used to derive completion proposals for partial
 * documents. It runs the parser generated by EMFText in a special mode (i.e., the
 * rememberExpectedElements mode). Based on the elements that are expected by the
 * parser for different regions in the document, valid proposals are computed.
 */
public class Pl0CodeCompletionHelper {

    private org.emftext.language.pl0.resource.pl0.mopp.Pl0AttributeValueProvider attributeValueProvider = new org.emftext.language.pl0.resource.pl0.mopp.Pl0AttributeValueProvider();

    /**
	 * Computes a set of proposals for the given document assuming the cursor is at
	 * 'cursorOffset'. The proposals are derived using the meta information, i.e., the
	 * generated language plug-in.
	 * 
	 * @param originalResource
	 * @param content the documents content
	 * @param cursorOffset
	 * 
	 * @return
	 */
    public org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal[] computeCompletionProposals(org.emftext.language.pl0.resource.pl0.IPl0TextResource originalResource, String content, int cursorOffset) {
        org.eclipse.emf.ecore.resource.ResourceSet resourceSet = new org.eclipse.emf.ecore.resource.impl.ResourceSetImpl();
        org.emftext.language.pl0.resource.pl0.IPl0TextResource resource = (org.emftext.language.pl0.resource.pl0.IPl0TextResource) resourceSet.createResource(originalResource.getURI());
        java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(content.getBytes());
        org.emftext.language.pl0.resource.pl0.IPl0MetaInformation metaInformation = resource.getMetaInformation();
        org.emftext.language.pl0.resource.pl0.IPl0TextParser parser = metaInformation.createParser(inputStream, null);
        org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal[] expectedElements = parseToExpectedElements(parser, resource, cursorOffset);
        if (expectedElements == null) {
            return new org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal[0];
        }
        if (expectedElements.length == 0) {
            return new org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal[0];
        }
        java.util.List<org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal> expectedAfterCursor = java.util.Arrays.asList(getElementsExpectedAt(expectedElements, cursorOffset));
        java.util.List<org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal> expectedBeforeCursor = java.util.Arrays.asList(getElementsExpectedAt(expectedElements, cursorOffset - 1));
        setPrefixes(expectedAfterCursor, content, cursorOffset);
        setPrefixes(expectedBeforeCursor, content, cursorOffset);
        java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> allProposals = new java.util.LinkedHashSet<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal>();
        java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> rightProposals = deriveProposals(expectedAfterCursor, content, resource, cursorOffset);
        java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> leftProposals = deriveProposals(expectedBeforeCursor, content, resource, cursorOffset - 1);
        allProposals.addAll(leftProposals);
        if (leftProposals.isEmpty()) {
            allProposals.addAll(rightProposals);
        }
        final java.util.List<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> sortedProposals = new java.util.ArrayList<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal>(allProposals);
        java.util.Collections.sort(sortedProposals);
        return sortedProposals.toArray(new org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal[sortedProposals.size()]);
    }

    public org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal[] parseToExpectedElements(org.emftext.language.pl0.resource.pl0.IPl0TextParser parser, org.emftext.language.pl0.resource.pl0.IPl0TextResource resource, int cursorOffset) {
        final java.util.List<org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal> expectedElements = parser.parseToExpectedElements(null, resource, cursorOffset);
        if (expectedElements == null) {
            return new org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal[0];
        }
        removeDuplicateEntries(expectedElements);
        removeInvalidEntriesAtEnd(expectedElements);
        return expectedElements.toArray(new org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal[expectedElements.size()]);
    }

    private void removeDuplicateEntries(java.util.List<org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal> expectedElements) {
        for (int i = 0; i < expectedElements.size() - 1; i++) {
            org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal elementAtIndex = expectedElements.get(i);
            for (int j = i + 1; j < expectedElements.size(); ) {
                org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal elementAtNext = expectedElements.get(j);
                if (elementAtIndex.equals(elementAtNext) && elementAtIndex.getStartExcludingHiddenTokens() == elementAtNext.getStartExcludingHiddenTokens()) {
                    expectedElements.remove(j);
                } else {
                    j++;
                }
            }
        }
    }

    private void removeInvalidEntriesAtEnd(java.util.List<org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal> expectedElements) {
        for (int i = 0; i < expectedElements.size() - 1; ) {
            org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal elementAtIndex = expectedElements.get(i);
            org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal elementAtNext = expectedElements.get(i + 1);
            if (elementAtIndex.getStartExcludingHiddenTokens() == elementAtNext.getStartExcludingHiddenTokens() && shouldRemove(elementAtIndex.getFollowSetID(), elementAtNext.getFollowSetID())) {
                expectedElements.remove(i + 1);
            } else {
                i++;
            }
        }
    }

    public boolean shouldRemove(int followSetID1, int followSetID2) {
        return followSetID1 != followSetID2;
    }

    private String findPrefix(java.util.List<org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal> expectedElements, org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal expectedAtCursor, String content, int cursorOffset) {
        if (cursorOffset < 0) {
            return "";
        }
        int end = 0;
        for (org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal expectedElement : expectedElements) {
            if (expectedElement == expectedAtCursor) {
                final int start = expectedElement.getStartExcludingHiddenTokens();
                if (start >= 0 && start < Integer.MAX_VALUE) {
                    end = start;
                }
                break;
            }
        }
        end = Math.min(end, cursorOffset);
        final String prefix = content.substring(end, Math.min(content.length(), cursorOffset));
        return prefix;
    }

    private java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> deriveProposals(java.util.List<org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal> expectedElements, String content, org.emftext.language.pl0.resource.pl0.IPl0TextResource resource, int cursorOffset) {
        java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> resultSet = new java.util.LinkedHashSet<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal>();
        for (org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal expectedElement : expectedElements) {
            resultSet.addAll(deriveProposals(expectedElement, content, resource, cursorOffset));
        }
        return resultSet;
    }

    private java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> deriveProposals(org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal expectedTerminal, String content, org.emftext.language.pl0.resource.pl0.IPl0TextResource resource, int cursorOffset) {
        org.emftext.language.pl0.resource.pl0.IPl0MetaInformation metaInformation = resource.getMetaInformation();
        org.emftext.language.pl0.resource.pl0.IPl0LocationMap locationMap = resource.getLocationMap();
        org.emftext.language.pl0.resource.pl0.IPl0ExpectedElement expectedElement = (org.emftext.language.pl0.resource.pl0.IPl0ExpectedElement) expectedTerminal.getTerminal();
        if (expectedElement instanceof org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedCsString) {
            org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedCsString csString = (org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedCsString) expectedElement;
            return handleKeyword(csString, expectedTerminal.getPrefix());
        } else if (expectedElement instanceof org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedBooleanTerminal) {
            org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedBooleanTerminal expectedBooleanTerminal = (org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedBooleanTerminal) expectedElement;
            return handleBooleanTerminal(expectedBooleanTerminal, expectedTerminal.getPrefix());
        } else if (expectedElement instanceof org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedEnumerationTerminal) {
            org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedEnumerationTerminal expectedEnumerationTerminal = (org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedEnumerationTerminal) expectedElement;
            return handleEnumerationTerminal(expectedEnumerationTerminal, expectedTerminal.getPrefix());
        } else if (expectedElement instanceof org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedStructuralFeature) {
            org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedStructuralFeature expectedFeature = (org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedStructuralFeature) expectedElement;
            org.eclipse.emf.ecore.EStructuralFeature feature = expectedFeature.getFeature();
            org.eclipse.emf.ecore.EClassifier featureType = feature.getEType();
            java.util.List<org.eclipse.emf.ecore.EObject> elementsAtCursor = locationMap.getElementsAt(cursorOffset);
            org.eclipse.emf.ecore.EObject container = null;
            for (int i = 0; i < elementsAtCursor.size(); i++) {
                container = elementsAtCursor.get(i);
                if (!container.eIsProxy()) {
                    break;
                }
            }
            if (container == null) {
                boolean attachedArtificialContainer = false;
                org.eclipse.emf.ecore.EClass containerClass = expectedTerminal.getTerminal().getRuleMetaclass();
                org.eclipse.emf.ecore.EStructuralFeature[] containmentTrace = expectedTerminal.getContainmentTrace();
                java.util.List<org.eclipse.emf.ecore.EObject> contentList = null;
                for (org.eclipse.emf.ecore.EStructuralFeature eStructuralFeature : containmentTrace) {
                    if (attachedArtificialContainer) {
                        break;
                    }
                    org.eclipse.emf.ecore.EClass neededClass = eStructuralFeature.getEContainingClass();
                    if (contentList == null) {
                        contentList = new java.util.ArrayList<org.eclipse.emf.ecore.EObject>();
                        java.util.Iterator<org.eclipse.emf.ecore.EObject> allContents = resource.getAllContents();
                        while (allContents.hasNext()) {
                            org.eclipse.emf.ecore.EObject next = allContents.next();
                            contentList.add(next);
                        }
                    }
                    for (int i = contentList.size() - 1; i >= 0; i--) {
                        org.eclipse.emf.ecore.EObject object = contentList.get(i);
                        if (neededClass.isInstance(object)) {
                            org.eclipse.emf.ecore.EObject newContainer = containerClass.getEPackage().getEFactoryInstance().create(containerClass);
                            if (eStructuralFeature.getEType().isInstance(newContainer)) {
                                org.emftext.language.pl0.resource.pl0.util.Pl0EObjectUtil.setFeature(object, eStructuralFeature, newContainer, false);
                                container = newContainer;
                                attachedArtificialContainer = true;
                            }
                        }
                    }
                }
            }
            if (feature instanceof org.eclipse.emf.ecore.EReference) {
                org.eclipse.emf.ecore.EReference reference = (org.eclipse.emf.ecore.EReference) feature;
                if (featureType instanceof org.eclipse.emf.ecore.EClass) {
                    if (reference.isContainment()) {
                        assert false;
                    } else {
                        return handleNCReference(metaInformation, container, reference, expectedTerminal.getPrefix(), expectedFeature.getTokenName());
                    }
                }
            } else if (feature instanceof org.eclipse.emf.ecore.EAttribute) {
                org.eclipse.emf.ecore.EAttribute attribute = (org.eclipse.emf.ecore.EAttribute) feature;
                if (featureType instanceof org.eclipse.emf.ecore.EEnum) {
                    org.eclipse.emf.ecore.EEnum enumType = (org.eclipse.emf.ecore.EEnum) featureType;
                    return handleEnumAttribute(metaInformation, expectedFeature, enumType, expectedTerminal.getPrefix(), container);
                } else {
                    return handleAttribute(metaInformation, expectedFeature, container, attribute, expectedTerminal.getPrefix());
                }
            } else {
                assert false;
            }
        } else {
            assert false;
        }
        return java.util.Collections.emptyList();
    }

    private java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> handleEnumAttribute(org.emftext.language.pl0.resource.pl0.IPl0MetaInformation metaInformation, org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedStructuralFeature expectedFeature, org.eclipse.emf.ecore.EEnum enumType, String prefix, org.eclipse.emf.ecore.EObject container) {
        java.util.Collection<org.eclipse.emf.ecore.EEnumLiteral> enumLiterals = enumType.getELiterals();
        java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> result = new java.util.LinkedHashSet<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal>();
        for (org.eclipse.emf.ecore.EEnumLiteral literal : enumLiterals) {
            String unResolvedLiteral = literal.getLiteral();
            org.emftext.language.pl0.resource.pl0.IPl0TokenResolverFactory tokenResolverFactory = metaInformation.getTokenResolverFactory();
            org.emftext.language.pl0.resource.pl0.IPl0TokenResolver tokenResolver = tokenResolverFactory.createTokenResolver(expectedFeature.getTokenName());
            String resolvedLiteral = tokenResolver.deResolve(unResolvedLiteral, expectedFeature.getFeature(), container);
            boolean matchesPrefix = matches(resolvedLiteral, prefix);
            result.add(new org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal(resolvedLiteral, prefix, matchesPrefix, expectedFeature.getFeature(), container));
        }
        return result;
    }

    private java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> handleNCReference(org.emftext.language.pl0.resource.pl0.IPl0MetaInformation metaInformation, org.eclipse.emf.ecore.EObject container, org.eclipse.emf.ecore.EReference reference, String prefix, String tokenName) {
        org.emftext.language.pl0.resource.pl0.IPl0ReferenceResolverSwitch resolverSwitch = metaInformation.getReferenceResolverSwitch();
        org.emftext.language.pl0.resource.pl0.IPl0TokenResolverFactory tokenResolverFactory = metaInformation.getTokenResolverFactory();
        org.emftext.language.pl0.resource.pl0.IPl0ReferenceResolveResult<org.eclipse.emf.ecore.EObject> result = new org.emftext.language.pl0.resource.pl0.mopp.Pl0ReferenceResolveResult<org.eclipse.emf.ecore.EObject>(true);
        resolverSwitch.resolveFuzzy(prefix, container, reference, 0, result);
        java.util.Collection<org.emftext.language.pl0.resource.pl0.IPl0ReferenceMapping<org.eclipse.emf.ecore.EObject>> mappings = result.getMappings();
        if (mappings != null) {
            java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> resultSet = new java.util.LinkedHashSet<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal>();
            for (org.emftext.language.pl0.resource.pl0.IPl0ReferenceMapping<org.eclipse.emf.ecore.EObject> mapping : mappings) {
                org.eclipse.swt.graphics.Image image = null;
                if (mapping instanceof org.emftext.language.pl0.resource.pl0.mopp.Pl0ElementMapping<?>) {
                    org.emftext.language.pl0.resource.pl0.mopp.Pl0ElementMapping<?> elementMapping = (org.emftext.language.pl0.resource.pl0.mopp.Pl0ElementMapping<?>) mapping;
                    Object target = elementMapping.getTargetElement();
                    org.emftext.language.pl0.resource.pl0.IPl0TokenResolver tokenResolver = tokenResolverFactory.createTokenResolver(tokenName);
                    final String identifier = tokenResolver.deResolve(elementMapping.getIdentifier(), reference, container);
                    if (target instanceof org.eclipse.emf.ecore.EObject) {
                        image = getImage((org.eclipse.emf.ecore.EObject) target);
                    }
                    boolean matchesPrefix = matches(identifier, prefix);
                    resultSet.add(new org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal(identifier, prefix, matchesPrefix, reference, container, image));
                }
            }
            return resultSet;
        }
        return java.util.Collections.emptyList();
    }

    private java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> handleAttribute(org.emftext.language.pl0.resource.pl0.IPl0MetaInformation metaInformation, org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedStructuralFeature expectedFeature, org.eclipse.emf.ecore.EObject container, org.eclipse.emf.ecore.EAttribute attribute, String prefix) {
        java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> resultSet = new java.util.LinkedHashSet<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal>();
        Object[] defaultValues = attributeValueProvider.getDefaultValues(attribute);
        if (defaultValues != null) {
            for (Object defaultValue : defaultValues) {
                if (defaultValue != null) {
                    org.emftext.language.pl0.resource.pl0.IPl0TokenResolverFactory tokenResolverFactory = metaInformation.getTokenResolverFactory();
                    String tokenName = expectedFeature.getTokenName();
                    if (tokenName != null) {
                        org.emftext.language.pl0.resource.pl0.IPl0TokenResolver tokenResolver = tokenResolverFactory.createTokenResolver(tokenName);
                        if (tokenResolver != null) {
                            String defaultValueAsString = tokenResolver.deResolve(defaultValue, attribute, container);
                            boolean matchesPrefix = matches(defaultValueAsString, prefix);
                            resultSet.add(new org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal(defaultValueAsString, prefix, matchesPrefix, expectedFeature.getFeature(), container));
                        }
                    }
                }
            }
        }
        return resultSet;
    }

    private java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> handleKeyword(org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedCsString csString, String prefix) {
        String proposal = csString.getValue();
        boolean matchesPrefix = matches(proposal, prefix);
        return java.util.Collections.singleton(new org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal(proposal, prefix, matchesPrefix, null, null));
    }

    private java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> handleBooleanTerminal(org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedBooleanTerminal expectedBooleanTerminal, String prefix) {
        java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> result = new java.util.LinkedHashSet<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal>(2);
        org.emftext.language.pl0.resource.pl0.grammar.Pl0BooleanTerminal booleanTerminal = expectedBooleanTerminal.getBooleanTerminal();
        result.addAll(handleLiteral(booleanTerminal.getAttribute(), prefix, booleanTerminal.getTrueLiteral()));
        result.addAll(handleLiteral(booleanTerminal.getAttribute(), prefix, booleanTerminal.getFalseLiteral()));
        return result;
    }

    private java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> handleEnumerationTerminal(org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedEnumerationTerminal expectedEnumerationTerminal, String prefix) {
        java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> result = new java.util.LinkedHashSet<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal>(2);
        org.emftext.language.pl0.resource.pl0.grammar.Pl0EnumerationTerminal enumerationTerminal = expectedEnumerationTerminal.getEnumerationTerminal();
        java.util.Map<String, String> literalMapping = enumerationTerminal.getLiteralMapping();
        for (String literalName : literalMapping.keySet()) {
            result.addAll(handleLiteral(enumerationTerminal.getAttribute(), prefix, literalMapping.get(literalName)));
        }
        return result;
    }

    private java.util.Collection<org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal> handleLiteral(org.eclipse.emf.ecore.EAttribute attribute, String prefix, String literal) {
        if ("".equals(literal)) {
            return java.util.Collections.emptySet();
        }
        boolean matchesPrefix = matches(literal, prefix);
        return java.util.Collections.singleton(new org.emftext.language.pl0.resource.pl0.ui.Pl0CompletionProposal(literal, prefix, matchesPrefix, null, null));
    }

    /**
	 * Calculates the prefix for each given expected element. The prefix depends on
	 * the current document content, the cursor position, and the position where the
	 * element is expected.
	 */
    private void setPrefixes(java.util.List<org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal> expectedElements, String content, int cursorOffset) {
        if (cursorOffset < 0) {
            return;
        }
        for (org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal expectedElement : expectedElements) {
            String prefix = findPrefix(expectedElements, expectedElement, content, cursorOffset);
            expectedElement.setPrefix(prefix);
        }
    }

    public org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal[] getElementsExpectedAt(org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal[] allExpectedElements, int cursorOffset) {
        java.util.List<org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal> expectedAtCursor = new java.util.ArrayList<org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal>();
        for (int i = 0; i < allExpectedElements.length; i++) {
            org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal expectedElement = allExpectedElements[i];
            int startIncludingHidden = expectedElement.getStartIncludingHiddenTokens();
            int end = getEnd(allExpectedElements, i);
            if (cursorOffset >= startIncludingHidden && cursorOffset <= end) {
                expectedAtCursor.add(expectedElement);
            }
        }
        return expectedAtCursor.toArray(new org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal[expectedAtCursor.size()]);
    }

    private int getEnd(org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal[] allExpectedElements, int indexInList) {
        org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal elementAtIndex = allExpectedElements[indexInList];
        int startIncludingHidden = elementAtIndex.getStartIncludingHiddenTokens();
        int startExcludingHidden = elementAtIndex.getStartExcludingHiddenTokens();
        for (int i = indexInList + 1; i < allExpectedElements.length; i++) {
            org.emftext.language.pl0.resource.pl0.mopp.Pl0ExpectedTerminal elementAtI = allExpectedElements[i];
            int startIncludingHiddenForI = elementAtI.getStartIncludingHiddenTokens();
            int startExcludingHiddenForI = elementAtI.getStartExcludingHiddenTokens();
            if (startIncludingHidden != startIncludingHiddenForI || startExcludingHidden != startExcludingHiddenForI) {
                return startIncludingHiddenForI - 1;
            }
        }
        return Integer.MAX_VALUE;
    }

    private boolean matches(String proposal, String prefix) {
        return (proposal.toLowerCase().startsWith(prefix.toLowerCase()) || org.emftext.language.pl0.resource.pl0.util.Pl0StringUtil.matchCamelCase(prefix, proposal) != null) && !proposal.equals(prefix);
    }

    public org.eclipse.swt.graphics.Image getImage(org.eclipse.emf.ecore.EObject element) {
        if (!org.eclipse.core.runtime.Platform.isRunning()) {
            return null;
        }
        org.eclipse.emf.edit.provider.ComposedAdapterFactory adapterFactory = new org.eclipse.emf.edit.provider.ComposedAdapterFactory(org.eclipse.emf.edit.provider.ComposedAdapterFactory.Descriptor.Registry.INSTANCE);
        adapterFactory.addAdapterFactory(new org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory());
        adapterFactory.addAdapterFactory(new org.eclipse.emf.ecore.provider.EcoreItemProviderAdapterFactory());
        adapterFactory.addAdapterFactory(new org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory());
        org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider labelProvider = new org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider(adapterFactory);
        return labelProvider.getImage(element);
    }
}
