package preprocessing.automatic.links;

import preprocessing.automatic.Configuration.GeneticConfig;
import preprocessing.automatic.Exceptions.ShellCopyOnlyException;
import preprocessing.automatic.Population.APAIndividual;
import preprocessing.storage.PreprocessingStorage;

/**
 * Created by IntelliJ IDEA.
 * User: lagon
 * Date: Oct 21, 2009
 * Time: 11:04:59 PM
 * To change this template use File | Settings | File Templates.
 */
public interface ClassificatorLink {

    /**
     * Initiates classification method.
     */
    public void initialize(APAIndividual individual, GeneticConfig config);

    /**
     * Sets training data to be used for contructing classifier. Classifier will be used to evaluate give dataset.
     * The data are assumed to be already preprocessed.
     *
     * @param store pointer to PreprocessingStorage with training data.
     * @return Returns if operation was completed successfully.
     */
    public boolean setTrainingData(PreprocessingStorage store);

    /**
     * Sets testing data to be used for evaluation of classifier.
     * The data are assumed to be already preprocessed.
     *
     * @param store pointer to PreprocessingStorage with testing data.
     * @return Returns if operation was completed successfully.
     */
    public boolean setTestingData(PreprocessingStorage store);

    /**
     * Creates model from given training data.
     */
    public void construct();

    /**
     * Returns overal root mean square error for model on training set.
     * @return Returns RMS error of the model on training set.
     */
    public double getOveralTrainingRMSError();

    /**
     * Returns overal root mean square error for model on testing set.
     * @return Returns RMS error of the model on testing set.
     */
    public double getOveralTestingRMSError();

    /**
     * Returns overal classification accuracy for classifier on training set.
     * Returns value in range 0..1 if method is classifier and dataset represents classification problem otherwise Double.NaN.
     *
     * @return Returns overal accuracy of the model on training set.
     */
    public double getOveralTrainingAccuracy();

    /**
     * Returns overal classification accuracy for model on testing set.
     * Returns value in range 0..1 if method is classifier and dataset represents classification problem otherwise Double.NaN.
     * @return Returns classification accuracy of the model on testing set.
     */
    public double getOveralTestingAccuracy();

    /**
     * Determines if calls to getOveralTrainingAccuracy and getOveralTestingAccuracy
     * returns reasonable value or Double.NaN. In other words if method is classifier and dataset
     * represents classification problem.
     * @return True if method is classifier (not regressin method) and dataset represent classification method. False otherwise.
     */
    public boolean isClassifier();

    /**
     * Returns true if method can work with missing values.
     * @return True if method can work with missing values.
     */
    public boolean canHandleMissingValues();

    /**
     * Returns true if method can work with nominal (string) values.
     * @return True if method can work with nominal (string) values.
     */
    public boolean canHandleNominalValues();

    /**
     * Returns string identifier of the method. This string is shown in
     * configuration dialog and is used for selecting modelling method in
     * Chromosome::recomputeFittness.
     *
     * @return String identifier of the method.
     */
    public String getMethodID();

    /**
     * Save a model serialisation represented by this link
     * @param path to directory on disk to save serialisation to.
     * @param filename of a file the serialisation will be save to.
     */
    public void dumpModel(String path, String filename);

    /**
     * Save a model serialisation using XML represented by this link
     * @param path to directory on disk to save serialisation to.
     * @param filename of a file the serialisation will be save to.
     */
    public void dumpXMLModel(String path, String filename);

    /**
     * Save an output generated by model represented by this link
     * @param path to directory on disk to save output to.
     * @param filename of a file the output will be save to.
     */
    public void dumpOutput(String path, String filename);

    /**
     * Creates a copy of link which contains only informations required
     * for saving a model and its ouput to the file. The results of dumpOutput,
     * dumpXMLModel, dumpModel, getOveralTestingRMSError, ... must be the same
     * as in case of original link. The XML and java serializations and the model
     * outputs are available only if appropriate options in the configuration
     * are selected.
     *
     * @param config Configuration class.
     * @return A copy of link with model (no testing or training data).
     */
    public ClassificatorLink getModelShellCopy(GeneticConfig config);

    public byte[] getModelSerialization() throws ShellCopyOnlyException;

    public StringBuffer getModelXML() throws ShellCopyOnlyException;

    public String getOutput() throws ShellCopyOnlyException;
}
