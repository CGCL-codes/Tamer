package com.ourorganization.uzhrelax.domain.repository.api;

import com.ourorganization.uzhrelax.domain.repository.api.exception.EntityNotFoundException;

/**
 * <p>Base declaration of repository for entity of one type.</p>
 *
 * <p>Class of the entity being managed is tracked via <code>T</code> type parameter.</p>
 *
 * <p>Includes most common operations:
 * <ul>
 * <li>adding new entity to the repository: {@link #add(Object)};</li>
 * <li>searching for existing entity with specified identifier in the repository: {@link #findById(Long)};</li>
 * <li>persisting changes of existing entity to the repository: {@link #update(Object)};</li>
 * <li>adding new entity to the repository or persisting changes of existing entity to the repository:
 * {@link #addOrUpdate(Object)};</li>
 * <li>removing existing entity from the repository: {@link #delete(Object)};</li>
 * <li>removing existing entity with specified identifier from the repository: {@link #delete(Object)}.</li>
 * </ul></p>
 *
 * @author Taras Matyashovsky
 */
public interface BaseRepository<T> {

    /**
     * <p>Adds new entity to the repository.</p>
     *
     * <p>Identifier will be generated by the repository and returned to client.
     * Parameter entity is automatically updated with generated identifier,
     * (will have affect for client if client and repository implementation are running on the same JVM).</p>
     *
     * @param t entity to add to the repository.
     * Must not be <code>null</code>. Must have its identifier property set to <code>null</code>.
     *
     * @return generated entity identifier.
     */
    Long add(T t);

    /**
     * <p>Searches for existing entity with specified identifier in the repository.</p>
     *
     * @param id identifier of the entity to find in the repository.
     *
     * @return entity with specified identifier taken from repository.
     *
     * @throws EntityNotFoundException if entity with specified identifier is not found.
     */
    T findById(Long id) throws EntityNotFoundException;

    /**
     * <p>Persists changes of existing entity to the repository.</p>
     *
     * @param t entity to persist changes for to the repository.
     * Must not be <code>null</code>.
     */
    void update(T t);

    /**
     * <p>Adds new entity to the repository if it doesn't exist or
     * persists changes of the entity to the repository if this entity exists.</p>
     *
     * <p>Determination of exact action is based on the primary identifier value.
     * If primary identifier is not blank then an update should occur.
     * Otherwise, add action should occur.
     * <code>null</code> reference for objects and <code>-1</code> value for integral primitive types
     * correspond to blank value.</p>
     *
     * <p>In case of Identifier will be generated by the repository and returned to client.
     * Parameter entity is automatically updated with generated identifier,
     * (will have affect for client if client and repository implementation are running on the same JVM).</p>
     *
     * @param t entity to add to the repository or persist changes of to the repository.
     * Must not be <code>null</code>.
     */
    void addOrUpdate(T t);

    /**
     * <p>Removes specified entity from the repository.</p>
     *
     * @param t entity to remove from the repository.
     * Must not be <code>null</code>.
     */
    void delete(T t);

    /**
     * <p>Removes existing entity with specified identifier from the repository.</p>
     *
     * @param id identifier of the entity to remove from the repository.
     * Must not be <code>null</code> or point to nonexisting entity.
     *
     * @throws EntityNotFoundException if entity with specified identifier is not found.
     */
    void deleteById(Long id) throws EntityNotFoundException;
}
