package aino.lib;

import aino.ano.AGen;
import aino.ano.ASym;
import aino.ano.Arch;
import aino.ano.Function;
import aino.ano.Proc;
import aino.ano.Symbol;
import aino.arch.P14.Bit;
import aino.arch.P14.Register;

/**
 * <h3>About</h3>
 * 
 * Generated by Aino Porter
 * from 'p16c771.inc' and '16c771.lkr'
 * <pre>
 * P16C771.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
 * </pre>
 * 
 * <h3>Usage</h3>
 * 
 * This class may be subclassed by any class that requires the functions
 * and symbols defined here.
 * 
 */
@Proc(Arch.P14)
public class P16C771 extends aino.arch.P14.Consumer {

    /**
     * Configure MCU from the main class static initializer.
     */
    @AGen(Function.SPECIAL)
    public static void _CONFIG(int config) {
        _lkr("16c771");
        _inc("p16c771");
        _config(config);
        _clock(4000000);
        _gpr(0x20, 0x6f);
        _gpr(0xa0, 0xef);
        _gpr(0x120, 0x16f);
        _shr(0x70, 0x7f);
    }

    @ASym(Symbol.REG)
    public static final Register INDF = UniqueRegister("INDF", 0x0);

    @ASym(Symbol.REG)
    public static final Register TMR0 = UniqueRegister("TMR0", 0x1);

    @ASym(Symbol.REG)
    public static final Register PCL = UniqueRegister("PCL", 0x2);

    @ASym(Symbol.REG)
    public static final Register STATUS = UniqueRegister("STATUS", 0x3);

    @ASym(Symbol.REG)
    public static final Register FSR = UniqueRegister("FSR", 0x4);

    @ASym(Symbol.REG)
    public static final Register PORTA = UniqueRegister("PORTA", 0x5);

    @ASym(Symbol.REG)
    public static final Register PORTB = UniqueRegister("PORTB", 0x6);

    @ASym(Symbol.REG)
    public static final Register PCLATH = UniqueRegister("PCLATH", 0xa);

    @ASym(Symbol.REG)
    public static final Register INTCON = UniqueRegister("INTCON", 0xb);

    @ASym(Symbol.REG)
    public static final Register PIR1 = UniqueRegister("PIR1", 0xc);

    @ASym(Symbol.REG)
    public static final Register PIR2 = UniqueRegister("PIR2", 0xd);

    @ASym(Symbol.REG)
    public static final Register TMR1L = UniqueRegister("TMR1L", 0xe);

    @ASym(Symbol.REG)
    public static final Register TMR1H = UniqueRegister("TMR1H", 0xf);

    @ASym(Symbol.REG)
    public static final Register T1CON = UniqueRegister("T1CON", 0x10);

    @ASym(Symbol.REG)
    public static final Register TMR2 = UniqueRegister("TMR2", 0x11);

    @ASym(Symbol.REG)
    public static final Register T2CON = UniqueRegister("T2CON", 0x12);

    @ASym(Symbol.REG)
    public static final Register SSPBUF = UniqueRegister("SSPBUF", 0x13);

    @ASym(Symbol.REG)
    public static final Register SSPCON = UniqueRegister("SSPCON", 0x14);

    @ASym(Symbol.REG)
    public static final Register CCPR1L = UniqueRegister("CCPR1L", 0x15);

    @ASym(Symbol.REG)
    public static final Register CCPR1H = UniqueRegister("CCPR1H", 0x16);

    @ASym(Symbol.REG)
    public static final Register CCP1CON = UniqueRegister("CCP1CON", 0x17);

    @ASym(Symbol.REG)
    public static final Register ADRESH = UniqueRegister("ADRESH", 0x1e);

    @ASym(Symbol.REG)
    public static final Register ADCON0 = UniqueRegister("ADCON0", 0x1f);

    @ASym(Symbol.REG)
    public static final Register OPTION_REG = UniqueRegister("OPTION_REG", 0x81);

    @ASym(Symbol.REG)
    public static final Register TRISA = UniqueRegister("TRISA", 0x85);

    @ASym(Symbol.REG)
    public static final Register TRISB = UniqueRegister("TRISB", 0x86);

    @ASym(Symbol.REG)
    public static final Register PIE1 = UniqueRegister("PIE1", 0x8c);

    @ASym(Symbol.REG)
    public static final Register PIE2 = UniqueRegister("PIE2", 0x8d);

    @ASym(Symbol.REG)
    public static final Register PCON = UniqueRegister("PCON", 0x8e);

    @ASym(Symbol.REG)
    public static final Register SSPCON2 = UniqueRegister("SSPCON2", 0x91);

    @ASym(Symbol.REG)
    public static final Register PR2 = UniqueRegister("PR2", 0x92);

    @ASym(Symbol.REG)
    public static final Register SSPADD = UniqueRegister("SSPADD", 0x93);

    @ASym(Symbol.REG)
    public static final Register SSPSTAT = UniqueRegister("SSPSTAT", 0x94);

    @ASym(Symbol.REG)
    public static final Register WPUB = UniqueRegister("WPUB", 0x95);

    @ASym(Symbol.REG)
    public static final Register IOCB = UniqueRegister("IOCB", 0x96);

    @ASym(Symbol.REG)
    public static final Register P1DEL = UniqueRegister("P1DEL", 0x97);

    @ASym(Symbol.REG)
    public static final Register REFCON = UniqueRegister("REFCON", 0x9b);

    @ASym(Symbol.REG)
    public static final Register LVDCON = UniqueRegister("LVDCON", 0x9c);

    @ASym(Symbol.REG)
    public static final Register ANSEL = UniqueRegister("ANSEL", 0x9d);

    @ASym(Symbol.REG)
    public static final Register ADRESL = UniqueRegister("ADRESL", 0x9e);

    @ASym(Symbol.REG)
    public static final Register ADCON1 = UniqueRegister("ADCON1", 0x9f);

    @ASym(Symbol.REG)
    public static final Register PMDATL = UniqueRegister("PMDATL", 0x10c);

    @ASym(Symbol.REG)
    public static final Register PMADRL = UniqueRegister("PMADRL", 0x10d);

    @ASym(Symbol.REG)
    public static final Register PMDATH = UniqueRegister("PMDATH", 0x10e);

    @ASym(Symbol.REG)
    public static final Register PMADRH = UniqueRegister("PMADRH", 0x10f);

    @ASym(Symbol.REG)
    public static final Register PMCON1 = UniqueRegister("PMCON1", 0x18c);

    @ASym(Symbol.BIT)
    public static final Bit IRP = new Bit(STATUS, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit RP1 = new Bit(STATUS, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit RP0 = new Bit(STATUS, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit NOT_TO = new Bit(STATUS, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit NOT_PD = new Bit(STATUS, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit Z = new Bit(STATUS, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit DC = new Bit(STATUS, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit C = new Bit(STATUS, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit GIE = new Bit(INTCON, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit PEIE = new Bit(INTCON, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit T0IE = new Bit(INTCON, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit INTE = new Bit(INTCON, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit RBIE = new Bit(INTCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit T0IF = new Bit(INTCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit INTF = new Bit(INTCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit RBIF = new Bit(INTCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit ADIF = new Bit(INTCON, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit SSPIF = new Bit(INTCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit CCP1IF = new Bit(INTCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit TMR2IF = new Bit(INTCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit TMR1IF = new Bit(INTCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit LVDIF = new Bit(INTCON, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit BCLIF = new Bit(INTCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit T1CKPS1 = new Bit(INTCON, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit T1CKPS0 = new Bit(INTCON, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit T1OSCEN = new Bit(INTCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit NOT_T1SYNC = new Bit(INTCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit T1INSYNC = new Bit(INTCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit TMR1CS = new Bit(INTCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit TMR1ON = new Bit(INTCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit TOUTPS3 = new Bit(INTCON, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit TOUTPS2 = new Bit(INTCON, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit TOUTPS1 = new Bit(INTCON, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit TOUTPS0 = new Bit(INTCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit TMR2ON = new Bit(INTCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit T2CKPS1 = new Bit(INTCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit T2CKPS0 = new Bit(INTCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit WCOL = new Bit(SSPCON, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit SSPOV = new Bit(SSPCON, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit SSPEN = new Bit(SSPCON, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit CKP = new Bit(SSPCON, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit SSPM3 = new Bit(SSPCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit SSPM2 = new Bit(SSPCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit SSPM1 = new Bit(SSPCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit SSPM0 = new Bit(SSPCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit PWM1M1 = new Bit(SSPCON, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit PWM1M0 = new Bit(SSPCON, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit DC1B1 = new Bit(SSPCON, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit DC1B0 = new Bit(SSPCON, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit CCP1M3 = new Bit(SSPCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit CCP1M2 = new Bit(SSPCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit CCP1M1 = new Bit(SSPCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit CCP1M0 = new Bit(SSPCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit ADCS1 = new Bit(SSPCON, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit ADCS0 = new Bit(SSPCON, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit CHS2 = new Bit(SSPCON, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit CHS1 = new Bit(SSPCON, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit CHS0 = new Bit(SSPCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit GO = new Bit(SSPCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit NOT_DONE = new Bit(SSPCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit GO_DONE = new Bit(SSPCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit CHS3 = new Bit(SSPCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit ADON = new Bit(SSPCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit NOT_RBPU = new Bit(SSPCON, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit INTEDG = new Bit(SSPCON, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit T0CS = new Bit(SSPCON, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit T0SE = new Bit(SSPCON, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit PSA = new Bit(SSPCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit PS2 = new Bit(SSPCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit PS1 = new Bit(SSPCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit PS0 = new Bit(SSPCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit ADIE = new Bit(SSPCON, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit SSPIE = new Bit(SSPCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit CCP1IE = new Bit(SSPCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit TMR2IE = new Bit(SSPCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit TMR1IE = new Bit(SSPCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit LVDIE = new Bit(SSPCON, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit BCLIE = new Bit(SSPCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit OSCF = new Bit(PCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit NOT_POR = new Bit(PCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit NOT_BO = new Bit(PCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit NOT_BOR = new Bit(PCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit GCEN = new Bit(PCON, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit ACKSTAT = new Bit(PCON, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit ACKDT = new Bit(PCON, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit ACKEN = new Bit(PCON, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit RCEN = new Bit(PCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit PEN = new Bit(PCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit RSEN = new Bit(PCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit SEN = new Bit(PCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit SMP = new Bit(SSPSTAT, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit CKE = new Bit(SSPSTAT, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit D = new Bit(SSPSTAT, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit I2C_DATA = new Bit(SSPSTAT, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit NOT_A = new Bit(SSPSTAT, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit NOT_ADDRESS = new Bit(SSPSTAT, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit D_A = new Bit(SSPSTAT, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit DATA_ADDRESS = new Bit(SSPSTAT, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit P = new Bit(SSPSTAT, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit I2C_STOP = new Bit(SSPSTAT, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit S = new Bit(SSPSTAT, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit I2C_START = new Bit(SSPSTAT, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit R = new Bit(SSPSTAT, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit I2C_READ = new Bit(SSPSTAT, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit NOT_W = new Bit(SSPSTAT, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit NOT_WRITE = new Bit(SSPSTAT, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit R_W = new Bit(SSPSTAT, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit READ_WRITE = new Bit(SSPSTAT, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit UA = new Bit(SSPSTAT, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit BF = new Bit(SSPSTAT, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit VRHEN = new Bit(REFCON, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit VRLEN = new Bit(REFCON, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit VRHOEN = new Bit(REFCON, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit VRLOEN = new Bit(REFCON, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit BGST = new Bit(LVDCON, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit LVDEN = new Bit(LVDCON, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit LV3 = new Bit(LVDCON, 0x3);

    @ASym(Symbol.BIT)
    public static final Bit LV2 = new Bit(LVDCON, 0x2);

    @ASym(Symbol.BIT)
    public static final Bit LV1 = new Bit(LVDCON, 0x1);

    @ASym(Symbol.BIT)
    public static final Bit LV0 = new Bit(LVDCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit ADFM = new Bit(LVDCON, 0x7);

    @ASym(Symbol.BIT)
    public static final Bit VCFG2 = new Bit(LVDCON, 0x6);

    @ASym(Symbol.BIT)
    public static final Bit VCFG1 = new Bit(LVDCON, 0x5);

    @ASym(Symbol.BIT)
    public static final Bit VCFG0 = new Bit(LVDCON, 0x4);

    @ASym(Symbol.BIT)
    public static final Bit RD = new Bit(LVDCON, 0x0);

    @ASym(Symbol.BIT)
    public static final Bit _BODEN_ON = new Bit(LVDCON, 0x3fff);

    @ASym(Symbol.BIT)
    public static final Bit _BODEN_OFF = new Bit(LVDCON, 0x3fbf);

    @ASym(Symbol.BIT)
    public static final Bit _CP_ALL = new Bit(LVDCON, 0xcff);

    @ASym(Symbol.BIT)
    public static final Bit _CP_OFF = new Bit(LVDCON, 0x3fff);

    @ASym(Symbol.BIT)
    public static final Bit _VBOR_25 = new Bit(LVDCON, 0x3fff);

    @ASym(Symbol.BIT)
    public static final Bit _VBOR_27 = new Bit(LVDCON, 0x3bff);

    @ASym(Symbol.BIT)
    public static final Bit _VBOR_42 = new Bit(LVDCON, 0x37ff);

    @ASym(Symbol.BIT)
    public static final Bit _VBOR_45 = new Bit(LVDCON, 0x33ff);

    @ASym(Symbol.BIT)
    public static final Bit _PWRTE_OFF = new Bit(LVDCON, 0x3fff);

    @ASym(Symbol.BIT)
    public static final Bit _PWRTE_ON = new Bit(LVDCON, 0x3fef);

    @ASym(Symbol.BIT)
    public static final Bit _MCLRE_OFF = new Bit(LVDCON, 0x3fdf);

    @ASym(Symbol.BIT)
    public static final Bit _MCLRE_ON = new Bit(LVDCON, 0x3fff);

    @ASym(Symbol.BIT)
    public static final Bit _WDT_ON = new Bit(LVDCON, 0x3fff);

    @ASym(Symbol.BIT)
    public static final Bit _WDT_OFF = new Bit(LVDCON, 0x3ff7);

    @ASym(Symbol.BIT)
    public static final Bit _ER_OSC_CLKOUT = new Bit(LVDCON, 0x3fff);

    @ASym(Symbol.BIT)
    public static final Bit _ER_OSC_NOCLKOUT = new Bit(LVDCON, 0x3ffe);

    @ASym(Symbol.BIT)
    public static final Bit _INTRC_OSC_CLKOUT = new Bit(LVDCON, 0x3ffd);

    @ASym(Symbol.BIT)
    public static final Bit _INTRC_OSC_NOCLKOUT = new Bit(LVDCON, 0x3ffc);

    @ASym(Symbol.BIT)
    public static final Bit _EXTCLK_OSC = new Bit(LVDCON, 0x3ffb);

    @ASym(Symbol.BIT)
    public static final Bit _HS_OSC = new Bit(LVDCON, 0x3ffa);

    @ASym(Symbol.BIT)
    public static final Bit _XT_OSC = new Bit(LVDCON, 0x3ff9);

    @ASym(Symbol.BIT)
    public static final Bit _LP_OSC = new Bit(LVDCON, 0x3ff8);

    /**
     * Code generation consumer constructor.
     */
    public P16C771() {
        super();
    }
}
