package org.dmd.features.extgwt.generated.dmo;

import java.io.Serializable;
import java.util.*;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcNamedObjectIF;
import org.dmd.dmc.DmcOmni;
import org.dmd.dmc.DmcSliceInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.types.StringName;
import org.dmd.dms.generated.dmo.MetaDMSAG;
import org.dmd.dms.generated.types.DmcTypeModifierMV;
import org.dmd.dms.generated.types.DmcTypeStringNameSV;
import org.dmd.dms.generated.types.DmcTypeStringSV;
import org.dmd.features.extgwt.generated.dmo.MvcDefinitionDMO;
import org.dmd.features.extgwt.generated.dmo.MvcEventDMO;
import org.dmd.features.extgwt.generated.dmo.MvcRegistryItemDMO;
import org.dmd.features.extgwt.generated.dmo.MvcServerEventDMO;
import org.dmd.features.extgwt.generated.types.DmcTypeMvcEventREFMV;
import org.dmd.features.extgwt.generated.types.DmcTypeMvcEventREFSV;
import org.dmd.features.extgwt.generated.types.DmcTypeMvcRegistryItemREFMV;
import org.dmd.features.extgwt.generated.types.DmcTypeMvcServerEventREFMV;
import org.dmd.features.extgwt.generated.types.MvcEventREF;
import org.dmd.features.extgwt.generated.types.MvcRegistryItemREF;
import org.dmd.features.extgwt.generated.types.MvcServerEventREF;
import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The MvcView class allows for the definition of views. MvcView instance are
 * derived from the ExtGWT View class.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class MvcViewDMO extends MvcDefinitionDMO implements DmcNamedObjectIF, Serializable {

    public static final String constructionClassName = "MvcView";

    static Map<Integer, HashMap<String, DmcAttributeValidator>> _AvDmAp;

    static Map<String, DmcObjectValidator> _OvDmAp;

    static {
        _AvDmAp = new HashMap<Integer, HashMap<String, DmcAttributeValidator>>();
        _OvDmAp = new HashMap<String, DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(), MetaVCAG.__AttributeSetValidator);
    }

    public MvcViewDMO() {
        super("MvcView");
    }

    protected MvcViewDMO(String oc) {
        super(oc);
    }

    protected Map<Integer, HashMap<String, DmcAttributeValidator>> getAttributeValidators() {
        return (_AvDmAp);
    }

    protected Map<String, DmcObjectValidator> getObjectValidators() {
        return (_OvDmAp);
    }

    @Override
    public MvcViewDMO getNew() {
        MvcViewDMO rc = new MvcViewDMO();
        return (rc);
    }

    @Override
    public MvcViewDMO getSlice(DmcSliceInfo info) {
        MvcViewDMO rc = new MvcViewDMO();
        populateSlice(rc, info);
        return (rc);
    }

    public MvcViewDMO(DmcTypeModifierMV mods) {
        super("MvcView");
        modrec(true);
        setModifier(mods);
    }

    public MvcViewDMO getModificationRecorder() {
        MvcViewDMO rc = new MvcViewDMO();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return (rc);
    }

    public StringName getObjectName() {
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        if (name != null) return ((StringName) name.getSV());
        return (null);
    }

    public DmcAttribute<?> getObjectNameAttribute() {
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        return (name);
    }

    public boolean equals(Object obj) {
        if (obj instanceof MvcViewDMO) {
            return (getObjectName().equals(((MvcViewDMO) obj).getObjectName()));
        }
        return (false);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    public Iterator<MvcEventREF> getHandlesEvent() {
        DmcTypeMvcEventREFMV attr = (DmcTypeMvcEventREFMV) get(ExtgwtDMSAG.__handlesEvent);
        if (attr == null) return (((List<MvcEventREF>) Collections.EMPTY_LIST).iterator());
        if (DmcOmni.instance().lazyResolution()) {
            if (attr.doLazyResolution(this)) {
                rem(attr.getAttributeInfo());
                return (((List<MvcEventREF>) Collections.EMPTY_LIST).iterator());
            }
        }
        return (attr.getMV());
    }

    /**
     * @return An Iterator of MvcEventREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    public Iterator<MvcEventREF> getHandlesEventREFs() {
        DmcTypeMvcEventREFMV attr = (DmcTypeMvcEventREFMV) get(ExtgwtDMSAG.__handlesEvent);
        if (attr == null) return (((List<MvcEventREF>) Collections.EMPTY_LIST).iterator());
        return (attr.getMV());
    }

    public DmcAttribute<?> addHandlesEvent(MvcEventDMO value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__handlesEvent);
        if (attr == null) attr = new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__handlesEvent);
        try {
            setLastValue(attr.add(value));
            add(ExtgwtDMSAG.__handlesEvent, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific add() method shouldn't throw exceptions!", ex));
        }
        return (attr);
    }

    public DmcAttribute<?> addHandlesEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__handlesEvent);
        if (attr == null) attr = new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__handlesEvent);
        setLastValue(attr.add(value));
        add(ExtgwtDMSAG.__handlesEvent, attr);
        return (attr);
    }

    public int getHandlesEventSize() {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__handlesEvent);
        if (attr == null) {
            if (ExtgwtDMSAG.__handlesEvent.indexSize == 0) return (0); else return (ExtgwtDMSAG.__handlesEvent.indexSize);
        }
        return (attr.getMVSize());
    }

    public DmcAttribute<?> delHandlesEvent(Object value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__handlesEvent);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__handlesEvent), value); else attr = del(ExtgwtDMSAG.__handlesEvent, value);
        return (attr);
    }

    public void remHandlesEvent() {
        rem(ExtgwtDMSAG.__handlesEvent);
    }

    /**
     * @return An Iterator of MvcServerEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    public Iterator<MvcServerEventREF> getHandlesServerEvent() {
        DmcTypeMvcServerEventREFMV attr = (DmcTypeMvcServerEventREFMV) get(ExtgwtDMSAG.__handlesServerEvent);
        if (attr == null) return (((List<MvcServerEventREF>) Collections.EMPTY_LIST).iterator());
        if (DmcOmni.instance().lazyResolution()) {
            if (attr.doLazyResolution(this)) {
                rem(attr.getAttributeInfo());
                return (((List<MvcServerEventREF>) Collections.EMPTY_LIST).iterator());
            }
        }
        return (attr.getMV());
    }

    /**
     * @return An Iterator of MvcServerEventREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    public Iterator<MvcServerEventREF> getHandlesServerEventREFs() {
        DmcTypeMvcServerEventREFMV attr = (DmcTypeMvcServerEventREFMV) get(ExtgwtDMSAG.__handlesServerEvent);
        if (attr == null) return (((List<MvcServerEventREF>) Collections.EMPTY_LIST).iterator());
        return (attr.getMV());
    }

    public DmcAttribute<?> addHandlesServerEvent(MvcServerEventDMO value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__handlesServerEvent);
        if (attr == null) attr = new DmcTypeMvcServerEventREFMV(ExtgwtDMSAG.__handlesServerEvent);
        try {
            setLastValue(attr.add(value));
            add(ExtgwtDMSAG.__handlesServerEvent, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific add() method shouldn't throw exceptions!", ex));
        }
        return (attr);
    }

    public DmcAttribute<?> addHandlesServerEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__handlesServerEvent);
        if (attr == null) attr = new DmcTypeMvcServerEventREFMV(ExtgwtDMSAG.__handlesServerEvent);
        setLastValue(attr.add(value));
        add(ExtgwtDMSAG.__handlesServerEvent, attr);
        return (attr);
    }

    public int getHandlesServerEventSize() {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__handlesServerEvent);
        if (attr == null) {
            if (ExtgwtDMSAG.__handlesServerEvent.indexSize == 0) return (0); else return (ExtgwtDMSAG.__handlesServerEvent.indexSize);
        }
        return (attr.getMVSize());
    }

    public DmcAttribute<?> delHandlesServerEvent(Object value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__handlesServerEvent);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeMvcServerEventREFMV(ExtgwtDMSAG.__handlesServerEvent), value); else attr = del(ExtgwtDMSAG.__handlesServerEvent, value);
        return (attr);
    }

    public void remHandlesServerEvent() {
        rem(ExtgwtDMSAG.__handlesServerEvent);
    }

    public MvcEventREF getFiresEvent() {
        DmcTypeMvcEventREFSV attr = (DmcTypeMvcEventREFSV) get(ExtgwtDMSAG.__firesEvent);
        if (attr == null) return (null);
        if (DmcOmni.instance().lazyResolution()) {
            if (attr.doLazyResolution(this)) {
                rem(attr.getAttributeInfo());
                return (null);
            }
        }
        return (attr.getSV());
    }

    /**
     * Returns the reference to MvcEvent without attempting lazy resolution (if turned on).
     */
    public MvcEventREF getFiresEventREF() {
        DmcTypeMvcEventREFSV attr = (DmcTypeMvcEventREFSV) get(ExtgwtDMSAG.__firesEvent);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setFiresEvent(MvcEventDMO value) {
        DmcTypeMvcEventREFSV attr = (DmcTypeMvcEventREFSV) get(ExtgwtDMSAG.__firesEvent);
        if (attr == null) attr = new DmcTypeMvcEventREFSV(ExtgwtDMSAG.__firesEvent); else attr.removeBackReferences();
        try {
            attr.set(value);
            set(ExtgwtDMSAG.__firesEvent, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setFiresEvent(Object value) throws DmcValueException {
        DmcTypeMvcEventREFSV attr = (DmcTypeMvcEventREFSV) get(ExtgwtDMSAG.__firesEvent);
        if (attr == null) attr = new DmcTypeMvcEventREFSV(ExtgwtDMSAG.__firesEvent); else attr.removeBackReferences();
        attr.set(value);
        set(ExtgwtDMSAG.__firesEvent, attr);
    }

    public void remFiresEvent() {
        rem(ExtgwtDMSAG.__firesEvent);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    public Iterator<MvcEventREF> getDispatchesEvent() {
        DmcTypeMvcEventREFMV attr = (DmcTypeMvcEventREFMV) get(ExtgwtDMSAG.__dispatchesEvent);
        if (attr == null) return (((List<MvcEventREF>) Collections.EMPTY_LIST).iterator());
        if (DmcOmni.instance().lazyResolution()) {
            if (attr.doLazyResolution(this)) {
                rem(attr.getAttributeInfo());
                return (((List<MvcEventREF>) Collections.EMPTY_LIST).iterator());
            }
        }
        return (attr.getMV());
    }

    /**
     * @return An Iterator of MvcEventREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    public Iterator<MvcEventREF> getDispatchesEventREFs() {
        DmcTypeMvcEventREFMV attr = (DmcTypeMvcEventREFMV) get(ExtgwtDMSAG.__dispatchesEvent);
        if (attr == null) return (((List<MvcEventREF>) Collections.EMPTY_LIST).iterator());
        return (attr.getMV());
    }

    public DmcAttribute<?> addDispatchesEvent(MvcEventDMO value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__dispatchesEvent);
        if (attr == null) attr = new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__dispatchesEvent);
        try {
            setLastValue(attr.add(value));
            add(ExtgwtDMSAG.__dispatchesEvent, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific add() method shouldn't throw exceptions!", ex));
        }
        return (attr);
    }

    public DmcAttribute<?> addDispatchesEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__dispatchesEvent);
        if (attr == null) attr = new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__dispatchesEvent);
        setLastValue(attr.add(value));
        add(ExtgwtDMSAG.__dispatchesEvent, attr);
        return (attr);
    }

    public int getDispatchesEventSize() {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__dispatchesEvent);
        if (attr == null) {
            if (ExtgwtDMSAG.__dispatchesEvent.indexSize == 0) return (0); else return (ExtgwtDMSAG.__dispatchesEvent.indexSize);
        }
        return (attr.getMVSize());
    }

    public DmcAttribute<?> delDispatchesEvent(Object value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__dispatchesEvent);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__dispatchesEvent), value); else attr = del(ExtgwtDMSAG.__dispatchesEvent, value);
        return (attr);
    }

    public void remDispatchesEvent() {
        rem(ExtgwtDMSAG.__dispatchesEvent);
    }

    /**
     * @return An Iterator of MvcRegistryItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    public Iterator<MvcRegistryItemREF> getUsesRegistryItem() {
        DmcTypeMvcRegistryItemREFMV attr = (DmcTypeMvcRegistryItemREFMV) get(ExtgwtDMSAG.__usesRegistryItem);
        if (attr == null) return (((List<MvcRegistryItemREF>) Collections.EMPTY_LIST).iterator());
        if (DmcOmni.instance().lazyResolution()) {
            if (attr.doLazyResolution(this)) {
                rem(attr.getAttributeInfo());
                return (((List<MvcRegistryItemREF>) Collections.EMPTY_LIST).iterator());
            }
        }
        return (attr.getMV());
    }

    /**
     * @return An Iterator of MvcRegistryItemREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    public Iterator<MvcRegistryItemREF> getUsesRegistryItemREFs() {
        DmcTypeMvcRegistryItemREFMV attr = (DmcTypeMvcRegistryItemREFMV) get(ExtgwtDMSAG.__usesRegistryItem);
        if (attr == null) return (((List<MvcRegistryItemREF>) Collections.EMPTY_LIST).iterator());
        return (attr.getMV());
    }

    public DmcAttribute<?> addUsesRegistryItem(MvcRegistryItemDMO value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__usesRegistryItem);
        if (attr == null) attr = new DmcTypeMvcRegistryItemREFMV(ExtgwtDMSAG.__usesRegistryItem);
        try {
            setLastValue(attr.add(value));
            add(ExtgwtDMSAG.__usesRegistryItem, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific add() method shouldn't throw exceptions!", ex));
        }
        return (attr);
    }

    public DmcAttribute<?> addUsesRegistryItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__usesRegistryItem);
        if (attr == null) attr = new DmcTypeMvcRegistryItemREFMV(ExtgwtDMSAG.__usesRegistryItem);
        setLastValue(attr.add(value));
        add(ExtgwtDMSAG.__usesRegistryItem, attr);
        return (attr);
    }

    public int getUsesRegistryItemSize() {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__usesRegistryItem);
        if (attr == null) {
            if (ExtgwtDMSAG.__usesRegistryItem.indexSize == 0) return (0); else return (ExtgwtDMSAG.__usesRegistryItem.indexSize);
        }
        return (attr.getMVSize());
    }

    public DmcAttribute<?> delUsesRegistryItem(Object value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__usesRegistryItem);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeMvcRegistryItemREFMV(ExtgwtDMSAG.__usesRegistryItem), value); else attr = del(ExtgwtDMSAG.__usesRegistryItem, value);
        return (attr);
    }

    public void remUsesRegistryItem() {
        rem(ExtgwtDMSAG.__usesRegistryItem);
    }

    /**
     * @return An Iterator of MvcRegistryItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    public Iterator<MvcRegistryItemREF> getCreatesRegistryItem() {
        DmcTypeMvcRegistryItemREFMV attr = (DmcTypeMvcRegistryItemREFMV) get(ExtgwtDMSAG.__createsRegistryItem);
        if (attr == null) return (((List<MvcRegistryItemREF>) Collections.EMPTY_LIST).iterator());
        if (DmcOmni.instance().lazyResolution()) {
            if (attr.doLazyResolution(this)) {
                rem(attr.getAttributeInfo());
                return (((List<MvcRegistryItemREF>) Collections.EMPTY_LIST).iterator());
            }
        }
        return (attr.getMV());
    }

    /**
     * @return An Iterator of MvcRegistryItemREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    public Iterator<MvcRegistryItemREF> getCreatesRegistryItemREFs() {
        DmcTypeMvcRegistryItemREFMV attr = (DmcTypeMvcRegistryItemREFMV) get(ExtgwtDMSAG.__createsRegistryItem);
        if (attr == null) return (((List<MvcRegistryItemREF>) Collections.EMPTY_LIST).iterator());
        return (attr.getMV());
    }

    public DmcAttribute<?> addCreatesRegistryItem(MvcRegistryItemDMO value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__createsRegistryItem);
        if (attr == null) attr = new DmcTypeMvcRegistryItemREFMV(ExtgwtDMSAG.__createsRegistryItem);
        try {
            setLastValue(attr.add(value));
            add(ExtgwtDMSAG.__createsRegistryItem, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific add() method shouldn't throw exceptions!", ex));
        }
        return (attr);
    }

    public DmcAttribute<?> addCreatesRegistryItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__createsRegistryItem);
        if (attr == null) attr = new DmcTypeMvcRegistryItemREFMV(ExtgwtDMSAG.__createsRegistryItem);
        setLastValue(attr.add(value));
        add(ExtgwtDMSAG.__createsRegistryItem, attr);
        return (attr);
    }

    public int getCreatesRegistryItemSize() {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__createsRegistryItem);
        if (attr == null) {
            if (ExtgwtDMSAG.__createsRegistryItem.indexSize == 0) return (0); else return (ExtgwtDMSAG.__createsRegistryItem.indexSize);
        }
        return (attr.getMVSize());
    }

    public DmcAttribute<?> delCreatesRegistryItem(Object value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__createsRegistryItem);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeMvcRegistryItemREFMV(ExtgwtDMSAG.__createsRegistryItem), value); else attr = del(ExtgwtDMSAG.__createsRegistryItem, value);
        return (attr);
    }

    public void remCreatesRegistryItem() {
        rem(ExtgwtDMSAG.__createsRegistryItem);
    }

    public String getDescription() {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(MetaDMSAG.__description);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setDescription(String value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__description);
        if (attr == null) attr = new DmcTypeStringSV(MetaDMSAG.__description);
        try {
            attr.set(value);
            set(MetaDMSAG.__description, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setDescription(Object value) throws DmcValueException {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(MetaDMSAG.__description);
        if (attr == null) attr = new DmcTypeStringSV(MetaDMSAG.__description);
        attr.set(value);
        set(MetaDMSAG.__description, attr);
    }

    public void remDescription() {
        rem(MetaDMSAG.__description);
    }

    public StringName getName() {
        DmcTypeStringNameSV attr = (DmcTypeStringNameSV) get(MetaDMSAG.__name);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setName(StringName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null) attr = new DmcTypeStringNameSV(MetaDMSAG.__name);
        try {
            attr.set(value);
            set(MetaDMSAG.__name, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setName(Object value) throws DmcValueException {
        DmcTypeStringNameSV attr = (DmcTypeStringNameSV) get(MetaDMSAG.__name);
        if (attr == null) attr = new DmcTypeStringNameSV(MetaDMSAG.__name);
        attr.set(value);
        set(MetaDMSAG.__name, attr);
    }

    public void remName() {
        rem(MetaDMSAG.__name);
    }
}
