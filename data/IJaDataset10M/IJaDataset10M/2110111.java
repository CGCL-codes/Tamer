package net.sourceforge.ondex.wsapi.plugins.export;

import net.sourceforge.ondex.ONDEXPluginArguments;
import net.sourceforge.ondex.core.ONDEXGraph;
import net.sourceforge.ondex.wsapi.exceptions.CaughtException;
import net.sourceforge.ondex.wsapi.exceptions.WebserviceException;
import net.sourceforge.ondex.wsapi.plugins.PluginWS;
import org.apache.log4j.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import java.io.File;
import net.sourceforge.ondex.wsapi.plugins.ZipFormat;

/**
* AutoGenerated
* @author Christian Brenninkmeijer
*/
public class ExportOXL extends PluginWS {

    private static final Logger logger = Logger.getLogger(ExportOXL.class);

    public ExportOXL() throws CaughtException {
        super();
    }

    /**
     * Method to run Export in oxl package.
     *
 	 *    Status: STABLE Tested March 2010 (Artem Lysenko)
 	 *    Authors: Matthew Pocock, Jan Taubert, K Sieren, 
 	 *    Custodians: Jan Taubert, 
     * @param ExcludeConceptsOfConceptClass
 	 *            (Optional. No Default.) [List]This parameter can be used to do some basic filtering on ConceptClass in the export method.
This is especially useful if graphs become to large.
     * @param ExcludeRelationsOfRelationType
 	 *            (Optional. No Default.) [List]This parameter can be used to do some basic filtering on RelationType in the export method.
This is especially useful if graphs become to large.
     * @param ExcludeGDSWithAttribute
 	 *            (Optional. No Default.) [List]This parameter can be used to exclude a number of attributes from being written in the ondex.xml file.
When **ALL** is used all attributes are excluded and thus no Attribute values will be written.
     * @param IncludeOnlyGDSAttribute
 	 *            (Optional. No Default.) [List]This parameter works by setting exclusive inclusions for a set of Attribute Attributes. All other GDSs Attributes not specified will be excluded.
     * @param IncludeOnlyConceptClass
 	 *            (Optional. No Default.) [List]This parameter works by setting exclusive inclusions for a set of Concept Classes. All other Concept Classes not specified will be excluded.
     * @param IncludeOnlyRelationType
 	 *            (Optional. No Default.) [List]This parameter works by setting exclusive inclusions for a set of Relation Types. All other Relation Types not specified will be excluded.
     * @param pretty
 	 *            (Optional. Defaults to :true) When this option is set the output XML is kind of pretty printed. This makes the output larger.
     * @param ExportIsolatedConcepts
 	 *            (Optional. Defaults to :true) When this is option is set, it will export also concepts without any relations.
     * @param GZip
 	 *            (Optional. Defaults to :true) When this option is set the file wil be exported as a zip file, this is the preffered option as it reduces disc space requirements by a lot.
For example a file of 1.4 GigaByte is often compressed to a file of 50 MegaByte or less!!
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the export
     * @throws WebserviceException
     */
    @WebResult(name = "info")
    @WebMethod(exclude = false)
    public String oxlExport(@WebParam(name = "ExcludeConceptsOfConceptClass") java.lang.String[] ExcludeConceptsOfConceptClass, @WebParam(name = "ExcludeRelationsOfRelationType") java.lang.String[] ExcludeRelationsOfRelationType, @WebParam(name = "ExcludeAttributeWithName") java.lang.String[] ExcludeAttributeWithName, @WebParam(name = "IncludeAttributesOfName") java.lang.String[] IncludeAttributesOfName, @WebParam(name = "IncludeOnlyConceptClass") java.lang.String[] IncludeOnlyConceptClass, @WebParam(name = "IncludeOnlyRelationType") java.lang.String[] IncludeOnlyRelationType, @WebParam(name = "pretty") java.lang.Boolean pretty, @WebParam(name = "ExportIsolatedConcepts") java.lang.Boolean ExportIsolatedConcepts, @WebParam(name = "compression") java.lang.String compression, @WebParam(name = "graphId") Long graphId) throws WebserviceException {
        try {
            logger.info("export oxl called");
            net.sourceforge.ondex.export.oxl.Export export = new net.sourceforge.ondex.export.oxl.Export();
            logger.info(");Export created " + export);
            ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
            logger.info("found graph");
            ONDEXPluginArguments arguments = new ONDEXPluginArguments(export.getArgumentDefinitions());
            createArguement(export, arguments, "ExcludeConceptsOfConceptClass", ExcludeConceptsOfConceptClass);
            createArguement(export, arguments, "ExcludeRelationsOfRelationType", ExcludeRelationsOfRelationType);
            createArguement(export, arguments, "ExcludeAttributeWithName", ExcludeAttributeWithName);
            createArguement(export, arguments, "IncludeAttributesOfName", IncludeAttributesOfName);
            createArguement(export, arguments, "IncludeOnlyConceptClass", IncludeOnlyConceptClass);
            createArguement(export, arguments, "IncludeOnlyRelationType", IncludeOnlyRelationType);
            createArguement(export, arguments, "pretty", pretty);
            createArguement(export, arguments, "ExportIsolatedConcepts", ExportIsolatedConcepts);
            createArguement(export, arguments, "GZip", false);
            File output = createOutputFile("output", ".xml");
            addExportFile(export, arguments, output);
            logger.info("created arguements");
            return runExport(graph, output, export, arguments, ZipFormat.RAW);
        } catch (WebserviceException e) {
            throw e;
        } catch (Exception e) {
            throw new CaughtException(e, logger);
        }
    }
}
