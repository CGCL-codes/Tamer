package org.asterisksnmp.agent;

import java.io.*;
import java.text.*;
import java.util.*;
import org.snmp4j.*;
import org.snmp4j.agent.*;
import org.snmp4j.agent.cfg.*;
import org.snmp4j.agent.io.*;
import org.snmp4j.agent.io.prop.*;
import org.snmp4j.mp.*;
import org.snmp4j.smi.*;
import org.snmp4j.transport.*;
import org.snmp4j.util.*;
import org.snmp4j.security.SecurityProtocols;
import org.snmp4j.log.LogFactory;
import org.snmp4j.log.LogAdapter;
import org.snmp4j.log.JavaLogFactory;
import org.snmp4j.agent.mo.util.VariableProvider;
import org.snmp4j.agent.request.SubRequest;
import org.snmp4j.agent.request.RequestStatus;
import org.snmp4j.agent.request.Request;
import org.snmp4j.agent.request.SubRequestIterator;
import org.snmp4j.agent.mo.DefaultMOFactory;
import org.snmp4j.agent.mo.MOTableRowListener;
import org.snmp4j.agent.mo.MOTableRowEvent;
import org.snmp4j.agent.mo.snmp.TimeStamp;
import org.snmp4j.agent.mo.MOMutableTableRow;

/**
 * The SampleAgent uses an {@link AgentConfigManager} instance to create a
 * minimal SNMP agent using the configuration defined by
 * <code>SampleAgentConfig.properties</code> in this package. That properties
 * file defines the initial content of the registered MIB objects of this agent
 * which may differ from the hard coded defaults.
 * <p>
 * In order to add a new MIB object, call <code>server.register(..)</code> or
 * replace the <code>Modules.java</code> file in this package by the
 * <code>Modules.java</code> generated by AgenPro for your MIB module(s).
 * <p>
 * The agent uses the Java logging framework to log messages.
 *
 * @author Frank Fock
 * @version 1.2
 */
public class AsteriskSnmpAgentImpl implements AsteriskSnmpAgent, VariableProvider {

    static {
        LogFactory.setLogFactory(new JavaLogFactory());
    }

    private LogAdapter logger = LogFactory.getLogger(AsteriskSnmpAgentImpl.class);

    protected AgentConfigManager agent;

    protected MOServer server;

    private String configFile;

    private File bootCounterFile;

    protected Modules modules;

    public AsteriskSnmpAgentImpl(Map args) {
        configFile = (String) ((List) args.get("c")).get(0);
        bootCounterFile = new File((String) ((List) args.get("bc")).get(0));
        server = new DefaultMOServer();
        MOServer[] moServers = new MOServer[] { server };
        InputStream configInputStream = AsteriskSnmpAgentImpl.class.getResourceAsStream("AsteriskSnmpAgentConfig.properties");
        final Properties props = new Properties();
        try {
            props.load(configInputStream);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        MOInputFactory configurationFactory = new MOInputFactory() {

            public MOInput createMOInput() {
                return new PropertyMOInput(props, AsteriskSnmpAgentImpl.this);
            }
        };
        MessageDispatcher messageDispatcher = new MessageDispatcherImpl();
        addListenAddresses(messageDispatcher, (List) args.get("address"));
        agent = new AgentConfigManager(new OctetString(MPv3.createLocalEngineID()), messageDispatcher, null, moServers, ThreadPool.create("AsteriskSnmpAgentImpl", 3), configurationFactory, new DefaultMOPersistenceProvider(moServers, configFile), new EngineBootsCounterFile(bootCounterFile));
    }

    protected void addListenAddresses(MessageDispatcher md, List addresses) {
        for (Iterator it = addresses.iterator(); it.hasNext(); ) {
            Address address = GenericAddress.parse((String) it.next());
            TransportMapping tm = TransportMappings.getInstance().createTransportMapping(address);
            if (tm != null) {
                md.addTransportMapping(tm);
            } else {
                logger.warn("No transport mapping available for address '" + address + "'.");
            }
        }
    }

    public void run() {
        agent.initialize();
        registerMIBs();
        agent.setupProxyForwarder();
        agent.run();
        try {
            Thread.sleep(30000);
        } catch (InterruptedException ex1) {
        }
        agent.shutdown();
        agent.run();
    }

    /**
   * Register your own MIB modules in the specified context of the agent.
   * @throws DuplicateRegistrationException if some of the MIB modules
   * registration regions conflict with already registered regions.
   */
    protected void registerMIBs() {
        if (modules == null) {
            modules = new Modules(DefaultMOFactory.getInstance());
            modules.getSnmp4jDemoMib().getSnmp4jDemoEntry().addMOTableRowListener(new DemoTableRowListener());
            ((TimeStamp) modules.getSnmp4jDemoMib().getSnmp4jDemoEntry().getColumn(Snmp4jDemoMib.idxSnmp4jDemoEntryCol4)).setSysUpTime(agent.getSysUpTime());
        }
        try {
            modules.registerMOs(server, null);
        } catch (DuplicateRegistrationException drex) {
            logger.error("Duplicate registration: " + drex.getMessage() + "." + " MIB object registration may be incomplete!", drex);
        }
    }

    public Variable getVariable(String name) {
        OID oid;
        OctetString context = null;
        int pos = name.indexOf(':');
        if (pos >= 0) {
            context = new OctetString(name.substring(0, pos));
            oid = new OID(name.substring(pos + 1, name.length()));
        } else {
            oid = new OID(name);
        }
        final DefaultMOContextScope scope = new DefaultMOContextScope(context, oid, true, oid, true);
        MOQuery query = new DefaultMOQuery(scope, false, this);
        ManagedObject mo = server.lookup(query);
        if (mo != null) {
            final VariableBinding vb = new VariableBinding(oid);
            final RequestStatus status = new RequestStatus();
            SubRequest req = new SubRequest() {

                private boolean completed;

                private MOQuery query;

                public boolean hasError() {
                    return false;
                }

                public void setErrorStatus(int errorStatus) {
                    status.setErrorStatus(errorStatus);
                }

                public int getErrorStatus() {
                    return status.getErrorStatus();
                }

                public RequestStatus getStatus() {
                    return status;
                }

                public MOScope getScope() {
                    return scope;
                }

                public VariableBinding getVariableBinding() {
                    return vb;
                }

                public Request getRequest() {
                    return null;
                }

                public Object getUndoValue() {
                    return null;
                }

                public void setUndoValue(Object undoInformation) {
                }

                public void completed() {
                    completed = true;
                }

                public boolean isComplete() {
                    return completed;
                }

                public void setTargetMO(ManagedObject managedObject) {
                }

                public ManagedObject getTargetMO() {
                    return null;
                }

                public int getIndex() {
                    return 0;
                }

                public void setQuery(MOQuery query) {
                    this.query = query;
                }

                public MOQuery getQuery() {
                    return query;
                }

                public SubRequestIterator repetitions() {
                    return null;
                }

                public void updateNextRepetition() {
                }

                public Object getUserObject() {
                    return null;
                }

                public void setUserObject(Object userObject) {
                }
            };
            mo.get(req);
            return vb.getVariable();
        }
        return null;
    }

    class DemoTableRowListener implements MOTableRowListener {

        public void rowChanged(MOTableRowEvent event) {
            if ((event.getType() == MOTableRowEvent.CREATE) || (event.getType() == MOTableRowEvent.UPDATED)) {
                return;
            }
            Counter32 counter = (Counter32) event.getRow().getValue(Snmp4jDemoMib.idxSnmp4jDemoEntryCol3);
            if (counter == null) {
                counter = new Counter32(0);
                ((MOMutableTableRow) event.getRow()).setValue(Snmp4jDemoMib.idxSnmp4jDemoEntryCol3, counter);
            }
            counter.increment();
            TimeStamp timestamp = (TimeStamp) event.getTable().getColumn(Snmp4jDemoMib.idxSnmp4jDemoEntryCol4);
            timestamp.update((MOMutableTableRow) event.getRow(), Snmp4jDemoMib.idxSnmp4jDemoEntryCol4);
            Integer32 type = new Integer32(Snmp4jDemoMib.Snmp4jDemoTableRowModificationEnum.updated);
            switch(event.getType()) {
                case MOTableRowEvent.ADD:
                    type.setValue(Snmp4jDemoMib.Snmp4jDemoTableRowModificationEnum.created);
                    break;
                case MOTableRowEvent.DELETE:
                    type.setValue(Snmp4jDemoMib.Snmp4jDemoTableRowModificationEnum.deleted);
                    break;
            }
            VariableBinding[] payload = new VariableBinding[2];
            OID table = event.getTable().getOID();
            OID updateCount = new OID(table);
            updateCount.append(Snmp4jDemoMib.colSnmp4jDemoEntryCol3);
            updateCount.append(event.getRow().getIndex());
            OID modifyType = new OID(table);
            modifyType.append(Snmp4jDemoMib.colSnmp4jDemoTableRowModification);
            modifyType.append(event.getRow().getIndex());
            payload[0] = new VariableBinding(updateCount, counter);
            payload[1] = new VariableBinding(modifyType, type);
            modules.getSnmp4jDemoMib().snmp4jDemoEvent(agent.getNotificationOriginator(), new OctetString(), payload);
        }
    }

    /**
   * Runs a sample agent with a default configuration defined by
   * <code>AsteriskSnmpAgentConfig.properties</code>. A sample command line is:
   * <pre>
   * -c AsteriskSnmpAgent.cfg -bc AsteriskSnmpAgent.bc udp:127.0.0.1/4700 tcp:127.0.0.1/4700
   * </pre>
   *
   * @param args
   *    the command line arguments defining at least the listen addresses.
   *    The format is <code>-c[s{=AsteriskSnmpAgent.cfg}] -bc[s{=AsteriskSnmpAgent.bc}]
   *    #address[s<(udp|tcp):.*[/[0-9]+]?>] ..</code>. For the format
   *    description see {@link ArgumentParser}.
   */
    public static void main(String[] args) {
        ArgumentParser parser = new ArgumentParser("-c[s{=AsteriskSnmpAgent.cfg}] -bc[s{=AsteriskSnmpAgent.bc}]", "#address[s<(udp|tcp):.*[/[0-9]+]?>] ..");
        Map commandLineParameters = null;
        try {
            commandLineParameters = parser.parse(args);
            AsteriskSnmpAgent sampleAgent = new AsteriskSnmpAgentImpl(commandLineParameters);
            SecurityProtocols.getInstance().addDefaultProtocols();
            sampleAgent.run();
        } catch (ParseException ex) {
            System.err.println(ex.getMessage());
        }
    }
}
