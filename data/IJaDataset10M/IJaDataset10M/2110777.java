package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.TreeMap;
import java.util.TreeSet;
import org.dmd.dmc.*;
import org.dmd.dmc.types.CamelCaseName;
import org.dmd.dms.*;
import org.dmd.dms.generated.dmo.SchemaDefinitionDMO;
import org.dmd.dms.generated.dmw.SchemaDefinitionDMW;
import org.dmd.dms.generated.dmw.SchemaDefinitionIterableDMW;
import org.dmd.dms.generated.types.SchemaDefinitionREF;
import org.dmd.mvw.tools.mvwgenerator.extended.Component;
import org.dmd.mvw.tools.mvwgenerator.extended.Event;
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;
import org.dmd.mvw.tools.mvwgenerator.extended.RunContextItem;
import org.dmd.mvw.tools.mvwgenerator.extended.View;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ComponentDMO;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.EventDMO;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.RunContextItemDMO;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ViewDMO;
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.EventIterableDMW;
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.RequestTypeWithOptionsIterableDMW;
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.RunContextItemIterableDMW;
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.ViewIterableDMW;
import org.dmd.mvw.tools.mvwgenerator.generated.types.EventREF;
import org.dmd.mvw.tools.mvwgenerator.generated.types.RunContextItemREF;
import org.dmd.mvw.tools.mvwgenerator.generated.types.ViewREF;
import org.dmd.mvw.tools.mvwgenerator.types.RequestTypeWithOptions;

/**
 * The Component is an abstract base for classes that define the building
 * blocks of Applications. The primary feature of an Component is that it
 * fires and/or handles events. Beyond that, a component can be whatever you
 * require it to be. A variety of derived component types provide more
 * focussed behavioural units. <p /> Many of the classes generated by MVW
 * must be extended in order to provide the actual behaviour of your
 * application e.g. Controllers, Views, Presenters etc. Activities must also
 * be extended to provide your behaviour, however, Activities are also
 * referred to by generated code and must be in a known location. By default,
 * the classes that extend the generated activity class will reside in the
 * 'extended' package that lies beneath the genPackage specified for your
 * module i.e. if your gen package is com.mine, then the  derived activity
 * classes are expected to be in com.mine.extended. If you want to place
 * these classes in a subpackage beneath extended, use the subpackage
 * attribute to indicate the package name e.g. if subpackage is defined as
 * 'activities', your activity implementation class will be expected to
 * reside in com.mine.extended.activities.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.dumpWrapper(BaseDMWGeneratorNew.java:365)
 */
public abstract class ComponentDMW extends MvwDefinition implements DmcNamedObjectIF {

    protected ComponentDMW() {
        super();
    }

    public abstract Component getModificationRecorder();

    public ComponentDMO getDMO() {
        return ((ComponentDMO) core);
    }

    protected ComponentDMW(ComponentDMO obj, ClassDefinition cd) {
        super(obj, cd);
    }

    public CamelCaseName getObjectName() {
        return (((ComponentDMO) core).getComponentName());
    }

    public int hashCode() {
        return (getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute() {
        return (((ComponentDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj) {
        if (obj instanceof ComponentDMW) {
            return (getObjectName().equals(((ComponentDMW) obj).getObjectName()));
        }
        return (false);
    }

    public int getFiresEventSize() {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null) return (0);
        return (attr.getMVSize());
    }

    public boolean getFiresEventIsEmpty() {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null) return (true);
        return (false);
    }

    public boolean getFiresEventHasValue() {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null) return (false);
        return (true);
    }

    public Event getFiresEvent(Object key) {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null) return (null);
        return ((Event) attr.getByKey(key));
    }

    public CamelCaseName getFiresEventFirstKey() {
        return (((ComponentDMO) core).getFiresEventFirstKey());
    }

    /**
     * @return An Iterable of Event objects.
     */
    @SuppressWarnings("unchecked")
    public EventIterableDMW getFiresEventIterable() {
        DmcAttribute attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null) return (EventIterableDMW.emptyList);
        Iterator<EventREF> it = ((ComponentDMO) core).getFiresEvent();
        if (it == null) return (EventIterableDMW.emptyList);
        return (new EventIterableDMW(it));
    }

    public DmcAttribute<?> addFiresEvent(Event value) {
        return (((ComponentDMO) core).addFiresEvent(value.getDMO()));
    }

    public void delFiresEvent(Event value) {
        ((ComponentDMO) core).delFiresEvent(value.getDMO());
    }

    public TreeMap<CamelCaseName, Event> getFiresEventCopy() {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null) return (new TreeMap<CamelCaseName, Event>());
        TreeMap<CamelCaseName, Event> rc = new TreeMap<CamelCaseName, Event>();
        EventIterableDMW it = getFiresEventIterable();
        while (it.hasNext()) {
            Event obj = it.next();
            rc.put((CamelCaseName) obj.getObjectName(), obj);
        }
        return (rc);
    }

    public void remFiresEvent() {
        ((ComponentDMO) core).remFiresEvent();
    }

    public int getHandlesEventSize() {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null) return (0);
        return (attr.getMVSize());
    }

    public boolean getHandlesEventIsEmpty() {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null) return (true);
        return (false);
    }

    public boolean getHandlesEventHasValue() {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null) return (false);
        return (true);
    }

    public Event getHandlesEvent(Object key) {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null) return (null);
        return ((Event) attr.getByKey(key));
    }

    public CamelCaseName getHandlesEventFirstKey() {
        return (((ComponentDMO) core).getHandlesEventFirstKey());
    }

    /**
     * @return An Iterable of Event objects.
     */
    @SuppressWarnings("unchecked")
    public EventIterableDMW getHandlesEventIterable() {
        DmcAttribute attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null) return (EventIterableDMW.emptyList);
        Iterator<EventREF> it = ((ComponentDMO) core).getHandlesEvent();
        if (it == null) return (EventIterableDMW.emptyList);
        return (new EventIterableDMW(it));
    }

    public DmcAttribute<?> addHandlesEvent(Event value) {
        return (((ComponentDMO) core).addHandlesEvent(value.getDMO()));
    }

    public void delHandlesEvent(Event value) {
        ((ComponentDMO) core).delHandlesEvent(value.getDMO());
    }

    public TreeMap<CamelCaseName, Event> getHandlesEventCopy() {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null) return (new TreeMap<CamelCaseName, Event>());
        TreeMap<CamelCaseName, Event> rc = new TreeMap<CamelCaseName, Event>();
        EventIterableDMW it = getHandlesEventIterable();
        while (it.hasNext()) {
            Event obj = it.next();
            rc.put((CamelCaseName) obj.getObjectName(), obj);
        }
        return (rc);
    }

    public void remHandlesEvent() {
        ((ComponentDMO) core).remHandlesEvent();
    }

    public int getUseSchemaSize() {
        return (((ComponentDMO) core).getUseSchemaSize());
    }

    public boolean getUseSchemaIsEmpty() {
        if (((ComponentDMO) core).getUseSchemaSize() == 0) return (true);
        return (false);
    }

    public boolean getUseSchemaHasValue() {
        if (((ComponentDMO) core).getUseSchemaSize() == 0) return (false);
        return (true);
    }

    public SchemaDefinitionIterableDMW getUseSchemaIterable() {
        DmcAttribute<?> attr = core.get(MvwDMSAG.__useSchema);
        if (attr == null) return (SchemaDefinitionIterableDMW.emptyList);
        return (new SchemaDefinitionIterableDMW(((ComponentDMO) core).getUseSchema()));
    }

    public DmcAttribute<?> addUseSchema(SchemaDefinitionDMW value) {
        DmcAttribute<?> attr = ((ComponentDMO) core).addUseSchema(((SchemaDefinitionDMO) value.getDmcObject()));
        return (attr);
    }

    public void delUseSchema(SchemaDefinitionDMW value) {
        ((ComponentDMO) core).delUseSchema(value.getDMO());
    }

    public ArrayList<SchemaDefinitionDMW> getUseSchemaCopy() {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__useSchema);
        if (attr == null) return (new ArrayList<SchemaDefinitionDMW>());
        ArrayList<SchemaDefinitionDMW> rc = new ArrayList<SchemaDefinitionDMW>(attr.getMVSize());
        SchemaDefinitionIterableDMW it = getUseSchemaIterable();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void remUseSchema() {
        ((ComponentDMO) core).remUseSchema();
    }

    public String getUseBaseClass() {
        return (((ComponentDMO) core).getUseBaseClass());
    }

    public void setUseBaseClass(Object value) throws DmcValueException {
        ((ComponentDMO) core).setUseBaseClass(value);
    }

    public void setUseBaseClass(String value) {
        ((ComponentDMO) core).setUseBaseClass(value);
    }

    public void remUseBaseClass() {
        ((ComponentDMO) core).remUseBaseClass();
    }

    public int getUsesRunContextItemSize() {
        return (((ComponentDMO) core).getUsesRunContextItemSize());
    }

    public boolean getUsesRunContextItemIsEmpty() {
        if (((ComponentDMO) core).getUsesRunContextItemSize() == 0) return (true);
        return (false);
    }

    public boolean getUsesRunContextItemHasValue() {
        if (((ComponentDMO) core).getUsesRunContextItemSize() == 0) return (false);
        return (true);
    }

    public RunContextItemIterableDMW getUsesRunContextItemIterable() {
        DmcAttribute<?> attr = core.get(MvwDMSAG.__usesRunContextItem);
        if (attr == null) return (RunContextItemIterableDMW.emptyList);
        return (new RunContextItemIterableDMW(((ComponentDMO) core).getUsesRunContextItem()));
    }

    public DmcAttribute<?> addUsesRunContextItem(RunContextItem value) {
        DmcAttribute<?> attr = ((ComponentDMO) core).addUsesRunContextItem(((RunContextItemDMO) value.getDmcObject()));
        return (attr);
    }

    public void delUsesRunContextItem(RunContextItem value) {
        ((ComponentDMO) core).delUsesRunContextItem(value.getDMO());
    }

    public TreeSet<RunContextItem> getUsesRunContextItemCopy() {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__usesRunContextItem);
        if (attr == null) return (new TreeSet<RunContextItem>());
        TreeSet<RunContextItem> rc = new TreeSet<RunContextItem>();
        RunContextItemIterableDMW it = getUsesRunContextItemIterable();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void remUsesRunContextItem() {
        ((ComponentDMO) core).remUsesRunContextItem();
    }

    public int getSendsRequestSize() {
        return (((ComponentDMO) core).getSendsRequestSize());
    }

    public boolean getSendsRequestIsEmpty() {
        if (((ComponentDMO) core).getSendsRequestSize() == 0) return (true);
        return (false);
    }

    public boolean getSendsRequestHasValue() {
        if (((ComponentDMO) core).getSendsRequestSize() == 0) return (false);
        return (true);
    }

    public RequestTypeWithOptionsIterableDMW getSendsRequestIterable() {
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsRequest);
        if (attr == null) return (RequestTypeWithOptionsIterableDMW.emptyList);
        return (new RequestTypeWithOptionsIterableDMW(((ComponentDMO) core).getSendsRequest()));
    }

    public void addSendsRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).addSendsRequest(value);
    }

    public void addSendsRequest(RequestTypeWithOptions value) {
        ((ComponentDMO) core).addSendsRequest(value);
    }

    public boolean sendsRequestContains(RequestTypeWithOptions value) {
        return (((ComponentDMO) core).sendsRequestContains(value));
    }

    @SuppressWarnings("unchecked")
    public ArrayList<RequestTypeWithOptions> getSendsRequestCopy() {
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsRequest);
        if (attr == null) return (new ArrayList<RequestTypeWithOptions>());
        ArrayList<RequestTypeWithOptions> rc = new ArrayList<RequestTypeWithOptions>(attr.getMVSize());
        Iterator<RequestTypeWithOptions> it = (Iterator<RequestTypeWithOptions>) attr.getMV();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void delSendsRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).delSendsRequest(value);
    }

    public void delSendsRequest(RequestTypeWithOptions value) {
        ((ComponentDMO) core).delSendsRequest(value);
    }

    public void remSendsRequest() {
        ((ComponentDMO) core).remSendsRequest();
    }

    public String getSubpackage() {
        return (((ComponentDMO) core).getSubpackage());
    }

    public void setSubpackage(Object value) throws DmcValueException {
        ((ComponentDMO) core).setSubpackage(value);
    }

    public void setSubpackage(String value) {
        ((ComponentDMO) core).setSubpackage(value);
    }

    public void remSubpackage() {
        ((ComponentDMO) core).remSubpackage();
    }

    public int getInstantiatesViewSize() {
        return (((ComponentDMO) core).getInstantiatesViewSize());
    }

    public boolean getInstantiatesViewIsEmpty() {
        if (((ComponentDMO) core).getInstantiatesViewSize() == 0) return (true);
        return (false);
    }

    public boolean getInstantiatesViewHasValue() {
        if (((ComponentDMO) core).getInstantiatesViewSize() == 0) return (false);
        return (true);
    }

    public ViewIterableDMW getInstantiatesViewIterable() {
        DmcAttribute<?> attr = core.get(MvwDMSAG.__instantiatesView);
        if (attr == null) return (ViewIterableDMW.emptyList);
        return (new ViewIterableDMW(((ComponentDMO) core).getInstantiatesView()));
    }

    public DmcAttribute<?> addInstantiatesView(View value) {
        DmcAttribute<?> attr = ((ComponentDMO) core).addInstantiatesView(((ViewDMO) value.getDmcObject()));
        return (attr);
    }

    public void delInstantiatesView(View value) {
        ((ComponentDMO) core).delInstantiatesView(value.getDMO());
    }

    public ArrayList<View> getInstantiatesViewCopy() {
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__instantiatesView);
        if (attr == null) return (new ArrayList<View>());
        ArrayList<View> rc = new ArrayList<View>(attr.getMVSize());
        ViewIterableDMW it = getInstantiatesViewIterable();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void remInstantiatesView() {
        ((ComponentDMO) core).remInstantiatesView();
    }

    public CamelCaseName getComponentName() {
        return (((ComponentDMO) core).getComponentName());
    }

    public void setComponentName(Object value) throws DmcValueException {
        ((ComponentDMO) core).setComponentName(value);
    }

    public void setComponentName(CamelCaseName value) {
        ((ComponentDMO) core).setComponentName(value);
    }

    public void remComponentName() {
        ((ComponentDMO) core).remComponentName();
    }
}
