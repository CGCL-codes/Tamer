package org.dmd.dms.generated.types;

import java.io.Serializable;
import org.dmd.dmc.DmcAttributeInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.DmcObjectName;
import org.dmd.dmc.DmcOutputStreamIF;
import org.dmd.dmc.DmcInputStreamIF;
import org.dmd.dmc.types.DmcTypeNamedObjectREF;
import org.dmd.dms.generated.dmo.*;
import org.dmd.dmc.types.StringName;

/**
 * The DmcTypeTypeDefinitionREF class.
 * This code was auto-generated by the createmeta utility and shouldn't be alterred
 * manually.
 * Generated from: org.dmd.dms.meta.MetaGenerator.dumpDmcTypes(MetaGenerator.java:1836)
 */
@SuppressWarnings("serial")
public abstract class DmcTypeTypeDefinitionREF extends DmcTypeNamedObjectREF<TypeDefinitionREF, StringName> implements Serializable {

    /**
     * Default constructor.
     */
    public DmcTypeTypeDefinitionREF() {
    }

    /**
     * Default constructor.
     */
    public DmcTypeTypeDefinitionREF(DmcAttributeInfo ai) {
        super(ai);
    }

    /**
     * Checks that we have a TypeDefinitionREF or TypeDefinitionDMO.
     */
    public TypeDefinitionREF typeCheck(Object value) throws DmcValueException {
        TypeDefinitionREF rc = null;
        if (value instanceof TypeDefinitionREF) rc = (TypeDefinitionREF) value; else if (value instanceof TypeDefinitionDMO) rc = new TypeDefinitionREF((TypeDefinitionDMO) value); else if (value instanceof DmcObjectName) {
            rc = new TypeDefinitionREF();
            rc.setName((DmcObjectName) value);
        } else if (value instanceof String) {
            rc = new TypeDefinitionREF();
            rc.setName(new StringName((String) value));
        } else throw (new DmcValueException("Object of class:" + value.getClass().getName() + " passed where a TypeDefinitionREF/DMO or DmcObjectName expected."));
        return (rc);
    }

    @Override
    protected TypeDefinitionREF getNewHelper() {
        return (new TypeDefinitionREF());
    }

    @Override
    protected StringName getNewName() {
        return (new StringName());
    }

    @Override
    protected String getDMOClassName() {
        return (TypeDefinitionDMO.class.getName());
    }

    @Override
    protected boolean isDMO(Object value) {
        if (value instanceof TypeDefinitionDMO) return (true);
        return (false);
    }

    /**
     * Returns a clone of a value associated with this type.
     */
    @Override
    public TypeDefinitionREF cloneValue(TypeDefinitionREF val) {
        TypeDefinitionREF rc = new TypeDefinitionREF(val);
        return (rc);
    }

    @Override
    public void serializeValue(DmcOutputStreamIF dos, TypeDefinitionREF value) throws Exception {
        value.serializeIt(dos);
    }

    @Override
    public TypeDefinitionREF deserializeValue(DmcInputStreamIF dis) throws Exception {
        TypeDefinitionREF rc = new TypeDefinitionREF();
        rc.deserializeIt(dis);
        return (rc);
    }
}
