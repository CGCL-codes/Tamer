package org.dmd.dmp.server.generated.dmw;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import org.dmd.dmc.*;
import org.dmd.dmc.DmcAttributeInfo;
import org.dmd.dmc.DmcObjectName;
import org.dmd.dmc.types.AttributeID;
import org.dmd.dmc.types.ClassFilter;
import org.dmd.dmc.types.NameContainer;
import org.dmd.dmp.server.extended.GetRequest;
import org.dmd.dmp.server.extended.Request;
import org.dmd.dmp.shared.generated.dmo.DmpDMSAG;
import org.dmd.dmp.shared.generated.dmo.GetRequestDMO;
import org.dmd.dmp.shared.generated.enums.ScopeEnum;
import org.dmd.dms.*;
import org.dmd.dms.generated.dmo.MetaDMSAG;
import org.dmd.dms.generated.dmw.AttributeIDIterableDMW;
import org.dmd.dms.generated.dmw.ClassDefinitionDMW;
import org.dmd.dms.generated.dmw.NameContainerIterableDMW;
import org.dmd.dms.generated.types.ClassDefinitionREF;
import org.dmd.dms.generated.types.DmcTypeModifierMV;

/**
 * The GetRequest is used to retrieve objects.
 * <P>
 * Generated from the dmp schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.dumpWrapper(BaseDMWGeneratorNew.java:365)
 */
public abstract class GetRequestDMW extends Request {

    public GetRequestDMW() {
        super(new GetRequestDMO(), org.dmd.dmp.server.generated.DmpSchemaAG._GetRequest);
    }

    public GetRequestDMW(DmcTypeModifierMV mods) {
        super(new GetRequestDMO(mods), org.dmd.dmp.server.generated.DmpSchemaAG._GetRequest);
    }

    public GetRequest getModificationRecorder() {
        GetRequest rc = new GetRequest();
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return (rc);
    }

    public GetRequestDMW(GetRequestDMO obj) {
        super(obj, org.dmd.dmp.server.generated.DmpSchemaAG._GetRequest);
    }

    public GetRequestDMO getDMO() {
        return ((GetRequestDMO) core);
    }

    protected GetRequestDMW(GetRequestDMO obj, ClassDefinition cd) {
        super(obj, cd);
    }

    public int getTargetsSize() {
        return (((GetRequestDMO) core).getTargetsSize());
    }

    public boolean getTargetsIsEmpty() {
        if (((GetRequestDMO) core).getTargetsSize() == 0) return (true);
        return (false);
    }

    public boolean getTargetsHasValue() {
        if (((GetRequestDMO) core).getTargetsSize() == 0) return (false);
        return (true);
    }

    public NameContainerIterableDMW getTargetsIterable() {
        DmcAttribute<?> attr = core.get(DmpDMSAG.__targets);
        if (attr == null) return (NameContainerIterableDMW.emptyList);
        return (new NameContainerIterableDMW(((GetRequestDMO) core).getTargets()));
    }

    public void addTargets(Object value) throws DmcValueException {
        ((GetRequestDMO) core).addTargets(value);
    }

    public void addTargets(NameContainer value) {
        ((GetRequestDMO) core).addTargets(value);
    }

    public void addTargets(DmcObjectName value) {
        ((GetRequestDMO) core).addTargets(value);
    }

    public boolean targetsContains(NameContainer value) {
        return (((GetRequestDMO) core).targetsContains(value));
    }

    public boolean targetsContains(DmcObjectName value) {
        return (((GetRequestDMO) core).targetsContains(value));
    }

    @SuppressWarnings("unchecked")
    public ArrayList<NameContainer> getTargetsCopy() {
        DmcAttribute<?> attr = core.get(DmpDMSAG.__targets);
        if (attr == null) return (new ArrayList<NameContainer>());
        ArrayList<NameContainer> rc = new ArrayList<NameContainer>(attr.getMVSize());
        Iterator<NameContainer> it = (Iterator<NameContainer>) attr.getMV();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void delTargets(Object value) throws DmcValueException {
        ((GetRequestDMO) core).delTargets(value);
    }

    public void delTargets(NameContainer value) {
        ((GetRequestDMO) core).delTargets(value);
    }

    public void remTargets() {
        ((GetRequestDMO) core).remTargets();
    }

    public String getFilter() {
        return (((GetRequestDMO) core).getFilter());
    }

    public void setFilter(Object value) throws DmcValueException {
        ((GetRequestDMO) core).setFilter(value);
    }

    public void setFilter(String value) {
        ((GetRequestDMO) core).setFilter(value);
    }

    public void remFilter() {
        ((GetRequestDMO) core).remFilter();
    }

    public ClassDefinitionDMW getFilterByClass() {
        ClassDefinitionREF ref = ((GetRequestDMO) core).getFilterByClass();
        if (ref == null) return (null);
        if (ref.getObject() == null) return (null);
        return ((ClassDefinitionDMW) ref.getObject().getContainer());
    }

    public void setFilterByClass(ClassDefinitionDMW value) {
        ((GetRequestDMO) core).setFilterByClass(value.getDMO());
    }

    public void remFilterByClass() {
        ((GetRequestDMO) core).remFilterByClass();
    }

    public Integer getBlockingFactor() {
        return (((GetRequestDMO) core).getBlockingFactor());
    }

    public void setBlockingFactor(Object value) throws DmcValueException {
        ((GetRequestDMO) core).setBlockingFactor(value);
    }

    public void setBlockingFactor(Integer value) {
        ((GetRequestDMO) core).setBlockingFactor(value);
    }

    public void remBlockingFactor() {
        ((GetRequestDMO) core).remBlockingFactor();
    }

    public Boolean isRegisterForEvents() {
        return (((GetRequestDMO) core).isRegisterForEvents());
    }

    public void setRegisterForEvents(Object value) throws DmcValueException {
        ((GetRequestDMO) core).setRegisterForEvents(value);
    }

    public void setRegisterForEvents(Boolean value) {
        ((GetRequestDMO) core).setRegisterForEvents(value);
    }

    public void remRegisterForEvents() {
        ((GetRequestDMO) core).remRegisterForEvents();
    }

    public int getAttributeSelectorSize() {
        return (((GetRequestDMO) core).getAttributeSelectorSize());
    }

    public boolean getAttributeSelectorIsEmpty() {
        if (((GetRequestDMO) core).getAttributeSelectorSize() == 0) return (true);
        return (false);
    }

    public boolean getAttributeSelectorHasValue() {
        if (((GetRequestDMO) core).getAttributeSelectorSize() == 0) return (false);
        return (true);
    }

    public AttributeIDIterableDMW getAttributeSelectorIterable() {
        DmcAttribute<?> attr = core.get(DmpDMSAG.__attributeSelector);
        if (attr == null) return (AttributeIDIterableDMW.emptyList);
        return (new AttributeIDIterableDMW(((GetRequestDMO) core).getAttributeSelector()));
    }

    public void addAttributeSelector(Object value) throws DmcValueException {
        ((GetRequestDMO) core).addAttributeSelector(value);
    }

    public void addAttributeSelector(AttributeID value) {
        ((GetRequestDMO) core).addAttributeSelector(value);
    }

    public void addAttributeSelector(DmcAttributeInfo value) {
        ((GetRequestDMO) core).addAttributeSelector(value);
    }

    public boolean attributeSelectorContains(AttributeID value) {
        return (((GetRequestDMO) core).attributeSelectorContains(value));
    }

    public boolean attributeSelectorContains(DmcAttributeInfo value) {
        return (((GetRequestDMO) core).attributeSelectorContains(value));
    }

    @SuppressWarnings("unchecked")
    public HashSet<AttributeID> getAttributeSelectorCopy() {
        DmcAttribute<?> attr = core.get(DmpDMSAG.__attributeSelector);
        if (attr == null) return (new HashSet<AttributeID>());
        HashSet<AttributeID> rc = new HashSet<AttributeID>(attr.getMVSize());
        Iterator<AttributeID> it = (Iterator<AttributeID>) attr.getMV();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void delAttributeSelector(Object value) throws DmcValueException {
        ((GetRequestDMO) core).delAttributeSelector(value);
    }

    public void delAttributeSelector(AttributeID value) {
        ((GetRequestDMO) core).delAttributeSelector(value);
    }

    public void remAttributeSelector() {
        ((GetRequestDMO) core).remAttributeSelector();
    }

    public Boolean isCacheResponse() {
        return (((GetRequestDMO) core).isCacheResponse());
    }

    public void setCacheResponse(Object value) throws DmcValueException {
        ((GetRequestDMO) core).setCacheResponse(value);
    }

    public void setCacheResponse(Boolean value) {
        ((GetRequestDMO) core).setCacheResponse(value);
    }

    public void remCacheResponse() {
        ((GetRequestDMO) core).remCacheResponse();
    }

    public String getSlice() {
        return (((GetRequestDMO) core).getSlice());
    }

    public void setSlice(Object value) throws DmcValueException {
        ((GetRequestDMO) core).setSlice(value);
    }

    public void setSlice(String value) {
        ((GetRequestDMO) core).setSlice(value);
    }

    public void remSlice() {
        ((GetRequestDMO) core).remSlice();
    }

    public ClassFilter getClassFilter() {
        return (((GetRequestDMO) core).getClassFilter());
    }

    public void setClassFilter(Object value) throws DmcValueException {
        ((GetRequestDMO) core).setClassFilter(value);
    }

    public void setClassFilter(ClassFilter value) {
        ((GetRequestDMO) core).setClassFilter(value);
    }

    public void remClassFilter() {
        ((GetRequestDMO) core).remClassFilter();
    }

    public ScopeEnum getScope() {
        return (((GetRequestDMO) core).getScope());
    }

    public void setScope(Object value) throws DmcValueException {
        ((GetRequestDMO) core).setScope(value);
    }

    public void setScope(ScopeEnum value) {
        ((GetRequestDMO) core).setScope(value);
    }

    public void remScope() {
        ((GetRequestDMO) core).remScope();
    }
}
