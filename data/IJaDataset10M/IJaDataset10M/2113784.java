package com.opensourceconnections.msjdbcproxy;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class StatementProxy implements Statement {

    protected final ConnectionProxy _connection;

    protected final Statement _statement;

    public StatementProxy(ConnectionProxy connection, Statement statement) {
        _connection = connection;
        _statement = statement;
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        return new ResultSetProxy(this, _statement.executeQuery(sql));
    }

    public int executeUpdate(String sql) throws SQLException {
        return _statement.executeUpdate(sql);
    }

    public void close() throws SQLException {
        _statement.close();
    }

    public int getMaxFieldSize() throws SQLException {
        return _statement.getMaxFieldSize();
    }

    public void setMaxFieldSize(int max) throws SQLException {
        _statement.setMaxFieldSize(max);
    }

    public int getMaxRows() throws SQLException {
        return _statement.getMaxRows();
    }

    public void setMaxRows(int max) throws SQLException {
        _statement.setMaxRows(max);
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
        _statement.setEscapeProcessing(enable);
    }

    public int getQueryTimeout() throws SQLException {
        return _statement.getQueryTimeout();
    }

    public void setQueryTimeout(int seconds) throws SQLException {
        _statement.setQueryTimeout(seconds);
    }

    public void cancel() throws SQLException {
        _statement.cancel();
    }

    public SQLWarning getWarnings() throws SQLException {
        return _statement.getWarnings();
    }

    public void clearWarnings() throws SQLException {
        _statement.clearWarnings();
    }

    public void setCursorName(String name) throws SQLException {
        _statement.setCursorName(name);
    }

    public boolean execute(String sql) throws SQLException {
        return _statement.execute(sql);
    }

    public ResultSet getResultSet() throws SQLException {
        return new ResultSetProxy(this, _statement.getResultSet());
    }

    public int getUpdateCount() throws SQLException {
        return _statement.getUpdateCount();
    }

    public boolean getMoreResults() throws SQLException {
        return _statement.getMoreResults();
    }

    public void setFetchDirection(int direction) throws SQLException {
        _statement.setFetchDirection(direction);
    }

    public int getFetchDirection() throws SQLException {
        return _statement.getFetchDirection();
    }

    public void setFetchSize(int rows) throws SQLException {
        _statement.setFetchSize(rows);
    }

    public int getFetchSize() throws SQLException {
        return _statement.getFetchSize();
    }

    public int getResultSetConcurrency() throws SQLException {
        return _statement.getResultSetConcurrency();
    }

    public int getResultSetType() throws SQLException {
        return _statement.getResultSetType();
    }

    public void addBatch(String sql) throws SQLException {
        _statement.addBatch(sql);
    }

    public void clearBatch() throws SQLException {
        _statement.clearBatch();
    }

    public int[] executeBatch() throws SQLException {
        return _statement.executeBatch();
    }

    public Connection getConnection() throws SQLException {
        return _connection;
    }

    public boolean getMoreResults(int current) throws SQLException {
        return _statement.getMoreResults(current);
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return new ResultSetProxy(this, _statement.getGeneratedKeys());
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return _statement.executeUpdate(sql, autoGeneratedKeys);
    }

    public int executeUpdate(String sql, int columnIndexes[]) throws SQLException {
        return _statement.executeUpdate(sql, columnIndexes);
    }

    public int executeUpdate(String sql, String columnNames[]) throws SQLException {
        return _statement.executeUpdate(sql, columnNames);
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return _statement.execute(sql, autoGeneratedKeys);
    }

    public boolean execute(String sql, int columnIndexes[]) throws SQLException {
        return _statement.execute(sql, columnIndexes);
    }

    public boolean execute(String sql, String columnNames[]) throws SQLException {
        return _statement.execute(sql, columnNames);
    }

    public int getResultSetHoldability() throws SQLException {
        return _statement.getResultSetHoldability();
    }
}
