package userinterface;

import Abstract.MessageEmbedding;
import Abstract.StegoProperties;
import Analysis.HistogramStatisticalSteganalysis;
import image.BmpImage;
import Steganography.LagrangeMethod.LagrangeExtraction;
import Exception.StegoException;
import Steganography.BlakleyScheme.BlakleySchemeEmbedding;
import Steganography.BlakleyScheme.BlakleySchemeExtraction;
import Steganography.BlakleyScheme.BlakleySchemeStegoProperties;
import Steganography.ChinessTheorem.ChinessTheoremEmbedding;
import Steganography.ChinessTheorem.ChinessTheoremExtraction;
import Steganography.LagrangeMethod.LagrangeEmbedding;
import Steganography.LagrangeMethod.LagrangeStegoProperties;
import image.PngImage;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.MemoryImageSource;
import java.io.*;
import java.math.BigInteger;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;

public class Frame extends javax.swing.JFrame {

    /** Creates new form Frame */
    public Frame() {
        initComponents();
        setCenterPosition();
        imageFilename = null;
    }

    private void setCenterPosition() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getPreferredSize();
        this.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jLabelImage = new javax.swing.JLabel();
        jLabelMessage = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jButton0 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpenImage = new javax.swing.JMenuItem();
        jMenuItemSaveImage = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuCode = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemLagrangeWriteCode = new javax.swing.JMenuItem();
        jMenuItemLagrangeReadCode = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemChinessWriteCode = new javax.swing.JMenuItem();
        jMenuItemChinessReadCode = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemBlakleyWriteCode = new javax.swing.JMenuItem();
        jMenuItemBlakleyReadCode = new javax.swing.JMenuItem();
        jMenuAnalysis = new javax.swing.JMenu();
        jMenuItemHist = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jToolBar1.setRollover(true);
        jLabel1.setText("Shift significant bit on: ");
        jToolBar1.add(jLabel1);
        jButton0.setText("0");
        jButton0.setFocusable(false);
        jButton0.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton0.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton0.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton0MousePressed(evt);
            }
        });
        jToolBar1.add(jButton0);
        jButton1.setText("1");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        jToolBar1.add(jButton1);
        jButton2.setText("2");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });
        jToolBar1.add(jButton2);
        jButton3.setText("3");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });
        jToolBar1.add(jButton3);
        jButton4.setText("4");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton4MousePressed(evt);
            }
        });
        jToolBar1.add(jButton4);
        jButton5.setText("5");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton5MousePressed(evt);
            }
        });
        jToolBar1.add(jButton5);
        jButton6.setText("6");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton6MousePressed(evt);
            }
        });
        jToolBar1.add(jButton6);
        jButton7.setText("7");
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton7MousePressed(evt);
            }
        });
        jToolBar1.add(jButton7);
        jMenuFile.setText("File ");
        jMenuItemOpenImage.setText("Open Image...");
        jMenuItemOpenImage.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemOpenImageMousePressed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpenImage);
        jMenuItemSaveImage.setText("Save Image...");
        jMenuItemSaveImage.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemSaveImageMousePressed(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveImage);
        jMenuItemExit.setText("Exit");
        jMenuItemExit.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemExitMousePressed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);
        jMenuBar1.add(jMenuFile);
        jMenuCode.setText("Message");
        jMenu1.setText("Lagrange sharing & LSB");
        jMenuItemLagrangeWriteCode.setText("Write Code...");
        jMenuItemLagrangeWriteCode.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemLagrangeWriteCodeMousePressed(evt);
            }
        });
        jMenu1.add(jMenuItemLagrangeWriteCode);
        jMenuItemLagrangeReadCode.setText("Read Code...");
        jMenuItemLagrangeReadCode.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemLagrangeReadCodeMousePressed(evt);
            }
        });
        jMenu1.add(jMenuItemLagrangeReadCode);
        jMenuCode.add(jMenu1);
        jMenu2.setText("Chiness theorem & LSB");
        jMenuItemChinessWriteCode.setText("Write code...");
        jMenuItemChinessWriteCode.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemChinessWriteCodeMousePressed(evt);
            }
        });
        jMenu2.add(jMenuItemChinessWriteCode);
        jMenuItemChinessReadCode.setText("Read code...");
        jMenuItemChinessReadCode.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemChinessReadCodeMousePressed(evt);
            }
        });
        jMenu2.add(jMenuItemChinessReadCode);
        jMenuCode.add(jMenu2);
        jMenu3.setText("Blakley's scheme & Kutter");
        jMenuItemBlakleyWriteCode.setText("Write code...");
        jMenuItemBlakleyWriteCode.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemBlakleyWriteCodeMousePressed(evt);
            }
        });
        jMenu3.add(jMenuItemBlakleyWriteCode);
        jMenuItemBlakleyReadCode.setText("Read code...");
        jMenuItemBlakleyReadCode.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemBlakleyReadCodeMousePressed(evt);
            }
        });
        jMenu3.add(jMenuItemBlakleyReadCode);
        jMenuCode.add(jMenu3);
        jMenuBar1.add(jMenuCode);
        jMenuAnalysis.setText("Analysis");
        jMenuItemHist.setText("Get Histogramm Data");
        jMenuItemHist.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemHistMousePressed(evt);
            }
        });
        jMenuAnalysis.add(jMenuItemHist);
        jMenuBar1.add(jMenuAnalysis);
        jMenuHelp.setText("Help");
        jMenuItemAbout.setText("About");
        jMenuItemAbout.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemAboutMousePressed(evt);
            }
        });
        jMenuHelp.add(jMenuItemAbout);
        jMenuBar1.add(jMenuHelp);
        setJMenuBar(jMenuBar1);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(jLabelImage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jLabelMessage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addContainerGap(650, Short.MAX_VALUE)).addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(12, 12, 12).addComponent(jLabelImage).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 409, Short.MAX_VALUE).addComponent(jLabelMessage).addContainerGap()));
        pack();
    }

    private void jMenuItemOpenImageMousePressed(java.awt.event.MouseEvent evt) {
        FileDialog fd = new FileDialog(this, "Open Image");
        fd.setVisible(true);
        if (fd.getFile() == null) {
            return;
        }
        imageFilename = fd.getDirectory() + fd.getFile();
        Image img = null;
        try {
            img = ImageIO.read(new File(imageFilename));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (img == null) {
            JOptionPane.showMessageDialog(this, "Selected file isn't correct", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ImageIcon icon = new ImageIcon(img);
        jLabelImage.setIcon(icon);
        TitledBorder border = new TitledBorder(imageFilename);
        jLabelImage.setBorder(border);
        jLabelMessage.setText("");
        if (imageFilename.endsWith(".png")) {
            isPng = true;
        } else {
            isPng = false;
        }
    }

    private void jMenuItemExitMousePressed(java.awt.event.MouseEvent evt) {
        System.exit(0);
    }

    private void jMenuItemSaveImageMousePressed(java.awt.event.MouseEvent evt) {
        if (imageFilename == null) {
            JOptionPane.showMessageDialog(this, "Open image and write code before save", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        SaveDialog sd = new SaveDialog(this, true, isPng);
        sd.setVisible(true);
        if (sd.isCancel) {
            return;
        }
        if ((sd.imageFilename.equals("")) || ((sd.propertiesFilename.equals("")) && !isPng)) {
            JOptionPane.showMessageDialog(this, "Please enter correct data", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String saveImageFilename = sd.imageFilename;
        String propertiesFilename = sd.propertiesFilename;
        try {
            embedding.SaveStegoImage(saveImageFilename, propertiesFilename, sd.isExport);
        } catch (StegoException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        jLabelMessage.setText("");
    }

    private void jMenuItemLagrangeWriteCodeMousePressed(java.awt.event.MouseEvent evt) {
        if (imageFilename == null) {
            JOptionPane.showMessageDialog(this, "Please open image first", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        LagrangeWriteCodeDialog dlg = new LagrangeWriteCodeDialog(this, true);
        dlg.setVisible(true);
        if (dlg.isCancel) {
            return;
        }
        if ((dlg.message == null) || (dlg.shares == 0) || (dlg.threshold == 0) || (dlg.prime.isEmpty())) {
            JOptionPane.showMessageDialog(this, "Please enter correct data", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            embedding = new LagrangeEmbedding();
            LagrangeStegoProperties props = new LagrangeStegoProperties();
            props.prime = new BigInteger(dlg.prime);
            props.sharesCount = dlg.shares;
            props.threshold = dlg.threshold;
            embedding.EmbedMessageToImage(dlg.message, imageFilename, props);
        } catch (StegoException ex) {
            JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(this, "Message was successfully embedded!", "", JOptionPane.PLAIN_MESSAGE);
        jLabelMessage.setText("");
    }

    private void jMenuItemLagrangeReadCodeMousePressed(java.awt.event.MouseEvent evt) {
        if (imageFilename == null) {
            JOptionPane.showMessageDialog(this, "Please open image first", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ReadCodeDialog dlg = new ReadCodeDialog(this, true);
        dlg.setVisible(true);
        if (dlg.isCancel) {
            return;
        }
        if ((dlg.threshold == 0) || (dlg.propertiesFilename == null && !isPng)) {
            JOptionPane.showMessageDialog(this, "Please enter correct data", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String propertiesFilename = dlg.propertiesFilename;
        LagrangeExtraction restoring = new LagrangeExtraction();
        String message;
        try {
            message = restoring.restoreSecret(imageFilename, propertiesFilename, dlg.threshold);
        } catch (StegoException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        jLabelMessage.setText("Secret message is: " + message.toString());
        JOptionPane.showMessageDialog(this, "Secret message is: " + message.toString(), "Restore", JOptionPane.PLAIN_MESSAGE);
    }

    private void jButton0MousePressed(java.awt.event.MouseEvent evt) {
        shiftBitsButtonPressed(0);
    }

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {
        shiftBitsButtonPressed(1);
    }

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {
        shiftBitsButtonPressed(2);
    }

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {
        shiftBitsButtonPressed(3);
    }

    private void jButton4MousePressed(java.awt.event.MouseEvent evt) {
        shiftBitsButtonPressed(4);
    }

    private void jButton5MousePressed(java.awt.event.MouseEvent evt) {
        shiftBitsButtonPressed(5);
    }

    private void jButton6MousePressed(java.awt.event.MouseEvent evt) {
        shiftBitsButtonPressed(6);
    }

    private void jButton7MousePressed(java.awt.event.MouseEvent evt) {
        shiftBitsButtonPressed(7);
    }

    private void jMenuItemAboutMousePressed(java.awt.event.MouseEvent evt) {
        JOptionPane.showMessageDialog(this, about, "About...", JOptionPane.PLAIN_MESSAGE);
    }

    private void jMenuItemChinessWriteCodeMousePressed(java.awt.event.MouseEvent evt) {
        if (imageFilename == null) {
            JOptionPane.showMessageDialog(this, "Please open image first", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ChinessTheoremWriteCodeDialog dlg = new ChinessTheoremWriteCodeDialog(this, true);
        dlg.setVisible(true);
        if (dlg.isCancel) {
            return;
        }
        if ((dlg.message == null) || (dlg.shares == 0) || (dlg.threshold == 0)) {
            JOptionPane.showMessageDialog(this, "Please enter correct data", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            embedding = new ChinessTheoremEmbedding();
            StegoProperties props = new StegoProperties();
            props.sharesCount = dlg.shares;
            props.threshold = dlg.threshold;
            embedding.EmbedMessageToImage(dlg.message, imageFilename, props);
        } catch (StegoException ex) {
            JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(this, "Message was successfully embedded!", "", JOptionPane.PLAIN_MESSAGE);
        jLabelMessage.setText("");
    }

    private void jMenuItemChinessReadCodeMousePressed(java.awt.event.MouseEvent evt) {
        if (imageFilename == null) {
            JOptionPane.showMessageDialog(this, "Please open image first", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ReadCodeDialog dlg = new ReadCodeDialog(this, true);
        dlg.setVisible(true);
        if (dlg.isCancel) {
            return;
        }
        if ((dlg.threshold == 0) || (dlg.propertiesFilename == null && !isPng)) {
            JOptionPane.showMessageDialog(this, "Please enter correct data", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String propertiesFilename = dlg.propertiesFilename;
        ChinessTheoremExtraction restoring = new ChinessTheoremExtraction();
        String message;
        try {
            message = restoring.restoreSecret(imageFilename, propertiesFilename, dlg.threshold);
        } catch (StegoException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        jLabelMessage.setText("Secret message is: " + message.toString());
        JOptionPane.showMessageDialog(this, "Secret message is: " + message.toString(), "Restore", JOptionPane.PLAIN_MESSAGE);
    }

    private void jMenuItemBlakleyWriteCodeMousePressed(java.awt.event.MouseEvent evt) {
        if (imageFilename == null) {
            JOptionPane.showMessageDialog(this, "Please open image first", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        BlakleySchemeWriteCodeDialog dlg = new BlakleySchemeWriteCodeDialog(this, true);
        dlg.setVisible(true);
        if (dlg.isCancel) {
            return;
        }
        if ((dlg.message == null) || (dlg.shares == 0) || (dlg.threshold == 0) || (dlg.energy == 0) || (dlg.sizeCross == 0) || (dlg.repsBit == 0)) {
            JOptionPane.showMessageDialog(this, "Please enter correct data", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            embedding = new BlakleySchemeEmbedding();
            BlakleySchemeStegoProperties props = new BlakleySchemeStegoProperties();
            props.sharesCount = dlg.shares;
            props.threshold = dlg.threshold;
            props.crossSize = dlg.sizeCross;
            props.energyEmbedding = dlg.energy;
            props.repsBit = dlg.repsBit;
            props.IsCrossSizeCh = dlg.IsChangingSizeCross;
            props.IsEnergyCh = dlg.IsChangingEnergy;
            props.IsRepsBitCh = dlg.IsChangingRepsBit;
            embedding.EmbedMessageToImage(dlg.message, imageFilename, props);
        } catch (StegoException ex) {
            JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(this, "Message was successfully embedded!", "", JOptionPane.PLAIN_MESSAGE);
        jLabelMessage.setText("");
    }

    private void jMenuItemBlakleyReadCodeMousePressed(java.awt.event.MouseEvent evt) {
        if (imageFilename == null) {
            JOptionPane.showMessageDialog(this, "Please open image first", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ReadCodeDialog dlg = new ReadCodeDialog(this, true);
        dlg.setVisible(true);
        if (dlg.isCancel) {
            return;
        }
        if ((dlg.propertiesFilename == null && !isPng)) {
            JOptionPane.showMessageDialog(this, "Please enter correct data", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String propertiesFilename = dlg.propertiesFilename;
        BlakleySchemeExtraction restoring = new BlakleySchemeExtraction();
        String message;
        try {
            message = restoring.restoreSecret(imageFilename, propertiesFilename, dlg.threshold);
        } catch (StegoException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        jLabelMessage.setText("Secret message is: " + message.toString());
        JOptionPane.showMessageDialog(this, "Secret message is: " + message.toString(), "Restore", JOptionPane.PLAIN_MESSAGE);
    }

    private void jMenuItemHistMousePressed(java.awt.event.MouseEvent evt) {
        if (imageFilename == null) {
            JOptionPane.showMessageDialog(this, "Please open image first", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        HistSSDialog dlg = new HistSSDialog(this, true, imageFilename);
        dlg.setVisible(true);
        if (dlg.isCancel) {
            return;
        }
        HistogramStatisticalSteganalysis hss = new HistogramStatisticalSteganalysis(imageFilename, dlg.chCount);
        double res = 0;
        try {
            hss.FindEmbedding();
            res = hss.GetOutput();
        } catch (IOException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        HistSSResult dlg1 = new HistSSResult(this, true, res);
        dlg1.setVisible(true);
    }

    private void shiftBitsButtonPressed(int shift) {
        if (imageFilename == null) {
            return;
        }
        image.Image image = null;
        if (imageFilename.endsWith(".bmp")) image = new BmpImage(imageFilename); else if (imageFilename.endsWith(".png")) image = new PngImage(imageFilename); else {
            JOptionPane.showMessageDialog(this, "This file type isn't implemented", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        byte[] rgb = shiftBytes(image.getRGB(), shift);
        jLabelImage.setIcon(createIcon(image, rgb));
    }

    private ImageIcon createIcon(image.Image image, byte[] rgb) {
        Image img = null;
        int height = image.getHeight();
        int width = image.getWidth();
        int data[] = new int[height * width];
        int index = 0;
        for (int j = 0; j < height; j++) {
            for (int i = 0; i < width; i++) {
                data[width * (height - j - 1) + i] = (255 & 0xff) << 24 | (((int) rgb[index + 2] & 0xff) << 16) | (((int) rgb[index + 1] & 0xff) << 8) | (int) rgb[index] & 0xff;
                index += 3;
            }
            index += image.getPad();
        }
        img = createImage(new MemoryImageSource(width, height, data, 0, width));
        return new ImageIcon(img);
    }

    private byte[] shiftBytes(byte[] rgb, int shift) {
        byte[] rgbWithMask = new byte[rgb.length];
        for (int i = 0; i < rgb.length; i++) {
            rgbWithMask[i] = (byte) (rgb[i] << shift);
        }
        return rgbWithMask;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    private MessageEmbedding embedding;

    private String about = "Embedding and extraction secret message from bmp and png images.";

    private String imageFilename = null;

    private boolean isPng = false;

    private javax.swing.JButton jButton0;

    private javax.swing.JButton jButton1;

    private javax.swing.JButton jButton2;

    private javax.swing.JButton jButton3;

    private javax.swing.JButton jButton4;

    private javax.swing.JButton jButton5;

    private javax.swing.JButton jButton6;

    private javax.swing.JButton jButton7;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabelImage;

    private javax.swing.JLabel jLabelMessage;

    private javax.swing.JMenu jMenu1;

    private javax.swing.JMenu jMenu2;

    private javax.swing.JMenu jMenu3;

    private javax.swing.JMenu jMenuAnalysis;

    private javax.swing.JMenuBar jMenuBar1;

    private javax.swing.JMenu jMenuCode;

    private javax.swing.JMenu jMenuFile;

    private javax.swing.JMenu jMenuHelp;

    private javax.swing.JMenuItem jMenuItemAbout;

    private javax.swing.JMenuItem jMenuItemBlakleyReadCode;

    private javax.swing.JMenuItem jMenuItemBlakleyWriteCode;

    private javax.swing.JMenuItem jMenuItemChinessReadCode;

    private javax.swing.JMenuItem jMenuItemChinessWriteCode;

    private javax.swing.JMenuItem jMenuItemExit;

    private javax.swing.JMenuItem jMenuItemHist;

    private javax.swing.JMenuItem jMenuItemLagrangeReadCode;

    private javax.swing.JMenuItem jMenuItemLagrangeWriteCode;

    private javax.swing.JMenuItem jMenuItemOpenImage;

    private javax.swing.JMenuItem jMenuItemSaveImage;

    private javax.swing.JToolBar jToolBar1;
}
