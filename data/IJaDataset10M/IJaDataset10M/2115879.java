package icm.unicore.iademo2.plugins.iademo;

import java.io.*;
import java.awt.*;
import javax.swing.*;
import java.util.logging.*;
import javax.imageio.*;
import java.awt.image.BufferedImage;
import org.unicore.Vsite;
import com.pallas.unicore.extensions.Usite;
import com.pallas.unicore.resourcemanager.ResourceManager;

public class IADemoDialog extends javax.swing.JDialog {

    public static final int JPEG_FORMAT = 1;

    public static final int PNG_FORMAT = 2;

    private ConnectionHandler connection;

    private ImageContent imageContent;

    private ImageData imageData;

    private static Logger log = Logger.getLogger("icm.unicore.iademo2.plugins.iademo");

    private Rectangle dimension;

    private int format;

    float quality;

    /** Creates new form IADemoPanel */
    private IADemoDialog() {
        super(ResourceManager.getCurrentInstance(), false);
        initComponents();
        setJMenuBar(mainMenuBar);
    }

    private boolean init(Usite usite, Vsite vsite) {
        if (!vsite.getType().getDescription().equals("IADemo2")) {
            JOptionPane.showMessageDialog(this, "Wrong type of Vsite (it should be 'IADemo2' type).", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        connection = ConnectionHandler.getConnectionHandler(usite, vsite);
        if (connection == null) return false;
        try {
            imageData = connection.getImageData();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        dimension = new Rectangle();
        applyValues(new java.awt.Rectangle(0, 0, 100, 100), 0.7f);
        getImage();
        return true;
    }

    public static IADemoDialog getInstance(Usite usite, Vsite vsite) {
        IADemoDialog instance = new IADemoDialog();
        if (instance.init(usite, vsite)) return instance;
        instance.setVisible(false);
        instance.dispose();
        return null;
    }

    /** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveImageMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        closeMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        deviceInfoMenuItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        formatButtonGroup = new javax.swing.ButtonGroup();
        bottomPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        detailsPanel = new javax.swing.JPanel();
        xposLabel = new javax.swing.JLabel();
        yposLabel = new javax.swing.JLabel();
        widthLabel = new javax.swing.JLabel();
        heightLabel = new javax.swing.JLabel();
        xposTextField = new javax.swing.JTextField();
        yposTextField = new javax.swing.JTextField();
        widthTextField = new javax.swing.JTextField();
        heightTextField = new javax.swing.JTextField();
        qualityLabel = new javax.swing.JLabel();
        qualityTextField = new javax.swing.JTextField();
        formatPanel = new javax.swing.JPanel();
        pngRadioButton = new javax.swing.JRadioButton();
        jpegRadioButton = new javax.swing.JRadioButton();
        mainScrollPane = new javax.swing.JScrollPane();
        tempPanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        controlPanel = new javax.swing.JPanel();
        leftButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        fileMenu.setText("File");
        saveImageMenuItem.setText("Save Image As");
        saveImageMenuItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveImageMenuItem);
        fileMenu.add(jSeparator1);
        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeMenuItem);
        mainMenuBar.add(fileMenu);
        viewMenu.setText("View");
        deviceInfoMenuItem.setText("Device Info");
        deviceInfoMenuItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deviceInfoMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(deviceInfoMenuItem);
        mainMenuBar.add(viewMenu);
        aboutMenu.setText("About");
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutMenuItem);
        mainMenuBar.add(aboutMenu);
        setTitle("IADemo Plugin");
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(closeButton);
        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);
        mainPanel.setLayout(new java.awt.GridBagLayout());
        detailsPanel.setLayout(new java.awt.GridBagLayout());
        xposLabel.setForeground(new java.awt.Color(0, 97, 191));
        xposLabel.setText("X Pos:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 7);
        detailsPanel.add(xposLabel, gridBagConstraints);
        yposLabel.setForeground(new java.awt.Color(0, 97, 191));
        yposLabel.setText("Y Pos:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 7);
        detailsPanel.add(yposLabel, gridBagConstraints);
        widthLabel.setForeground(new java.awt.Color(0, 97, 191));
        widthLabel.setText("Width:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 7);
        detailsPanel.add(widthLabel, gridBagConstraints);
        heightLabel.setForeground(new java.awt.Color(0, 97, 191));
        heightLabel.setText("Height:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 7);
        detailsPanel.add(heightLabel, gridBagConstraints);
        xposTextField.setColumns(7);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        detailsPanel.add(xposTextField, gridBagConstraints);
        yposTextField.setColumns(7);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        detailsPanel.add(yposTextField, gridBagConstraints);
        widthTextField.setColumns(7);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        detailsPanel.add(widthTextField, gridBagConstraints);
        heightTextField.setColumns(7);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        detailsPanel.add(heightTextField, gridBagConstraints);
        qualityLabel.setForeground(new java.awt.Color(0, 97, 191));
        qualityLabel.setText("Quality:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 7);
        detailsPanel.add(qualityLabel, gridBagConstraints);
        qualityTextField.setColumns(7);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        detailsPanel.add(qualityTextField, gridBagConstraints);
        pngRadioButton.setForeground(new java.awt.Color(0, 97, 191));
        pngRadioButton.setText("PNG");
        formatButtonGroup.add(pngRadioButton);
        pngRadioButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pngRadioButtonActionPerformed(evt);
            }
        });
        formatPanel.add(pngRadioButton);
        jpegRadioButton.setForeground(new java.awt.Color(0, 97, 191));
        jpegRadioButton.setSelected(true);
        jpegRadioButton.setText("JPEG");
        formatButtonGroup.add(jpegRadioButton);
        jpegRadioButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpegRadioButtonActionPerformed(evt);
            }
        });
        formatPanel.add(jpegRadioButton);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        detailsPanel.add(formatPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        mainPanel.add(detailsPanel, gridBagConstraints);
        mainScrollPane.setBackground(new java.awt.Color(0, 0, 0));
        tempPanel.setLayout(new java.awt.GridBagLayout());
        tempPanel.setBackground(new java.awt.Color(0, 0, 0));
        imageLabel.setBackground(new java.awt.Color(0, 0, 0));
        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tempPanel.add(imageLabel, new java.awt.GridBagConstraints());
        mainScrollPane.setViewportView(tempPanel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(mainScrollPane, gridBagConstraints);
        controlPanel.setLayout(new java.awt.GridBagLayout());
        leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icm/unicore/iademo2/plugins/iademo/images/back.png")));
        leftButton.setToolTipText("Move Left");
        leftButton.setBorder(null);
        leftButton.setContentAreaFilled(false);
        leftButton.setMaximumSize(new java.awt.Dimension(32, 32));
        leftButton.setMinimumSize(new java.awt.Dimension(32, 32));
        leftButton.setPreferredSize(new java.awt.Dimension(32, 32));
        leftButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icm/unicore/iademo2/plugins/iademo/images/back-inv.png")));
        leftButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        controlPanel.add(leftButton, gridBagConstraints);
        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icm/unicore/iademo2/plugins/iademo/images/up.png")));
        upButton.setToolTipText("Move Up");
        upButton.setBorder(null);
        upButton.setContentAreaFilled(false);
        upButton.setMaximumSize(new java.awt.Dimension(32, 32));
        upButton.setMinimumSize(new java.awt.Dimension(32, 32));
        upButton.setPreferredSize(new java.awt.Dimension(32, 32));
        upButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icm/unicore/iademo2/plugins/iademo/images/up-inv.png")));
        upButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        controlPanel.add(upButton, gridBagConstraints);
        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icm/unicore/iademo2/plugins/iademo/images/reload.png")));
        refreshButton.setToolTipText("Refresh");
        refreshButton.setBorder(null);
        refreshButton.setContentAreaFilled(false);
        refreshButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icm/unicore/iademo2/plugins/iademo/images/reload-inv.png")));
        refreshButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        controlPanel.add(refreshButton, gridBagConstraints);
        rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icm/unicore/iademo2/plugins/iademo/images/forward.png")));
        rightButton.setToolTipText("Move Right");
        rightButton.setBorder(null);
        rightButton.setContentAreaFilled(false);
        rightButton.setMaximumSize(new java.awt.Dimension(32, 32));
        rightButton.setMinimumSize(new java.awt.Dimension(32, 32));
        rightButton.setPreferredSize(new java.awt.Dimension(32, 32));
        rightButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icm/unicore/iademo2/plugins/iademo/images/forward-inv.png")));
        rightButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        controlPanel.add(rightButton, gridBagConstraints);
        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icm/unicore/iademo2/plugins/iademo/images/down.png")));
        downButton.setToolTipText("Move Down");
        downButton.setBorder(null);
        downButton.setContentAreaFilled(false);
        downButton.setMaximumSize(new java.awt.Dimension(32, 32));
        downButton.setMinimumSize(new java.awt.Dimension(32, 32));
        downButton.setPreferredSize(new java.awt.Dimension(32, 32));
        downButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icm/unicore/iademo2/plugins/iademo/images/down-inv.png")));
        downButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        controlPanel.add(downButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        mainPanel.add(controlPanel, gridBagConstraints);
        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);
        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(300, 380));
        setLocation((screenSize.width - 300) / 2, (screenSize.height - 380) / 2);
    }

    private void jpegRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        qualityLabel.setEnabled(jpegRadioButton.isSelected());
        qualityTextField.setEnabled(jpegRadioButton.isSelected());
    }

    private void pngRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        qualityLabel.setEnabled(jpegRadioButton.isSelected());
        qualityTextField.setEnabled(jpegRadioButton.isSelected());
    }

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        new AboutDialog(this, true).show();
    }

    private void deviceInfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        new DeviceInfoDialog(this, true, imageData).show();
    }

    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        closeDialog(null);
    }

    private void saveImageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (imageContent.content == null) {
            JOptionPane.showMessageDialog(this, "Nothing to write!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Save Image As");
        SimpleFileFilter pngFileFilter = new SimpleFileFilter("png", "PNG files");
        SimpleFileFilter jpegFileFilter = new SimpleFileFilter("jpeg", "JPEG files");
        chooser.addChoosableFileFilter(pngFileFilter);
        chooser.addChoosableFileFilter(jpegFileFilter);
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            String path = chooser.getSelectedFile().getPath();
            javax.swing.filechooser.FileFilter filter = chooser.getFileFilter();
            int format = JPEG_FORMAT;
            if (filter.equals(pngFileFilter)) format = PNG_FORMAT;
            if (!filter.accept(chooser.getSelectedFile())) path += (format == JPEG_FORMAT) ? ".jpeg" : ".png";
            java.io.File f = new java.io.File(path);
            if ((!f.exists()) || (f.exists() && (JOptionPane.showConfirmDialog(this, f.getPath() + " already exists.\nDo you want to replace it?", "Warning", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION))) {
                try {
                    ByteArrayInputStream tmp = new ByteArrayInputStream(imageContent.content);
                    BufferedImage img = ImageIO.read(tmp);
                    ImageIO.write(img, (format == JPEG_FORMAT) ? "jpeg" : "png", f);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Couldn't write file: " + f.getPath(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {
        Rectangle tmp = (Rectangle) dimension.clone();
        tmp.translate(10, 0);
        if (applyValues(tmp, quality)) getImage();
    }

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {
        Rectangle tmp = new Rectangle();
        float tmpQ = -1;
        try {
            tmp.setLocation(Integer.parseInt(xposTextField.getText()), Integer.parseInt(yposTextField.getText()));
            tmp.setSize(Integer.parseInt(widthTextField.getText()), Integer.parseInt(heightTextField.getText()));
            tmpQ = Float.parseFloat(qualityTextField.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Wrong image paramteres!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        applyValues(tmp, tmpQ);
        getImage();
    }

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {
        Rectangle tmp = (Rectangle) dimension.clone();
        tmp.translate(0, 10);
        if (applyValues(tmp, quality)) getImage();
    }

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {
        Rectangle tmp = (Rectangle) dimension.clone();
        tmp.translate(-10, 0);
        if (applyValues(tmp, quality)) getImage();
    }

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {
        Rectangle tmp = (Rectangle) dimension.clone();
        tmp.translate(0, -10);
        if (applyValues(tmp, quality)) getImage();
    }

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        closeDialog(null);
    }

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {
        setVisible(false);
        dispose();
        try {
            connection.endSession();
        } catch (IOException e) {
            log.warning("Couldn't end session gracefully");
        }
    }

    private void getImage() {
        try {
            if (pngRadioButton.isSelected()) imageContent = connection.getPngImage(dimension); else imageContent = connection.getJpegImage(dimension, quality);
            imageLabel.setIcon(new ImageIcon(imageContent.content));
            dimension = imageContent.dimensions;
            applyValues(dimension, quality);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    private boolean applyValues(Rectangle newDim, float newQ) {
        if (newDim.x < 0) newDim.x = 0; else if (newDim.y < 0) newDim.y = 0;
        if (newDim.width > imageData.dimensions.width) newDim.width = imageData.dimensions.width;
        if (newDim.height > imageData.dimensions.height) newDim.width = imageData.dimensions.height;
        if (newDim.x + newDim.width > imageData.dimensions.width) newDim.x = imageData.dimensions.width - newDim.width;
        if (newDim.y + newDim.height > imageData.dimensions.height) newDim.y = imageData.dimensions.height - newDim.height;
        if (newQ > 1.0f) newQ = 1.0f; else if (newQ < 0.0f) newQ = 0.0f;
        boolean result = false;
        if (newQ != quality || !(newDim.equals(dimension))) result = true;
        quality = newQ;
        dimension = newDim;
        xposTextField.setText(String.valueOf((int) dimension.x));
        yposTextField.setText(String.valueOf((int) dimension.y));
        widthTextField.setText(String.valueOf((int) dimension.width));
        heightTextField.setText(String.valueOf((int) dimension.height));
        qualityTextField.setText(String.valueOf(quality));
        return result;
    }

    private javax.swing.JScrollPane mainScrollPane;

    private javax.swing.JLabel heightLabel;

    private javax.swing.JTextField qualityTextField;

    private javax.swing.JTextField widthTextField;

    private javax.swing.JRadioButton pngRadioButton;

    private javax.swing.JMenu viewMenu;

    private javax.swing.ButtonGroup formatButtonGroup;

    private javax.swing.JPanel controlPanel;

    private javax.swing.JTextField heightTextField;

    private javax.swing.JMenu fileMenu;

    private javax.swing.JLabel imageLabel;

    private javax.swing.JMenu aboutMenu;

    private javax.swing.JMenuItem deviceInfoMenuItem;

    private javax.swing.JButton upButton;

    private javax.swing.JMenuBar mainMenuBar;

    private javax.swing.JLabel qualityLabel;

    private javax.swing.JButton refreshButton;

    private javax.swing.JPanel mainPanel;

    private javax.swing.JRadioButton jpegRadioButton;

    private javax.swing.JButton rightButton;

    private javax.swing.JPanel detailsPanel;

    private javax.swing.JMenuItem saveImageMenuItem;

    private javax.swing.JPanel tempPanel;

    private javax.swing.JLabel yposLabel;

    private javax.swing.JSeparator jSeparator1;

    private javax.swing.JTextField xposTextField;

    private javax.swing.JButton downButton;

    private javax.swing.JLabel widthLabel;

    private javax.swing.JTextField yposTextField;

    private javax.swing.JMenuItem aboutMenuItem;

    private javax.swing.JMenuItem closeMenuItem;

    private javax.swing.JButton leftButton;

    private javax.swing.JButton closeButton;

    private javax.swing.JPanel formatPanel;

    private javax.swing.JLabel xposLabel;

    private javax.swing.JPanel bottomPanel;
}
