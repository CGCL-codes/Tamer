package rpr2_d18.interactionClassRepresentations;

import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.ByteWrapper;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.encoding.DecoderException;
import rpr2_d18.enumeratedDataRepresentations.AcknowledgementProtocolEnum8;
import hla.rti1516e.ParameterHandleValueMap;
import hla.rti1516e.ParameterHandleValueMapFactory;
import hla.rti1516e.RTIambassador;
import hla.rti1516e.ObjectClassHandle;
import hla.rti1516e.InteractionClassHandle;
import hla.rti1516e.ParameterHandle;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.exceptions.FederateNotExecutionMember;
import hla.rti1516e.exceptions.InvalidInteractionClassHandle;
import hla.rti1516e.exceptions.NameNotFound;
import hla.rti1516e.exceptions.NotConnected;
import hla.rti1516e.exceptions.RTIinternalError;
import java.util.HashMap;
import rpr2_d18.interactionClassRepresentations.AcousticTransient;

/**
 * JAVADOC_COMMENTS
 * name : RemoveEntityR
 * name notes : 15
 * transportation : HLAbestEffort
 * sharing : PublishSubscribe
 * order : Receive
 * semantics : A Simulation Management (SIMAN) interaction, sent from a Simulation Manager to request that a specified entity be removed from the simulation.
 * dimensions : NA
 * @author : auto generated by DRDC FOM Generator
 */
public class RemoveEntityR extends RemoveEntity {

    private AcknowledgementProtocolEnum8 AcknowledgementProtocol;

    /**
   * Constructor
   */
    public RemoveEntityR(RTIambassador rtiAmb) {
        super(rtiAmb);
    }

    /**
   * Constructor
   */
    public RemoveEntityR(RTIambassador rtiAmb, InteractionClassHandle interactionHandle) throws NameNotFound, FederateNotExecutionMember, NotConnected, RTIinternalError, InvalidInteractionClassHandle {
        super(rtiAmb, interactionHandle);
    }

    /**
   * Constructor
   */
    public RemoveEntityR(RTIambassador rtiAmb, String interactionName) throws NameNotFound, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, interactionName);
    }

    /**
   * Constructor
   */
    public RemoveEntityR(RTIambassador rtiAmb, InteractionClassHandle interactionHandle, String interactionName) {
        super(rtiAmb, interactionHandle, interactionName);
    }

    /**
   * Constructor
   * create Interaction with just the FOM name and string list of parameters
   */
    public RemoveEntityR(RTIambassador rtiAmb, InteractionClassHandle interactionHandle, ParameterHandleValueMap parameters) throws InvalidInteractionClassHandle, NameNotFound, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, interactionHandle, parameters);
    }

    /**
   * Constructor
   * create Interaction with just the FOM name and string list of parameters
   */
    public RemoveEntityR(RTIambassador rtiAmb, String interactionName, ParameterHandleValueMap parameters) throws InvalidInteractionClassHandle, NameNotFound, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, interactionName, parameters);
    }

    /**
   * Constructor
   */
    public RemoveEntityR(RTIambassador rtiAmb, InteractionClassHandle interactionHandle, String interactionName, ParameterHandleValueMap parameters) throws InvalidInteractionClassHandle, NameNotFound, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, interactionHandle, interactionName, parameters);
    }

    /**
   * Decode Parameters
   * Calls the decoder for each possible parameter
   * NOTE: since parameters are now in a map, order within the byte stream is not improtant
   */
    public void decodeParameters(ParameterHandleValueMap parameters) throws NameNotFound, InvalidInteractionClassHandle, DecoderException, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super.decodeParameters(parameters);
        AcknowledgementProtocol.decode(parameters.getValueReference(rtiAmb.getParameterHandle(interactionHandle, "AcknowledgementProtocol")));
    }

    /**
   * Encode Parameters
   * Adds each parameter to the parameter handle / value maop
   */
    public ParameterHandleValueMap encodeParameters() throws NameNotFound, InvalidInteractionClassHandle, FederateNotExecutionMember, NotConnected, RTIinternalError {
        ParameterHandleValueMapFactory parameterHandleValueMapFactory = this.rtiAmb.getParameterHandleValueMapFactory();
        ParameterHandleValueMap parameters = parameterHandleValueMapFactory.create(1);
        super.encodeParameters();
        addParameter("AcknowledgementProtocol", AcknowledgementProtocol.toByteArray());
        return parameters;
    }

    public AcknowledgementProtocolEnum8 getAcknowledgementProtocol() {
        return this.AcknowledgementProtocol;
    }

    public void setAcknowledgementProtocol(AcknowledgementProtocolEnum8 AcknowledgementProtocol) {
        this.AcknowledgementProtocol = AcknowledgementProtocol;
    }
}
