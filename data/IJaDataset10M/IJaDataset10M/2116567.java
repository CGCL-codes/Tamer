package uk.ac.imperial.ma.metric.exercises.calculus.differentiation;

import uk.ac.imperial.ma.metric.exerciseEngine.classic.ExerciseInterface;
import uk.ac.imperial.ma.metric.exerciseEngine.classic.MCBranchingQuestionGenerator;
import uk.ac.imperial.ma.metric.exerciseEngine.classic.QuestionInterface;
import uk.ac.imperial.ma.metric.computerese.classic.ParameterSet;

/**
 * Factorisation exercise.
 * @author Phil Ramsden
 * @author Daniel J. R. May
 * @version 0.1
 */
public class ExDiffStatPts1 implements ExerciseInterface {

    public ExDiffStatPts1() {
    }

    public short getExerciseType() {
        return ExerciseInterface.MULTIPLE_CHOICE_TYPE_1;
    }

    public static final String TITLE = "StatPts1";

    public static final String TOOL_TIP = "Tool tip StatPts1";

    public static final String PLATFORM = "TYPE2";

    private static String[] variables = { "x" };

    private static double[][] variableDomains = { { -1.0, 2.0 } };

    private static double tolerance = 0.00001;

    private static String[][] parameterNames = { { "a" }, { "p" }, { "q" }, { "n" }, { "k" } };

    private static double[] aValues = { -3.0, -2.0, -1.0, 1.0, 2.0, 3.0 };

    private static double[] pValues = { -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0 };

    private static double[] qValues = { 0.0, 1.0, 2.0 };

    private static double[] nValues = { 0.0, 1.0, 2.0 };

    private static String[] questionStrings = { "Find the positions of the stationary points of the curve ", "(Then, sketch the curve, and check your answer using the plotting tool.)" };

    private static String[][] questionExpressions = { { "true", "y = ([(n+1)*(n+2)*a]~)*x^([n+3]~)-([(n+1)*(n+3)*a*(2*p+q) ]~)*x^([n+2]~)+([(n+2)*(n+3)*a*p*(p+q)]~)*x^([n+1]~)+([k]~)" } };

    private static String[][][] answerStrings = { { { "p==0&&q==0", "([0],[k]).", "p==0", "([0],[k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]).", "p+q==0", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([0],[k]).", "p>0&&q==0&&n>=1", "([0],[k]) and ([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]).", "q==0&&n==2", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([0],[k]).", "q==0&&n==1", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([0],[k]).", "q==0", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]).", "p>0&&n==2", "([0],[k]), ([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]).", "p>0&&n==1", "([0],[k]), ([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]).", "p+q<0&&n==2", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]), ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]) and ([0],[k]).", "p+q<0&&n==1", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]), ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]) and ([0],[k]).", "n==2", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]), ([0],[k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]) .", "n==1", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]), ([0],[k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]).", "true", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k])." } }, { { "p==0&&q==0", "no stationary points.", "p==0", "([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]).", "p+q==0", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]).", "p>0&&q==0&&n>=1", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]).", "p>0&&q==0", "([0],[k]) and ([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]).", "q==0&&n>=1", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]).", "q==0", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([0], [k]).", "p>0&&n>=1", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]).", "p>0", "([0],[k]), ([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]).", "p+q<0&&n==2", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]).", "p+q<0&&n==1", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]).", "p+q<0", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]), ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]) and ([0], [k]).", "n==2", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and  ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]) .", "n==1", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k]).", "true", "([p],[a*p^(n+2)*(2*p+(n+3)*q)+k]), ([0],[k]) and ([p+q],[a*(2*p-(n+1)*q)*(p+q)^(n+2)+k])." } }, { { "p==0&&q==0", "([-1],[-(-1)^n*a*(n+1)*(n+2)+k]).", "p==0&&n==1", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and ([0],[k]).", "p==0", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and ([0],[k]).", "p+q==0&&n==1", "([0],[k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "p+q==0", "([0],[k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]) .", "p>0&&q==0&&n==2", "([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]) and ([0],[k]).", "p>0&&q==0&&n==1", "([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]) and ([0],[k]).", "q==0&&n==2", "([0],[k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]) .", "q==0&&n==1", "([0],[k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "q==0", "([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "p>0&&n==2", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]), ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]) and ([0],[k]).", "p>0&&n==1", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) , ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]) and ([0],[k]).", "p+q<0&&n==2", "([0],[k]), ([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "p+q<0&&n==1", "([0],[k]), ([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "2*p+q==0&&n==2", "([0],[k]) and  ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "2*p+q==0&&n==1", "([0],[k]) and  ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "2*p+q==0", " ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "n==2", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]), ([0],[k]) and  ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "n==1", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]), ([0],[k]) and  ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "true", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and  ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k])." } }, { { "p==0&&q==0&&n==1", "([1],[a*(n+1)*(n+2)+k]).", "p==0&&q==0", "([1],[a*(n+1)*(n+2)+k]).", "p==0&&n==1", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]).", "p==0", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]).", "p+q==0&&n==1", "([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "p+q==0", "([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]) .", "p>0&&q==0&&n==2", "([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "p>0&&q==0&&n==1", "([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "p>0&&q==0", "([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]) and ([0],[k]).", "q==0&&n==2", "([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]) .", "q==0&&n==1", "([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "q==0", "([0],[k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "p>0&&n==2", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "p>0&&n==1", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "p>0", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]), ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]) and ([0],[k]).", "p+q<0&&n==2", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "p+q<0&&n==1", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "p+q<0", "([0],[k]), ([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "2*p+q==0&&n==2", " ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "2*p+q==0&&n==1", " ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "2*p+q==0", "([0],[k]) and  ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "n==2", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and  ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "n==1", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]) and  ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k]).", "true", "([-(p+q)],[-a*(2*p*(2*n^2+8*n+7)+q*(2*n^2+7*n+5))*(-p-q)^(n+2)+k]), ([0],[k]) and  ([-p],[-a*(-p)^(n+2)*(2*p*(2*n^2+8*n+7)+q*(2*n^2+9*n+9)) +k])." } } };

    private static String[][] answerExpressions = { {}, {}, {}, {}, {} };

    private static String[][][] analysisStrings = { { { "true", "Our best guess is that you've calculated the derivative," }, { "true", "correctly, but then made a mistake in solving the equation" }, { "p==0&&q==0", "This equation is", "true", "After factorisation, this equation is" }, { "p==0&&q==0", "and it has a root, namely <i>x</i> = 0. ", "p==0", "and its roots are <i>x</i> = 0 <i>and</i> <i>x</i> = [p+q]. You may possibly have cancelled the <i>x</i><sup>2</sup> at this point, but this isn't legitimate since <i>x</i> may be zero, and we must not divide by zero.", "p+q==0", "whose roots are <i>x</i> = [p] <i>and</i> <i>x</i> = 0. You may possibly have cancelled the <i>x</i><sup>2</sup> at this point, but this isn't legitimate since <i>x</i> may be zero, and we must not divide by zero.", "p>0&&q==0&&n>=1", "whose roots are <i>x</i> = 0 <i>and</i> <i>x</i> = [p]. You may possibly have cancelled the <i>x</i> at this point, but this isn't legitimate since <i>x</i> may be zero, and we must not divide by zero.", "q==0&&n>=1", "whose roots are <i>x</i> = [p] <i>and</i> <i>x</i> = 0. You may possibly have cancelled the <i>x</i> at this point, but this isn't legitimate since <i>x</i> may be zero, and we must not divide by zero.", "q==0", "whose sole root is <i>x</i> = [p].", "p>0&&n>=1", "whose roots are <i>x</i> = 0, <i>x</i> = [p] and <i>x</i> = [p+q]. You may possibly have cancelled the <i>x</i> at this point, but this isn't legitimate since <i>x</i> may be zero, and we must not divide by zero.", "p+q<0&&n>=1", "whose roots are <i>x</i> = [p], <i>x</i> = [p+q] and <i>x</i> = 0. You may possibly have cancelled the <i>x</i> at this point, but this isn't legitimate since <i>x</i> may be zero, and we must not divide by zero.", "n>=1", "whose roots are <i>x</i> = [p], <i>x</i> = 0 and <i>x</i> = [p+q]. You may possibly have cancelled the <i>x</i> at this point, but this isn't legitimate since <i>x</i> may be zero, and we must not divide by zero.", "true", "whose only roots are <i>x</i> = [p] and <i>x</i> = [p+q]." } }, { { "true", "Our best guess is that you've calculated the derivative," }, { "true", "correctly, but then made a mistake in solving the equation" }, { "p==0&&q==0", "This equation is", "true", "After factorisation, this equation is" }, { "p==0&&q==0", "and its root is <i>x</i> = 0. ", "p==0", "and its roots are <i>x</i> = 0 and <i>x</i> = [p+q] rather than <i>x</i> = [-p-q] and <i>x</i> = 0.", "p+q==0", "whose roots are <i>x</i> = [p] and <i>x</i> = 0 rather than <i>x</i> = 0 and <i>x</i> = [-p].", "p>0&&q==0&&n>=1", "whose roots are <i>x</i> = 0 and <i>x</i> = [p] rather than <i>x</i> = [-p] and <i>x</i> = 0.", "q==0&&n>=1", "whose roots are <i>x</i> = [p] and <i>x</i> = 0 rather than <i>x</i> = 0 and <i>x</i> = [-p].", "q==0", "whose root is <i>x</i> = [p] rather than <i>x</i> = [-p].", "p>0&&n>=1", "whose roots are <i>x</i> = 0, <i>x</i> = [p] and <i>x</i> = [p+q] rather than <i>x</i> = [-p-q], <i>x</i> = [-p] and <i>x</i> = 0.", "p+q<0&&n>=1", "whose roots are <i>x</i> = [p], <i>x</i> = [p+q] and <i>x</i> = 0 rather than <i>x</i> = 0, <i>x</i> = [-p-q] and <i>x</i> = [-p].", "2*p+q==0&&n>=1", "whose roots are <i>x</i> = [p], <i>x</i> = 0 and <i>x</i> = [-p] rather than just <i>x</i> = [0] and <i>x</i> = [-p].", "2*p+q==0", "whose roots are <i>x</i> = [p] and <i>x</i> = [-p] rather than just <i>x</i> = [-p].", "n>=1", "whose roots are <i>x</i> = [p], <i>x</i> = 0 and <i>x</i> = [p+q] rather than <i>x</i> = [-p-q], <i>x</i> = 0 and <i>x</i> = [-p].", "true", "whose roots are <i>x</i> = [p] and <i>x</i> = [p+q] rather than <i>x</i> = [-p-q] and <i>x</i> = [-p]. " } }, { { "true", "" } } };

    private static String[][][] analysisExpressions = { { { "true", "diff(y,x) = ([(n+1)*(n+2)*(n+3)*a]~)*x^([n+2]~)-([(n+1)*(n+2)*(n+3)*a*(2*p+q) ]~)*x^([n+1]~)+([(n+1)*(n+2)*(n+3)*a*p*(p+q)]~)*x^([n]~)" }, { "true", "diff(y,x) == 0" }, { "p==0&&q==0", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n+2]~)==0", "p==0", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n+1]~)*(x-([p+q]~))==0", "p+q==0", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n+1]~)*(x-([p]~))==0", "q==0", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n]~)*(x-([p])~)^2==0", "true", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n]~)*(x-([p])~)(x-([p+q]~))==0" } }, { { "true", "diff(y,x) = ([(n+1)*(n+2)*(n+3)*a]~)*x^([n+2]~)-([(n+1)*(n+2)*(n+3)*a*(2*p+q) ]~)*x^([n+1]~)+([(n+1)*(n+2)*(n+3)*a*p*(p+q)]~)*x^([n]~)" }, { "true", "diff(y,x) == 0" }, { "p==0&&q==0", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n+2]~)==0", "p==0", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n+1]~)*(x-([p+q]~))==0", "p+q==0", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n+1]~)*(x-([p]~))==0", "q==0", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n]~)*(x-([p])~)^2==0", "true", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n]~)*(x-([p])~)(x-([p+q]~))==0" } }, {} };

    private static String[][] workingStrings = { { "true", "The stationary points are located at the roots of the equation" }, { "true", "The equation of the curve is" }, { "true", "The derivative is given by" }, { "p==0&&q==0", "and the equation we have to solve is therefore", "true", "and, after appropriate simplification, the equation we have to solve is therefore" }, { "true", "which further simplifies to" }, { "p==0&&q==0", "The sole root of this equation is <i>x</i> = 0, which corresponds to <i>y</i> = [k]. ", "p==0", "The roots of this equation are <i>x</i> = 0 and <i>x</i> = [p+q], corresponding to <i>y</i> = [k] and <i>y</i> = [a*(2*p-(n+1)*q)*(p+q)^(n+2)+k] respectively. ", "p+q==0", "The roots of this equation are <i>x</i> = [p] and <i>x</i> = 0, corresponding to <i>y</i> = [a*p^(n+2)*(2*p+(n+3)*q)+k] and <i>y</i> = [k] respectively. ", "p>0&&q==0&&n>=1", "The roots of this equation are <i>x</i> = 0 and <i>x</i> = [p], corresponding to <i>y</i> = [k] and <i>y</i> = [a*p^(n+2)*(2*p+(n+3)*q)+k] respectively. ", "q==0&&n>=1", "The roots of this equation are <i>x</i> = [p] and <i>x</i> = 0, corresponding to <i>y</i> = [a*p^(n+2)*(2*p+(n+3)*q)+k] and <i>y</i> = [k] respectively. ", "q==0", "The sole root of this equation is <i>x</i> = [p], corresponding to <i>y</i> = [a*p^(n+2)*(2*p+(n+3)*q)+k]. ", "p>0&&n>=1", "The roots of this equation are <i>x</i> = 0, <i>x</i> = [p] and <i>x</i> = [p+q], corresponding to <i>y</i> = [k], <i>y</i> = [a*p^(n+2)*(2*p+(n+3)*q)+k] and <i>y</i> = [a*(2*p-(n+1)*q)*(p+q)^(n+2)+k] respectively.", "p+q<0&&n>=1", "The roots of this equation are <i>x</i> = [p], <i>x</i> = [p+q] and <i>x</i> = 0, corresponding to <i>y</i> = [a*p^(n+2)*(2*p+(n+3)*q)+k], <i>y</i> = [a*(2*p-(n+1)*q)*(p+q)^(n+2)+k] and <i>y</i> = [k] respectively.", "n>=1", "The roots of this equation are <i>x</i> = [p], <i>x</i> = 0 and <i>x</i> = [p+q], corresponding to <i>y</i> = [a*p^(n+2)*(2*p+(n+3)*q)+k], <i>y</i> = [k] and <i>y</i> = [a*(2*p-(n+1)*q)*(p+q)^(n+2)+k] respectively.", "n==0", "The roots of this equation are <i>x</i> = [p] and <i>x</i> = [p+q], corresponding to <i>y</i> = [a*p^(n+2)*(2*p+(n+3)*q)+k] and <i>y</i> = [a*(2*p-(n+1)*q)*(p+q)^(n+2)+k] respectively." } };

    private static String[][] workingExpressions = { { "true", "diff(y,x) = 0" }, { "true", "y = ([(n+1)*(n+2)*a]~)*x^([n+3]~)-([(n+1)*(n+3)*a*(2*p+q) ]~)*x^([n+2]~)+([(n+2)*(n+3)*a*p*(p+q)]~)*x^([n+1]~)+([k]~)" }, { "true", "diff(y,x) = ([(n+1)*(n+2)*(n+3)*a]~)*x^([n+2]~)-([(n+1)*(n+2)*(n+3)*a*(2*p+q) ]~)*x^([n+1]~)+([(n+1)*(n+2)*(n+3)*a*p*(p+q)]~)*x^([n]~)" }, { "true", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n]~)*(x^2-([2*p+q]~)*x+([p*(p+q)]~))==0", "true", "([(n+1)*(n+2)*(n+3)*a]~)/x^([-n]~)*(x^2-([2*p+q]~)*x+([p*(p+q)]~))==0" }, { "p==0&&q==0", "x^([n+2]~)==0", "p==0", "x^([n+1]~)*(x-([p+q]~))==0", "p+q==0", "x^([n+1]~)*(x-([p]~))==0", "q==0", "x^([n]~)*(x-([p])~)^2==0", "true", "x^([n]~)*(x-([p])~)(x-([p+q]~))==0" } };

    private static String[][] helpStrings = { { "true", "The stationary points are located at the roots of the equation" }, { "true", "The equation of the curve is" }, { "true", "The derivative is given by" }, { "p==0&&q==0", "and the equation we have to solve is therefore", "true", "and, after appropriate simplification, the equation we have to solve is therefore" }, { "true", "" } };

    private static String[][] helpExpressions = { { "true", "diff(y,x) = 0" }, { "true", "y = ([(n+1)*(n+2)*a]~)*x^([n+3]~)-([(n+1)*(n+3)*a*(2*p+q) ]~)*x^([n+2]~)+([(n+2)*(n+3)*a*p*(p+q)]~)*x^([n+1]~)+([k]~)" }, { "true", "diff(y,x) = ([(n+1)*(n+2)*(n+3)*a]~)*x^([n+2]~)-([(n+1)*(n+2)*(n+3)*a*(2*p+q) ]~)*x^([n+1]~)+([(n+1)*(n+2)*(n+3)*a*p*(p+q)]~)*x^([n]~)" }, { "true", "([(n+1)*(n+2)*(n+3)*a]~)*x^([n]~)*(x^2-([2*p+q]~)*x+([p*(p+q)]~))==0", "true", "([(n+1)*(n+2)*(n+3)*a]~)/x^([-n]~)*(x^2-([2*p+q]~)*x+([p*(p+q)]~))==0" } };

    private static MCBranchingQuestionGenerator mcBranchingQuestionGenerator;

    private static ParameterSet parameterSet;

    public QuestionInterface getExercise() {
        parameterSet = new ParameterSet(parameterNames);
        parameterSet.createParameter("a", aValues);
        parameterSet.createParameter("p", pValues);
        parameterSet.createParameter("q", qValues);
        parameterSet.createParameter("n", nValues);
        parameterSet.createParameter("k", -20, 20);
        mcBranchingQuestionGenerator = new MCBranchingQuestionGenerator();
        mcBranchingQuestionGenerator.setParameterSet(parameterSet);
        mcBranchingQuestionGenerator.setQuestions(questionStrings, questionExpressions);
        mcBranchingQuestionGenerator.setAnswers(answerStrings, answerExpressions);
        mcBranchingQuestionGenerator.setAnalysis(analysisStrings, analysisExpressions);
        mcBranchingQuestionGenerator.setWorking(workingStrings, workingExpressions);
        mcBranchingQuestionGenerator.setHelp(helpStrings, helpExpressions);
        mcBranchingQuestionGenerator.setNotes("html/calculus/differentiation/diffsp.html");
        mcBranchingQuestionGenerator.setInstructions("html/help/exercise/type2.html");
        mcBranchingQuestionGenerator.setVariables(variables);
        mcBranchingQuestionGenerator.setVariableDomains(variableDomains);
        mcBranchingQuestionGenerator.setTolerance(tolerance);
        mcBranchingQuestionGenerator.setnQuestions(5);
        return mcBranchingQuestionGenerator;
    }
}
