package com.pcmsolutions.device.EMU.E4.gui.preset;

import com.pcmsolutions.gui.ZDialog;
import com.pcmsolutions.device.EMU.E4.gui.colors.UIColors;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/**
 * User: paulmeehan
 * Date: 22-May-2004
 * Time: 16:08:21
 */
public class CheckedSelectionListDialog extends ZDialog {

    protected Checkable[] checkables;

    private JList itemList;

    private JPanel mainPanel;

    private JButton checkNoneButton;

    private JButton checkAllButton;

    private JButton applyButton;

    private JButton cancelButton;

    {
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * !!! IMPORTANT !!!
     * DO NOT edit this method OR call it in your code!
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(225, 200), null));
        itemList = new JList();
        itemList.setSelectionMode(0);
        scrollPane1.setViewportView(itemList);
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null));
        checkNoneButton = new JButton();
        checkNoneButton.setText("Check none");
        panel1.add(checkNoneButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        checkAllButton = new JButton();
        checkAllButton.setText("Check all");
        panel1.add(checkAllButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        applyButton = new JButton();
        applyButton.setText("Apply");
        panel1.add(applyButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panel1.add(cancelButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
    }

    public interface Checkable {

        void setChecked(boolean s);

        boolean isChecked();
    }

    public Checkable[] getCheckables() {
        if (checkables != null) return (Checkable[]) checkables.clone();
        return null;
    }

    public void setCheckables(Checkable[] checkables) {
        this.checkables = checkables;
        itemList.setListData(checkables);
    }

    boolean applied = false;

    public boolean isApplied() {
        return applied;
    }

    public CheckedSelectionListDialog(Frame owner, Checkable[] items) throws HeadlessException {
        this(owner);
        this.checkables = items;
    }

    public CheckedSelectionListDialog(Frame owner) throws HeadlessException {
        super(owner, true);
        setContentPane(mainPanel);
        setupComponents();
        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        pack();
    }

    void setupComponents() {
        itemList.setCellRenderer(new CheckListCellRenderer());
        itemList.setBackground(UIColors.getDefaultBG());
        if (checkables != null) itemList.setListData(checkables);
        checkNoneButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                for (int i = 0; i < checkables.length; i++) checkables[i].setChecked(false);
                itemList.repaint();
            }
        });
        checkAllButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                for (int i = 0; i < checkables.length; i++) checkables[i].setChecked(true);
                itemList.repaint();
            }
        });
        cancelButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                checkables = null;
                dispose();
            }
        });
        applyButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                applied = true;
                dispose();
            }
        });
        CheckListener cl = new CheckListener();
        itemList.addMouseListener(cl);
        itemList.addKeyListener(cl);
    }

    class CheckListCellRenderer extends JCheckBox implements ListCellRenderer {

        public CheckListCellRenderer() {
            setOpaque(true);
        }

        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            setText(value.toString());
            setBackground(isSelected ? list.getSelectionBackground() : list.getBackground());
            setForeground(isSelected ? list.getSelectionForeground() : list.getForeground());
            Checkable s = (Checkable) value;
            setSelected(s.isChecked());
            setFont(itemList.getFont());
            return this;
        }
    }

    class CheckListener implements MouseListener, KeyListener {

        protected void doCheck() {
            int index = itemList.getSelectedIndex();
            if (index < 0) return;
            Checkable s = (Checkable) itemList.getModel().getElementAt(index);
            s.setChecked(!s.isChecked());
            itemList.repaint();
        }

        public void mouseClicked(MouseEvent e) {
            if (e.getX() < 20) doCheck();
        }

        public void mousePressed(MouseEvent e) {
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }

        public void keyTyped(KeyEvent e) {
        }

        public void keyPressed(KeyEvent e) {
            if (e.getKeyChar() == ' ') doCheck();
        }

        public void keyReleased(KeyEvent e) {
        }
    }
}
