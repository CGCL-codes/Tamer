package org.tzi.ugt.parser;

import java.io.PrintWriter;
import antlr.RecognitionException;
import antlr.TokenStreamException;

/**
 * The Parser constructs the abstract syntax tree. The syntax is defined by the
 * UGT.g ANTLR grammar file. The input of the parser are the tokens generated by
 * the lexer. The Myparser class adds a better error handling to the UGTParser.
 * 
 * @author lschaps
 */
public class MyParser extends UGTParser {

    private int fNest = 0;

    private int fErrorCount = 0;

    private PrintWriter fErr;

    /**
	 * Constructs the Parser.
	 * 
	 * @param inputName
	 *            The name of the input file.
	 * @param lexer
	 *            The lexer for the parser.
	 * @param err
	 *            The output writer for the erroe messages.
	 */
    MyParser(String inputName, MyLexer lexer, PrintWriter err) {
        super(lexer);
        setFilename(inputName);
        fErr = err;
        lexer.setParser(this);
    }

    /**
	 * Returns the number of errors.
	 * 
	 * @return The number of errors.
	 */
    int errorCount() {
        return fErrorCount;
    }

    /**
	 * Increases the error counter by one.
	 */
    void incErrorCount() {
        fErrorCount++;
    }

    public void reportError(RecognitionException ex) {
        fErr.println(getFilename() + ":" + ex.getLine() + ":" + ex.getColumn() + ": " + ex.getMessage());
        incErrorCount();
    }

    public void traceIn(String rname) throws TokenStreamException {
        for (int i = 0; i < fNest; i++) System.out.print(" ");
        super.traceIn(rname);
        fNest++;
    }

    public void traceOut(String rname) throws TokenStreamException {
        fNest--;
        for (int i = 0; i < fNest; i++) System.out.print(" ");
        super.traceOut(rname);
    }
}
