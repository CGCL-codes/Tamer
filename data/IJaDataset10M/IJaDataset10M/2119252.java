package corina.site;

import java.awt.print.Printable;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLReaderFactory;
import corina.Sample;
import corina.core.App;
import corina.ui.Alert;
import corina.ui.I18n;

public class SiteDB {

    public List sites = null;

    private static SiteDB db = null;

    public static SiteDB getSiteDB() {
        if (db == null) {
            db = new SiteDB();
            db.sites = new ArrayList();
            try {
                db.loadDB();
            } catch (IOException ioe) {
                System.out.println("ioe! -- " + ioe);
                ioe.printStackTrace();
                db.sites = null;
            }
        }
        return db;
    }

    public boolean save() {
        System.out.println("Saving Site DB!");
        try {
            saveDB();
            return true;
        } catch (IOException ioe) {
            System.out.println("trying to save db, ioe=" + ioe);
            ioe.printStackTrace();
        }
        return false;
    }

    private static String getDBFilename() {
        return App.prefs.getPref("corina.dir.data") + File.separator + "Site DB";
    }

    private void loadDB() throws IOException {
        System.out.println("reloading database");
        try {
            boolean lock = getLock(getDBFilename());
            if (!lock) {
                throw new IOException("Could not lock file for loading");
            }
            XMLReader xr = XMLReaderFactory.createXMLReader();
            selfUpdating = true;
            SiteDBLoader loader = new SiteDBLoader();
            xr.setContentHandler(loader);
            xr.setErrorHandler(loader);
            modDate = new File(getDBFilename()).lastModified();
            db.startWatcher();
            InputStream is = new FileInputStream(getDBFilename());
            Reader r = new InputStreamReader(is, "UTF8");
            xr.parse(new InputSource(r));
            selfUpdating = false;
            r.close();
            Lock.release(getDBFilename());
        } catch (SAXException se) {
            selfUpdating = false;
            Lock.release(getDBFilename());
            throw new IOException(se.getMessage());
        } catch (IOException ioe) {
            selfUpdating = false;
            Alert.error("Error loading site database", "There was an error while loading the site database.\n" + "Most likely this means your data directory is set improperly.\n" + "Various corina functions will NOT work without a site database.\n\n" + "Error: " + ioe.toString());
            throw ioe;
        }
    }

    private void saveDB() throws IOException {
        boolean lock = getLock(getDBFilename());
        if (!lock) {
            throw new IOException("Could not lock file for saving");
        }
        if (selfUpdating) {
            throw new IOException("SELF UPDATING ALREADY, DURING SAVE??");
        }
        selfUpdating = true;
        File outfile = new File(getDBFilename() + " - Saving");
        OutputStream os = new FileOutputStream(outfile);
        Writer wr = new OutputStreamWriter(os, "UTF8");
        BufferedWriter w = new BufferedWriter(wr);
        try {
            w.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
            w.newLine();
            w.write("<!--");
            w.newLine();
            w.write(" WARNING WARNING WARNING WARNING WARNING WARNING ");
            w.newLine();
            w.newLine();
            w.write("   This file is NOT MANUALLY EDITABLE. Modifying this file in a text editor such as notepad");
            w.newLine();
            w.write("   will destroy the internationalized text contained within.");
            w.newLine();
            w.write("   DO NOT EDIT UNLESS YOU ARE COMPLETELY SURE YOU KNOW WHAT YOU ARE DOING");
            w.newLine();
            w.newLine();
            w.write(" WARNING WARNING WARNING WARNING WARNING WARNING ");
            w.newLine();
            w.newLine();
            w.write(" File automatically generated by Corina, the Cornell Tree Ring Analysis system.");
            w.newLine();
            w.write(" " + nameCreator());
            w.newLine();
            w.write("-->");
            w.newLine();
            w.newLine();
            w.write("<sitedb>");
            w.newLine();
            w.newLine();
            for (int i = 0; i < sites.size(); i++) {
                Site s = (Site) sites.get(i);
                w.write(s.toXML());
                w.newLine();
            }
            w.newLine();
            w.write("</sitedb>");
            w.newLine();
        } catch (Exception e) {
            outfile.delete();
            selfUpdating = false;
            Lock.release(getDBFilename());
            if (e instanceof IOException) throw (IOException) e; else e.printStackTrace();
        } finally {
            try {
                w.close();
            } catch (IOException ioe) {
                outfile.delete();
                selfUpdating = false;
                Lock.release(getDBFilename());
                throw ioe;
            }
        }
        File realoutfile = new File(getDBFilename());
        Date now = new Date();
        SimpleDateFormat dFormat = new SimpleDateFormat("yyyyMMdd HHmmss");
        File oldoutfile = new File(getDBFilename() + " - Old " + dFormat.format(now));
        realoutfile.renameTo(oldoutfile);
        realoutfile = new File(getDBFilename());
        if (outfile.renameTo(realoutfile) == false) {
            System.out.println("Couldn't rename siteDB! I should handle this better!");
        }
        modDate = new File(getDBFilename()).lastModified();
        selfUpdating = false;
        Lock.release(getDBFilename());
    }

    private class SiteDBLoader extends DefaultHandler {

        private String state = "";

        private String data = "";

        private Site site = null;

        public void startElement(String uri, String name, String qName, Attributes atts) {
            if (name.equals("site")) site = new Site(); else state = name;
        }

        public void endElement(String uri, String name, String qName) {
            if (name.equals("site")) {
                sites.add(site);
                site = null;
            } else {
                data = data.trim();
                if (data.length() == 0) return;
                if (site == null) return;
                if (state.equals("country")) site.setCountry(data); else if (state.equals("code")) site.setCode(data); else if (state.equals("name")) site.setName(data); else if (state.equals("id")) site.setId(data); else if (state.equals("species")) site.setSpecies(data); else if (state.equals("type")) {
                    site.setTypeString(data);
                } else if (state.equals("filename")) {
                    site.setFilename(data);
                } else if (state.equals("folder")) {
                    site.setFolder(data);
                } else if (state.equals("location")) {
                    site.setLocation(new Location(data));
                } else if (state.equals("comments")) {
                    site.setComments(data);
                } else {
                    return;
                }
                data = "";
            }
        }

        public void characters(char ch[], int start, int length) {
            data += new String(ch, start, length);
        }
    }

    public Site getSite(String code) throws SiteNotFoundException {
        for (int i = 0; i < sites.size(); i++) {
            Site s = (Site) sites.get(i);
            if (s.getCode().equals(code)) return s;
        }
        throw new SiteNotFoundException();
    }

    private String folderToLocalPath(String folder) {
        String s = folder.replace(":", File.separator);
        return App.prefs.getPref("corina.dir.data") + File.separator + s;
    }

    public Site getSite(File folder) throws SiteNotFoundException {
        for (int i = 0; i < sites.size(); i++) {
            Site s = (Site) sites.get(i);
            if (matchesFilename(folder.getPath(), s)) return s;
        }
        throw new SiteNotFoundException();
    }

    public Site getSite(Sample sample) throws SiteNotFoundException {
        String filename = (String) sample.meta.get("filename");
        if (filename == null) throw new IllegalArgumentException();
        if (sites == null) throw new SiteNotFoundException();
        for (int i = 0; i < sites.size(); i++) {
            Site s = (Site) sites.get(i);
            if (s.getFolder() == null) continue;
            if (matchesFilename(filename, s)) return s;
        }
        throw new SiteNotFoundException();
    }

    private boolean matchesFilename(String filename, Site site) {
        String folder = site.getFolder();
        if (folder == null) return false;
        folder = folderToLocalPath(folder).toUpperCase();
        if (folder.endsWith(File.separator)) folder = folder.substring(0, folder.length() - File.separator.length());
        if (folder.lastIndexOf(File.separator) != -1) folder = folder.substring(folder.lastIndexOf(File.separator) + 1, folder.length());
        if (filename.lastIndexOf(File.separator) != -1) filename = filename.substring(filename.lastIndexOf(File.separator) + 1, filename.length());
        return filename.toUpperCase().startsWith(folder);
    }

    public Site getSite(Location l) throws SiteNotFoundException {
        for (int i = 0; i < sites.size(); i++) {
            Site s = (Site) sites.get(i);
            if (s.getLocation() != null && s.getLocation().equals(l)) return s;
        }
        for (int i = 0; i < sites.size(); i++) {
            Site s = (Site) sites.get(i);
            if (s.getLocation() == null) continue;
            if (s.getLocation().isNear(l, 10)) return s;
        }
        throw new SiteNotFoundException();
    }

    public Site[] getSitesAt(Location loc) {
        List output = new ArrayList();
        for (int i = 0; i < sites.size(); i++) {
            Site s = (Site) sites.get(i);
            if (loc.equals(s.getLocation())) output.add(s);
        }
        return (Site[]) output.toArray(new Site[0]);
    }

    public String[] getCountries() {
        int n = sites.size();
        Set countries = new HashSet();
        for (int i = 0; i < n; i++) {
            Site s = (Site) sites.get(i);
            countries.add(s.getCountry());
        }
        return (String[]) countries.toArray(new String[0]);
    }

    public List getSiteNames() {
        List names = new ArrayList();
        for (int i = 0; i < sites.size(); i++) {
            String name = ((Site) sites.get(i)).getName();
            if (name != null && !names.contains(name)) names.add(name);
        }
        return names;
    }

    public List getCountriesInOrder() {
        String cs[] = getCountries();
        int n = cs.length;
        Tuple tuple[] = new Tuple[n];
        for (int i = 0; i < n; i++) tuple[i] = new Tuple(cs[i]);
        for (int i = 0; i < sites.size(); i++) {
            String c = ((Site) sites.get(i)).getCountry();
            for (int j = 0; j < tuple.length; j++) if (tuple[j].name.equals(c)) tuple[j].freq++;
        }
        Arrays.sort(tuple);
        List l = new ArrayList();
        for (int i = 0; i < n; i++) l.add(tuple[i].name);
        return l;
    }

    private static class Tuple implements Comparable {

        String name;

        int freq = 0;

        Tuple(String name) {
            this.name = name;
        }

        public int compareTo(Object o2) {
            Tuple t2 = (Tuple) o2;
            if (freq < t2.freq) return +1; else if (freq > t2.freq) return -1; else return Country.getName(name).compareTo(Country.getName(t2.name));
        }
    }

    public void toHTML(String filename) throws IOException {
        BufferedWriter w = new BufferedWriter(new FileWriter(filename));
        w.close();
    }

    private static boolean selfUpdating = false;

    private long modDate;

    private void startWatcher() {
        Runnable r = new Runnable() {

            public void run() {
                File f = new File(getDBFilename());
                for (; ; ) {
                    if (selfUpdating) {
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ie) {
                        }
                        continue;
                    }
                    long diskModDate = f.lastModified();
                    if (diskModDate > modDate) {
                        db.sites = new ArrayList();
                        try {
                            db.loadDB();
                        } catch (IOException ioe) {
                            System.out.println("ioe -- " + ioe);
                            ioe.printStackTrace();
                        }
                        System.out.println("throwing load events");
                        for (int i = 0; i < db.sites.size(); i++) {
                            Site s = (Site) db.sites.get(i);
                        }
                    }
                    try {
                        Thread.sleep(1 * 1000);
                    } catch (InterruptedException ie) {
                    }
                }
            }
        };
        Thread t = new Thread(r);
        t.start();
    }

    public Printable print() {
        return new SitePrinter(sites);
    }

    private static String nameCreator() {
        Date date = new Date();
        String dateString = DateFormat.getDateInstance().format(date);
        String timeString = DateFormat.getTimeInstance().format(date);
        Object args[] = new Object[] { System.getProperty("user.name", "(unknown user)"), dateString, timeString };
        String byline = MessageFormat.format(I18n.getText("saved_by"), args);
        return byline;
    }

    private boolean getLock(String fullFilename) {
        boolean lock = false;
        while (!lock) {
            lock = Lock.acquire(fullFilename);
            if (!lock) {
                String labels[] = { "Try again", "Delete it", "Cancel" };
                int ret = JOptionPane.showOptionDialog(null, "The site database appears to be locked. If nobody else is Using Corina,\n" + "it's likely that this is a stale lock." + "What should I do?\n", "Can't access site database", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, labels, labels[0]);
                switch(ret) {
                    case 0:
                        continue;
                    case 1:
                        Lock.release(fullFilename);
                        continue;
                    case 2:
                        return false;
                }
            }
        }
        return true;
    }
}
