package budgettracker;

import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import javax.swing.WindowConstants;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author schwier
 */
public class TransferEditor extends javax.swing.JFrame implements TableModelListener {

    private final int name_location = 0;

    private final int value_location = 1;

    private Account a = null;

    private AccountEditor parent = null;

    private DefaultTableModel dtm = null;

    private int source_value = 0;

    private int total_assigned = 0;

    private int total_remaining = 0;

    /** Creates new form TransferEditor */
    public TransferEditor() {
        initComponents();
    }

    public TransferEditor(AccountEditor ae, Account a) {
        initComponents();
        this.parent = ae;
        this.a = a;
        try {
            envelope_table.setDefaultRenderer(Class.forName("java.lang.String"), new TableCellRenderer_ShowNegative());
        } catch (ClassNotFoundException cnfe) {
        }
        ((javax.swing.DefaultCellEditor) envelope_table.getDefaultEditor(new Object().getClass())).setClickCountToStart(1);
        envelope_table.setDefaultEditor(new Object().getClass(), new TableCellEditor_SelectAll());
        dtm = (DefaultTableModel) envelope_table.getModel();
        dtm.addTableModelListener(this);
        Iterator<Envelope> e_iter = a.getEnvelopeIterator();
        while (e_iter.hasNext()) {
            transferSourceList.addItem(e_iter.next().getName());
        }
        error_text.setText("");
        setTitle("Transfer Funds");
        setLocationRelativeTo(parent);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jScrollPane2 = new javax.swing.JScrollPane();
        envelope_table = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        transferValue = new javax.swing.JTextField();
        error_text = new javax.swing.JLabel();
        date_entry = new javax.swing.JTextField();
        account_total1 = new javax.swing.JLabel();
        account_total = new javax.swing.JLabel();
        total_assigned_value = new javax.swing.JLabel();
        total_remaining_value = new javax.swing.JLabel();
        transferSourceList = new javax.swing.JComboBox();
        saveCloseButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveCloseMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        noSaveCloseMenuItem = new javax.swing.JMenuItem();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form");
        jScrollPane2.setName("jScrollPane2");
        envelope_table.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] { "Name", "Amount" }) {

            Class[] types = new Class[] { java.lang.String.class, java.lang.String.class };

            boolean[] canEdit = new boolean[] { false, true };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        envelope_table.setName("envelope_table");
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(budgettracker.BudgetTrackerApp.class).getContext().getResourceMap(TransferEditor.class);
        envelope_table.setSelectionBackground(resourceMap.getColor("envelope_table.selectionBackground"));
        envelope_table.setSelectionForeground(resourceMap.getColor("envelope_table.selectionForeground"));
        envelope_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        envelope_table.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(envelope_table);
        jLabel4.setText(resourceMap.getString("jLabel4.text"));
        jLabel4.setName("jLabel4");
        jLabel1.setText(resourceMap.getString("jLabel1.text"));
        jLabel1.setName("jLabel1");
        jLabel3.setFont(resourceMap.getFont("jLabel3.font"));
        jLabel3.setText(resourceMap.getString("jLabel3.text"));
        jLabel3.setName("jLabel3");
        transferValue.setText(resourceMap.getString("transferValue.text"));
        transferValue.setName("transferValue");
        transferValue.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusGained(java.awt.event.FocusEvent evt) {
                transferValueFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                transferValueFocusLost(evt);
            }
        });
        error_text.setFont(resourceMap.getFont("error_text.font"));
        error_text.setForeground(resourceMap.getColor("error_text.foreground"));
        error_text.setText(resourceMap.getString("error_text.text"));
        error_text.setName("error_text");
        date_entry.setText(resourceMap.getString("date_entry.text"));
        date_entry.setName("date_entry");
        date_entry.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusGained(java.awt.event.FocusEvent evt) {
                date_entryFocusGained(evt);
            }
        });
        account_total1.setFont(resourceMap.getFont("account_total1.font"));
        account_total1.setText(resourceMap.getString("account_total1.text"));
        account_total1.setName("account_total1");
        account_total.setFont(resourceMap.getFont("account_total.font"));
        account_total.setText(resourceMap.getString("account_total.text"));
        account_total.setName("account_total");
        total_assigned_value.setText(resourceMap.getString("total_assigned_value.text"));
        total_assigned_value.setName("total_assigned_value");
        total_remaining_value.setText(resourceMap.getString("total_remaining_value.text"));
        total_remaining_value.setName("total_remaining_value");
        transferSourceList.setName("transferSourceList");
        transferSourceList.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferSourceListActionPerformed(evt);
            }
        });
        saveCloseButton.setText(resourceMap.getString("saveCloseButton.text"));
        saveCloseButton.setName("saveCloseButton");
        saveCloseButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCloseButtonActionPerformed(evt);
            }
        });
        jMenuBar1.setName("jMenuBar1");
        jMenu1.setText(resourceMap.getString("jMenu1.text"));
        jMenu1.setName("jMenu1");
        saveCloseMenuItem.setText(resourceMap.getString("saveCloseMenuItem.text"));
        saveCloseMenuItem.setName("saveCloseMenuItem");
        saveCloseMenuItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCloseMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveCloseMenuItem);
        jSeparator1.setName("jSeparator1");
        jMenu1.add(jSeparator1);
        noSaveCloseMenuItem.setText(resourceMap.getString("noSaveCloseMenuItem.text"));
        noSaveCloseMenuItem.setName("noSaveCloseMenuItem");
        noSaveCloseMenuItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noSaveCloseMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(noSaveCloseMenuItem);
        jMenuBar1.add(jMenu1);
        setJMenuBar(jMenuBar1);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE).addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(saveCloseButton).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(account_total1).addComponent(account_total)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addGap(18, 18, 18).addComponent(total_assigned_value)).addGroup(layout.createSequentialGroup().addGap(18, 18, 18).addComponent(total_remaining_value)))).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel1).addComponent(jLabel3)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(error_text, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE).addComponent(date_entry, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE).addGroup(layout.createSequentialGroup().addComponent(transferSourceList, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addComponent(transferValue, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))))).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel4).addComponent(date_entry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(transferSourceList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel1).addComponent(transferValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel3).addComponent(error_text)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(layout.createSequentialGroup().addComponent(total_assigned_value).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(total_remaining_value)).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(account_total1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(account_total)).addComponent(saveCloseButton))).addContainerGap()));
        pack();
    }

    private void transferValueFocusGained(java.awt.event.FocusEvent evt) {
        transferValue.selectAll();
    }

    private void transferValueFocusLost(java.awt.event.FocusEvent evt) {
        String value = transferValue.getText();
        String new_value = checkValueIsProper(value);
        if (new_value == null) {
            error_text.setText("Invalid paycheck entered");
            return;
        } else {
            error_text.setText("");
            transferValue.setText(new_value);
        }
        source_value = BTMath.stringToCents(value);
        total_assigned = calculateTableAssignments();
        total_remaining = source_value - total_assigned;
        updateDisplayValues();
    }

    private void date_entryFocusGained(java.awt.event.FocusEvent evt) {
        if (date_entry.getText().equals("MM/DD/YYYY")) date_entry.selectAll();
    }

    private void saveCloseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        String date_value = date_entry.getText();
        String selected_envelope = transferSourceList.getSelectedItem().toString();
        Calendar date = Calendar.getInstance();
        Date checked_date = BTMath.convertDateStringToDate(date_value);
        if (checked_date == null) {
            error_text.setText("Invalid date");
            return;
        } else date.setTime(checked_date);
        if (total_remaining < 0) {
            error_text.setText("Transfer exceeded, reduce allocations");
            return;
        }
        if (total_remaining > 0) {
            error_text.setText("Transfer not completely allocated");
            return;
        }
        Envelope source = a.getEnvelopeByName(selected_envelope);
        int source_row = a.getRowByEnvelopeName(selected_envelope);
        for (int row = 0; row < dtm.getRowCount(); row++) {
            String value = dtm.getValueAt(row, value_location).toString();
            String new_value = checkValueIsProper(value);
            if (new_value == null) {
                error_text.setText("Invalid transfer assignments");
                return;
            }
            if (new_value.equals("0.00")) continue;
            Envelope e = a.getEnvelopeByName(dtm.getValueAt(row, name_location).toString());
            int location = a.getRowByEnvelopeName(e.getName());
            e.addTransaction(date, false, "Transfer from " + selected_envelope, new_value);
            source.addTransaction(date, true, "Transfer to " + e.getName(), new_value);
            parent.updateTableInformation(e, false, e.getName());
        }
        parent.updateTableInformation(source, false, source.getName());
        dispose();
    }

    private void noSaveCloseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
    }

    private void transferSourceListActionPerformed(java.awt.event.ActionEvent evt) {
        String source = transferSourceList.getSelectedItem().toString();
        dtm.getDataVector().removeAllElements();
        Iterator<Envelope> e_iter = a.getEnvelopeIterator();
        while (e_iter.hasNext()) {
            Envelope e = e_iter.next();
            if (!e.getName().equals(source)) dtm.addRow(new String[] { e.getName(), "0.00" });
        }
    }

    private void saveCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {
        saveCloseMenuItemActionPerformed(null);
    }

    private void updateDisplayValues() {
        total_assigned_value.setText(BTMath.centsToString(total_assigned));
        total_remaining_value.setText(BTMath.centsToString(total_remaining));
    }

    private int calculateTableAssignments() {
        int rows = dtm.getRowCount();
        int sum = 0;
        for (int i = 0; i < rows; i++) {
            String row_string = (String) dtm.getValueAt(i, value_location);
            int row_value = BTMath.stringToCents(row_string);
            sum += row_value;
        }
        return sum;
    }

    @Override
    public void tableChanged(TableModelEvent tme) {
        int row = tme.getFirstRow();
        String row_string = (String) dtm.getValueAt(row, value_location);
        row_string = checkValueIsProper(row_string);
        if (row_string == null) return;
        total_assigned = calculateTableAssignments();
        total_remaining = source_value - total_assigned;
        updateDisplayValues();
    }

    /**
     * Process the value tag to ensure that it is proper
     * @param value
     * @return
     */
    private String checkValueIsProper(String value) {
        if (value.equals("")) return "0.00";
        if (!value.contains(".")) {
            value += ".00";
        }
        if (value.contains("-")) return null;
        String[] parts = value.split("[.]");
        if (parts[1].length() > 2) {
            parts[1] = parts[1].substring(0, 1);
        }
        try {
            int dollar = Integer.valueOf(parts[0]);
            int cents = Integer.valueOf(parts[1]);
        } catch (NumberFormatException ex) {
            return null;
        }
        value = parts[0] + "." + parts[1];
        return value;
    }

    private javax.swing.JLabel account_total;

    private javax.swing.JLabel account_total1;

    private javax.swing.JTextField date_entry;

    private javax.swing.JTable envelope_table;

    private javax.swing.JLabel error_text;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JLabel jLabel4;

    private javax.swing.JMenu jMenu1;

    private javax.swing.JMenuBar jMenuBar1;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JSeparator jSeparator1;

    private javax.swing.JMenuItem noSaveCloseMenuItem;

    private javax.swing.JButton saveCloseButton;

    private javax.swing.JMenuItem saveCloseMenuItem;

    private javax.swing.JLabel total_assigned_value;

    private javax.swing.JLabel total_remaining_value;

    private javax.swing.JComboBox transferSourceList;

    private javax.swing.JTextField transferValue;
}
