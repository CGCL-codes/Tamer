package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.TreeSet;
import org.dmd.dmc.*;
import org.dmd.dmc.types.CamelCaseName;
import org.dmd.dms.*;
import org.dmd.dms.generated.dmo.MetaDMSAG;
import org.dmd.dms.generated.dmw.StringIterableDMW;
import org.dmd.dms.generated.types.DmcTypeModifierMV;
import org.dmd.mvw.tools.mvwgenerator.extended.Module;
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ModuleDMO;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;

/**
 * The Module is used to define a reusable set of MVW functionality which can
 * be referred to in Application definitions or other Module definitions.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.dumpWrapper(BaseDMWGeneratorNew.java:365)
 */
public abstract class ModuleDMW extends MvwDefinition implements DmcNamedObjectIF {

    public ModuleDMW() {
        super(new ModuleDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Module);
    }

    public ModuleDMW(DmcTypeModifierMV mods) {
        super(new ModuleDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Module);
    }

    public Module getModificationRecorder() {
        Module rc = new Module();
        rc.setModuleName(getModuleName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return (rc);
    }

    public ModuleDMW(ModuleDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Module);
    }

    public Module cloneIt() {
        Module rc = new Module();
        rc.setDmcObject(getDMO().cloneIt());
        return (rc);
    }

    public ModuleDMO getDMO() {
        return ((ModuleDMO) core);
    }

    protected ModuleDMW(ModuleDMO obj, ClassDefinition cd) {
        super(obj, cd);
    }

    public CamelCaseName getObjectName() {
        return (((ModuleDMO) core).getModuleName());
    }

    public int hashCode() {
        return (getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute() {
        return (((ModuleDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj) {
        if (obj instanceof ModuleDMW) {
            return (getObjectName().equals(((ModuleDMW) obj).getObjectName()));
        }
        return (false);
    }

    public int getDependsOnModuleSize() {
        return (((ModuleDMO) core).getDependsOnModuleSize());
    }

    public boolean getDependsOnModuleIsEmpty() {
        if (((ModuleDMO) core).getDependsOnModuleSize() == 0) return (true);
        return (false);
    }

    public boolean getDependsOnModuleHasValue() {
        if (((ModuleDMO) core).getDependsOnModuleSize() == 0) return (false);
        return (true);
    }

    public StringIterableDMW getDependsOnModuleIterable() {
        DmcAttribute<?> attr = core.get(MvwDMSAG.__dependsOnModule);
        if (attr == null) return (StringIterableDMW.emptyList);
        return (new StringIterableDMW(((ModuleDMO) core).getDependsOnModule()));
    }

    public void addDependsOnModule(Object value) throws DmcValueException {
        ((ModuleDMO) core).addDependsOnModule(value);
    }

    public void addDependsOnModule(String value) {
        ((ModuleDMO) core).addDependsOnModule(value);
    }

    public boolean dependsOnModuleContains(String value) {
        return (((ModuleDMO) core).dependsOnModuleContains(value));
    }

    @SuppressWarnings("unchecked")
    public TreeSet<String> getDependsOnModuleCopy() {
        DmcAttribute<?> attr = core.get(MvwDMSAG.__dependsOnModule);
        if (attr == null) return (new TreeSet<String>());
        TreeSet<String> rc = new TreeSet<String>();
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void delDependsOnModule(Object value) throws DmcValueException {
        ((ModuleDMO) core).delDependsOnModule(value);
    }

    public void delDependsOnModule(String value) {
        ((ModuleDMO) core).delDependsOnModule(value);
    }

    public void remDependsOnModule() {
        ((ModuleDMO) core).remDependsOnModule();
    }

    public int getDependsOnSchemaSize() {
        return (((ModuleDMO) core).getDependsOnSchemaSize());
    }

    public boolean getDependsOnSchemaIsEmpty() {
        if (((ModuleDMO) core).getDependsOnSchemaSize() == 0) return (true);
        return (false);
    }

    public boolean getDependsOnSchemaHasValue() {
        if (((ModuleDMO) core).getDependsOnSchemaSize() == 0) return (false);
        return (true);
    }

    public StringIterableDMW getDependsOnSchemaIterable() {
        DmcAttribute<?> attr = core.get(MetaDMSAG.__dependsOnSchema);
        if (attr == null) return (StringIterableDMW.emptyList);
        return (new StringIterableDMW(((ModuleDMO) core).getDependsOnSchema()));
    }

    public void addDependsOnSchema(Object value) throws DmcValueException {
        ((ModuleDMO) core).addDependsOnSchema(value);
    }

    public void addDependsOnSchema(String value) {
        ((ModuleDMO) core).addDependsOnSchema(value);
    }

    public boolean dependsOnSchemaContains(String value) {
        return (((ModuleDMO) core).dependsOnSchemaContains(value));
    }

    @SuppressWarnings("unchecked")
    public ArrayList<String> getDependsOnSchemaCopy() {
        DmcAttribute<?> attr = core.get(MetaDMSAG.__dependsOnSchema);
        if (attr == null) return (new ArrayList<String>());
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void delDependsOnSchema(Object value) throws DmcValueException {
        ((ModuleDMO) core).delDependsOnSchema(value);
    }

    public void delDependsOnSchema(String value) {
        ((ModuleDMO) core).delDependsOnSchema(value);
    }

    public void remDependsOnSchema() {
        ((ModuleDMO) core).remDependsOnSchema();
    }

    public Boolean isUsingStandardSubpackages() {
        return (((ModuleDMO) core).isUsingStandardSubpackages());
    }

    public void setUsingStandardSubpackages(Object value) throws DmcValueException {
        ((ModuleDMO) core).setUsingStandardSubpackages(value);
    }

    public void setUsingStandardSubpackages(Boolean value) {
        ((ModuleDMO) core).setUsingStandardSubpackages(value);
    }

    public void remUsingStandardSubpackages() {
        ((ModuleDMO) core).remUsingStandardSubpackages();
    }

    public CamelCaseName getModuleName() {
        return (((ModuleDMO) core).getModuleName());
    }

    public void setModuleName(Object value) throws DmcValueException {
        ((ModuleDMO) core).setModuleName(value);
    }

    public void setModuleName(CamelCaseName value) {
        ((ModuleDMO) core).setModuleName(value);
    }

    public void remModuleName() {
        ((ModuleDMO) core).remModuleName();
    }

    public String getGenPackage() {
        return (((ModuleDMO) core).getGenPackage());
    }

    public void setGenPackage(Object value) throws DmcValueException {
        ((ModuleDMO) core).setGenPackage(value);
    }

    public void setGenPackage(String value) {
        ((ModuleDMO) core).setGenPackage(value);
    }

    public void remGenPackage() {
        ((ModuleDMO) core).remGenPackage();
    }
}
