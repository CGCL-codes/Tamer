package org.jude.client.editor.swing;

import java.awt.datatransfer.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.*;
import javax.swing.tree.*;
import java.util.*;
import java.io.*;
import org.jude.client.*;
import org.jude.client.db.*;
import org.jude.client.db.kb.*;
import org.jude.client.content.*;
import org.jude.client.editor.*;
import org.jude.client.editor.swing.logical.*;
import org.jude.client.content.autogenerated.*;
import org.jude.client.dataflavor.*;
import org.jude.simplelogic.*;

/**
 * <p> Implements some useful services for Table and Tree content cell renderer.
 * <p> !! This class is VERY VERY inefficient because it creates
 *        a different SwingEditorDecorator for each value and doesn't perform
 *        other important optimizations that are indispensable for a good
 *        CellRenderer implementation. See Java Swing documentation for useful hints
 *        about a efficient implementation.
 *
 * @author Massimo Zaniboni
 * @version $Revision: 1.1 $
 */
public class ContentRendererHelper {

    /** Editor.LITE_VIEWER, Editor.VIEWER and so on.. */
    protected JudeObject mode = null;

    protected transient Map contentToRendererComponent = new HashMap();

    /**
     * @param mode one of the {@link ContentToEditorManager} editor type
     */
    public ContentRendererHelper(JudeObject mode) {
        this.mode = mode;
    }

    /**
     * @return the Component associate to the content
     * @pre content != null
     * @post return.getSwingEditor().getContent() == content
     */
    public RendererComponent getRendererComponent(Content content) {
        RendererComponent result = (RendererComponent) contentToRendererComponent.get(content);
        if (result == null) {
            SwingEditor editor = (SwingEditor) DB.createEditor(content, null, Editor.SWING_EDITOR, mode);
            result = createNewComponent(editor);
            contentToRendererComponent.put(content, result);
        }
        return result;
    }

    /**
     * @return the SwingEditor associate to the content
     */
    public SwingEditor getSwingEditor(Content content) {
        return getRendererComponent(content).getSwingEditor();
    }

    /**
     * @return a component that contains the editor
     * @pre editor != null
     * @post return.getSwingEditor() == editor
     */
    protected RendererComponent createNewComponent(SwingEditor editor) {
        RendererComponent result = new RendererComponent();
        result.setSwingEditor(editor);
        return result;
    }
}
