package com.scatter.model.dataGenerators;

public class CpfGenerator extends DataGenerator<String> {

    private static String[] samples = { "880.373.085-02", "758.208.834-46", "769.229.048-26", "746.942.057-65", "497.074.288-05", "860.730.507-71", "905.280.190-82", "147.773.325-60", "860.996.488-44", "660.669.938-01", "617.426.623-07", "101.373.268-58", "340.549.685-38", "720.401.056-62", "624.502.451-03", "731.058.878-90", "445.129.757-56", "490.069.050-38", "720.124.967-33", "953.096.306-86", "592.999.131-61", "625.934.462-77", "118.091.597-68", "067.311.262-41", "688.918.963-90", "924.090.192-26", "222.665.895-55", "304.953.258-05", "804.243.421-97", "310.713.544-50", "815.522.738-30", "997.582.717-92", "395.569.601-47", "442.965.394-18", "193.632.930-17", "578.280.278-26", "681.139.738-18", "831.921.737-77", "198.388.723-42", "479.128.717-72", "321.855.954-58", "246.435.864-94", "110.978.903-33", "421.287.692-21", "613.833.396-94", "091.896.230-70", "884.845.529-85", "314.221.596-47", "213.303.035-20", "126.966.562-66", "838.383.467-50", "965.319.680-44", "168.353.070-56", "321.595.542-35", "112.622.916-40", "043.282.895-86", "530.294.134-11", "492.007.205-87", "292.629.663-00", "039.446.859-70", "432.941.978-53", "450.673.043-75", "124.874.434-99", "781.631.738-74", "744.450.598-54", "153.751.472-54", "624.291.209-09", "840.242.197-07", "374.914.653-58", "214.040.616-81", "557.565.348-06", "185.971.495-15", "950.145.550-55", "972.125.595-55", "995.874.128-85", "514.911.708-08", "410.815.141-08", "356.758.329-80", "602.860.741-09", "482.573.010-86", "592.490.629-90", "287.674.162-84", "014.398.867-09", "307.446.237-07", "307.013.293-60", "750.899.428-03", "705.234.083-66", "996.457.988-84", "054.889.159-15", "169.348.968-66", "735.178.597-02", "585.171.978-87", "944.413.687-63", "439.568.300-24", "104.170.476-30", "239.885.273-35", "203.407.013-58", "862.991.128-08", "437.503.794-67", "119.469.153-60" };

    public CpfGenerator() {
        setSemanticName("CPF");
    }

    @Override
    public String generateValue() {
        Long randomNumber = Math.round(Math.abs(Math.random()) * 100);
        Long moduleNumber = randomNumber % samples.length;
        int index = moduleNumber.intValue();
        return samples[index];
    }
}
