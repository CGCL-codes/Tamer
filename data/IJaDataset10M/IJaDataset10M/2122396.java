package org.dmd.dmp.shared.generated.dmo;

import java.io.Serializable;
import java.util.*;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcObject;
import org.dmd.dmc.DmcObjectName;
import org.dmd.dmc.DmcSliceInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.types.NameContainer;
import org.dmd.dmp.shared.generated.dmo.RequestDMO;
import org.dmd.dms.generated.dmo.MetaDMSAG;
import org.dmd.dms.generated.types.DmcTypeDmcObjectSV;
import org.dmd.dms.generated.types.DmcTypeIntegerMV;
import org.dmd.dms.generated.types.DmcTypeModifierMV;
import org.dmd.dms.generated.types.DmcTypeNameContainerSV;
import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The CreateRequest allows you to create a new object. If the parentName is
 * specified, the object will be created beneath that parent object.
 * <P>
 * Generated from the dmp schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class CreateRequestDMO extends RequestDMO implements Serializable {

    public static final String constructionClassName = "CreateRequest";

    static Map<Integer, HashMap<String, DmcAttributeValidator>> _AvDmAp;

    static Map<String, DmcObjectValidator> _OvDmAp;

    static {
        _AvDmAp = new HashMap<Integer, HashMap<String, DmcAttributeValidator>>();
        _OvDmAp = new HashMap<String, DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(), MetaVCAG.__AttributeSetValidator);
    }

    public CreateRequestDMO() {
        super("CreateRequest");
    }

    protected CreateRequestDMO(String oc) {
        super(oc);
    }

    protected Map<Integer, HashMap<String, DmcAttributeValidator>> getAttributeValidators() {
        return (_AvDmAp);
    }

    protected Map<String, DmcObjectValidator> getObjectValidators() {
        return (_OvDmAp);
    }

    @Override
    public CreateRequestDMO getNew() {
        CreateRequestDMO rc = new CreateRequestDMO();
        return (rc);
    }

    @Override
    public CreateRequestDMO getSlice(DmcSliceInfo info) {
        CreateRequestDMO rc = new CreateRequestDMO();
        populateSlice(rc, info);
        return (rc);
    }

    public CreateRequestDMO(DmcTypeModifierMV mods) {
        super("CreateRequest");
        modrec(true);
        setModifier(mods);
    }

    public CreateRequestDMO getModificationRecorder() {
        CreateRequestDMO rc = new CreateRequestDMO();
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return (rc);
    }

    public NameContainer getParentName() {
        DmcTypeNameContainerSV attr = (DmcTypeNameContainerSV) get(DmpDMSAG.__parentName);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setParentName(NameContainer value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__parentName);
        if (attr == null) attr = new DmcTypeNameContainerSV(DmpDMSAG.__parentName);
        try {
            attr.set(value);
            set(DmpDMSAG.__parentName, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setParentName(DmcObjectName value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__parentName);
        if (attr == null) attr = new DmcTypeNameContainerSV(DmpDMSAG.__parentName);
        try {
            attr.set(value);
            set(DmpDMSAG.__parentName, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The alternative type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setParentName(Object value) throws DmcValueException {
        DmcTypeNameContainerSV attr = (DmcTypeNameContainerSV) get(DmpDMSAG.__parentName);
        if (attr == null) attr = new DmcTypeNameContainerSV(DmpDMSAG.__parentName);
        attr.set(value);
        set(DmpDMSAG.__parentName, attr);
    }

    public void remParentName() {
        rem(DmpDMSAG.__parentName);
    }

    /**
     * @return An Iterator of Integer objects.
     */
    @SuppressWarnings("unchecked")
    public Iterator<Integer> getRequestID() {
        DmcTypeIntegerMV attr = (DmcTypeIntegerMV) get(DmpDMSAG.__requestID);
        if (attr == null) return (((List<Integer>) Collections.EMPTY_LIST).iterator());
        return (attr.getMV());
    }

    public Integer getNthRequestID(int i) {
        DmcTypeIntegerMV attr = (DmcTypeIntegerMV) get(DmpDMSAG.__requestID);
        if (attr == null) return (null);
        return (attr.getMVnth(i));
    }

    public DmcAttribute<?> addRequestID(Integer value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__requestID);
        if (attr == null) attr = new DmcTypeIntegerMV(DmpDMSAG.__requestID);
        try {
            setLastValue(attr.add(value));
            add(DmpDMSAG.__requestID, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific add() method shouldn't throw exceptions!", ex));
        }
        return (attr);
    }

    public boolean requestIDContains(Integer value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__requestID);
        if (attr == null) return (false);
        return (attr.contains(value));
    }

    public DmcAttribute<?> addRequestID(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmpDMSAG.__requestID);
        if (attr == null) attr = new DmcTypeIntegerMV(DmpDMSAG.__requestID);
        setLastValue(attr.add(value));
        add(DmpDMSAG.__requestID, attr);
        return (attr);
    }

    public int getRequestIDSize() {
        DmcAttribute<?> attr = get(DmpDMSAG.__requestID);
        if (attr == null) {
            if (DmpDMSAG.__requestID.indexSize == 0) return (0); else return (DmpDMSAG.__requestID.indexSize);
        }
        return (attr.getMVSize());
    }

    public DmcAttribute<?> delRequestID(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmpDMSAG.__requestID);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeIntegerMV(DmpDMSAG.__requestID), value); else attr = del(DmpDMSAG.__requestID, value);
        return (attr);
    }

    public DmcAttribute<?> delRequestID(Integer value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__requestID);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeIntegerMV(DmpDMSAG.__requestID), value); else attr = del(DmpDMSAG.__requestID, value);
        return (attr);
    }

    public void remRequestID() {
        rem(DmpDMSAG.__requestID);
    }

    public DmcObject getNewObject() {
        DmcTypeDmcObjectSV attr = (DmcTypeDmcObjectSV) get(DmpDMSAG.__newObject);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setNewObject(DmcObject value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__newObject);
        if (attr == null) attr = new DmcTypeDmcObjectSV(DmpDMSAG.__newObject);
        try {
            attr.set(value);
            set(DmpDMSAG.__newObject, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setNewObject(Object value) throws DmcValueException {
        DmcTypeDmcObjectSV attr = (DmcTypeDmcObjectSV) get(DmpDMSAG.__newObject);
        if (attr == null) attr = new DmcTypeDmcObjectSV(DmpDMSAG.__newObject);
        attr.set(value);
        set(DmpDMSAG.__newObject, attr);
    }

    public void remNewObject() {
        rem(DmpDMSAG.__newObject);
    }
}
