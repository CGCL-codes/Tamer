package org.campware.dream.om;

import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;
import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Jul 29 08:38:49 CEST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Dcontract
 */
public abstract class BaseDcontract extends BaseObject {

    /** The Peer class */
    private static final DcontractPeer peer = new DcontractPeer();

    /**
         * The value for the dcontract_id field
         */
    private int dcontract_id;

    /**
         * The value for the dcontract_code field
         */
    private String dcontract_code = "AUTO";

    /**
         * The value for the status field
         */
    private int status = 30;

    /**
         * The value for the issued_date field
         */
    private Date issued_date;

    /**
         * The value for the closed_date field
         */
    private Date closed_date;

    /**
         * The value for the distributor_id field
         */
    private int distributor_id = 1000;

    /**
         * The value for the project_id field
         */
    private int project_id = 1000;

    /**
         * The value for the start_date field
         */
    private Date start_date;

    /**
         * The value for the end_date field
         */
    private Date end_date;

    /**
         * The value for the notes field
         */
    private String notes;

    /**
         * The value for the created field
         */
    private Date created;

    /**
         * The value for the modified field
         */
    private Date modified;

    /**
         * The value for the created_by field
         */
    private String created_by;

    /**
         * The value for the modified_by field
         */
    private String modified_by;

    /**
         * Get the DcontractId
         *
         * @return int
         */
    public int getDcontractId() {
        return dcontract_id;
    }

    /**
         * Set the value of DcontractId
         *
         * @param v new value
         */
    public void setDcontractId(int v) throws TorqueException {
        if (this.dcontract_id != v) {
            this.dcontract_id = v;
            setModified(true);
        }
        if (collDcontractItems != null) {
            for (int i = 0; i < collDcontractItems.size(); i++) {
                ((DcontractItem) collDcontractItems.get(i)).setDcontractId(v);
            }
        }
        if (collDorders != null) {
            for (int i = 0; i < collDorders.size(); i++) {
                ((Dorder) collDorders.get(i)).setDcontractId(v);
            }
        }
    }

    /**
         * Get the DcontractCode
         *
         * @return String
         */
    public String getDcontractCode() {
        return dcontract_code;
    }

    /**
         * Set the value of DcontractCode
         *
         * @param v new value
         */
    public void setDcontractCode(String v) {
        if (!ObjectUtils.equals(this.dcontract_code, v)) {
            this.dcontract_code = v;
            setModified(true);
        }
    }

    /**
         * Get the Status
         *
         * @return int
         */
    public int getStatus() {
        return status;
    }

    /**
         * Set the value of Status
         *
         * @param v new value
         */
    public void setStatus(int v) {
        if (this.status != v) {
            this.status = v;
            setModified(true);
        }
    }

    /**
         * Get the IssuedDate
         *
         * @return Date
         */
    public Date getIssuedDate() {
        return issued_date;
    }

    /**
         * Set the value of IssuedDate
         *
         * @param v new value
         */
    public void setIssuedDate(Date v) {
        if (!ObjectUtils.equals(this.issued_date, v)) {
            this.issued_date = v;
            setModified(true);
        }
    }

    /**
         * Get the ClosedDate
         *
         * @return Date
         */
    public Date getClosedDate() {
        return closed_date;
    }

    /**
         * Set the value of ClosedDate
         *
         * @param v new value
         */
    public void setClosedDate(Date v) {
        if (!ObjectUtils.equals(this.closed_date, v)) {
            this.closed_date = v;
            setModified(true);
        }
    }

    /**
         * Get the DistributorId
         *
         * @return int
         */
    public int getDistributorId() {
        return distributor_id;
    }

    /**
         * Set the value of DistributorId
         *
         * @param v new value
         */
    public void setDistributorId(int v) throws TorqueException {
        if (this.distributor_id != v) {
            this.distributor_id = v;
            setModified(true);
        }
        if (aDistributor != null && !(aDistributor.getDistributorId() == v)) {
            aDistributor = null;
        }
    }

    /**
         * Get the ProjectId
         *
         * @return int
         */
    public int getProjectId() {
        return project_id;
    }

    /**
         * Set the value of ProjectId
         *
         * @param v new value
         */
    public void setProjectId(int v) throws TorqueException {
        if (this.project_id != v) {
            this.project_id = v;
            setModified(true);
        }
        if (aProject != null && !(aProject.getProjectId() == v)) {
            aProject = null;
        }
    }

    /**
         * Get the StartDate
         *
         * @return Date
         */
    public Date getStartDate() {
        return start_date;
    }

    /**
         * Set the value of StartDate
         *
         * @param v new value
         */
    public void setStartDate(Date v) {
        if (!ObjectUtils.equals(this.start_date, v)) {
            this.start_date = v;
            setModified(true);
        }
    }

    /**
         * Get the EndDate
         *
         * @return Date
         */
    public Date getEndDate() {
        return end_date;
    }

    /**
         * Set the value of EndDate
         *
         * @param v new value
         */
    public void setEndDate(Date v) {
        if (!ObjectUtils.equals(this.end_date, v)) {
            this.end_date = v;
            setModified(true);
        }
    }

    /**
         * Get the Notes
         *
         * @return String
         */
    public String getNotes() {
        return notes;
    }

    /**
         * Set the value of Notes
         *
         * @param v new value
         */
    public void setNotes(String v) {
        if (!ObjectUtils.equals(this.notes, v)) {
            this.notes = v;
            setModified(true);
        }
    }

    /**
         * Get the Created
         *
         * @return Date
         */
    public Date getCreated() {
        return created;
    }

    /**
         * Set the value of Created
         *
         * @param v new value
         */
    public void setCreated(Date v) {
        if (!ObjectUtils.equals(this.created, v)) {
            this.created = v;
            setModified(true);
        }
    }

    /**
         * Get the Modified
         *
         * @return Date
         */
    public Date getModified() {
        return modified;
    }

    /**
         * Set the value of Modified
         *
         * @param v new value
         */
    public void setModified(Date v) {
        if (!ObjectUtils.equals(this.modified, v)) {
            this.modified = v;
            setModified(true);
        }
    }

    /**
         * Get the CreatedBy
         *
         * @return String
         */
    public String getCreatedBy() {
        return created_by;
    }

    /**
         * Set the value of CreatedBy
         *
         * @param v new value
         */
    public void setCreatedBy(String v) {
        if (!ObjectUtils.equals(this.created_by, v)) {
            this.created_by = v;
            setModified(true);
        }
    }

    /**
         * Get the ModifiedBy
         *
         * @return String
         */
    public String getModifiedBy() {
        return modified_by;
    }

    /**
         * Set the value of ModifiedBy
         *
         * @param v new value
         */
    public void setModifiedBy(String v) {
        if (!ObjectUtils.equals(this.modified_by, v)) {
            this.modified_by = v;
            setModified(true);
        }
    }

    private Distributor aDistributor;

    /**
     * Declares an association between this object and a Distributor object
     *
     * @param v Distributor
     * @throws TorqueException
     */
    public void setDistributor(Distributor v) throws TorqueException {
        if (v == null) {
            setDistributorId(1000);
        } else {
            setDistributorId(v.getDistributorId());
        }
        aDistributor = v;
    }

    /**
     * Get the associated Distributor object
     *
     * @return the associated Distributor object
     * @throws TorqueException
     */
    public Distributor getDistributor() throws TorqueException {
        if (aDistributor == null && (this.distributor_id > 0)) {
            aDistributor = DistributorPeer.retrieveByPK(SimpleKey.keyFor(this.distributor_id));
        }
        return aDistributor;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDistributorKey(ObjectKey key) throws TorqueException {
        setDistributorId(((NumberKey) key).intValue());
    }

    private Project aProject;

    /**
     * Declares an association between this object and a Project object
     *
     * @param v Project
     * @throws TorqueException
     */
    public void setProject(Project v) throws TorqueException {
        if (v == null) {
            setProjectId(1000);
        } else {
            setProjectId(v.getProjectId());
        }
        aProject = v;
    }

    /**
     * Get the associated Project object
     *
     * @return the associated Project object
     * @throws TorqueException
     */
    public Project getProject() throws TorqueException {
        if (aProject == null && (this.project_id > 0)) {
            aProject = ProjectPeer.retrieveByPK(SimpleKey.keyFor(this.project_id));
        }
        return aProject;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectKey(ObjectKey key) throws TorqueException {
        setProjectId(((NumberKey) key).intValue());
    }

    /**
     * Collection to store aggregation of collDcontractItems
     */
    protected List collDcontractItems;

    /**
     * Temporary storage of collDcontractItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDcontractItems() {
        if (collDcontractItems == null) {
            collDcontractItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a DcontractItem object to this object
     * through the DcontractItem foreign key attribute
     *
     * @param l DcontractItem
     * @throws TorqueException
     */
    public void addDcontractItem(DcontractItem l) throws TorqueException {
        getDcontractItems().add(l);
        l.setDcontract((Dcontract) this);
    }

    /**
     * The criteria used to select the current contents of collDcontractItems
     */
    private Criteria lastDcontractItemsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDcontractItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDcontractItems() throws TorqueException {
        if (collDcontractItems == null) {
            collDcontractItems = getDcontractItems(new Criteria(10));
        }
        return collDcontractItems;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Dcontract has previously
     * been saved, it will retrieve related DcontractItems from storage.
     * If this Dcontract is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDcontractItems(Criteria criteria) throws TorqueException {
        if (collDcontractItems == null) {
            if (isNew()) {
                collDcontractItems = new ArrayList();
            } else {
                criteria.add(DcontractItemPeer.DCONTRACT_ID, getDcontractId());
                collDcontractItems = DcontractItemPeer.doSelect(criteria);
            }
        } else {
            if (!isNew()) {
                criteria.add(DcontractItemPeer.DCONTRACT_ID, getDcontractId());
                if (!lastDcontractItemsCriteria.equals(criteria)) {
                    collDcontractItems = DcontractItemPeer.doSelect(criteria);
                }
            }
        }
        lastDcontractItemsCriteria = criteria;
        return collDcontractItems;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDcontractItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDcontractItems(Connection con) throws TorqueException {
        if (collDcontractItems == null) {
            collDcontractItems = getDcontractItems(new Criteria(10), con);
        }
        return collDcontractItems;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Dcontract has previously
     * been saved, it will retrieve related DcontractItems from storage.
     * If this Dcontract is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDcontractItems(Criteria criteria, Connection con) throws TorqueException {
        if (collDcontractItems == null) {
            if (isNew()) {
                collDcontractItems = new ArrayList();
            } else {
                criteria.add(DcontractItemPeer.DCONTRACT_ID, getDcontractId());
                collDcontractItems = DcontractItemPeer.doSelect(criteria, con);
            }
        } else {
            if (!isNew()) {
                criteria.add(DcontractItemPeer.DCONTRACT_ID, getDcontractId());
                if (!lastDcontractItemsCriteria.equals(criteria)) {
                    collDcontractItems = DcontractItemPeer.doSelect(criteria, con);
                }
            }
        }
        lastDcontractItemsCriteria = criteria;
        return collDcontractItems;
    }

    /**
     * Collection to store aggregation of collDorders
     */
    protected List collDorders;

    /**
     * Temporary storage of collDorders to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDorders() {
        if (collDorders == null) {
            collDorders = new ArrayList();
        }
    }

    /**
     * Method called to associate a Dorder object to this object
     * through the Dorder foreign key attribute
     *
     * @param l Dorder
     * @throws TorqueException
     */
    public void addDorder(Dorder l) throws TorqueException {
        getDorders().add(l);
        l.setDcontract((Dcontract) this);
    }

    /**
     * The criteria used to select the current contents of collDorders
     */
    private Criteria lastDordersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDorders(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDorders() throws TorqueException {
        if (collDorders == null) {
            collDorders = getDorders(new Criteria(10));
        }
        return collDorders;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Dcontract has previously
     * been saved, it will retrieve related Dorders from storage.
     * If this Dcontract is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDorders(Criteria criteria) throws TorqueException {
        if (collDorders == null) {
            if (isNew()) {
                collDorders = new ArrayList();
            } else {
                criteria.add(DorderPeer.DCONTRACT_ID, getDcontractId());
                collDorders = DorderPeer.doSelect(criteria);
            }
        } else {
            if (!isNew()) {
                criteria.add(DorderPeer.DCONTRACT_ID, getDcontractId());
                if (!lastDordersCriteria.equals(criteria)) {
                    collDorders = DorderPeer.doSelect(criteria);
                }
            }
        }
        lastDordersCriteria = criteria;
        return collDorders;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDorders(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDorders(Connection con) throws TorqueException {
        if (collDorders == null) {
            collDorders = getDorders(new Criteria(10), con);
        }
        return collDorders;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Dcontract has previously
     * been saved, it will retrieve related Dorders from storage.
     * If this Dcontract is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDorders(Criteria criteria, Connection con) throws TorqueException {
        if (collDorders == null) {
            if (isNew()) {
                collDorders = new ArrayList();
            } else {
                criteria.add(DorderPeer.DCONTRACT_ID, getDcontractId());
                collDorders = DorderPeer.doSelect(criteria, con);
            }
        } else {
            if (!isNew()) {
                criteria.add(DorderPeer.DCONTRACT_ID, getDcontractId());
                if (!lastDordersCriteria.equals(criteria)) {
                    collDorders = DorderPeer.doSelect(criteria, con);
                }
            }
        }
        lastDordersCriteria = criteria;
        return collDorders;
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception {
        save(DcontractPeer.getMapBuilder().getDatabaseMap().getName());
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException {
        Connection con = null;
        try {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        } catch (TorqueException e) {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException {
        if (!alreadyInSave) {
            alreadyInSave = true;
            if (isModified()) {
                if (isNew()) {
                    DcontractPeer.doInsert((Dcontract) this, con);
                    setNew(false);
                } else {
                    DcontractPeer.doUpdate((Dcontract) this, con);
                }
            }
            if (collDcontractItems != null) {
                for (int i = 0; i < collDcontractItems.size(); i++) {
                    ((DcontractItem) collDcontractItems.get(i)).save(con);
                }
            }
            if (collDorders != null) {
                for (int i = 0; i < collDorders.size(); i++) {
                    ((Dorder) collDorders.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }

    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  dcontract_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException {
        setDcontractId(((NumberKey) key).intValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException {
        setDcontractId(Integer.parseInt(key));
    }

    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() {
        return SimpleKey.keyFor(getDcontractId());
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Dcontract copy() throws TorqueException {
        return copyInto(new Dcontract());
    }

    protected Dcontract copyInto(Dcontract copyObj) throws TorqueException {
        copyObj.setDcontractId(dcontract_id);
        copyObj.setDcontractCode(dcontract_code);
        copyObj.setStatus(status);
        copyObj.setIssuedDate(issued_date);
        copyObj.setClosedDate(closed_date);
        copyObj.setDistributorId(distributor_id);
        copyObj.setProjectId(project_id);
        copyObj.setStartDate(start_date);
        copyObj.setEndDate(end_date);
        copyObj.setNotes(notes);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(created_by);
        copyObj.setModifiedBy(modified_by);
        copyObj.setNew(false);
        List v = getDcontractItems();
        for (int i = 0; i < v.size(); i++) {
            DcontractItem obj = (DcontractItem) v.get(i);
            copyObj.addDcontractItem(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
        v = getDorders();
        for (int i = 0; i < v.size(); i++) {
            Dorder obj = (Dorder) v.get(i);
            copyObj.addDorder(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
        copyObj.setNew(true);
        copyObj.setDcontractId(0);
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public DcontractPeer getPeer() {
        return peer;
    }
}
