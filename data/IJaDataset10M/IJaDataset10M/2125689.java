package com.completex.objective.components.persistency.test.postgres.gen;

import com.completex.objective.components.persistency.key.impl.DefaultNaturalKeyFactory;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Clob;
import java.sql.Blob;
import com.completex.objective.components.persistency.*;
import com.completex.objective.components.persistency.key.impl.DefaultNaturalKeyFactory;
import com.completex.objective.components.persistency.test.postgres.gen.ITestSlave;
import java.util.Date;

public class TestSlave extends PersistentObject implements ITestSlave, java.io.Externalizable {

    private static Map registeredMasters;

    private static Object lock = new Object();

    protected Object classLock() {
        return lock;
    }

    protected void instantiateRegisteredMasters() {
        if (registeredMasters == null) {
            synchronized (lock) {
                if (registeredMasters == null) {
                    registeredMasters = new HashMap();
                }
            }
        }
    }

    protected Map registeredMasters() {
        return registeredMasters;
    }

    public static final String TABLE_TEST_SLAVE = "test_slave";

    public TestSlave() {
        super(new Record(table));
    }

    public TestSlave(Long testSlaveId, Long testMasterId) {
        this();
        setTestSlaveId(testSlaveId);
        setTestMasterId(testMasterId);
    }

    public static final String COL_TEST_SLAVE_ID = "test_slave_id";

    public static final String TCOL_TEST_SLAVE_ID = "test_slave.test_slave_id";

    public static final int ICOL_TEST_SLAVE_ID = 0;

    public static final String COL_TEST_MASTER_ID = "test_master_id";

    public static final String TCOL_TEST_MASTER_ID = "test_slave.test_master_id";

    public static final int ICOL_TEST_MASTER_ID = 1;

    public static final String COL_TEST_MASTER2_ID = "test_master2_id";

    public static final String TCOL_TEST_MASTER2_ID = "test_slave.test_master2_id";

    public static final int ICOL_TEST_MASTER2_ID = 2;

    public static final String COL_NAME = "name";

    public static final String TCOL_NAME = "test_slave.name";

    public static final int ICOL_NAME = 3;

    public static final String COL_CREATION_DATE = "creation_date";

    public static final String TCOL_CREATION_DATE = "test_slave.creation_date";

    public static final int ICOL_CREATION_DATE = 4;

    public static final String COL_LAST_UPDATED = "last_updated";

    public static final String TCOL_LAST_UPDATED = "test_slave.last_updated";

    public static final int ICOL_LAST_UPDATED = 5;

    public static final String COL_COL_CHAR = "col_char";

    public static final String TCOL_COL_CHAR = "test_slave.col_char";

    public static final int ICOL_COL_CHAR = 6;

    private static final MetaTable table = new MetaTable("test_slave", "test_slave", 7, 2);

    static {
        table.addToForeignKey("test_master2", new ForeignKeyEntry("test_master_id", "test_master2_id"));
        table.addToForeignKey("test_master", new ForeignKeyEntry("test_master_id", "test_master_id"));
        final MetaColumn metaTestSlaveId = new MetaColumn(ICOL_TEST_SLAVE_ID, "test_slave_id", "test_slave_id", table);
        metaTestSlaveId.setPrimaryKey(true);
        metaTestSlaveId.setRequired(true);
        metaTestSlaveId.setOptimisticLock(false);
        metaTestSlaveId.setType(ColumnType.LONG);
        metaTestSlaveId.setColumnSize(10);
        metaTestSlaveId.setRemarks("");
        metaTestSlaveId.setDecimalDigits(0);
        metaTestSlaveId.setAutoGenerated(false);
        metaTestSlaveId.setAutoIncrement(false);
        metaTestSlaveId.setJdbcType(4);
        table.addToPrimaryKey(new Integer(ICOL_TEST_SLAVE_ID));
        table.addColumn(metaTestSlaveId);
        final MetaColumn metaTestMasterId = new MetaColumn(ICOL_TEST_MASTER_ID, "test_master_id", "test_master_id", table);
        metaTestMasterId.setPrimaryKey(true);
        metaTestMasterId.setRequired(true);
        metaTestMasterId.setOptimisticLock(false);
        metaTestMasterId.setType(ColumnType.LONG);
        metaTestMasterId.setColumnSize(10);
        metaTestMasterId.setRemarks("");
        metaTestMasterId.setDecimalDigits(0);
        metaTestMasterId.setAutoGenerated(false);
        metaTestMasterId.setAutoIncrement(false);
        metaTestMasterId.setJdbcType(4);
        table.addToPrimaryKey(new Integer(ICOL_TEST_MASTER_ID));
        table.addColumn(metaTestMasterId);
        final MetaColumn metaTestMaster2Id = new MetaColumn(ICOL_TEST_MASTER2_ID, "test_master2_id", "test_master2_id", table);
        metaTestMaster2Id.setPrimaryKey(false);
        metaTestMaster2Id.setRequired(false);
        metaTestMaster2Id.setOptimisticLock(false);
        metaTestMaster2Id.setType(ColumnType.LONG);
        metaTestMaster2Id.setColumnSize(10);
        metaTestMaster2Id.setRemarks("");
        metaTestMaster2Id.setDecimalDigits(0);
        metaTestMaster2Id.setAutoGenerated(false);
        metaTestMaster2Id.setAutoIncrement(false);
        metaTestMaster2Id.setJdbcType(4);
        table.addColumn(metaTestMaster2Id);
        final MetaColumn metaName = new MetaColumn(ICOL_NAME, "name", "name", table);
        metaName.setPrimaryKey(false);
        metaName.setRequired(false);
        metaName.setOptimisticLock(false);
        metaName.setType(ColumnType.STRING);
        metaName.setColumnSize(30);
        metaName.setRemarks("");
        metaName.setDecimalDigits(0);
        metaName.setAutoGenerated(false);
        metaName.setAutoIncrement(false);
        metaName.setJdbcType(12);
        table.addColumn(metaName);
        final MetaColumn metaCreationDate = new MetaColumn(ICOL_CREATION_DATE, "creation_date", "creation_date", table);
        metaCreationDate.setPrimaryKey(false);
        metaCreationDate.setRequired(false);
        metaCreationDate.setOptimisticLock(false);
        metaCreationDate.setType(ColumnType.DATE);
        metaCreationDate.setColumnSize(29);
        metaCreationDate.setRemarks("");
        metaCreationDate.setDecimalDigits(6);
        metaCreationDate.setAutoGenerated(false);
        metaCreationDate.setAutoIncrement(false);
        metaCreationDate.setJdbcType(93);
        table.addColumn(metaCreationDate);
        final MetaColumn metaLastUpdated = new MetaColumn(ICOL_LAST_UPDATED, "last_updated", "last_updated", table);
        metaLastUpdated.setPrimaryKey(false);
        metaLastUpdated.setRequired(false);
        metaLastUpdated.setOptimisticLock(false);
        metaLastUpdated.setType(ColumnType.DATE);
        metaLastUpdated.setColumnSize(29);
        metaLastUpdated.setRemarks("");
        metaLastUpdated.setDecimalDigits(6);
        metaLastUpdated.setAutoGenerated(false);
        metaLastUpdated.setAutoIncrement(false);
        metaLastUpdated.setJdbcType(93);
        table.addColumn(metaLastUpdated);
        final MetaColumn metaColChar = new MetaColumn(ICOL_COL_CHAR, "col_char", "col_char", table);
        metaColChar.setPrimaryKey(false);
        metaColChar.setRequired(false);
        metaColChar.setOptimisticLock(false);
        metaColChar.setType(ColumnType.CHAR);
        metaColChar.setColumnSize(20);
        metaColChar.setRemarks("");
        metaColChar.setDecimalDigits(0);
        metaColChar.setAutoGenerated(false);
        metaColChar.setAutoIncrement(false);
        metaColChar.setJdbcType(1);
        table.addColumn(metaColChar);
    }

    private Long testSlaveId;

    private Long testMasterId;

    private Long testMaster2Id;

    private String name;

    private Date creationDate;

    private Date lastUpdated;

    private String colChar;

    public Long getTestSlaveId() {
        return this.testSlaveId;
    }

    public void setTestSlaveId(Long testSlaveId) {
        if (record2().setObject(ICOL_TEST_SLAVE_ID, testSlaveId)) {
            this.testSlaveId = testSlaveId;
        }
    }

    public boolean izNullTestSlaveId() {
        return record2().getObject(ICOL_TEST_SLAVE_ID) == null;
    }

    public void setNullTestSlaveId() {
        if (record2().setObject(ICOL_TEST_SLAVE_ID, null)) {
            this.testSlaveId = null;
        }
    }

    public Long getTestMasterId() {
        return this.testMasterId;
    }

    public void setTestMasterId(Long testMasterId) {
        if (record2().setObject(ICOL_TEST_MASTER_ID, testMasterId)) {
            this.testMasterId = testMasterId;
        }
    }

    public boolean izNullTestMasterId() {
        return record2().getObject(ICOL_TEST_MASTER_ID) == null;
    }

    public void setNullTestMasterId() {
        if (record2().setObject(ICOL_TEST_MASTER_ID, null)) {
            this.testMasterId = null;
        }
    }

    public Long getTestMaster2Id() {
        return this.testMaster2Id;
    }

    public void setTestMaster2Id(Long testMaster2Id) {
        if (record2().setObject(ICOL_TEST_MASTER2_ID, testMaster2Id)) {
            this.testMaster2Id = testMaster2Id;
        }
    }

    public boolean izNullTestMaster2Id() {
        return record2().getObject(ICOL_TEST_MASTER2_ID) == null;
    }

    public void setNullTestMaster2Id() {
        if (record2().setObject(ICOL_TEST_MASTER2_ID, null)) {
            this.testMaster2Id = null;
        }
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        if (record2().setObject(ICOL_NAME, name)) {
            this.name = name;
        }
    }

    public boolean izNullName() {
        return record2().getObject(ICOL_NAME) == null;
    }

    public void setNullName() {
        if (record2().setObject(ICOL_NAME, null)) {
            this.name = null;
        }
    }

    public Date getCreationDate() {
        return this.creationDate;
    }

    public void setCreationDate(Date creationDate) {
        if (record2().setObject(ICOL_CREATION_DATE, creationDate)) {
            this.creationDate = creationDate;
        }
    }

    public boolean izNullCreationDate() {
        return record2().getObject(ICOL_CREATION_DATE) == null;
    }

    public void setNullCreationDate() {
        if (record2().setObject(ICOL_CREATION_DATE, null)) {
            this.creationDate = null;
        }
    }

    public Date getLastUpdated() {
        return this.lastUpdated;
    }

    public void setLastUpdated(Date lastUpdated) {
        if (record2().setObject(ICOL_LAST_UPDATED, lastUpdated)) {
            this.lastUpdated = lastUpdated;
        }
    }

    public boolean izNullLastUpdated() {
        return record2().getObject(ICOL_LAST_UPDATED) == null;
    }

    public void setNullLastUpdated() {
        if (record2().setObject(ICOL_LAST_UPDATED, null)) {
            this.lastUpdated = null;
        }
    }

    public String getColChar() {
        return this.colChar;
    }

    public void setColChar(String colChar) {
        if (record2().setObject(ICOL_COL_CHAR, colChar)) {
            this.colChar = colChar;
        }
    }

    public boolean izNullColChar() {
        return record2().getObject(ICOL_COL_CHAR) == null;
    }

    public void setNullColChar() {
        if (record2().setObject(ICOL_COL_CHAR, null)) {
            this.colChar = null;
        }
    }

    public void toBeanFields() {
        toBeanFields(this);
    }

    public void toBeanFields(PersistentObject from) {
        testSlaveId = (Long) from.record2().getObject(ICOL_TEST_SLAVE_ID);
        testMasterId = (Long) from.record2().getObject(ICOL_TEST_MASTER_ID);
        testMaster2Id = (Long) from.record2().getObject(ICOL_TEST_MASTER2_ID);
        name = (String) from.record2().getObject(ICOL_NAME);
        creationDate = (Date) from.record2().getObject(ICOL_CREATION_DATE);
        lastUpdated = (Date) from.record2().getObject(ICOL_LAST_UPDATED);
        colChar = (String) from.record2().getObject(ICOL_COL_CHAR);
        super.toBeanFields(from);
    }

    public void fromBeanFields(PersistentObject persistentObject) {
        TestSlave from = (TestSlave) persistentObject;
        record2().getEntry(ICOL_TEST_SLAVE_ID).setUnmarkedValue(from.testSlaveId, from.testSlaveId);
        record2().getEntry(ICOL_TEST_MASTER_ID).setUnmarkedValue(from.testMasterId, from.testMasterId);
        record2().getEntry(ICOL_TEST_MASTER2_ID).setUnmarkedValue(from.testMaster2Id, from.testMaster2Id);
        record2().getEntry(ICOL_NAME).setUnmarkedValue(from.name, from.name);
        record2().getEntry(ICOL_CREATION_DATE).setUnmarkedValue(from.creationDate, from.creationDate);
        record2().getEntry(ICOL_LAST_UPDATED).setUnmarkedValue(from.lastUpdated, from.lastUpdated);
        record2().getEntry(ICOL_COL_CHAR).setUnmarkedValue(from.colChar, from.colChar);
        super.fromBeanFieldsDataSaved(persistentObject);
    }

    public String toString() {
        StringBuffer buffer = new StringBuffer();
        buffer.append("{ " + "class = ").append(this.getClass().getName()).append(" " + "table = ").append(TABLE_TEST_SLAVE).append(" columns = {");
        if (record() != null) {
            buffer.append(COL_TEST_SLAVE_ID).append(" = ").append(record().getObject(ICOL_TEST_SLAVE_ID)).append(" ");
            buffer.append(COL_TEST_MASTER_ID).append(" = ").append(record().getObject(ICOL_TEST_MASTER_ID)).append(" ");
            buffer.append(COL_TEST_MASTER2_ID).append(" = ").append(record().getObject(ICOL_TEST_MASTER2_ID)).append(" ");
            buffer.append(COL_NAME).append(" = ").append(record().getObject(ICOL_NAME)).append(" ");
            buffer.append(COL_CREATION_DATE).append(" = ").append(record().getObject(ICOL_CREATION_DATE)).append(" ");
            buffer.append(COL_LAST_UPDATED).append(" = ").append(record().getObject(ICOL_LAST_UPDATED)).append(" ");
            buffer.append(COL_COL_CHAR).append(" = ").append(record().getObject(ICOL_COL_CHAR)).append(" ");
        } else {
            buffer.append(COL_TEST_SLAVE_ID).append(" = ").append(testSlaveId).append(" ");
            buffer.append(COL_TEST_MASTER_ID).append(" = ").append(testMasterId).append(" ");
            buffer.append(COL_TEST_MASTER2_ID).append(" = ").append(testMaster2Id).append(" ");
            buffer.append(COL_NAME).append(" = ").append(name).append(" ");
            buffer.append(COL_CREATION_DATE).append(" = ").append(creationDate).append(" ");
            buffer.append(COL_LAST_UPDATED).append(" = ").append(lastUpdated).append(" ");
            buffer.append(COL_COL_CHAR).append(" = ").append(colChar).append(" ");
        }
        buffer.append("}}");
        return buffer.toString();
    }
}
