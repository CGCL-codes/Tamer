package simulationTime;

import java.io.*;

/**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */
public class TimeTreeDependencies implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int idNewTime;

    private int idBrotherTime;

    private int idExecutedAction;

    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */
    public TimeTreeDependencies() {
    }

    public TimeTreeDependencies(int idNewTimeIn, int idBrotherTimeIn, int idExecutedActionIn) {
        this.idNewTime = idNewTimeIn;
        this.idBrotherTime = idBrotherTimeIn;
        this.idExecutedAction = idExecutedActionIn;
    }

    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */
    public int getIdNewTime() {
        return this.idNewTime;
    }

    public void setIdNewTime(int idNewTimeIn) {
        this.idNewTime = idNewTimeIn;
    }

    public int getIdBrotherTime() {
        return this.idBrotherTime;
    }

    public void setIdBrotherTime(int idBrotherTimeIn) {
        this.idBrotherTime = idBrotherTimeIn;
    }

    public int getIdExecutedAction() {
        return this.idExecutedAction;
    }

    public void setIdExecutedAction(int idExecutedActionIn) {
        this.idExecutedAction = idExecutedActionIn;
    }

    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */
    public void setAll(int idNewTimeIn, int idBrotherTimeIn, int idExecutedActionIn) {
        this.idNewTime = idNewTimeIn;
        this.idBrotherTime = idBrotherTimeIn;
        this.idExecutedAction = idExecutedActionIn;
    }

    /** 
     * hasEqualMapping-method will compare two TimeTreeDependencies instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(TimeTreeDependencies valueObject) {
        if (valueObject.getIdNewTime() != this.idNewTime) {
            return (false);
        }
        if (valueObject.getIdBrotherTime() != this.idBrotherTime) {
            return (false);
        }
        if (valueObject.getIdExecutedAction() != this.idExecutedAction) {
            return (false);
        }
        return true;
    }

    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass TimeTreeDependencies, mapping to table TimeTreeDependencies\n");
        out.append("Persistent attributes: \n");
        out.append("idNewTime = " + this.idNewTime + "\n");
        out.append("idBrotherTime = " + this.idBrotherTime + "\n");
        out.append("idExecutedAction = " + this.idExecutedAction + "\n");
        return out.toString();
    }

    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        TimeTreeDependencies cloned = new TimeTreeDependencies();
        cloned.setIdNewTime(this.idNewTime);
        cloned.setIdBrotherTime(this.idBrotherTime);
        cloned.setIdExecutedAction(this.idExecutedAction);
        return cloned;
    }

    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }
}
