package com.pmdesigns.sqlmapper;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SqlParserConstants {

    /** End of File. */
    int EOF = 0;

    /** RegularExpression Id. */
    int WS = 1;

    /** RegularExpression Id. */
    int COMMA = 2;

    /** RegularExpression Id. */
    int COMMENT_START = 3;

    /** RegularExpression Id. */
    int TABLE_DEF = 4;

    /** RegularExpression Id. */
    int ALPHA = 5;

    /** RegularExpression Id. */
    int DIGIT = 6;

    /** RegularExpression Id. */
    int DOT = 7;

    /** RegularExpression Id. */
    int ID = 8;

    /** RegularExpression Id. */
    int TABLE_COMMENT_START = 9;

    /** RegularExpression Id. */
    int LEFT_PAREN = 10;

    /** RegularExpression Id. */
    int RIGHT_PAREN = 11;

    /** RegularExpression Id. */
    int TABLE_EOL = 12;

    /** RegularExpression Id. */
    int EOL = 13;

    /** RegularExpression Id. */
    int TABLE_COMMENT_EOL = 14;

    /** RegularExpression Id. */
    int FIELD_DEF = 15;

    /** RegularExpression Id. */
    int MODEL_DEF = 16;

    /** RegularExpression Id. */
    int PARAM_START = 17;

    /** RegularExpression Id. */
    int PARAM_END = 18;

    /** RegularExpression Id. */
    int MODEL_KEY_VALUE = 19;

    /** RegularExpression Id. */
    int NAME_KEY = 20;

    /** RegularExpression Id. */
    int PKG_KEY = 21;

    /** RegularExpression Id. */
    int TEMPLATE_KEY = 22;

    /** RegularExpression Id. */
    int SUFFIX_KEY = 23;

    /** RegularExpression Id. */
    int VALUE = 24;

    /** RegularExpression Id. */
    int MODEL_ATTR = 25;

    /** RegularExpression Id. */
    int JOIN_ATTR = 26;

    /** RegularExpression Id. */
    int FIELD_ATTR = 27;

    /** RegularExpression Id. */
    int AUTO_INC = 28;

    /** RegularExpression Id. */
    int PRIMARY_KEY = 29;

    /** RegularExpression Id. */
    int NOT_MAPPED = 30;

    /** RegularExpression Id. */
    int FIELD_KEY_VALUE = 31;

    /** RegularExpression Id. */
    int TYPE_KEY = 32;

    /** RegularExpression Id. */
    int HAS1_KEY = 33;

    /** RegularExpression Id. */
    int ONE2ONE_KEY = 34;

    /** RegularExpression Id. */
    int BELONGS2_KEY = 35;

    /** RegularExpression Id. */
    int H1B2_KEY = 36;

    /** RegularExpression Id. */
    int HMAB2_KEY = 37;

    /** RegularExpression Id. */
    int TABLE_OTHER = 38;

    /** RegularExpression Id. */
    int OTHER = 39;

    /** Lexical state. */
    int DEFAULT = 0;

    /** Lexical state. */
    int IN_COMMENT = 1;

    /** Lexical state. */
    int IN_TABLE_COMMENT = 2;

    /** Lexical state. */
    int IN_TABLE = 3;

    /** Literal token values. */
    String[] tokenImage = { "<EOF>", "<WS>", "\",\"", "\"--\"", "<TABLE_DEF>", "<ALPHA>", "<DIGIT>", "\".\"", "<ID>", "\"--\"", "\"(\"", "\")\"", "<TABLE_EOL>", "<EOL>", "<TABLE_COMMENT_EOL>", "\"@field\"", "\"@model\"", "\"(\"", "\")\"", "<MODEL_KEY_VALUE>", "\"name\"", "\"pkg\"", "\"template\"", "\"suffix\"", "<VALUE>", "<MODEL_ATTR>", "\"join\"", "<FIELD_ATTR>", "\"auto_inc\"", "\"pk\"", "\"not_mapped\"", "<FIELD_KEY_VALUE>", "\"type\"", "\"has1\"", "\"has1to1\"", "\"belongs2\"", "\"h1b2\"", "\"hmab2\"", "<TABLE_OTHER>", "<OTHER>" };
}
