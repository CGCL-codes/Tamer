package org.openconcerto.sql.utils;

import org.openconcerto.sql.Configuration;
import org.openconcerto.sql.element.SQLElement;
import org.openconcerto.sql.element.SQLElementDirectory;
import org.openconcerto.sql.model.DBSystemRoot;
import org.openconcerto.sql.model.SQLRow;
import org.openconcerto.sql.model.SQLTable;
import org.openconcerto.utils.CompareUtils;
import org.openconcerto.utils.ExceptionHandler;
import org.openconcerto.utils.cc.ITransformer;
import java.io.File;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.event.HyperlinkEvent;

/**
 * Allow to convert a {@link SQLRow} from and to String.
 * 
 * @author Sylvain CUAZ
 */
public final class RowURIFormat {

    private final DBSystemRoot sysRoot;

    private final ITransformer<SQLTable, SQLElement> dir;

    public RowURIFormat() {
        this(Configuration.getInstance());
    }

    public RowURIFormat(final Configuration conf) {
        this(conf.getSystemRoot(), conf.getDirectory());
    }

    public RowURIFormat(final DBSystemRoot systemRoot, final SQLElementDirectory dir) {
        this(systemRoot, new ITransformer<SQLTable, SQLElement>() {

            @Override
            public SQLElement transformChecked(SQLTable input) {
                return dir.getElement(input);
            }
        });
    }

    public RowURIFormat(final DBSystemRoot sysRoot, final ITransformer<SQLTable, SQLElement> dir) {
        super();
        if (sysRoot == null) throw new NullPointerException("null system root");
        this.sysRoot = sysRoot;
        this.dir = dir;
    }

    private final SQLElement getElement(final SQLTable t) {
        return this.dir.transformChecked(t);
    }

    /**
     * Parse an URI generated by {@link #format(SQLRow, boolean)}.
     * 
     * @param uri a row URI.
     * @return the passed row.
     */
    public final SQLRow parse(final URI uri) {
        if (!"row".equals(uri.getScheme())) throw new IllegalArgumentException("not a row URI : " + uri);
        final File rowF = new File(uri.getPath());
        final File tableF = rowF.getParentFile();
        final File rootF = tableF.getParentFile();
        final File sysRootF = rootF.getParentFile();
        final String uriSysRoot = sysRootF.getName().length() == 0 ? uri.getHost() : sysRootF.getName();
        if (!CompareUtils.equals(this.sysRoot.getName(), uriSysRoot)) throw new IllegalArgumentException("not in this system root : " + uri);
        final SQLTable table = this.sysRoot.getRoot(rootF.getName()).getTable(tableF.getName());
        return new SQLRow(table, Integer.valueOf(rowF.getName()));
    }

    private final String getLinkStart(final SQLTable t, final boolean htmlTag) {
        final DBSystemRoot sysRoot = t.getDBSystemRoot();
        if (sysRoot != this.sysRoot) throw new IllegalArgumentException(t + " is not in " + this.sysRoot);
        return (htmlTag ? "<a href=\"" : "") + "row://" + sysRoot.getName() + "/" + t.getDBRoot().getName() + "/" + t.getName() + "/";
    }

    private final String getLinkEnd(final SQLRow r, final boolean htmlTag) {
        return r.getID() + (htmlTag ? "\">" + getLinkContent(r) + "</a> " : "");
    }

    /**
     * The content used for HTML anchor.
     * 
     * @param r the row to display.
     * @return the string to use as the content.
     */
    public final String getLinkContent(final SQLRow r) {
        return getElement(r.getTable()).getDescription(r);
    }

    /**
     * Format a row to string.
     * 
     * @param r the row to format.
     * @param htmlTag <code>true</code> if the link should be wrapped in an HTML anchor.
     * @return the link pointing to <code>r</code>.
     * @see #getLinkContent(SQLRow)
     */
    public final String format(final SQLRow r, final boolean htmlTag) {
        return getLinkStart(r.getTable(), htmlTag) + getLinkEnd(r, htmlTag);
    }

    public final List<String> format(final List<SQLRow> rows, final boolean htmlTag) {
        final List<String> res = new ArrayList<String>(rows.size());
        for (final SQLRow r : rows) {
            res.add(format(r, htmlTag));
        }
        return res;
    }

    public final List<String> format(final SQLTable t, Collection<? extends Number> ids, final boolean htmlTag) {
        final List<String> res = new ArrayList<String>(ids.size());
        final String linkStart = getLinkStart(t, htmlTag);
        for (final Number idO : ids) {
            final int id = idO.intValue();
            res.add(linkStart + getLinkEnd(new SQLRow(t, id), htmlTag));
        }
        return res;
    }

    /**
     * An HTML text field which contains row URIs.
     * 
     * @author Sylvain CUAZ
     */
    public abstract static class HTMLTextField extends org.openconcerto.ui.component.HTMLTextField {

        private final RowURIFormat parser;

        public HTMLTextField(final String html, RowURIFormat parser) {
            super(html);
            this.parser = parser;
        }

        protected final SQLElement getElement(SQLTable table) {
            return this.parser.getElement(table);
        }

        @Override
        protected final void linkActivated(HyperlinkEvent e, JComponent src) {
            try {
                linkActivated(this.parser.parse(new URI(e.getDescription())), src);
            } catch (Exception exn) {
                ExceptionHandler.handle(src, "Impossible d'ouvrir " + e.getDescription(), exn);
            }
        }

        protected abstract void linkActivated(final SQLRow r, JComponent src);
    }
}
