package net.jfellow.tail.tailing;

import junit.framework.*;
import java.util.*;

/**
 * @author @author@
 *
 * To change the template for this generated type comment go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
public class SearchBufferTest extends TestCase {

    public SearchBufferTest(String name) {
        super(name);
    }

    public void setUp() {
    }

    public void tearDown() {
    }

    public void testAppendLineAndSearchStartingAtEnd() {
        SearchBuffer buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(1);
        List regExpressions = new ArrayList();
        regExpressions.add("Oktoberfest");
        buf.setRegExpressions(regExpressions);
        String s = buf.appendLineAndSearchStartingAtEnd("1. not found", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("2. Oktoberfest found", 1);
        assertEquals("Line should be found", "2. Oktoberfest found", s);
        s = buf.appendLineAndSearchStartingAtEnd("3. not found", 2);
        assertEquals("Line should not be found", null, s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(2);
        regExpressions = new ArrayList();
        regExpressions.add("Oktoberfest");
        buf.setRegExpressions(regExpressions);
        s = buf.appendLineAndSearchStartingAtEnd("1. not found", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("2. Oktoberfest found", 1);
        assertEquals("Line should be found", "2. Oktoberfest found", s);
        s = buf.appendLineAndSearchStartingAtEnd("3. not found", 2);
        assertEquals("Line should not be found", null, s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(2);
        regExpressions = new ArrayList();
        regExpressions.add("Oktoberfest");
        buf.setRegExpressions(regExpressions);
        s = buf.appendLineAndSearchStartingAtEnd("1. not found", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("2. Oktoberfest found", 1);
        assertEquals("Line should be found", "2. Oktoberfest found", s);
        s = buf.appendLineAndSearchStartingAtEnd("3. not found", 2);
        assertEquals("Line should not be found", null, s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(4);
        regExpressions = new ArrayList();
        regExpressions.add("(?s)(?i)Oktoberfest.*?Oktoberfest");
        buf.setRegExpressions(regExpressions);
        s = buf.appendLineAndSearchStartingAtEnd("1. not found", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("2. Oktoberfest xxx", 1);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("3. Oktoberfest yyy", 2);
        assertEquals("Line should be found", "2. Oktoberfest xxx\n3. Oktoberfest yyy", s);
        s = buf.appendLineAndSearchStartingAtEnd("4. not found", 3);
        assertEquals("Line should not be found", null, s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(2);
        regExpressions = new ArrayList();
        regExpressions.add("(?s)(?i)xxx.*?yyy");
        buf.setRegExpressions(regExpressions);
        s = buf.appendLineAndSearchStartingAtEnd("xxx", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("yyy", 1);
        assertEquals("Line should be found", "xxx\nyyy", s);
        s = buf.appendLineAndSearchStartingAtEnd("xxx", 2);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("yyy", 3);
        assertEquals("Line should be found", "xxx\nyyy", s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(3);
        regExpressions = new ArrayList();
        regExpressions.add("(?s)(?i)xxx.*?yyy");
        buf.setRegExpressions(regExpressions);
        s = buf.appendLineAndSearchStartingAtEnd("xxx", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("yyy", 1);
        assertEquals("Line should be found", "xxx\nyyy", s);
        s = buf.appendLineAndSearchStartingAtEnd("xxx", 2);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("yyy", 3);
        assertEquals("Line should be found", "xxx\nyyy", s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(4);
        regExpressions = new ArrayList();
        regExpressions.add("(?s)(?i)xxx.*?yyy");
        buf.setRegExpressions(regExpressions);
        s = buf.appendLineAndSearchStartingAtEnd("1xxx", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("2yyy", 1);
        assertEquals("Line should be found", "1xxx\n2yyy", s);
        s = buf.appendLineAndSearchStartingAtEnd("3xxx", 2);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("4yyy", 3);
        assertEquals("Line should be found", "3xxx\n4yyy", s);
        s = buf.appendLineAndSearchStartingAtEnd("5xxx", 4);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("6yyy", 5);
        assertEquals("Line should be found", "5xxx\n6yyy", s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(4);
        regExpressions = new ArrayList();
        regExpressions.add("(?s)(?i)xxx.*?yyy");
        buf.setRegExpressions(regExpressions);
        s = buf.appendLineAndSearchStartingAtEnd("xxx", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("yyy", 1);
        assertEquals("Line should be found", "xxx\nyyy", s);
        s = buf.appendLineAndSearchStartingAtEnd("xxx", 2);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("yyy", 3);
        assertEquals("Line should be found", "xxx\nyyy", s);
        s = buf.appendLineAndSearchStartingAtEnd("xxx", 4);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("yyy", 5);
        assertEquals("Line should be found", "xxx\nyyy", s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(4);
        regExpressions = new ArrayList();
        regExpressions.add("(?s)(?i)xxx.*?yyy.*?zzz");
        buf.setRegExpressions(regExpressions);
        s = buf.appendLineAndSearchStartingAtEnd("xxx", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("yyy", 1);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("zzz", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("xxx", 1);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("yyy", 2);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("zzz", 3);
        assertEquals("Line should be found", "xxx\nyyy\nzzz", s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(20);
        regExpressions = new ArrayList();
        regExpressions.add("(?s)(?i)finest.*?nov");
        buf.setRegExpressions(regExpressions);
        String line = "Nov 11, 2003 6:48:30 PM net.jfellow.tail.tailing.TailCommander cleanUp";
        s = buf.appendLineAndSearchStartingAtEnd(line, 0);
        assertEquals("Line should not be found", null, s);
        line = "FINEST: [ TailCommander {id='1'} ] : Cleaning up...";
        s = buf.appendLineAndSearchStartingAtEnd(line, 1);
        assertEquals("Line should not be found", null, s);
        line = "Nov 11, 2003 6:48:30 PM net.jfellow.tail.tailing.TailCommander cleanUp";
        s = buf.appendLineAndSearchStartingAtEnd(line, 2);
        String output = "FINEST: [ TailCommander {id='1'} ] : Cleaning up..." + "\n" + "Nov 11, 2003 6:48:30 PM net.jfellow.tail.tailing.TailCommander cleanUp";
        assertEquals("Line should be found", output, s);
        line = "a line between";
        s = buf.appendLineAndSearchStartingAtEnd(line, 3);
        assertEquals("Line should not be found", null, s);
        line = "Nov 11, 2003 6:48:31 PM net.jfellow.tail.tailing.TailCommander run";
        s = buf.appendLineAndSearchStartingAtEnd(line, 4);
        assertEquals("Line should not be found", null, s);
        line = "INFO: [ TailCommander {id='2'} ] - Running in Tail Mode";
        s = buf.appendLineAndSearchStartingAtEnd(line, 5);
        assertEquals("Line should not be found", null, s);
        line = "Nov 11, 2003 6:49:44 PM net.jfellow.tail.tailing.Tail run";
        s = buf.appendLineAndSearchStartingAtEnd(line, 6);
        assertEquals("Line should not be found", null, s);
        line = "FINEST: Tail { [ file=D:\\dev\\tools\\tail\\testdata\\test1.txt ],[ id=0 ] } - sending intial read done...";
        s = buf.appendLineAndSearchStartingAtEnd(line, 7);
        assertEquals("Line should not be found", null, s);
        line = "Nov 11, 2003 6:49:46 PM net.jfellow.tail.tailing.TailCommander receiveInitialReadDone";
        s = buf.appendLineAndSearchStartingAtEnd(line, 8);
        output = "FINEST: Tail { [ file=D:\\dev\\tools\\tail\\testdata\\test1.txt ],[ id=0 ] } - sending intial read done..." + "\n" + "Nov 11, 2003 6:49:46 PM net.jfellow.tail.tailing.TailCommander receiveInitialReadDone";
        assertEquals("Line should be found", output, s);
        line = "FINEST: [ TailCommander {id='2'} ] - Receiving \"intial read done\" from Tail { [ file=D:\\dev\\tools\\tail\\testdata\\test1.txt ],[ id=0 ] }";
        s = buf.appendLineAndSearchStartingAtEnd(line, 9);
        assertEquals("Line should not be found", null, s);
        line = "Nov 11, 2003 6:49:46 PM net.jfellow.tail.gui.JFrameSmartTail receiveInitialReadDone";
        s = buf.appendLineAndSearchStartingAtEnd(line, 10);
        output = "FINEST: [ TailCommander {id='2'} ] - Receiving \"intial read done\" from Tail { [ file=D:\\dev\\tools\\tail\\testdata\\test1.txt ],[ id=0 ] }" + "\n" + "Nov 11, 2003 6:49:46 PM net.jfellow.tail.gui.JFrameSmartTail receiveInitialReadDone";
        assertEquals("Line should be found", output, s);
        line = "FINEST: Receiving an 'Initial Read Done' from [ TailCommander {id='2'} ]";
        s = buf.appendLineAndSearchStartingAtEnd(line, 11);
        assertEquals("Line should not be found", null, s);
        line = "Nov 11, 2003 6:49:46 PM net.jfellow.tail.gui.JFrameSmartTail receiveInitialReadDone";
        s = buf.appendLineAndSearchStartingAtEnd(line, 12);
        output = "FINEST: Receiving an 'Initial Read Done' from [ TailCommander {id='2'} ]" + "\n" + "Nov 11, 2003 6:49:46 PM net.jfellow.tail.gui.JFrameSmartTail receiveInitialReadDone";
        assertEquals("Line should be found", output, s);
        line = "FINEST: Setting progress bar to '1' from '1'. Sending TailCommander was: [ TailCommander {id='2'} ]";
        s = buf.appendLineAndSearchStartingAtEnd(line, 13);
        assertEquals("Line should not be found", null, s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(1);
        regExpressions = new ArrayList();
        regExpressions.add("Oktoberfest");
        buf.setRegExpressions(regExpressions);
        buf.setExcludeExpression("not");
        s = buf.appendLineAndSearchStartingAtEnd("1. not found", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("2. Oktoberfest not found", 1);
        assertEquals("Line should be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("3. Oktoberfest found", 1);
        assertEquals("Line should be found", "3. Oktoberfest found", s);
        s = buf.appendLineAndSearchStartingAtEnd("4. not found", 2);
        assertEquals("Line should not be found", null, s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(1);
        buf.setExcludeExpression("not");
        s = buf.appendLineAndSearchStartingAtEnd("1. not found", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("2. Oktoberfest not found", 1);
        assertEquals("Line should be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("3. Oktoberfest found", 1);
        assertEquals("Line should be found", "3. Oktoberfest found", s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(1);
        buf.setExcludeExpression("  ");
        s = buf.appendLineAndSearchStartingAtEnd("1. not  found", 0);
        assertEquals("Line should not be found", null, s);
        s = buf.appendLineAndSearchStartingAtEnd("2. Oktoberfest found", 1);
        assertEquals("Line should be found", "2. Oktoberfest found", s);
        buf = new SearchBuffer();
        buf.setUseAppendingRegExpr(false);
        buf.setTailBufferSize(2);
        buf.setSearchBufferSize(1);
        buf.setExcludeExpression("");
        s = buf.appendLineAndSearchStartingAtEnd("1.  found", 0);
        assertEquals("Line should not be found", "1.  found", s);
        s = buf.appendLineAndSearchStartingAtEnd("2. Oktoberfest found", 1);
        assertEquals("Line should be found", "2. Oktoberfest found", s);
    }

    public static void main(String[] args) {
        junit.textui.TestRunner.run(SearchBufferTest.class);
    }
}
