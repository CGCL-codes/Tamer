package br.ucam.kuabaSubsystem.kuabaModel.impl;

import java.text.ParseException;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import br.ucam.kuabaSubsystem.kuabaModel.*;
import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.OWLModel;
import edu.stanford.smi.protegex.owl.model.RDFProperty;
import edu.stanford.smi.protegex.owl.model.RDFSLiteral;
import edu.stanford.smi.protegex.owl.model.impl.DefaultRDFIndividual;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#Activity
 *
 * @version generated on Sat Jun 21 10:48:19 BRT 2008
 */
public class DefaultActivity extends AbstractOWLKuabaElement implements Activity {

    public DefaultActivity(OWLModel owlModel, FrameID id) {
        super(owlModel, id);
    }

    public DefaultActivity() {
    }

    public String getHasDescription() {
        return (String) getPropertyValue(getHasDescriptionProperty());
    }

    public RDFProperty getHasDescriptionProperty() {
        final String uri = "http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#hasDescription";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }

    public boolean hasHasDescription() {
        return getPropertyValueCount(getHasDescriptionProperty()) > 0;
    }

    public void setHasDescription(String newHasDescription) {
        setPropertyValue(getHasDescriptionProperty(), newHasDescription);
    }

    public ExpectedDuration getHasExpectedDuration() {
        return (ExpectedDuration) getPropertyValueAs(getHasExpectedDurationProperty(), ExpectedDuration.class);
    }

    public RDFProperty getHasExpectedDurationProperty() {
        final String uri = "http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#hasExpectedDuration";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }

    public boolean hasHasExpectedDuration() {
        return getPropertyValueCount(getHasExpectedDurationProperty()) > 0;
    }

    public void setHasExpectedDuration(ExpectedDuration newHasExpectedDuration) {
        setPropertyValue(getHasExpectedDurationProperty(), newHasExpectedDuration);
    }

    public GregorianCalendar getHasFinishDate() {
        RDFSLiteral literalFinishDate = (RDFSLiteral) getPropertyValue(getHasFinishDateProperty());
        DateParser parser = new DateParser();
        GregorianCalendar gregorianFinishDate = null;
        try {
            gregorianFinishDate = parser.toGregorianCalendar(literalFinishDate.getString());
        } catch (ParseException e) {
            e.printStackTrace();
        } catch (NullPointerException npe) {
            return null;
        }
        return gregorianFinishDate;
    }

    public RDFProperty getHasFinishDateProperty() {
        final String uri = "http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#hasFinishDate";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }

    public boolean hasHasFinishDate() {
        return getPropertyValueCount(getHasFinishDateProperty()) > 0;
    }

    public void setHasFinishDate(GregorianCalendar newHasFinishDate) {
        DateParser parser = new DateParser();
        String xmlFormatedDate = parser.toStringFormat(newHasFinishDate);
        RDFSLiteral literalFinishDate = this.getOWLModel().createRDFSLiteral(xmlFormatedDate, this.getOWLModel().getRDFSDatatypeByName("xsd:dateTime"));
        setPropertyValue(getHasFinishDateProperty(), literalFinishDate);
    }

    public String getHasName() {
        return (String) getPropertyValue(getHasNameProperty());
    }

    public RDFProperty getHasNameProperty() {
        final String uri = "http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#hasName";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }

    public boolean hasHasName() {
        return getPropertyValueCount(getHasNameProperty()) > 0;
    }

    public void setHasName(String newHasName) {
        setPropertyValue(getHasNameProperty(), newHasName);
    }

    public GregorianCalendar getHasStartDate() {
        RDFSLiteral literalStartDate = (RDFSLiteral) getPropertyValue(getHasStartDateProperty());
        DateParser parser = new DateParser();
        GregorianCalendar gregorianStartDate = null;
        try {
            gregorianStartDate = parser.toGregorianCalendar(literalStartDate.getString());
        } catch (ParseException e) {
            e.printStackTrace();
        } catch (NullPointerException npe) {
            return null;
        }
        return gregorianStartDate;
    }

    public RDFProperty getHasStartDateProperty() {
        final String uri = "http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#hasStartDate";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }

    public boolean hasHasStartDate() {
        return getPropertyValueCount(getHasStartDateProperty()) > 0;
    }

    public void setHasStartDate(GregorianCalendar newHasStartDate) {
        DateParser parser = new DateParser();
        String xmlFormatedDate = parser.toStringFormat(newHasStartDate);
        RDFSLiteral literalStartDate = this.getOWLModel().createRDFSLiteral(xmlFormatedDate, this.getOWLModel().getRDFSDatatypeByName("xsd:dateTime"));
        setPropertyValue(getHasStartDateProperty(), literalStartDate);
    }

    public Collection getInvolves() {
        return getPropertyValuesAs(getInvolvesProperty(), ReasoningElement.class);
    }

    public RDFProperty getInvolvesProperty() {
        final String uri = "http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#involves";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }

    public boolean hasInvolves() {
        return getPropertyValueCount(getInvolvesProperty()) > 0;
    }

    public Iterator listInvolves() {
        return listPropertyValuesAs(getInvolvesProperty(), ReasoningElement.class);
    }

    public void addInvolves(ReasoningElement newInvolves) {
        addPropertyValue(getInvolvesProperty(), newInvolves);
    }

    public void removeInvolves(ReasoningElement oldInvolves) {
        removePropertyValue(getInvolvesProperty(), oldInvolves);
    }

    public void setInvolves(Collection newInvolves) {
        setPropertyValues(getInvolvesProperty(), newInvolves);
    }

    public Collection getIsExecutedBy() {
        return getPropertyValuesAs(getIsExecutedByProperty(), Person.class);
    }

    public RDFProperty getIsExecutedByProperty() {
        final String uri = "http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#isExecutedBy";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }

    public boolean hasIsExecutedBy() {
        return getPropertyValueCount(getIsExecutedByProperty()) > 0;
    }

    public Iterator listIsExecutedBy() {
        return listPropertyValuesAs(getIsExecutedByProperty(), Person.class);
    }

    public void addIsExecutedBy(Person newIsExecutedBy) {
        addPropertyValue(getIsExecutedByProperty(), newIsExecutedBy);
    }

    public void removeIsExecutedBy(Person oldIsExecutedBy) {
        removePropertyValue(getIsExecutedByProperty(), oldIsExecutedBy);
    }

    public void setIsExecutedBy(Collection newIsExecutedBy) {
        setPropertyValues(getIsExecutedByProperty(), newIsExecutedBy);
    }

    public Collection getRequires() {
        return getPropertyValuesAs(getRequiresProperty(), Role.class);
    }

    public RDFProperty getRequiresProperty() {
        final String uri = "http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#requires";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }

    public boolean hasRequires() {
        return getPropertyValueCount(getRequiresProperty()) > 0;
    }

    public Iterator listRequires() {
        return listPropertyValuesAs(getRequiresProperty(), Role.class);
    }

    public void addRequires(Role newRequires) {
        addPropertyValue(getRequiresProperty(), newRequires);
    }

    public void removeRequires(Role oldRequires) {
        removePropertyValue(getRequiresProperty(), oldRequires);
    }

    public void setRequires(Collection newRequires) {
        setPropertyValues(getRequiresProperty(), newRequires);
    }
}
