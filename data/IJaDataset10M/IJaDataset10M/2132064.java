package gov.cdc.ncphi.phgrid.amds.biosense.service.globus.resource;

import gov.cdc.ncphi.phgrid.amds.biosense.common.AMDS_BIOSENSEConstants;
import gov.cdc.ncphi.phgrid.amds.biosense.stubs.AMDS_BIOSENSEResourceProperties;
import org.apache.axis.components.uuid.UUIDGen;
import org.apache.axis.components.uuid.UUIDGenFactory;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.globus.wsrf.InvalidResourceKeyException;
import org.globus.wsrf.PersistenceCallback;
import org.globus.wsrf.Resource;
import org.globus.wsrf.ResourceException;
import org.globus.wsrf.ResourceKey;
import org.globus.wsrf.ResourceContext;
import gov.nih.nci.cagrid.introduce.servicetools.SingletonResourceHomeImpl;
import org.globus.wsrf.jndi.Initializable;

/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This class implements the resource home for the resource type represented
 * by this service.
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
public class AMDS_BIOSENSEResourceHome extends SingletonResourceHomeImpl implements Initializable {

    static final Log logger = LogFactory.getLog(AMDS_BIOSENSEResourceHome.class);

    private static final UUIDGen UUIDGEN = UUIDGenFactory.getUUIDGen();

    public Resource createSingleton() {
        logger.info("Creating a single resource.");
        try {
            AMDS_BIOSENSEResourceProperties props = new AMDS_BIOSENSEResourceProperties();
            AMDS_BIOSENSEResource resource = new AMDS_BIOSENSEResource();
            if (resource instanceof PersistenceCallback) {
                try {
                    ((PersistenceCallback) resource).load(null);
                } catch (InvalidResourceKeyException ex) {
                    resource.initialize(props, AMDS_BIOSENSEConstants.RESOURCE_PROPERTY_SET, UUIDGEN.nextUUID());
                }
            } else {
                resource.initialize(props, AMDS_BIOSENSEConstants.RESOURCE_PROPERTY_SET, UUIDGEN.nextUUID());
            }
            return resource;
        } catch (Exception e) {
            logger.error("Exception when creating the resource", e);
            return null;
        }
    }

    public Resource find(ResourceKey key) throws ResourceException {
        AMDS_BIOSENSEResource resource = (AMDS_BIOSENSEResource) super.find(key);
        return resource;
    }

    /**
	 * Initialze the singleton resource, when the home is initialized.
	 */
    public void initialize() throws Exception {
        logger.info("Attempting to initialize resource.");
        Resource resource = find(null);
        if (resource == null) {
            logger.error("Unable to initialize resource!");
        } else {
            logger.info("Successfully initialized resource.");
        }
    }

    /**
     * Get the resouce that is being addressed in this current context
     */
    public AMDS_BIOSENSEResource getAddressedResource() throws Exception {
        AMDS_BIOSENSEResource thisResource;
        thisResource = (AMDS_BIOSENSEResource) ResourceContext.getResourceContext().getResource();
        return thisResource;
    }
}
