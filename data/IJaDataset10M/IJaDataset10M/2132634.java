package playground.tnicolai.matsim4opus.matsim4urbansim;

import org.apache.log4j.Logger;
import org.matsim.api.core.v01.network.Network;
import org.matsim.api.core.v01.population.Population;
import org.matsim.core.controler.Controler;
import org.matsim.core.facilities.ActivityFacilitiesImpl;
import playground.tnicolai.matsim4opus.constants.Constants;
import playground.tnicolai.matsim4opus.gis.GridUtils;
import playground.tnicolai.matsim4opus.gis.SpatialGrid;
import playground.tnicolai.matsim4opus.gis.ZoneLayer;
import playground.tnicolai.matsim4opus.utils.helperObjects.CounterObject;
import playground.tnicolai.matsim4opus.utils.io.ReadFromUrbanSimModel;
import playground.tnicolai.matsim4opus.utils.io.writer.AnalysisWorkplaceCSVWriter;
import com.vividsolutions.jts.geom.Geometry;

/**
 * @author thomas
 * 
 * improvements jan'12:
 * 
 * - This class is a revised version of "MATSim4UrbanSim".
 * - Increased configurability: 
 * 	First approach to increase the configurability of MATSim4UrbanSim modules such as
 * 	the zonz2zone impedance matrix, zone based- and grid based accessibility computation. Modules can be en-disabled
 * 	additional modules can be added by other classes extending MATSim4UrbanSimV2.
 * - Data Processing on Demand:
 *  Particular input data is processed when a corresponding module is enabled, e.g. an array of aggregated workplaces will
 *  be generated when either the zone based- or grid based accessibility computation is activated.
 * - Extensibility:
 * 	This class provides standard functionality such as configuring MATSim, reading UrbanSim input data, running the 
 * 	mobility simulation and so forth... This functionality can be extended by an inheriting class (e.g. MATSim4UrbanSimZurichAccessibility) 
 * 	by implementing certain stub methods such as "addFurtherControlerListener", "modifyNetwork", "modifyPopulation" ...
 * - Backup Results:
 *  This was also available before but not documented. Some data is overwritten with each run, e.g. the zone2zone impedance matrix or data
 *  in the MATSim output folder. If the backup is activated the most imported files (see BackupRun class) are saved in a new folder. In order 
 *  to match the saved data with the corresponding run or year the folder names contain the "simulation year" and a time stamp.
 * - Other improvements:
 * 	For a better readability some functionality is out-sourced into helper classes
 */
public class MATSim4UrbanSimZone extends MATSim4UrbanSimParcel {

    private static final Logger log = Logger.getLogger(MATSim4UrbanSimZone.class);

    /**
	 * constructor
	 * 
	 * @param args contains at least a reference to 
	 * 		  MATSim4UrbanSim configuration generated by UrbanSim
	 */
    MATSim4UrbanSimZone(String args[]) {
        super(args);
        isParcel = false;
    }

    /**
	 * prepare MATSim for traffic flow simulation ...
	 */
    @Override
    void runMATSim() {
        log.info("Starting MATSim from Urbansim");
        isTestRun();
        Network network = scenario.getNetwork();
        modifyNetwork(network);
        cleanNetwork(network);
        readFromUrbansim = new ReadFromUrbanSimModel(getUrbanSimParameterConfig().getYear());
        ActivityFacilitiesImpl zones = new ActivityFacilitiesImpl("urbansim zones");
        readUrbansimZoneModel(zones);
        int pc = benchmark.addMeasure("Population construction");
        Population newPopulation = readUrbansimPersons(zones, network);
        modifyPopulation(newPopulation);
        benchmark.stoppMeasurement(pc);
        System.out.println("Population construction took: " + benchmark.getDurationInSeconds(pc) + " seconds.");
        log.info("### DONE with demand generation from urbansim ###");
        scenario.setPopulation(newPopulation);
        runControler(zones);
    }

    /**
	 * read UrbanSim parcel table and build facilities and zones in MATSim
	 * 
	 * @param parcels
	 * @param zones
	 */
    void readUrbansimZoneModel(ActivityFacilitiesImpl zones) {
        readFromUrbansim.readFacilitiesZones(zones);
    }

    /**
	 * reads UrbanSim persons table and creates a MATSim population
	 * @param oldPopulation
	 * @param zones
	 * @param network
	 * @param samplingRate
	 * @return
	 */
    @Override
    Population readUrbanSimPopulation(Population oldPopulation, ActivityFacilitiesImpl zones, Network network, double samplingRate) {
        return readFromUrbansim.readPersonsZone(oldPopulation, zones, network, samplingRate);
    }

    /**
	 * run simulation
	 * @param zones
	 */
    void runControler(ActivityFacilitiesImpl zones) {
        Controler controler = new Controler(scenario);
        controler.setOverwriteFiles(true);
        controler.setCreateGraphs(false);
        log.info("Adding controler listener ...");
        addControlerListener(zones, controler);
        addFurtherControlerListener(controler, zones);
        log.info("Adding controler listener done!");
        controler.run();
    }

    /**
	 * The following method register listener that should be done _after_ the iterations were run.
	 * 
	 * @param zones
	 * @param parcels
	 * @param controler
	 */
    void addControlerListener(ActivityFacilitiesImpl zones, Controler controler) {
        int srid = Constants.SRID_BELGIUM;
        if (computeZone2ZoneImpedance) controler.addControlerListener(new Zone2ZoneImpedancesControlerListener(zones, null));
        if (computeAgentPerformance) controler.addControlerListener(new AgentPerformanceControlerListener(benchmark));
        if (computeZoneBasedAccessibilities) {
            if (aggregatedOpportunities == null) aggregatedOpportunities = readUrbansimJobs(zones, jobSampleRate);
            controler.addControlerListener(new ZoneBasedAccessibilityControlerListener(zones, aggregatedOpportunities, benchmark));
        }
        if (computeCellBasedAccessibility) {
            SpatialGrid carGrid;
            SpatialGrid walkGrid;
            ZoneLayer<CounterObject> measuringPoints;
            String fileExtension;
            if (aggregatedOpportunities == null) aggregatedOpportunities = readUrbansimJobs(zones, jobSampleRate);
            if (computeCellBasedAccessibilitiesNetwork) {
                fileExtension = CellBasedAccessibilityControlerListenerV2.NETWORK;
                measuringPoints = GridUtils.createGridLayerByGridSizeByNetwork(cellSizeInMeter, nwBoundaryBox.getBoundingBox(), srid);
                carGrid = new SpatialGrid(nwBoundaryBox.getBoundingBox(), cellSizeInMeter);
                walkGrid = new SpatialGrid(nwBoundaryBox.getBoundingBox(), cellSizeInMeter);
            } else {
                fileExtension = CellBasedAccessibilityControlerListenerV2.SHAPE_FILE;
                Geometry boundary = GridUtils.getBoundary(shapeFile, srid);
                measuringPoints = GridUtils.createGridLayerByGridSizeByShapeFile(cellSizeInMeter, boundary, srid);
                carGrid = GridUtils.createSpatialGridByShapeBoundary(cellSizeInMeter, boundary);
                walkGrid = GridUtils.createSpatialGridByShapeBoundary(cellSizeInMeter, boundary);
            }
            controler.addControlerListener(new CellBasedAccessibilityControlerListenerV2(measuringPoints, aggregatedOpportunities, carGrid, walkGrid, fileExtension, benchmark, this.scenario));
        }
        if (dumpPopulationData) readFromUrbansim.readAndDumpPersons2CSV(zones, controler.getNetwork());
        if (dumpAggegatedWorkplaceData) {
            if (aggregatedOpportunities == null) aggregatedOpportunities = readUrbansimJobs(zones, jobSampleRate);
            AnalysisWorkplaceCSVWriter.writeAggregatedWorkplaceData2CSV(Constants.MATSIM_4_OPUS_TEMP + "aggregated_workplaces.csv", aggregatedOpportunities);
        }
    }

    /**
	 * Entry point
	 * @param args UrbanSim command prompt
	 */
    public static void main(String args[]) {
        long start = System.currentTimeMillis();
        MATSim4UrbanSimZone m4u = new MATSim4UrbanSimZone(args);
        m4u.runMATSim();
        m4u.matim4UrbanSimShutdown();
        MATSim4UrbanSimZone.isSuccessfulMATSimRun = Boolean.TRUE;
        log.info("Computation took " + ((System.currentTimeMillis() - start) / 60000) + " minutes. Computation done!");
    }
}
