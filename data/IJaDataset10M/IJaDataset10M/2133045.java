package haw.prp2.a4.gui;

import haw.prp2.a2.*;
import haw.prp2.a4.TransportClass;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.TransferHandler;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author jmenzel
 */
public abstract class AReiseFormPanel extends javax.swing.JPanel {

    MainFrame parent;

    /** Creates new form AReiseFormPanel */
    public AReiseFormPanel(MainFrame rParent, String name) {
        this.parent = rParent;
        initComponents();
        this.initLists();
        tf_filter_hotel.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                loadHotel();
                setListFocus(lst_hotel);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                loadHotel();
                setListFocus(lst_hotel);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                loadHotel();
                setListFocus(lst_hotel);
            }
        });
        tf_filter_flug.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                loadFlug();
                setListFocus(lst_flug);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                loadFlug();
                setListFocus(lst_flug);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                loadFlug();
                setListFocus(lst_flug);
            }
        });
        tf_filter_reise.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                loadReise();
                setListFocus(lst_reise);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                loadReise();
                setListFocus(lst_reise);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                loadReise();
                setListFocus(lst_reise);
            }
        });
        this.l_title.setText(name);
        lst_reisekombination.addMouseListener(new MouseAdapter() {

            public void mousePressed(MouseEvent me) {
                if (MouseEvent.META_MASK == me.getModifiers()) {
                    lst_reisekombination.setSelectedIndex(lst_reisekombination.locationToIndex(me.getPoint()));
                    showContextMenue(me);
                }
            }
        });
        lst_reisekombination.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == 127) {
                    if (((DefaultListModel) lst_reisekombination.getModel()).getSize() > 0) {
                        ((DefaultListModel) lst_reisekombination.getModel()).remove(lst_reisekombination.getSelectedIndex());
                        loadFlug();
                        loadHotel();
                        loadReise();
                    }
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public final void initLists() {
        lst_reisekombination.setDropMode(DropMode.INSERT);
        lst_reisekombination.setTransferHandler(new TransferHandler() {

            public boolean canImport(TransferSupport supp) {
                return (supp.isDataFlavorSupported(TransportClass.Flavors.REISEANGEBOT));
            }

            public boolean importData(TransferSupport supp) {
                if (!canImport(supp)) return false;
                Reiseangebot data;
                try {
                    data = (Reiseangebot) supp.getTransferable().getTransferData(TransportClass.Flavors.REISEANGEBOT);
                    DefaultListModel dlm = ((DefaultListModel) lst_reisekombination.getModel());
                    Object[] obj = dlm.toArray();
                    List l = Arrays.asList(obj);
                    ArrayList<Reiseangebot> raListe = new ArrayList<Reiseangebot>(l);
                    raListe.add(data);
                    Collections.sort(raListe);
                    dlm.removeAllElements();
                    for (Reiseangebot ra : raListe) {
                        dlm.addElement(ra);
                    }
                    return true;
                } catch (UnsupportedFlavorException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                return false;
            }
        });
        lst_flug.setDragEnabled(true);
        lst_flug.setTransferHandler(new TransferHandler() {

            public int getSourceActions(JComponent c) {
                return COPY;
            }

            public Transferable createTransferable(JComponent c) {
                return new TransportClass((Reiseangebot) lst_flug.getSelectedValue(), TransportClass.Flavors.REISEANGEBOT);
            }

            public void exportDone(JComponent c, Transferable t, int action) {
                loadFlug();
                return;
            }
        });
        lst_hotel.setDragEnabled(true);
        lst_hotel.setTransferHandler(new TransferHandler() {

            public int getSourceActions(JComponent c) {
                return COPY;
            }

            public Transferable createTransferable(JComponent c) {
                return new TransportClass((Reiseangebot) lst_hotel.getSelectedValue(), TransportClass.Flavors.REISEANGEBOT);
            }

            public void exportDone(JComponent c, Transferable t, int action) {
                loadHotel();
                return;
            }
        });
        lst_reise.setDragEnabled(true);
        lst_reise.setTransferHandler(new TransferHandler() {

            public int getSourceActions(JComponent c) {
                return COPY;
            }

            public Transferable createTransferable(JComponent c) {
                return new TransportClass((Reiseangebot) lst_reise.getSelectedValue(), TransportClass.Flavors.REISEANGEBOT);
            }

            public void exportDone(JComponent c, Transferable t, int action) {
                loadReise();
                return;
            }
        });
        lst_flug.addMouseListener(new MouseAdapter() {

            public void mousePressed(MouseEvent me) {
                if (MouseEvent.META_MASK == me.getModifiers()) {
                    lst_flug.setSelectedIndex(lst_flug.locationToIndex(me.getPoint()));
                    if (lst_flug.getSelectedIndex() != -1) {
                        JPopupMenu menu = new JPopupMenu();
                        JMenuItem i_edit = new JMenuItem("Bearbeiten");
                        i_edit.addActionListener(new ActionListener() {

                            public void actionPerformed(ActionEvent e) {
                                new FEditFlugForm(AReiseFormPanel.this, (Flug) lst_flug.getSelectedValue()).setVisible(true);
                            }
                        });
                        menu.add(i_edit);
                        menu.show(me.getComponent(), me.getX(), me.getY());
                    }
                }
            }
        });
        lst_hotel.addMouseListener(new MouseAdapter() {

            public void mousePressed(MouseEvent me) {
                if (MouseEvent.META_MASK == me.getModifiers()) {
                    lst_hotel.setSelectedIndex(lst_hotel.locationToIndex(me.getPoint()));
                    if (lst_hotel.getSelectedIndex() != -1) {
                        JPopupMenu menu = new JPopupMenu();
                        JMenuItem i_edit = new JMenuItem("Bearbeiten");
                        i_edit.addActionListener(new ActionListener() {

                            public void actionPerformed(ActionEvent e) {
                                new FEditHotelForm(AReiseFormPanel.this, (Hotel) lst_hotel.getSelectedValue()).setVisible(true);
                            }
                        });
                        menu.add(i_edit);
                        menu.show(me.getComponent(), me.getX(), me.getY());
                    }
                }
            }
        });
        this.loadReise();
        this.loadHotel();
        this.loadFlug();
    }

    public void loadHotel() {
        String filter = tf_filter_hotel.getText();
        ((DefaultListModel) lst_hotel.getModel()).clear();
        ArrayList<Reiseangebot> raList = new ArrayList<Reiseangebot>(Reiseangebot.getByPrefix("Hotel"));
        Collections.sort(raList);
        for (Reiseangebot ra : raList) {
            if (!((DefaultListModel) lst_reisekombination.getModel()).contains(ra) && ra.getName().toLowerCase().contains(filter.toLowerCase())) {
                ((DefaultListModel) lst_hotel.getModel()).addElement(ra);
            }
        }
    }

    public void loadFlug() {
        String filter = tf_filter_flug.getText();
        ((DefaultListModel) lst_flug.getModel()).clear();
        ArrayList<Reiseangebot> raList = new ArrayList<Reiseangebot>(Reiseangebot.getByPrefix("Flug"));
        Collections.sort(raList);
        for (Reiseangebot ra : raList) {
            if (!((DefaultListModel) lst_reisekombination.getModel()).contains(ra) && ra.getName().toLowerCase().contains(filter.toLowerCase())) {
                ((DefaultListModel) lst_flug.getModel()).addElement(ra);
            }
        }
    }

    public void loadReise() {
        String filter = tf_filter_reise.getText();
        ((DefaultListModel) lst_reise.getModel()).clear();
        ArrayList<Reiseangebot> raList = new ArrayList<Reiseangebot>(Reiseangebot.getByInstance(Reisekombination.class));
        Collections.sort(raList);
        for (Reiseangebot ra : raList) {
            if (!((DefaultListModel) lst_reisekombination.getModel()).contains(ra) && ra.getName().toLowerCase().contains(filter.toLowerCase())) {
                ((DefaultListModel) lst_reise.getModel()).addElement(ra);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        lst_hotel = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lst_flug = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        lst_reise = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        l_title = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lst_reisekombination = new javax.swing.JList();
        l_status = new javax.swing.JLabel();
        b_save = new javax.swing.JButton();
        b_reset = new javax.swing.JButton();
        b_cancel = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        l_hotelAdd = new javax.swing.JLabel();
        l_flugAdd = new javax.swing.JLabel();
        tf_name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tf_filter_hotel = new javax.swing.JTextField();
        tf_filter_flug = new javax.swing.JTextField();
        tf_filter_reise = new javax.swing.JTextField();
        setPreferredSize(new java.awt.Dimension(780, 780));
        lst_hotel.setModel(new DefaultListModel());
        lst_hotel.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lst_hotel);
        lst_flug.setModel(new DefaultListModel());
        lst_flug.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lst_flug);
        lst_reise.setModel(new DefaultListModel());
        lst_reise.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(lst_reise);
        jLabel1.setText("Hotel");
        jLabel2.setText("Flug");
        jLabel3.setText("Reise");
        l_title.setText("<title>");
        jLabel5.setFont(new java.awt.Font("Cantarell", 1, 15));
        jLabel5.setText("Ihre Reisekombination");
        lst_reisekombination.setModel(new DefaultListModel());
        jScrollPane4.setViewportView(lst_reisekombination);
        l_status.setText("<status> / <error message>");
        l_status.setText("");
        b_save.setText("Speichern");
        b_save.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reiseErzeugen(evt);
            }
        });
        b_reset.setText("Reise zurücksetzen");
        b_reset.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reiseZuruecksetzen(evt);
            }
        });
        b_cancel.setText("Abbrechen");
        b_cancel.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cancelActionPerformed(evt);
            }
        });
        jLabel7.setFont(new java.awt.Font("Cantarell", 1, 15));
        jLabel7.setText("Verfügbare Bausteine");
        l_hotelAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/haw/prp2/a4/gui/images/add.png")));
        l_hotelAdd.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                l_hotelAdd_Click(evt);
            }
        });
        l_flugAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/haw/prp2/a4/gui/images/add.png")));
        l_flugAdd.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                l_flugAddMouseClicked(evt);
            }
        });
        jLabel6.setText("Name");
        tf_filter_hotel.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHoteltoReise(evt);
            }
        });
        tf_filter_hotel.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyPressed(java.awt.event.KeyEvent evt) {
                HotelChangeSelection(evt);
            }
        });
        tf_filter_flug.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFlugtoReise(evt);
            }
        });
        tf_filter_flug.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyPressed(java.awt.event.KeyEvent evt) {
                FlugChangeSelection(evt);
            }
        });
        tf_filter_reise.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addReisetoReise(evt);
            }
        });
        tf_filter_reise.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReiseChangeSelection(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(49, 49, 49).addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addGap(25, 25, 25).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(41, 41, 41).addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(layout.createSequentialGroup().addGap(298, 298, 298).addComponent(jLabel5))))).addContainerGap()).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap(13, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(layout.createSequentialGroup().addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(tf_filter_hotel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(l_hotelAdd))).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addGroup(layout.createSequentialGroup().addComponent(jLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(tf_filter_flug, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(l_flugAdd)).addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(26, 26, 26).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(layout.createSequentialGroup().addComponent(jLabel3).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(tf_filter_reise, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))).addGap(35, 35, 35)).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap(303, Short.MAX_VALUE).addComponent(jLabel7).addGap(322, 322, 322)).addGroup(layout.createSequentialGroup().addGap(376, 376, 376).addComponent(l_title).addContainerGap(370, Short.MAX_VALUE)).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap(139, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(l_status).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addComponent(b_save).addGap(18, 18, 18).addComponent(b_reset).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(b_cancel)).addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE))).addGap(110, 110, 110)).addGroup(layout.createSequentialGroup().addGap(222, 222, 222).addComponent(jLabel6).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(tf_name, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(274, Short.MAX_VALUE)));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(12, 12, 12).addComponent(l_title).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel7).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel2).addComponent(jLabel3).addComponent(tf_filter_flug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(tf_filter_reise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(l_flugAdd)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(l_hotelAdd).addComponent(tf_filter_hotel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addGap(19, 19, 19).addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel5).addGap(25, 25, 25).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel6).addComponent(tf_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(l_status).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(b_save).addComponent(b_reset).addComponent(b_cancel)).addContainerGap(224, Short.MAX_VALUE)));
    }

    private void b_cancelActionPerformed(java.awt.event.ActionEvent evt) {
        this.parent.showHomeScreen();
        this.parent.removeFromUsedList(this);
    }

    private void l_hotelAdd_Click(java.awt.event.MouseEvent evt) {
        new FHotelForm(this).setVisible(true);
    }

    private void l_flugAddMouseClicked(java.awt.event.MouseEvent evt) {
        new FFlugForm(this).setVisible(true);
    }

    private void reiseZuruecksetzen(java.awt.event.ActionEvent evt) {
        ((DefaultListModel) lst_reisekombination.getModel()).removeAllElements();
        loadReise();
        loadFlug();
        loadHotel();
    }

    void setListFocus(JList lst) {
        if (lst.getModel().getSize() > 0) lst.setSelectedIndex(0);
    }

    private void reiseErzeugen(java.awt.event.ActionEvent evt) {
        try {
            erzeugeReiseAngebot();
            l_status.setForeground(new java.awt.Color(0, 204, 204));
            l_status.setText("Reiseangebot wurde erfolgreich erstellt");
            this.loadReise();
            ((DefaultListModel) lst_reisekombination.getModel()).removeAllElements();
            this.parent.showHomeScreen();
            this.parent.removeFromUsedList(this);
        } catch (InvariantViolatedException ex) {
            l_status.setForeground(new java.awt.Color(153, 0, 0));
            Reiseangebot ra = ex.getVariant();
            if (ra != null) l_status.setText("Invariantenprüfung schlug fehl!" + ra.getName() + " erfüllt die Invarianten nicht!"); else l_status.setText("Invariantenprüfung schlug fehl!");
        }
    }

    private void HotelChangeSelection(java.awt.event.KeyEvent evt) {
        changeListSelection(lst_hotel, evt);
    }

    private void addHoteltoReise(java.awt.event.ActionEvent evt) {
        moveSelectedValuetoReise(lst_hotel);
    }

    private void FlugChangeSelection(java.awt.event.KeyEvent evt) {
        changeListSelection(lst_flug, evt);
    }

    private void addFlugtoReise(java.awt.event.ActionEvent evt) {
        moveSelectedValuetoReise(lst_flug);
    }

    private void addReisetoReise(java.awt.event.ActionEvent evt) {
        moveSelectedValuetoReise(lst_reise);
    }

    private void ReiseChangeSelection(java.awt.event.KeyEvent evt) {
        changeListSelection(lst_reise, evt);
    }

    private void changeListSelection(JList lst, KeyEvent evt) {
        int index = lst.getSelectedIndex();
        if (index == -1) return;
        switch(evt.getKeyCode()) {
            case 40:
                index += 1;
                if (index < lst.getModel().getSize()) lst.setSelectedIndex(index);
                break;
            case 38:
                index -= 1;
                if (index >= 0) lst.setSelectedIndex(index);
                break;
        }
    }

    private void moveSelectedValuetoReise(JList lst) {
        int index = lst.getSelectedIndex();
        if (index != -1) {
            Reiseangebot ra = (Reiseangebot) lst.getSelectedValue();
            ((DefaultListModel) lst.getModel()).removeElementAt(index);
            ((DefaultListModel) lst_reisekombination.getModel()).addElement(ra);
            setListFocus(lst);
        }
    }

    protected abstract void erzeugeReiseAngebot() throws InvariantViolatedException;

    private void showContextMenue(MouseEvent evt) {
        if (((DefaultListModel) lst_reisekombination.getModel()).getSize() > 0) {
            if (lst_reisekombination.getSelectedValue() == null) {
                lst_reisekombination.setSelectedIndex(0);
            }
            JPopupMenu menu = new JPopupMenu();
            JMenuItem i_delete = new JMenuItem("Entfernen");
            JMenuItem i_edit = new JMenuItem("Bearbeiten");
            i_edit.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    Reisebaustein rb = (Reisebaustein) lst_reisekombination.getSelectedValue();
                    if (rb instanceof Flug) {
                        new FEditFlugForm(AReiseFormPanel.this, (Flug) rb).setVisible(true);
                    } else {
                        new FEditHotelForm(AReiseFormPanel.this, (Hotel) rb).setVisible(true);
                    }
                }
            });
            i_delete.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    ((DefaultListModel) lst_reisekombination.getModel()).remove(lst_reisekombination.getSelectedIndex());
                    loadFlug();
                    loadHotel();
                    loadReise();
                }
            });
            if (!(((Reiseangebot) lst_reisekombination.getSelectedValue()) instanceof Reisekombination)) menu.add(i_edit);
            menu.add(i_delete);
            menu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }

    protected javax.swing.JButton b_cancel;

    protected javax.swing.JButton b_reset;

    protected javax.swing.JButton b_save;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JLabel jLabel5;

    private javax.swing.JLabel jLabel6;

    private javax.swing.JLabel jLabel7;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JScrollPane jScrollPane3;

    private javax.swing.JScrollPane jScrollPane4;

    private javax.swing.JSeparator jSeparator1;

    private javax.swing.JSeparator jSeparator2;

    private javax.swing.JLabel l_flugAdd;

    private javax.swing.JLabel l_hotelAdd;

    protected javax.swing.JLabel l_status;

    protected javax.swing.JLabel l_title;

    protected javax.swing.JList lst_flug;

    protected javax.swing.JList lst_hotel;

    protected javax.swing.JList lst_reise;

    protected javax.swing.JList lst_reisekombination;

    protected javax.swing.JTextField tf_filter_flug;

    protected javax.swing.JTextField tf_filter_hotel;

    protected javax.swing.JTextField tf_filter_reise;

    protected javax.swing.JTextField tf_name;
}
