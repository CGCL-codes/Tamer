package rpr2_d18.fixedRecordRepresentations;

import java.util.Iterator;
import java.util.ArrayList;
import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.ByteWrapper;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.encoding.HLAfixedRecord;
import hla.rti1516e.RtiFactoryFactory;
import hla.rti1516e.encoding.EncoderFactory;
import hla.rti1516e.encoding.HLAbyte;
import rpr2_d18.simpleDataRepresentations.unsignedInt16;
import rpr2_d18.enumeratedDataRepresentations.NomenclatureVersionEnum8;
import rpr2_d18.enumeratedDataRepresentations.NomenclatureEnum16;

/**
 * JAVADOC_COMMENTS
 * semantics : -NULL-
 *
 * @author : auto generated by DRDC FOM Generator
 */
public class RadioTypeStruct implements HLAfixedRecord {

    private HLAbyte EntityKind;

    private HLAbyte Domain;

    private unsignedInt16 CountryCode;

    private HLAbyte Category;

    private NomenclatureVersionEnum8 NomenclatureVersion;

    private NomenclatureEnum16 Nomenclature;

    /**
   * Constructor
   */
    public RadioTypeStruct() throws RTIinternalError {
        EncoderFactory ef = RtiFactoryFactory.getRtiFactory().getEncoderFactory();
        EntityKind = ef.createHLAbyte();
        Domain = ef.createHLAbyte();
        CountryCode = new unsignedInt16();
        Category = ef.createHLAbyte();
        NomenclatureVersion = new NomenclatureVersionEnum8();
        Nomenclature = new NomenclatureEnum16();
    }

    /**
   * Encodes this element into the specified ByteWrapper.
   * 
   * @param byteWrapper
   */
    public void encode(ByteWrapper byteWrapper) {
        EntityKind.encode(byteWrapper);
        Domain.encode(byteWrapper);
        CountryCode.encode(byteWrapper);
        Category.encode(byteWrapper);
        NomenclatureVersion.encode(byteWrapper);
        Nomenclature.encode(byteWrapper);
    }

    /**
   * Decodes this element from the ByteWrapper
   * 
   * @param byteWrapper
   */
    public void decode(ByteWrapper byteWrapper) throws DecoderException {
        EntityKind.decode(byteWrapper);
        Domain.decode(byteWrapper);
        CountryCode.decode(byteWrapper);
        Category.decode(byteWrapper);
        NomenclatureVersion.decode(byteWrapper);
        Nomenclature.decode(byteWrapper);
    }

    /**
   * Decodes this element from the byte array
   * 
   * @param byte array
   */
    public void decode(byte[] bytes) throws DecoderException {
        EntityKind.decode(bytes);
        Domain.decode(bytes);
        CountryCode.decode(bytes);
        Category.decode(bytes);
        NomenclatureVersion.decode(bytes);
        Nomenclature.decode(bytes);
    }

    /**
   * Returns the octet boundary of this element.
   * - not really relavent for data structures
   * - return the boundary of the first field
   * 
   * @return
   */
    public int getOctetBoundary() {
        return getEncodedLength() % 4;
    }

    /**
   * convert this data structure into a byte array
   * 
   */
    public byte[] toByteArray() {
        int size = getEncodedLength();
        byte[] result = new byte[size];
        byte[] temp;
        int pos = 0;
        temp = EntityKind.toByteArray();
        System.arraycopy(temp, 0, result, pos, EntityKind.getEncodedLength());
        temp = Domain.toByteArray();
        System.arraycopy(temp, 0, result, pos, Domain.getEncodedLength());
        temp = CountryCode.toByteArray();
        System.arraycopy(temp, 0, result, pos, CountryCode.getEncodedLength());
        temp = Category.toByteArray();
        System.arraycopy(temp, 0, result, pos, Category.getEncodedLength());
        temp = NomenclatureVersion.toByteArray();
        System.arraycopy(temp, 0, result, pos, NomenclatureVersion.getEncodedLength());
        temp = Nomenclature.toByteArray();
        System.arraycopy(temp, 0, result, pos, Nomenclature.getEncodedLength());
        return result;
    }

    /**
   * add an element to this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param DataElement dataElement
   */
    public void add(DataElement dataElement) {
    }

    /**
   * get the full size of this data structure
   * - add up the size of each member field
   * 
   */
    public int size() {
        return getEncodedLength();
    }

    /**
   * get an element from this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param int index
   */
    public DataElement get(int index) {
        return null;
    }

    /**
   * get an iterator for this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param int index
   */
    public Iterator<DataElement> iterator() {
        return null;
    }

    /**
   * Returns the size in bytes of this element's encoding.
   * 
   * @return size
   */
    public int getEncodedLength() {
        int size = 0;
        size += EntityKind.getEncodedLength();
        size += Domain.getEncodedLength();
        size += CountryCode.getEncodedLength();
        size += Category.getEncodedLength();
        size += NomenclatureVersion.getEncodedLength();
        size += Nomenclature.getEncodedLength();
        return size;
    }

    public HLAbyte getEntityKind() {
        return this.EntityKind;
    }

    public HLAbyte getDomain() {
        return this.Domain;
    }

    public unsignedInt16 getCountryCode() {
        return this.CountryCode;
    }

    public HLAbyte getCategory() {
        return this.Category;
    }

    public NomenclatureVersionEnum8 getNomenclatureVersion() {
        return this.NomenclatureVersion;
    }

    public NomenclatureEnum16 getNomenclature() {
        return this.Nomenclature;
    }

    public void setEntityKind(HLAbyte EntityKind) {
        this.EntityKind = EntityKind;
    }

    public void setDomain(HLAbyte Domain) {
        this.Domain = Domain;
    }

    public void setCountryCode(unsignedInt16 CountryCode) {
        this.CountryCode = CountryCode;
    }

    public void setCategory(HLAbyte Category) {
        this.Category = Category;
    }

    public void setNomenclatureVersion(NomenclatureVersionEnum8 NomenclatureVersion) {
        this.NomenclatureVersion = NomenclatureVersion;
    }

    public void setNomenclature(NomenclatureEnum16 Nomenclature) {
        this.Nomenclature = Nomenclature;
    }
}
