package net.raymanoz.sql;

import static org.junit.Assert.assertTrue;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MockConnection implements Connection {

    private boolean prepareStatementWasCalled;

    private List<String> sqlUsed = new ArrayList<String>();

    private Map<String, MockPreparedStatement> preparedStatements = new HashMap<String, MockPreparedStatement>();

    private String[] expectedData = new String[0];

    private boolean prepareCallWasCalled;

    private Map<String, MockCallableStatement> callableStatements = new HashMap<String, MockCallableStatement>();

    public void clearWarnings() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public void close() throws SQLException {
    }

    public void commit() throws SQLException {
    }

    public Statement createStatement() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public boolean getAutoCommit() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public String getCatalog() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public int getHoldability() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public DatabaseMetaData getMetaData() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public int getTransactionIsolation() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public Map<String, Class<?>> getTypeMap() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public SQLWarning getWarnings() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public boolean isClosed() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public boolean isReadOnly() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public String nativeSQL(String sql) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public CallableStatement prepareCall(String sql) throws SQLException {
        this.prepareCallWasCalled = true;
        sqlUsed.add(sql);
        MockCallableStatement call = new MockCallableStatement();
        this.callableStatements.put(sql, call);
        return call;
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        prepareStatementWasCalled = true;
        this.sqlUsed.add(sql);
        MockPreparedStatement preparedStatement = new MockPreparedStatement();
        this.preparedStatements.put(sql, preparedStatement);
        preparedStatement.setExpectedData(expectedData);
        return preparedStatement;
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public void rollback() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public void rollback(Savepoint savepoint) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public void setAutoCommit(boolean autoCommit) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public void setCatalog(String catalog) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public void setHoldability(int holdability) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public void setReadOnly(boolean readOnly) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public Savepoint setSavepoint() throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public Savepoint setSavepoint(String name) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public void setTransactionIsolation(int level) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public void setTypeMap(Map<String, Class<?>> arg0) throws SQLException {
        throw new RuntimeException("not yet implemented");
    }

    public void assertSQLUsed(String sql) {
        assertTrue("SQL not found in usedSql", this.sqlUsed.contains(sql));
    }

    public void assertPrepareStatementWasCalled() {
        assertTrue("prepareStatement() was not called", this.prepareStatementWasCalled);
    }

    public MockPreparedStatement getPreparedStatement(String sql) {
        return this.preparedStatements.get(sql);
    }

    public void setExepectedData(String[] expectedData) {
        this.expectedData = expectedData;
    }

    public void assertPrepareCallWasCalled() {
        assertTrue("prepareCall() was not called", this.prepareCallWasCalled);
    }

    public MockCallableStatement getPreparedCall(String sql) {
        return this.callableStatements.get(sql);
    }
}
