package org.dmd.dmp.shared.generated.dmo;

import java.io.Serializable;
import java.util.*;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcSliceInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmp.shared.generated.dmo.DMPMessageDMO;
import org.dmd.dmp.shared.generated.enums.ResponseCategoryEnum;
import org.dmd.dmp.shared.generated.enums.ResponseTypeEnum;
import org.dmd.dmp.shared.generated.types.DmcTypeResponseCategoryEnumSV;
import org.dmd.dmp.shared.generated.types.DmcTypeResponseTypeEnumSV;
import org.dmd.dms.generated.dmo.MetaDMSAG;
import org.dmd.dms.generated.types.DmcTypeBooleanSV;
import org.dmd.dms.generated.types.DmcTypeIntegerSV;
import org.dmd.dms.generated.types.DmcTypeModifierMV;
import org.dmd.dms.generated.types.DmcTypeStringSV;
import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The Response class serves as a common base for all response messages. It
 * used to be that the Response was abstract, but because we could receive a
 * completely unknown request (for instance via a JSON/XML interface), we had
 * to have the ability to return a generic error response.
 * <P>
 * Generated from the dmp schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class ResponseDMO extends DMPMessageDMO implements de.novanic.eventservice.client.event.Event, Serializable {

    public static final String constructionClassName = "Response";

    static Map<Integer, HashMap<String, DmcAttributeValidator>> _AvDmAp;

    static Map<String, DmcObjectValidator> _OvDmAp;

    static {
        _AvDmAp = new HashMap<Integer, HashMap<String, DmcAttributeValidator>>();
        _OvDmAp = new HashMap<String, DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(), MetaVCAG.__AttributeSetValidator);
    }

    public ResponseDMO() {
        super("Response");
    }

    protected ResponseDMO(String oc) {
        super(oc);
    }

    protected Map<Integer, HashMap<String, DmcAttributeValidator>> getAttributeValidators() {
        return (_AvDmAp);
    }

    protected Map<String, DmcObjectValidator> getObjectValidators() {
        return (_OvDmAp);
    }

    @Override
    public ResponseDMO getNew() {
        ResponseDMO rc = new ResponseDMO();
        return (rc);
    }

    @Override
    public ResponseDMO getSlice(DmcSliceInfo info) {
        ResponseDMO rc = new ResponseDMO();
        populateSlice(rc, info);
        return (rc);
    }

    public ResponseDMO(DmcTypeModifierMV mods) {
        super("Response");
        modrec(true);
        setModifier(mods);
    }

    public ResponseDMO getModificationRecorder() {
        ResponseDMO rc = new ResponseDMO();
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return (rc);
    }

    public Integer getHandlerID() {
        DmcTypeIntegerSV attr = (DmcTypeIntegerSV) get(DmpDMSAG.__handlerID);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setHandlerID(Integer value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__handlerID);
        if (attr == null) attr = new DmcTypeIntegerSV(DmpDMSAG.__handlerID);
        try {
            attr.set(value);
            set(DmpDMSAG.__handlerID, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setHandlerID(Object value) throws DmcValueException {
        DmcTypeIntegerSV attr = (DmcTypeIntegerSV) get(DmpDMSAG.__handlerID);
        if (attr == null) attr = new DmcTypeIntegerSV(DmpDMSAG.__handlerID);
        attr.set(value);
        set(DmpDMSAG.__handlerID, attr);
    }

    public void remHandlerID() {
        rem(DmpDMSAG.__handlerID);
    }

    public String getResponseText() {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmpDMSAG.__responseText);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setResponseText(String value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__responseText);
        if (attr == null) attr = new DmcTypeStringSV(DmpDMSAG.__responseText);
        try {
            attr.set(value);
            set(DmpDMSAG.__responseText, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setResponseText(Object value) throws DmcValueException {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmpDMSAG.__responseText);
        if (attr == null) attr = new DmcTypeStringSV(DmpDMSAG.__responseText);
        attr.set(value);
        set(DmpDMSAG.__responseText, attr);
    }

    public void remResponseText() {
        rem(DmpDMSAG.__responseText);
    }

    public ResponseCategoryEnum getResponseCategory() {
        DmcTypeResponseCategoryEnumSV attr = (DmcTypeResponseCategoryEnumSV) get(DmpDMSAG.__responseCategory);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setResponseCategory(ResponseCategoryEnum value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__responseCategory);
        if (attr == null) attr = new DmcTypeResponseCategoryEnumSV(DmpDMSAG.__responseCategory);
        try {
            attr.set(value);
            set(DmpDMSAG.__responseCategory, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setResponseCategory(Object value) throws DmcValueException {
        DmcTypeResponseCategoryEnumSV attr = (DmcTypeResponseCategoryEnumSV) get(DmpDMSAG.__responseCategory);
        if (attr == null) attr = new DmcTypeResponseCategoryEnumSV(DmpDMSAG.__responseCategory);
        attr.set(value);
        set(DmpDMSAG.__responseCategory, attr);
    }

    public void remResponseCategory() {
        rem(DmpDMSAG.__responseCategory);
    }

    public Boolean isLastResponse() {
        DmcTypeBooleanSV attr = (DmcTypeBooleanSV) get(DmpDMSAG.__lastResponse);
        if (attr == null) return (true);
        return (attr.getSV());
    }

    public void setLastResponse(Boolean value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__lastResponse);
        if (attr == null) attr = new DmcTypeBooleanSV(DmpDMSAG.__lastResponse);
        try {
            attr.set(value);
            set(DmpDMSAG.__lastResponse, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setLastResponse(Object value) throws DmcValueException {
        DmcTypeBooleanSV attr = (DmcTypeBooleanSV) get(DmpDMSAG.__lastResponse);
        if (attr == null) attr = new DmcTypeBooleanSV(DmpDMSAG.__lastResponse);
        attr.set(value);
        set(DmpDMSAG.__lastResponse, attr);
    }

    public void remLastResponse() {
        rem(DmpDMSAG.__lastResponse);
    }

    public ResponseTypeEnum getResponseType() {
        DmcTypeResponseTypeEnumSV attr = (DmcTypeResponseTypeEnumSV) get(DmpDMSAG.__responseType);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setResponseType(ResponseTypeEnum value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__responseType);
        if (attr == null) attr = new DmcTypeResponseTypeEnumSV(DmpDMSAG.__responseType);
        try {
            attr.set(value);
            set(DmpDMSAG.__responseType, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setResponseType(Object value) throws DmcValueException {
        DmcTypeResponseTypeEnumSV attr = (DmcTypeResponseTypeEnumSV) get(DmpDMSAG.__responseType);
        if (attr == null) attr = new DmcTypeResponseTypeEnumSV(DmpDMSAG.__responseType);
        attr.set(value);
        set(DmpDMSAG.__responseType, attr);
    }

    public void remResponseType() {
        rem(DmpDMSAG.__responseType);
    }
}
