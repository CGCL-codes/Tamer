package br.nic.connector.csvHost;

import java.util.List;
import br.nic.connector.dao.HostsDAO;
import br.nic.connector.database.HibernateFactory;
import br.nic.connector.database.Sitios;
import br.nic.connector.general.Constants;
import br.nic.connector.general.SimpleLog;
import br.nic.connector.generics.csv.AutomatedCSVTester;
import br.nic.connector.generics.csv.GenericCSVTest;

/**
 * AutomatedTester responsible for implementing the tests related to the consolidation of data
 * obtained from the CSV generated by WIRE for each host.
 * @author Heitor
 */
public class AutomatedCSVHostTester extends AutomatedCSVTester {

    protected HostsDAO hostsInfo;

    private static AutomatedCSVHostTester singleton;

    /**
	 * Type is set in order to correctly print messages for this class.
	 */
    private AutomatedCSVHostTester() {
        type = "Teste de CSV de Hosts";
    }

    /**
	 * Returns the static instance of this class.
	 */
    public static AutomatedCSVHostTester getInstance() {
        if (singleton == null) singleton = new AutomatedCSVHostTester();
        return singleton;
    }

    /**
	 * Returns the class responsible for implementing the test required for this AutomatedTester.
	 */
    @Override
    protected GenericCSVTest getNewTestType() {
        return new CSVHostTest(dataTypes);
    }

    /**
	 * Writes the tested data to the DataBase. The data being written here is the whole
	 * spectrum of data obtained from the Hosts CSV
	 */
    @Override
    protected void writeTestData(String currTestIdentifier, Object returnValue) {
        if (returnValue != null) {
            hostsInfo.writeCSVResult(currTestIdentifier, (Sitios) returnValue);
        }
    }

    /**
	 * Obtains the identified contained on the given dataList, considering the data type expected
	 * for this host.
	 */
    @Override
    protected String getIdentifier(List<String> dataList, long soFar) {
        if (dataList.size() == dataTypes.size()) {
            for (int i = 0; i < dataList.size(); i++) {
                if (dataTypes.get(i).equals(Constants.CSVHOST_HOSTNAME)) {
                    return dataList.get(i);
                }
            }
            SimpleLog.getInstance().writeLog(3, "Lista de dados a partir do CSV para hosts " + "sem indentificador na linha " + soFar);
        } else {
            SimpleLog.getInstance().writeLog(3, "Lista de dados a partir do CSV para hosts " + "invÃ¡lida na linha " + soFar);
        }
        return null;
    }

    /**
	 * Defines and initializes the correct DAO for this test. In this case, HostsDAO.
	 */
    @Override
    protected void setDAO() {
        hostsInfo = new HostsDAO(new HibernateFactory().getSession(), this.encrypt);
    }

    /**
	 * Number of lines analyzed so far.
	 */
    public Long getNumLines() {
        return soFar;
    }
}
