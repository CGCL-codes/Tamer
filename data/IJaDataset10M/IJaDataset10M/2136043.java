package com.atolsystems.atolutilities;

import java.awt.Color;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

/**
 *
 * @author atolsystems
 */
public class ATextScreenOutput extends javax.swing.JDialog {

    Thread monitoringThread;

    StreamMonitor streamMonitor;

    boolean exitAppOnDispose;

    /** Creates new form ATextScreenOutput */
    public ATextScreenOutput(java.awt.Frame parent, boolean modal, boolean exitAppOnDispose) {
        super(parent, modal);
        initComponents();
        this.exitAppOnDispose = exitAppOnDispose;
        streamMonitor = new StreamMonitor(outputTextArea);
    }

    @Override
    public void setBackground(Color bg) {
        outputTextArea.setBackground(bg);
    }

    public void appendAndScroll(String s) {
        try {
            outputTextArea.getDocument().insertString(outputTextArea.getDocument().getLength(), s, null);
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(ATextScreenOutput.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setTextMaxSize(int textMaxSize) {
        streamMonitor.setTextMaxSize(textMaxSize);
    }

    public void setSizes(int textMaxSize, int textMinHistorySize, int pipeBufferSize) {
        streamMonitor.setSizes(textMaxSize, textMinHistorySize, pipeBufferSize);
    }

    public void monitorStream(PipedOutputStream toMonitor) throws IOException {
        streamMonitor.monitorStream(toMonitor);
    }

    public void stopMonitoring() {
        streamMonitor.stopMonitoring();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(null);
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }

            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        jScrollPane1.setName("jScrollPane1");
        outputTextArea.setColumns(20);
        outputTextArea.setEditable(false);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(ATextScreenOutput.class);
        outputTextArea.setFont(resourceMap.getFont("outputTextArea.font"));
        outputTextArea.setRows(5);
        outputTextArea.setTabSize(4);
        outputTextArea.setName("outputTextArea");
        jScrollPane1.setViewportView(outputTextArea);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE).addContainerGap()));
        pack();
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        streamMonitor.stopMonitoring();
        if (this.exitAppOnDispose) {
            super.dispose();
            System.exit(0);
        }
    }

    private void formWindowClosed(java.awt.event.WindowEvent evt) {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException, IOException {
        final ATextScreenOutput dialog = new ATextScreenOutput(null, false, true);
        dialog.setVisible(true);
        class TestThread implements Runnable {

            private ATextScreenOutput dialog;

            TestThread(ATextScreenOutput dialog) {
                this.dialog = dialog;
            }

            @Override
            public void run() {
                try {
                    String text = "";
                    PipedOutputStream pos = new PipedOutputStream();
                    dialog.monitorStream(pos);
                    for (int i = 0; i < 0x1000; i++) {
                        String zeroes = "";
                        for (int j = 0; j < Integer.numberOfLeadingZeros(i); j++) {
                            zeroes += '0';
                        }
                        text = zeroes + Integer.toBinaryString(i) + "\n";
                        pos.write(text.getBytes());
                    }
                    pos.close();
                    pos = null;
                    dialog = null;
                    System.out.flush();
                    System.gc();
                } catch (IOException ex) {
                    Logger.getLogger(ATextScreenOutput.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        Thread test = new Thread(new TestThread(dialog));
        long start = System.nanoTime();
        test.start();
        System.out.println("test.isAlive()=" + test.isAlive());
        test.join();
        System.out.println("test.isAlive()=" + test.isAlive());
        long end = System.nanoTime();
        System.out.println("exectime: " + Long.toString((end - start) / 1000000));
        dialog.monitoringThread.interrupt();
    }

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JTextArea outputTextArea;
}
