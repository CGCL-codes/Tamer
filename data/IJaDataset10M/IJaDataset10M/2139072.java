package org.xmlcml.cml.element.lite;

import java.util.ArrayList;
import java.util.List;
import nu.xom.Element;
import nu.xom.Node;
import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.interfacex.PeakOrGroup;

/**
 * user-modifiable class supporting peak. * autogenerated from schema use as a
 * shell which can be edited
 *
 */
public class CMLPeak extends AbstractPeak implements PeakOrGroup {

    /** namespaced element name.*/
    public static final String NS = C_E + TAG;

    /**
     * constructor.
     */
    public CMLPeak() {
    }

    /**
     * constructor.
     *
     * @param old
     */
    public CMLPeak(CMLPeak old) {
        super((AbstractPeak) old);
    }

    /**
     * copy node .
     *
     * @return Node
     */
    public Node copy() {
        return new CMLPeak(this);
    }

    /**
     * create new instance in context of parent, overridable by subclasses.
     *
     * @param parent
     *            parent of element to be constructed (ignored by default)
     * @return CMLPeak
     */
    public CMLElement makeElementInContext(Element parent) {
        return new CMLPeak();
    }

    /**
     * gets atoms referenced as targets of coupling. makes list of non-zero
     * lists returned by child peakStructure.getCouplingsFrom()
     *
     * @param molecule
     *            owning atoms; if null returns zero length List
     * @return list of atomLists (zero length if none found)
     */
    public List<List<CMLAtom>> getCouplingsFrom(CMLMolecule molecule) {
        List<List<CMLAtom>> atomListList = new ArrayList<List<CMLAtom>>();
        for (CMLPeakStructure ps : this.getPeakStructureElements()) {
            List<CMLAtom> atomList = ps.getCouplingsFrom(molecule);
            if (atomList.size() > 0) {
                atomListList.add(atomList);
            }
        }
        return atomListList;
    }
}
