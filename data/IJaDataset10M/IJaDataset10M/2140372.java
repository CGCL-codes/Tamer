package org.gmod.srs;

import java.io.File;
import org.apache.log4j.Logger;
import org.gmod.exceptions.SrsException;

/**
 * Class that manages the icarus scripts to run and the
 * results generated by them.
 * 
 * @author Josh Goodman
 * @version CVS $Revision: 1.5 $
 * 
 */
public class IcarusWrapper implements SrsWrapper {

    private SrsResultSet resultSet;

    private IcarusIO icarusio;

    private SrsCommand icarusScript;

    private Logger log;

    /**
	 * Default constructor that takes the program name as an argument.
	 * The program has to be a well formed icarus program.
	 * 
	 * @param progName The full path to the icarus program to be executed.
	 */
    public IcarusWrapper(String progName) {
        init();
        icarusScript.setQueryProgram(progName);
    }

    /**
	 * Function to add a flag to the icarus program to be executed.
	 * 
	 * @param flag A string representation of the flag to pass to the program.
	 */
    public void addCmdFlag(String flag) {
        icarusScript.appendCommand(flag);
    }

    /**
	 * Function to add a flag along with a value to the icarus program to be executed.
	 * @param flag The flag to pass to the program.
	 * @param val The value pair that goes with the flag.
	 */
    public void addCmdFlag(String flag, String val) {
        icarusScript.appendCommand(flag);
        icarusScript.appendCommand(val);
    }

    /**
	 * Function to represent the command as a string.
	 * 
	 * @return A string representation of the command being executed.
	 */
    public String showCommand() {
        return icarusScript.toString();
    }

    /**
	 * Function to execute the query defined for this IcarusWrapper object.
	 * 
	 * @return An SrsResultSet containing the results from the icarus program.
	 * @throws SrsException
	 */
    public SrsResultSet ExecQuery() throws SrsException {
        resultSet = icarusio.runQuery(icarusScript, resultSet);
        return resultSet;
    }

    /**
	 * Sets whether or not the SRS result set should be stored into 
	 * a temporary file or memory.  Set to true to store to file and
	 * false to store to memory.  For large queries storing to a file
	 * will be more efficient.
	 * 
	 * @param b Boolean indicating if an attachment will be used or not.
	 */
    public void useTempFile(boolean b) {
        log.debug("Setting temp file flag to " + b);
        resultSet.setTempFileFlag(b);
    }

    /**
	 * Tells the icarus script to output results to a temporary file
	 * instead of storing results to memory.
	 * 
	 * @param file The temporary file object to write results to.
	 */
    public void useTempFile(File file) {
        useTempFile(true);
        resultSet.setResultFile(file);
    }

    /**
	 * Clears the Icarus script query so that previous options passed
	 * to the program/script are not carried over to new queries.
	 *
	 */
    public void clear() {
        icarusScript.clear();
    }

    private void init() {
        log = Logger.getLogger("org.gmod.srs");
        log.debug("Initializing IcarusWrapper object.");
        icarusio = new IcarusIO();
        icarusScript = new SrsCommand();
        resultSet = new SrsResultSet();
    }
}
