package br.ufal.ic.forbile.infra.emathema.ontology;

import edu.stanford.smi.protegex.owl.model.*;
import java.util.*;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.owl-ontologies.com/emathema.owl#InstrutionalPlan
 *
 * @version generated on Wed Sep 27 02:26:48 GMT-03:00 2006
 */
public interface InstrutionalPlan extends THINGInstrutionalPlan {

    Collection getAssessmentResource();

    RDFProperty getAssessmentResourceProperty();

    boolean hasAssessmentResource();

    Iterator listAssessmentResource();

    void addAssessmentResource(THINGAssessment newAssessmentResource);

    void removeAssessmentResource(THINGAssessment oldAssessmentResource);

    void setAssessmentResource(Collection newAssessmentResource);

    Collection getHas_Aspect();

    RDFProperty getHas_AspectProperty();

    boolean hasHas_Aspect();

    Iterator listHas_Aspect();

    void addHas_Aspect(Aspect newHas_Aspect);

    void removeHas_Aspect(Aspect oldHas_Aspect);

    void setHas_Aspect(Collection newHas_Aspect);

    Collection getIsComposedBy_Tactic();

    RDFProperty getIsComposedBy_TacticProperty();

    boolean hasIsComposedBy_Tactic();

    Iterator listIsComposedBy_Tactic();

    void addIsComposedBy_Tactic(Tactic newIsComposedBy_Tactic);

    void removeIsComposedBy_Tactic(Tactic oldIsComposedBy_Tactic);

    void setIsComposedBy_Tactic(Collection newIsComposedBy_Tactic);

    Strategy getStrategicTutoring();

    RDFProperty getStrategicTutoringProperty();

    boolean hasStrategicTutoring();

    void setStrategicTutoring(Strategy newStrategicTutoring);

    Collection getTypeAssessment();

    RDFProperty getTypeAssessmentProperty();

    boolean hasTypeAssessment();

    Iterator listTypeAssessment();

    void addTypeAssessment(Object newTypeAssessment);

    void removeTypeAssessment(Object oldTypeAssessment);

    void setTypeAssessment(Collection newTypeAssessment);

    Collection getTypeTutoringStrategy();

    RDFProperty getTypeTutoringStrategyProperty();

    boolean hasTypeTutoringStrategy();

    Iterator listTypeTutoringStrategy();

    void addTypeTutoringStrategy(Object newTypeTutoringStrategy);

    void removeTypeTutoringStrategy(Object oldTypeTutoringStrategy);

    void setTypeTutoringStrategy(Collection newTypeTutoringStrategy);
}
