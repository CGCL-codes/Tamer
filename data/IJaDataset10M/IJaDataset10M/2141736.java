package kursova;

import database.Table;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 *
 * @author eldiaboloz
 */
public class CarForm extends javax.swing.JDialog {

    /** Creates new form CarForm */
    public CarForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        formDescriptionLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        modelsComboBox = new javax.swing.JComboBox();
        colorsComboBox = new javax.swing.JComboBox();
        priceTextField = new javax.swing.JTextField();
        yearTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        SaveButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form");
        formDescriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kursova.KursovaApp.class).getContext().getResourceMap(CarForm.class);
        formDescriptionLabel.setText(resourceMap.getString("formDescriptionLabel.text"));
        formDescriptionLabel.setName("formDescriptionLabel");
        jLabel3.setText(resourceMap.getString("jLabel3.text"));
        jLabel3.setName("jLabel3");
        jLabel4.setText(resourceMap.getString("jLabel4.text"));
        jLabel4.setName("jLabel4");
        jLabel5.setText(resourceMap.getString("jLabel5.text"));
        jLabel5.setName("jLabel5");
        jLabel6.setText(resourceMap.getString("jLabel6.text"));
        jLabel6.setName("jLabel6");
        modelsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        modelsComboBox.setName("modelsComboBox");
        colorsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        colorsComboBox.setName("colorsComboBox");
        priceTextField.setText(resourceMap.getString("priceTextField.text"));
        priceTextField.setName("priceTextField");
        yearTextField.setText(resourceMap.getString("yearTextField.text"));
        yearTextField.setName("yearTextField");
        jLabel7.setText(resourceMap.getString("jLabel7.text"));
        jLabel7.setName("jLabel7");
        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        typeComboBox.setName("typeComboBox");
        jScrollPane1.setName("jScrollPane1");
        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setName("descriptionTextArea");
        jScrollPane1.setViewportView(descriptionTextArea);
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText(resourceMap.getString("jLabel8.text"));
        jLabel8.setName("jLabel8");
        SaveButton.setText(resourceMap.getString("SaveButton.text"));
        SaveButton.setName("SaveButton");
        SaveButton.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SaveButtonMouseClicked(evt);
            }
        });
        CancelButton.setText(resourceMap.getString("CancelButton.text"));
        CancelButton.setName("CancelButton");
        CancelButton.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CancelButtonMouseClicked(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(formDescriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(10, 10, 10).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel3).addComponent(jLabel4).addComponent(jLabel5).addComponent(jLabel7)).addGap(22, 22, 22)).addGroup(layout.createSequentialGroup().addComponent(jLabel6).addGap(18, 18, 18))).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(typeComboBox, 0, 186, Short.MAX_VALUE).addComponent(colorsComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 186, Short.MAX_VALUE).addComponent(modelsComboBox, 0, 186, Short.MAX_VALUE).addComponent(priceTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE).addComponent(yearTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addComponent(SaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE).addGap(18, 18, 18).addComponent(CancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE).addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)).addGap(9, 9, 9))).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(formDescriptionLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel8).addComponent(jLabel3).addComponent(modelsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(colorsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel4)).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel5).addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(yearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel6)).addGap(19, 19, 19).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel7).addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(SaveButton).addComponent(CancelButton))).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)).addContainerGap()));
        pack();
    }

    private void SaveButtonMouseClicked(java.awt.event.MouseEvent evt) {
        String message = "";
        try {
            int year = Integer.parseInt(this.yearTextField.getText());
            float price = Float.parseFloat(this.priceTextField.getText());
            if ((year < 1900 && year > 2010) || price <= 0) {
                message = "Имате грешно въведена година или цена на автомобила";
            }
        } catch (Exception e) {
            message = "Имате грешно въведена година или цена на автомобила";
        }
        if (!message.equals("")) {
            JOptionPane.showMessageDialog(null, message);
            return;
        }
        try {
            Table carTable = new Table("cars", KursovaApp.getDatabase());
            HashMap newData = new HashMap();
            newData.put("car_price", this.priceTextField.getText());
            newData.put("car_year_produced", this.yearTextField.getText());
            newData.put("car_mdl_id", new Integer(this.currentModels[this.modelsComboBox.getSelectedIndex()]).toString());
            newData.put("car_clr_id", new Integer(this.currentColors[this.colorsComboBox.getSelectedIndex()]).toString());
            newData.put("car_type_id", new Integer(this.currentTypes[this.typeComboBox.getSelectedIndex()]).toString());
            newData.put("car_description", this.descriptionTextArea.getText());
            if (this.carRow instanceof HashMap) {
                carTable.update(newData, "car_id = " + (String) carRow.get("car_id"));
            } else {
                carTable.insert(newData);
            }
            this.setVisible(false);
            this.masterAdminDialog.loadTable();
        } catch (Exception e) {
            System.out.println(e);
            System.exit(1);
        }
    }

    private void CancelButtonMouseClicked(java.awt.event.MouseEvent evt) {
        this.setVisible(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                CarForm dialog = new CarForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private javax.swing.JButton CancelButton;

    private javax.swing.JButton SaveButton;

    private javax.swing.JComboBox colorsComboBox;

    private javax.swing.JTextArea descriptionTextArea;

    private javax.swing.JLabel formDescriptionLabel;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JLabel jLabel4;

    private javax.swing.JLabel jLabel5;

    private javax.swing.JLabel jLabel6;

    private javax.swing.JLabel jLabel7;

    private javax.swing.JLabel jLabel8;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JComboBox modelsComboBox;

    private javax.swing.JTextField priceTextField;

    private javax.swing.JComboBox typeComboBox;

    private javax.swing.JTextField yearTextField;

    /**
     * Пряк път, без подаване на 0
     */
    public void initForm() {
        this.initForm(0);
    }

    public void initForm(int carId) {
        if (!(this.masterAdminDialog instanceof AdminDialog)) {
            System.out.println("Фатална грешка! masterAdminDialog не е инцилизиран");
            System.exit(1);
        }
        try {
            Table carsTable = new Table("cars", KursovaApp.getDatabase());
            if (carId > 0 && (null != (this.carRow = carsTable.fetchRow(KursovaApp.getFullProjectSelect().limit(1).where("car_id = " + carId))))) {
                this.loadBrandAndModel(Integer.parseInt((String) this.carRow.get("car_mdl_id")));
                this.loadColors(Integer.parseInt((String) this.carRow.get("car_clr_id")));
                this.loadTypes(Integer.parseInt((String) this.carRow.get("car_type_id")));
                this.loadDescription((String) this.carRow.get("car_description"));
                this.loadPrice(Float.parseFloat((String) this.carRow.get("car_price")));
                this.loadYear(Integer.parseInt((String) this.carRow.get("car_year_produced")));
                this.formDescriptionLabel.setText("Редакция на ID " + carId);
            } else {
                this.carRow = null;
                this.loadBrandAndModel(0);
                this.loadColors(0);
                this.loadTypes(0);
                this.loadDescription("");
                this.loadPrice(0);
                this.loadYear(0);
                this.formDescriptionLabel.setText("Добавяне на нов автомобил");
            }
            if (carId == 0) {
            } else {
            }
        } catch (Exception ex) {
            System.err.println(ex);
            System.exit(1);
        }
    }

    private void loadColors(int currentColor) throws Exception {
        Table colorsTable = new Table("colors", KursovaApp.getDatabase());
        HashMap[] colors = colorsTable.fetchAllRows();
        this.colorsComboBox.removeAllItems();
        int selectedIndex = 0;
        this.currentColors = new int[colors.length];
        for (int i = 0; i < colors.length; i++) {
            this.colorsComboBox.addItem((String) colors[i].get("clr_name"));
            this.currentColors[i] = Integer.parseInt((String) colors[i].get("clr_id"));
            if (currentColor == this.currentColors[i]) {
                selectedIndex = i;
            }
        }
        this.colorsComboBox.setSelectedIndex(selectedIndex);
    }

    private void loadTypes(int currentType) throws Exception {
        Table typesTable = new Table("types", KursovaApp.getDatabase());
        HashMap[] types = typesTable.fetchAllRows();
        this.typeComboBox.removeAllItems();
        int selectedIndex = 0;
        this.currentTypes = new int[types.length];
        for (int i = 0; i < types.length; i++) {
            this.typeComboBox.addItem((String) types[i].get("type_name"));
            this.currentTypes[i] = Integer.parseInt((String) types[i].get("type_id"));
            if (currentType == this.currentTypes[i]) {
                selectedIndex = i;
            }
        }
        this.typeComboBox.setSelectedIndex(selectedIndex);
    }

    private void loadBrandAndModel(int currentModel) throws Exception {
        Table modelsTable = new Table("models", KursovaApp.getDatabase());
        HashMap[] models = modelsTable.fetchAll(modelsTable.select().joinLeft("brands", "mdl_brd_id", "brd_id").order("brd_id", "ASC"));
        this.modelsComboBox.removeAllItems();
        int selectedIndex = 0;
        this.currentModels = new int[models.length];
        for (int i = 0; i < models.length; i++) {
            this.modelsComboBox.addItem((String) models[i].get("brd_name") + " - " + (String) models[i].get("mdl_name"));
            this.currentModels[i] = Integer.parseInt((String) models[i].get("mdl_id"));
            if (currentModel == this.currentModels[i]) {
                selectedIndex = i;
            }
        }
        this.modelsComboBox.setSelectedIndex(selectedIndex);
    }

    private void loadDescription(String content) {
        this.descriptionTextArea.setText(content);
    }

    private void loadPrice(float price) {
        this.priceTextField.setText(new Float(price).toString());
    }

    private void loadYear(int year) {
        if (year == 0) {
            year = 1900;
        }
        this.yearTextField.setText(new Integer(year).toString());
    }

    public int[] currentColors;

    public int[] currentTypes;

    public int[] currentModels;

    /**
     * За да може да манупулира таблицата при редакция и създаване на нов запис
     */
    private AdminDialog masterAdminDialog = null;

    public void setAdminDialog(AdminDialog masterAdminDialog) {
        this.masterAdminDialog = masterAdminDialog;
    }

    private HashMap carRow = null;
}
