package org.primordion.xholon.io;

import java.io.File;
import java.io.IOException;
import java.io.Writer;
import java.util.Date;
import java.util.List;
import org.primordion.tool.XholonSortedNode;
import org.primordion.xholon.base.IXholon;
import org.primordion.xholon.base.PortInformation;
import org.primordion.xholon.base.Xholon;
import org.primordion.xholon.util.MiscIo;
import org.primordion.xholon.util.StringTokenizer;

/**
 * <p>Output a Xholon process model in jPDL format.
 * The resulting .xml file can be read by the jPDL graphic editor.</p>
 * <p>Example of use:</p>
 * <pre>
 * IXholon2Gui xholon2Jpdl = new Xholon2Jpdl();
 * xholon2Jpdl.initialize(null, modelName, root);
 * xholon2Jpdl.writeAll();
 * </pre>
 * @author <a href="mailto:ken@primordion.com">Ken Webb</a>
 * @see <a href="http://www.primordion.com/Xholon">Xholon Project website</a>
 * @since 0.7.1 (Created on November 22, 2008)
 */
public class Xholon2Jpdl implements IXholon2Gui {

    /** The name of the file to output. */
    protected String jpdlFileName;

    /** The name of the Xholon model. */
    protected String modelName;

    /** The root node in the generated GUI. */
    protected IXholon root;

    /** The instance of Writer that writes to jpdlFileName. */
    protected Writer jpdlOut;

    /** The path where the guiFileName is located. */
    protected String jpdlPathName = "./jpdl/";

    /** Current date and time. */
    protected Date timeNow;

    /** The number of milliseconds since Jan 1, 1970. Same value as timeNow. */
    protected long timeStamp;

    /** Whether or not to show state machines. */
    protected boolean showStates = false;

    /** */
    protected String nameTemplate = "r:C^^^";

    /** Root node in a tree of counts of how many times each IXholon is referenced by others. */
    protected XholonSortedNode reffedRoot = null;

    /**
	 * The name of a Xholon superclass that uniquely identifies processes in the model.
	 * Examples:
	 * "Process"
	 * "DfdProcess" (in DfdEntity mechanism)
	 * "task-node" (in JpdlEntity mechanism)
	 * "Bpmn_Activity" (in BpmnEntity mechanism)
	 */
    protected String processSuperclassName = "Process";

    public boolean initialize(Object out, String modelName, IXholon root) {
        timeNow = new Date();
        timeStamp = timeNow.getTime();
        if (out == null) {
            this.jpdlFileName = jpdlPathName + root.getXhcName() + "_" + root.getId() + "_" + timeStamp + ".xml";
        } else {
            this.jpdlFileName = (String) out;
        }
        this.modelName = modelName;
        this.root = root;
        return true;
    }

    public void writeAll() {
        File dirOut = new File(jpdlPathName);
        dirOut.mkdirs();
        jpdlOut = MiscIo.openOutputFile(jpdlFileName);
        try {
            jpdlOut.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
            jpdlOut.write("<!--\nAutomatically generated by Xholon version 0.8, using " + this.getClass().getName() + ".java\n" + new Date() + " " + timeStamp + "\n" + "model: " + modelName + "\n" + "www.primordion.com/Xholon\n-->\n");
            jpdlOut.write("<process-definition xmlns=\"\" name=\"" + modelName + "\">\n");
            indent(1);
            jpdlOut.write("<start-state name=\"start\"></start-state>\n");
            writeAllContour();
            indent(1);
            jpdlOut.write("<end-state name=\"end\"></end-state>\n");
            jpdlOut.write("</process-definition>\n");
        } catch (IOException e) {
            Xholon.getLogger().error("writeAll()", e);
        }
        MiscIo.closeOutputFile(jpdlOut);
    }

    /**
	 * Write all nodes in a contour format.
	 */
    protected void writeAllContour() {
        writeContourNode(root, 1);
    }

    /**
	 * Write one node, and its child nodes.
	 * @param node The current node in the Xholon hierarchy.
	 * @param level Current level in the hierarchy.
	 */
    protected void writeContourNode(IXholon node, int level) {
        if (isProcess(node)) {
            writeContourLeaf(node, level);
        }
        IXholon childNode = node.getFirstChild();
        while (childNode != null) {
            writeContourNode(childNode, level);
            childNode = childNode.getNextSibling();
        }
    }

    /**
	 * Write a leaf contour node (no children).
	 * @param node The current node in the Xholon hierarchy.
	 * @param level Current level in the hierarchy.
	 */
    protected void writeContourLeaf(IXholon node, int level) {
        String nodeName = node.getName(nameTemplate);
        try {
            indent(level);
            jpdlOut.write("<task-node name=\"" + nodeName + "\">\n");
            writePorts(node, level + 1);
            indent(level);
            jpdlOut.write("</task-node>\n");
        } catch (IOException e) {
            Xholon.getLogger().error("writeContourLeaf()", e);
        }
    }

    /**
	 * Write zero or more ports for a specified node.
	 * @param node The current node in the Xholon hierarchy.
	 * @param level Current level in the hierarchy.
	 */
    protected void writePorts(IXholon node, int level) {
        List portList = node.getAllPorts();
        for (int i = 0; i < portList.size(); i++) {
            writePort((PortInformation) portList.get(i), level);
        }
    }

    /**
	 * Write one port for a node, but only if the referenced node is a process node.
	 * example:
	 * &lt;transition to="Process_17"&gt;&lt;/transition&gt;
	 * @param portInfo Information about a port.
	 * @param level 
	 */
    protected void writePort(PortInformation portInfo, int level) {
        IXholon reffedNode = portInfo.getReffedNode();
        if (isProcess(reffedNode)) {
            try {
                indent(level);
                jpdlOut.write("<transition to=\"");
                jpdlOut.write(reffedNode.getName(nameTemplate));
                jpdlOut.write("\"></transition>\n");
            } catch (IOException e) {
                Xholon.getLogger().error("writePort()", e);
            }
        }
    }

    /**
	 * Is this a process node?
	 * @param node
	 * @return true or false
	 */
    protected boolean isProcess(IXholon node) {
        return (node.getXhc().hasAncestor(processSuperclassName));
    }

    /**
	 * Normalize the content of the input String.
	 * XML content may not contain the
	 * &lt; or &amp; characters.
	 * @param content The content that will appear between an XML start and end tag.
	 * @return Valid XML content.
	 */
    protected String normalizeXmlContent(String content) {
        String newContent;
        newContent = content.replaceAll("&", "&amp;");
        newContent = newContent.replaceAll("<", "&lt;");
        newContent = newContent.replaceAll(">", "&gt;");
        return newContent;
    }

    /**
	 * Indent each line in the output .xml file.
	 * @param level
	 */
    protected void indent(int level) {
        try {
            for (int i = 0; i < level; i++) {
                jpdlOut.write("  ");
            }
        } catch (IOException e) {
            Xholon.getLogger().error("indent()", e);
        }
    }

    public String getJpdlFileName() {
        return jpdlFileName;
    }

    public void setJpdlFileName(String jpdlFileName) {
        this.jpdlFileName = jpdlFileName;
    }

    public String getModelName() {
        return modelName;
    }

    public void setModelName(String modelName) {
        this.modelName = modelName;
    }

    public IXholon getRoot() {
        return root;
    }

    public void setRoot(IXholon root) {
        this.root = root;
    }

    public Writer getJpdlOut() {
        return jpdlOut;
    }

    public void setJpdlOut(Writer jpdlOut) {
        this.jpdlOut = jpdlOut;
    }

    public String getJpdlPathName() {
        return jpdlPathName;
    }

    public void setJpdlPathName(String jpdlPathName) {
        this.jpdlPathName = jpdlPathName;
    }

    public Date getTimeNow() {
        return timeNow;
    }

    public void setTimeNow(Date timeNow) {
        this.timeNow = timeNow;
    }

    public long getTimeStamp() {
        return timeStamp;
    }

    public void setTimeStamp(long timeStamp) {
        this.timeStamp = timeStamp;
    }

    public boolean isShowStates() {
        return showStates;
    }

    public void setShowStates(boolean showStates) {
        this.showStates = showStates;
    }

    public String getNameTemplate() {
        return nameTemplate;
    }

    public void setNameTemplate(String nameTemplate) {
        this.nameTemplate = nameTemplate;
    }

    public XholonSortedNode getReffedRoot() {
        return reffedRoot;
    }

    public void setReffedRoot(XholonSortedNode reffedRoot) {
        this.reffedRoot = reffedRoot;
    }

    public String getProcessSuperclassName() {
        return processSuperclassName;
    }

    public void setProcessSuperclassName(String processSuperclassName) {
        this.processSuperclassName = processSuperclassName;
    }

    /**
	 * For now, the only parameter is the processSuperclassName.
	 */
    public void setParams(String params) {
        StringTokenizer st = new StringTokenizer(params, ",");
        if (st.hasMoreTokens()) {
            setProcessSuperclassName(st.nextToken());
        }
    }
}
