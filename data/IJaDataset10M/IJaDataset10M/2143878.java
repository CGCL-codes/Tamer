package rpr2_d18.enumeratedDataRepresentations;

import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.ByteWrapper;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.RtiFactoryFactory;
import hla.rti1516e.encoding.EncoderFactory;
import hla.rti1516e.encoding.HLAoctet;

/**
 * JAVADOC_COMMENTS
 * name notes = 8
 * semantics  = -NULL- 
 * @author : auto generated by DRDC FOM Generator
 */
public class ForceIdentifierEnum8 implements DataElement {

    private HLAoctet value;

    private static EncoderFactory ef;

    public static final HLAoctet Other = ef.createHLAoctet((byte) 0);

    public static final HLAoctet Friendly = ef.createHLAoctet((byte) 1);

    public static final HLAoctet Opposing = ef.createHLAoctet((byte) 2);

    public static final HLAoctet Neutral = ef.createHLAoctet((byte) 3);

    public static final HLAoctet Friendly_2 = ef.createHLAoctet((byte) 4);

    public static final HLAoctet Opposing_2 = ef.createHLAoctet((byte) 5);

    public static final HLAoctet Neutral_2 = ef.createHLAoctet((byte) 6);

    public static final HLAoctet Friendly_3 = ef.createHLAoctet((byte) 7);

    public static final HLAoctet Opposing_3 = ef.createHLAoctet((byte) 8);

    public static final HLAoctet Neutral_3 = ef.createHLAoctet((byte) 9);

    public static final HLAoctet Friendly_4 = ef.createHLAoctet((byte) 10);

    public static final HLAoctet Opposing_4 = ef.createHLAoctet((byte) 11);

    public static final HLAoctet Neutral_4 = ef.createHLAoctet((byte) 12);

    public static final HLAoctet Friendly_5 = ef.createHLAoctet((byte) 13);

    public static final HLAoctet Opposing_5 = ef.createHLAoctet((byte) 14);

    public static final HLAoctet Neutral_5 = ef.createHLAoctet((byte) 15);

    public static final HLAoctet Friendly_6 = ef.createHLAoctet((byte) 16);

    public static final HLAoctet Opposing_6 = ef.createHLAoctet((byte) 17);

    public static final HLAoctet Neutral_6 = ef.createHLAoctet((byte) 18);

    public static final HLAoctet Friendly_7 = ef.createHLAoctet((byte) 19);

    public static final HLAoctet Opposing_7 = ef.createHLAoctet((byte) 20);

    public static final HLAoctet Neutral_7 = ef.createHLAoctet((byte) 21);

    public static final HLAoctet Friendly_8 = ef.createHLAoctet((byte) 22);

    public static final HLAoctet Opposing_8 = ef.createHLAoctet((byte) 23);

    public static final HLAoctet Neutral_8 = ef.createHLAoctet((byte) 24);

    public static final HLAoctet Friendly_9 = ef.createHLAoctet((byte) 25);

    public static final HLAoctet Opposing_9 = ef.createHLAoctet((byte) 26);

    public static final HLAoctet Neutral_9 = ef.createHLAoctet((byte) 27);

    public static final HLAoctet Friendly_10 = ef.createHLAoctet((byte) 28);

    public static final HLAoctet Opposing_10 = ef.createHLAoctet((byte) 29);

    public static final HLAoctet Neutral_10 = ef.createHLAoctet((byte) 30);

    /**
   * Empty constructor
   */
    public ForceIdentifierEnum8() throws RTIinternalError {
        ef = RtiFactoryFactory.getRtiFactory().getEncoderFactory();
    }

    /**
   * Returns this data value element
   * 
   * @return : native value type
   */
    public HLAoctet get() {
        return value;
    }

    /**
   * Set the value from a native java type
   * 
   * @param newValue : the value to set it to
   */
    public void set(HLAoctet newValue) {
        value = newValue;
    }

    /**
   * Decodes this element from an array of bytes
   * 
   * @param bytes : array of bytes 
   */
    public void decode(byte[] newValue) throws DecoderException {
        value.decode(newValue);
    }

    /**
   * Decodes this element from a ByteWrapper object
   * 
   * @param byteWrapper : organized array of bytes 
   */
    public void decode(ByteWrapper byteWrapper) throws DecoderException {
        value.decode(byteWrapper);
    }

    /**
   * Encodes this element into the specified ByteWrapper.
   * 
   * @param byteWrapper : organized byte array containing native java value
   */
    public void encode(ByteWrapper byteWrapper) {
        value.encode(byteWrapper);
    }

    /**
   * Returns the size in bytes of this element's encoding.
   * 
   * @return : length in bytes
   */
    public int getEncodedLength() {
        return value.getEncodedLength();
    }

    /**
   * Returns the octet boundary of this element.
   *  
   * @return : octet boundary position
   */
    public int getOctetBoundary() {
        return value.getOctetBoundary();
    }

    /**
   * Copies the value into an array of bytes
   * 
   * @return : array of bytes
   */
    public byte[] toByteArray() {
        return value.toByteArray();
    }
}
