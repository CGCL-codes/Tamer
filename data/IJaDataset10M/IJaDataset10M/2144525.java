package rpr2_d18.objectClassRepresentations;

import java.util.HashMap;
import hla.rti1516e.AttributeHandleValueMap;
import hla.rti1516e.AttributeHandleValueMapFactory;
import hla.rti1516e.RTIambassador;
import hla.rti1516e.ObjectInstanceHandle;
import hla.rti1516e.ObjectClassHandle;
import hla.rti1516e.AttributeHandle;
import hla.rti1516e.AttributeHandleSet;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.exceptions.AttributeNotDefined;
import hla.rti1516e.exceptions.FederateNotExecutionMember;
import hla.rti1516e.exceptions.InvalidAttributeHandle;
import hla.rti1516e.exceptions.InvalidInteractionClassHandle;
import hla.rti1516e.exceptions.InvalidObjectClassHandle;
import hla.rti1516e.exceptions.NameNotFound;
import hla.rti1516e.exceptions.NotConnected;
import hla.rti1516e.exceptions.ObjectClassNotDefined;
import hla.rti1516e.exceptions.ObjectClassNotPublished;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.exceptions.RestoreInProgress;
import hla.rti1516e.exceptions.SaveInProgress;
import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.ByteWrapper;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.encoding.DecoderException;
import rpr2_d18.simpleDataRepresentations.unsignedInt16;
import rpr2_d18.simpleDataRepresentations.Power_dBm;
import rpr2_d18.fixedRecordRepresentations.RTIObjectIdStruct;
import rpr2_d18.enumeratedDataRepresentations.ReceiverOperationalStatusEnum16;

/**
 * JAVADOC_COMMENTS
 * name : RadioReceiver
 * sharing : PublishSubscribe
 * semantics : A device that converts incoming electromagnetic waves in the radio frequency range into information.
 *
 * @author : auto generated by DRDC FOM Generator
 */
public class RadioReceiver extends EmbeddedSystem {

    private unsignedInt16 RadioIndex;

    private Power_dBm ReceivedPower;

    private RTIObjectIdStruct ReceivedTransmitterIdentifier;

    private ReceiverOperationalStatusEnum16 ReceiverOperationalStatus;

    /**
   * Constructor
   */
    public RadioReceiver(RTIambassador rtiAmb) throws FederateNotExecutionMember, NotConnected {
        super(rtiAmb);
    }

    /**
   * Constructor
   */
    public RadioReceiver(RTIambassador rtiAmb, String className) throws NameNotFound, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, className);
    }

    /**
   * Constructor
   */
    public RadioReceiver(RTIambassador rtiAmb, ObjectClassHandle classHandle) throws NameNotFound, InvalidObjectClassHandle, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, classHandle);
    }

    /**
   * Constructor
   */
    public RadioReceiver(RTIambassador rtiAmb, ObjectClassHandle classHandle, String instanceName) throws NameNotFound, InvalidObjectClassHandle, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, classHandle, instanceName);
    }

    /**
   * Constructor
   */
    public RadioReceiver(RTIambassador rtiAmb, String className, String instanceName) throws NameNotFound, InvalidObjectClassHandle, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, className, instanceName);
    }

    /**
   * Constructor
   */
    public RadioReceiver(RTIambassador rtiAmb, String className, ObjectInstanceHandle instanceHandle, String instanceName) throws NameNotFound, InvalidObjectClassHandle, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, className, instanceHandle, instanceName);
    }

    /**
   * Decode Attributes
   * Calls the decoder for each possible attribute
   * NOTE: since attributes are now in a map, order within the byte stream is not improtant
   */
    public void decodeAttributes(AttributeHandleValueMap attributes) throws NameNotFound, FederateNotExecutionMember, NotConnected, RTIinternalError, InvalidObjectClassHandle, DecoderException {
        super.decodeAttributes(attributes);
        RadioIndex.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "RadioIndex")));
        ReceivedPower.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "ReceivedPower")));
        ReceivedTransmitterIdentifier.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "ReceivedTransmitterIdentifier")));
        ReceiverOperationalStatus.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "ReceiverOperationalStatus")));
    }

    /**
   * Encode Parameters
   * Adds each parameter to the parameter handle / value maop
   */
    public void encodeAttributes() throws NameNotFound, FederateNotExecutionMember, NotConnected, RTIinternalError, InvalidObjectClassHandle, DecoderException {
        super.encodeAttributes();
        addAttribute("RadioIndex", RadioIndex.toByteArray());
        addAttribute("ReceivedPower", ReceivedPower.toByteArray());
        addAttribute("ReceivedTransmitterIdentifier", ReceivedTransmitterIdentifier.toByteArray());
        addAttribute("ReceiverOperationalStatus", ReceiverOperationalStatus.toByteArray());
    }

    public unsignedInt16 getRadioIndex() {
        return this.RadioIndex;
    }

    public Power_dBm getReceivedPower() {
        return this.ReceivedPower;
    }

    public RTIObjectIdStruct getReceivedTransmitterIdentifier() {
        return this.ReceivedTransmitterIdentifier;
    }

    public ReceiverOperationalStatusEnum16 getReceiverOperationalStatus() {
        return this.ReceiverOperationalStatus;
    }

    public void setRadioIndex(unsignedInt16 RadioIndex) {
        this.RadioIndex = RadioIndex;
    }

    public void setReceivedPower(Power_dBm ReceivedPower) {
        this.ReceivedPower = ReceivedPower;
    }

    public void setReceivedTransmitterIdentifier(RTIObjectIdStruct ReceivedTransmitterIdentifier) {
        this.ReceivedTransmitterIdentifier = ReceivedTransmitterIdentifier;
    }

    public void setReceiverOperationalStatus(ReceiverOperationalStatusEnum16 ReceiverOperationalStatus) {
        this.ReceiverOperationalStatus = ReceiverOperationalStatus;
    }
}
