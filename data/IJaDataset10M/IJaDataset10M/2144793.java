package generadorui.editor.properties;

import generadorui.GeneradoruiApp;
import javax.swing.table.DefaultTableModel;
import org.achup.generador.model.Column;
import org.achup.generador.model.ForeignColumnReference;
import org.achup.generador.model.ForeignKey;
import org.achup.generador.model.Model;
import org.achup.generador.model.Table;
import org.jdesktop.application.Action;

/**
 *
 * @author Marco Bassaletti Olivos.
 */
public class ForeignColumnReferenceDialog extends javax.swing.JDialog {

    private ForeignKey foreignKey;

    private ForeignColumnReference columnReference;

    private Table lTable;

    private Table fTable;

    /** Creates new form ForeignColumnReferenceDialog */
    public ForeignColumnReferenceDialog(java.awt.Frame parent, boolean modal, ForeignKey foreignKey) {
        super(parent, modal);
        initComponents();
        this.foreignKey = foreignKey;
        DefaultTableModel localModel = (DefaultTableModel) localTable.getModel();
        localModel.setRowCount(0);
        lTable = (Table) foreignKey.getParent();
        Column[] columns = lTable.getColumns();
        for (Column column : columns) {
            String columnDataTypeName = "Unknown";
            if (column.getDataType() != null) {
                columnDataTypeName = column.getDataType().getName();
            }
            localModel.addRow(new Object[] { column.getName(), columnDataTypeName });
        }
        DefaultTableModel foreignModel = (DefaultTableModel) foreignTable.getModel();
        foreignModel.setRowCount(0);
        fTable = foreignKey.getForeignTable();
        columns = fTable.getColumns();
        for (Column column : columns) {
            String columnDataTypeName = "Unknown";
            if (column.getDataType() != null) {
                columnDataTypeName = column.getDataType().getName();
            }
            foreignModel.addRow(new Object[] { column.getName(), columnDataTypeName });
        }
        try {
            GeneradoruiApp.getApplication().getContext().getSessionStorage().restore(this, ForeignColumnReferenceDialog.class.getName() + ".xml");
        } catch (Exception ex) {
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jSplitPane1 = new javax.swing.JSplitPane();
        localPanel = new javax.swing.JPanel();
        localScrollPane = new javax.swing.JScrollPane();
        localTable = new javax.swing.JTable();
        foreignPanel = new javax.swing.JPanel();
        foreignScrollPane = new javax.swing.JScrollPane();
        foreignTable = new javax.swing.JTable();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(generadorui.GeneradoruiApp.class).getContext().getResourceMap(ForeignColumnReferenceDialog.class);
        setTitle(resourceMap.getString("Form.title"));
        setName("Form");
        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setName("jSplitPane1");
        localPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("localPanel.border.title")));
        localPanel.setName("localPanel");
        localScrollPane.setName("localScrollPane");
        localTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null }, { null, null }, { null, null }, { null, null } }, new String[] { "Column", "Data Type" }) {

            Class[] types = new Class[] { java.lang.String.class, java.lang.String.class };

            boolean[] canEdit = new boolean[] { false, false };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        localTable.setName("localTable");
        localScrollPane.setViewportView(localTable);
        javax.swing.GroupLayout localPanelLayout = new javax.swing.GroupLayout(localPanel);
        localPanel.setLayout(localPanelLayout);
        localPanelLayout.setHorizontalGroup(localPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(localPanelLayout.createSequentialGroup().addContainerGap().addComponent(localScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE).addContainerGap()));
        localPanelLayout.setVerticalGroup(localPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(localPanelLayout.createSequentialGroup().addComponent(localScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE).addContainerGap()));
        jSplitPane1.setLeftComponent(localPanel);
        foreignPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("foreignPanel.border.title")));
        foreignPanel.setName("foreignPanel");
        foreignScrollPane.setName("foreignScrollPane");
        foreignTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null }, { null, null }, { null, null }, { null, null } }, new String[] { "Column", "Data Type" }) {

            Class[] types = new Class[] { java.lang.String.class, java.lang.String.class };

            boolean[] canEdit = new boolean[] { false, false };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        foreignTable.setName("foreignTable");
        foreignScrollPane.setViewportView(foreignTable);
        javax.swing.GroupLayout foreignPanelLayout = new javax.swing.GroupLayout(foreignPanel);
        foreignPanel.setLayout(foreignPanelLayout);
        foreignPanelLayout.setHorizontalGroup(foreignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(foreignPanelLayout.createSequentialGroup().addContainerGap().addComponent(foreignScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE).addContainerGap()));
        foreignPanelLayout.setVerticalGroup(foreignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(foreignPanelLayout.createSequentialGroup().addComponent(foreignScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE).addContainerGap()));
        jSplitPane1.setRightComponent(foreignPanel);
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(generadorui.GeneradoruiApp.class).getContext().getActionMap(ForeignColumnReferenceDialog.class, this);
        cancelButton.setAction(actionMap.get("cancelAction"));
        cancelButton.setText(resourceMap.getString("cancelButton.text"));
        cancelButton.setName("cancelButton");
        okButton.setAction(actionMap.get("okAction"));
        okButton.setText(resourceMap.getString("okButton.text"));
        okButton.setName("okButton");
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE).addGroup(layout.createSequentialGroup().addComponent(okButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cancelButton))).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(cancelButton).addComponent(okButton)).addContainerGap()));
        pack();
    }

    public ForeignColumnReference getColumnReference() {
        return columnReference;
    }

    @Action
    public void okAction() {
        int localSelRow = localTable.getSelectedRow();
        if (localSelRow != -1) {
            DefaultTableModel localModel = (DefaultTableModel) localTable.getModel();
            String localColumnName = localModel.getValueAt(localSelRow, 0).toString();
            int foreignSelRow = foreignTable.getSelectedRow();
            if (foreignSelRow != -1) {
                DefaultTableModel foreignModel = (DefaultTableModel) foreignTable.getModel();
                String foreignColumnName = foreignModel.getValueAt(foreignSelRow, 0).toString();
                ForeignColumnReference foreignColumnReference = new ForeignColumnReference();
                foreignColumnReference.setLocalColumnName(localColumnName);
                foreignColumnReference.setLocalColumn(lTable.getColumn(localColumnName));
                foreignColumnReference.setForeignColumnName(foreignColumnName);
                foreignColumnReference.setForeignColumn(fTable.getColumn(foreignColumnName));
                foreignColumnReference.setForeignTableName(foreignKey.getForeignTableName());
                columnReference = foreignColumnReference;
                try {
                    GeneradoruiApp.getApplication().getContext().getSessionStorage().save(this, ForeignColumnReferenceDialog.class.getName() + ".xml");
                } catch (Exception ex) {
                }
                dispose();
            }
        }
    }

    @Action
    public void cancelAction() {
        columnReference = null;
        try {
            GeneradoruiApp.getApplication().getContext().getSessionStorage().save(this, ForeignColumnReferenceDialog.class.getName() + ".xml");
        } catch (Exception ex) {
        }
        dispose();
    }

    private javax.swing.JButton cancelButton;

    private javax.swing.JPanel foreignPanel;

    private javax.swing.JScrollPane foreignScrollPane;

    private javax.swing.JTable foreignTable;

    private javax.swing.JSplitPane jSplitPane1;

    private javax.swing.JPanel localPanel;

    private javax.swing.JScrollPane localScrollPane;

    private javax.swing.JTable localTable;

    private javax.swing.JButton okButton;
}
