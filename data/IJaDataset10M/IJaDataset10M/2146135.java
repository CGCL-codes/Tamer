package com.velocityme.client.gui.access;

import com.velocityme.client.gui.exception.ExceptionWindow;
import javax.ejb.*;
import java.util.*;
import com.velocityme.interfaces.*;
import com.velocityme.utility.InvalidKeyException;
import com.velocityme.utility.PermissionDeniedException;
import com.velocityme.valueobjects.*;
import com.velocityme.client.gui.exception.*;
import com.velocityme.client.utility.StatelessRemoteClientSessionUtil;
import java.awt.Component;
import java.rmi.RemoteException;
import javax.naming.NamingException;
import javax.swing.JTabbedPane;

/**
 *
 * @author  Robert Crida Work
 */
public class GuiDisplayGroupAccessByUser extends javax.swing.JPanel {

    private GroupPK m_groupPK;

    private KeySession m_key;

    private ArrayList m_groupAccesses;

    private GroupAccessPK m_selectedGroupAccessPK;

    private int m_selectedRow;

    /** Creates new form GuiDisplayGroupAccessByUser */
    public GuiDisplayGroupAccessByUser(KeySession p_key, GroupPK p_groupPK) {
        initComponents();
        m_key = p_key;
        m_groupPK = p_groupPK;
    }

    void refresh() {
        try {
            jTextFieldGroup.setText(StatelessRemoteClientSessionUtil.getSession().getNodePathName(m_key, new NodePK(m_groupPK.getGroupId())));
            m_modelGroupAccess.removeAllRows();
            m_groupAccesses = new ArrayList();
            Iterator i = StatelessRemoteClientSessionUtil.getSession().getGroupAccessByUserValue(m_key, m_groupPK).iterator();
            while (i.hasNext()) {
                GroupAccessValue groupAccessValue = (GroupAccessValue) i.next();
                NodePK nodePK = groupAccessValue.getNodeValue().getPrimaryKey();
                String nodePath = StatelessRemoteClientSessionUtil.getSession().getNodePathName(m_key, nodePK);
                String groupName = groupAccessValue.getGroupValue().getNodeValue().getName();
                String role = groupAccessValue.getRoleValue().getNodeValue().getName();
                m_modelGroupAccess.addRow(nodePath, groupName, role);
                m_groupAccesses.add(groupAccessValue);
            }
        } catch (Exception e) {
            ExceptionWindow.showError(e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        jPanel1 = new javax.swing.JPanel();
        jButtonDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelGroup = new javax.swing.JLabel();
        jTextFieldGroup = new javax.swing.JTextField();
        jLabelGroupAccesses = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        m_modelGroupAccess = new GroupAccessTableModel();
        jTableGroupAccess = new javax.swing.JTable(m_modelGroupAccess);
        setLayout(new java.awt.BorderLayout());
        addComponentListener(new java.awt.event.ComponentAdapter() {

            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));
        jButtonDelete.setText("Delete");
        jButtonDelete.setEnabled(false);
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonDelete);
        add(jPanel1, java.awt.BorderLayout.SOUTH);
        jPanel2.setLayout(new java.awt.GridBagLayout());
        jPanel2.setMinimumSize(new java.awt.Dimension(0, 0));
        jLabelGroup.setText("Group::");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(jLabelGroup, gridBagConstraints);
        jTextFieldGroup.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(jTextFieldGroup, gridBagConstraints);
        jLabelGroupAccesses.setText("Group Accesses:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(jLabelGroupAccesses, gridBagConstraints);
        jTableGroupAccess.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableGroupAccessMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableGroupAccess);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jScrollPane1, gridBagConstraints);
        add(jPanel2, java.awt.BorderLayout.CENTER);
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {
        refresh();
    }

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            StatelessRemoteClientSessionUtil.getSession().groupAccessDelete(m_key, m_selectedGroupAccessPK);
            m_modelGroupAccess.removeRows(m_selectedRow, m_selectedRow);
        } catch (CreateException e) {
            ExceptionWindow.showError(e);
        } catch (NamingException e) {
            ExceptionWindow.showError(e);
        } catch (RemoteException e) {
            ExceptionWindow.showError(e);
        } catch (PermissionDeniedException e) {
            ExceptionWindow.showError(e);
        } catch (InvalidKeyException e) {
            ExceptionWindow.showError(e);
        }
    }

    private void jTableGroupAccessMouseClicked(java.awt.event.MouseEvent evt) {
        try {
            m_selectedRow = jTableGroupAccess.getSelectedRow();
            if (m_selectedRow != -1) {
                m_selectedGroupAccessPK = ((GroupAccessValue) m_groupAccesses.get(m_selectedRow)).getPrimaryKey();
                NodePK nodePK = ((GroupAccessValue) m_groupAccesses.get(m_selectedRow)).getNodeValue().getPrimaryKey();
                Set setPermissions = StatelessRemoteClientSessionUtil.getSession().getAssignedPermissions(m_key, nodePK);
                jButtonDelete.setEnabled(setPermissions.contains("Delete Group Access"));
            }
        } catch (Exception e) {
            ExceptionWindow.showError(e);
        }
    }

    private javax.swing.JButton jButtonDelete;

    private javax.swing.JLabel jLabelGroup;

    private javax.swing.JLabel jLabelGroupAccesses;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JTable jTableGroupAccess;

    private javax.swing.JTextField jTextFieldGroup;

    /** Model class used for the user access table */
    private GroupAccessTableModel m_modelGroupAccess;
}
