package Javalette;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Thu May 21 14:55:06 CEST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\132\000\002\002\004\000\002\003\003\000\002\004" + "\002\000\002\004\004\000\002\005\005\000\002\005\006" + "\000\002\006\010\000\002\007\005\000\002\010\002\000" + "\002\010\003\000\002\010\005\000\002\011\005\000\002" + "\012\002\000\002\012\004\000\002\013\005\000\002\014" + "\003\000\002\014\005\000\002\015\003\000\002\015\005" + "\000\002\016\004\000\002\016\004\000\002\016\005\000" + "\002\016\004\000\002\016\007\000\002\016\007\000\002" + "\016\011\000\002\016\005\000\002\016\013\000\002\016" + "\012\000\002\017\002\000\002\017\004\000\002\020\003" + "\000\002\020\003\000\002\021\003\000\002\022\003\000" + "\002\022\005\000\002\023\004\000\002\024\004\000\002" + "\024\005\000\002\025\003\000\002\025\003\000\002\026" + "\006\000\002\026\003\000\002\027\004\000\002\027\004" + "\000\002\027\003\000\002\030\004\000\002\030\003\000" + "\002\031\004\000\002\031\004\000\002\031\003\000\002" + "\032\005\000\002\032\005\000\002\032\005\000\002\032" + "\003\000\002\033\005\000\002\033\005\000\002\033\003" + "\000\002\034\005\000\002\034\005\000\002\034\005\000" + "\002\034\005\000\002\034\003\000\002\035\005\000\002" + "\035\005\000\002\035\003\000\002\036\005\000\002\036" + "\003\000\002\037\005\000\002\037\003\000\002\040\005" + "\000\002\040\003\000\002\041\002\000\002\041\003\000" + "\002\041\005\000\002\042\003\000\002\043\003\000\002" + "\044\003\000\002\045\003\000\002\046\003\000\002\047" + "\003\000\002\050\003\000\002\050\003\000\002\050\003" + "\000\002\050\003\000\002\050\003\000\002\051\003\000" + "\002\051\003\000\002\051\003\000\002\051\003" });

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\241\000\016\002￿\036￿\037￿\044￿\045" + "￿\050￿\001\002\000\004\002\243\001\002\000\016" + "\002\000\036\013\037\012\044\010\045\006\050\015\001" + "\002\000\006\012ﾫ\055ﾫ\001\002\000\006\012￵" + "\055￵\001\002\000\004\055\226\001\002\000\016\002" + "￾\036￾\037￾\044￾\045￾\050￾\001\002" + "\000\006\012ﾪ\055ﾪ\001\002\000\006\012ﾩ\055" + "ﾩ\001\002\000\004\005\016\001\002\000\006\012ﾨ" + "\055ﾨ\001\002\000\054\005￤\006￤\007￤\015" + "￤\016￤\020￤\021￤\036￤\037￤\041￤" + "\042￤\043￤\045￤\046￤\047￤\050￤\051" + "￤\052￤\053￤\054￤\055￤\001\002\000\054" + "\005\027\006\026\007\025\015\022\016\024\020\021\021" + "\020\036\013\037\012\041\054\042\047\043\046\045\006" + "\046\045\047\043\050\015\051\042\052\035\053\030\054" + "\066\055\051\001\002\000\004\055\225\001\002\000\004" + "\055\224\001\002\000\030\007￢\015￢\016￢\020" + "￢\021￢\041￢\047￢\052￢\053￢\054￢" + "\055￢\001\002\000\044\004ￚ\010ￚ\011ￚ\013" + "ￚ\015ￚ\022ￚ\023ￚ\024ￚ\025ￚ\026ￚ" + "\027ￚ\030ￚ\031ￚ\032ￚ\033ￚ\034ￚ\035" + "ￚ\001\002\000\030\007￡\015￡\016￡\020￡" + "\021￡\041￡\047￡\052￡\053￡\054￡\055" + "￡\001\002\000\030\007\025\015\022\016\024\020\021" + "\021\020\041\054\047\043\052\035\053\030\054\066\055" + "\051\001\002\000\016\002￼\036￼\037￼\044￼" + "\045￼\050￼\001\002\000\054\005￤\006￤\007" + "￤\015￤\016￤\020￤\021￤\036￤\037￤" + "\041￤\042￤\043￤\045￤\046￤\047￤\050" + "￤\051￤\052￤\053￤\054￤\055￤\001\002" + "\000\044\004ﾰ\010ﾰ\011ﾰ\013ﾰ\015ﾰ\022" + "ﾰ\023ﾰ\024ﾰ\025ﾰ\026ﾰ\027ﾰ\030ﾰ" + "\031ﾰ\032ﾰ\033ﾰ\034ﾰ\035ﾰ\001\002\000" + "\032\004￀\010￀\011￀\013￀\026\154\027\152" + "\030\153\031\151\032￀\033￀\034￀\035￀\001" + "\002\000\022\004ﾲ\010ﾲ\011ﾲ\013ﾲ\032\146" + "\033\147\034ﾲ\035ﾲ\001\002\000\016\004ﾳ\010" + "ﾳ\011ﾳ\013ﾳ\034ﾳ\035ﾳ\001\002\000\016" + "\004ﾴ\010ﾴ\011ﾴ\013ﾴ\034ﾴ\035ﾴ\001" + "\002\000\044\004ﾮ\010ﾮ\011ﾮ\013ﾮ\015ﾮ" + "\022ﾮ\023ﾮ\024ﾮ\025ﾮ\026ﾮ\027ﾮ\030" + "ﾮ\031ﾮ\032ﾮ\033ﾮ\034ﾮ\035ﾮ\001\002" + "\000\016\004ﾾ\010ﾾ\011ﾾ\013ﾾ\034ﾾ\035" + "ﾾ\001\002\000\016\004ﾼ\010ﾼ\011ﾼ\013ﾼ" + "\034\144\035ﾼ\001\002\000\014\004ﾺ\010ﾺ\011" + "ﾺ\013ﾺ\035\142\001\002\000\004\004\215\001\002" + "\000\004\007\211\001\002\000\044\004ﾬ\010ﾬ\011" + "ﾬ\013ﾬ\015ﾬ\022ﾬ\023ﾬ\024ﾬ\025ﾬ" + "\026ﾬ\027ﾬ\030ﾬ\031ﾬ\032ﾬ\033ﾬ\034" + "ﾬ\035ﾬ\001\002\000\054\005￣\006￣\007￣" + "\015￣\016￣\020￣\021￣\036￣\037￣\041" + "￣\042￣\043￣\045￣\046￣\047￣\050￣" + "\051￣\052￣\053￣\054￣\055￣\001\002\000" + "\032\004\206\007\025\015\022\016\024\020\021\021\020" + "\041\054\047\043\052\035\053\030\054\066\055\051\001" + "\002\000\004\007\200\001\002\000\004\007\162\001\002" + "\000\004\014\140\001\002\000\060\004￵\007￠\010" + "￵\011￵\012￵\013￵\014￵\015￵\017￠" + "\020\100\021\076\022￵\023￵\024￵\025￵\026" + "￵\027￵\030￵\031￵\032￵\033￵\034￵" + "\035￵\001\002\000\006\007￟\017\134\001\002\000" + "\030\007\025\015\022\016\024\020\021\021\020\041\054" + "\047\043\052\035\053\030\054\066\055\075\001\002\000" + "\044\004ﾭ\010ﾭ\011ﾭ\013ﾭ\015ﾭ\022ﾭ" + "\023ﾭ\024ﾭ\025ﾭ\026ﾭ\027ﾭ\030ﾭ\031" + "ﾭ\032ﾭ\033ﾭ\034ﾭ\035ﾭ\001\002\000\004" + "\007\125\001\002\000\004\004\124\001\002\000\044\004" + "￙\010￙\011￙\013￙\015￙\022￙\023￙" + "\024￙\025￙\026￙\027￙\030￙\031￙\032" + "￙\033￙\034￙\035￙\001\002\000\044\004ￗ" + "\010ￗ\011ￗ\013ￗ\015ￗ\022ￗ\023ￗ\024" + "ￗ\025ￗ\026ￗ\027ￗ\030ￗ\031ￗ\032ￗ" + "\033ￗ\034ￗ\035ￗ\001\002\000\044\004ￔ\010" + "ￔ\011ￔ\013ￔ\015ￔ\022ￔ\023ￔ\024ￔ" + "\025ￔ\026ￔ\027ￔ\030ￔ\031ￔ\032ￔ\033" + "ￔ\034ￔ\035ￔ\001\002\000\044\004ￒ\010ￒ" + "\011ￒ\013ￒ\015ￒ\022ￒ\023ￒ\024ￒ\025" + "ￒ\026ￒ\027ￒ\030ￒ\031ￒ\032ￒ\033ￒ" + "\034ￒ\035ￒ\001\002\000\006\012￵\055￵\001" + "\002\000\044\004ￏ\010ￏ\011ￏ\013ￏ\015ￏ" + "\022ￏ\023ￏ\024ￏ\025ￏ\026ￏ\027ￏ\030" + "ￏ\031ￏ\032ￏ\033ￏ\034ￏ\035ￏ\001\002" + "\000\044\004ￋ\010ￋ\011ￋ\013ￋ\015ￋ\022" + "ￋ\023ￋ\024ￋ\025ￋ\026ￋ\027ￋ\030ￋ" + "\031ￋ\032ￋ\033ￋ\034ￋ\035ￋ\001\002\000" + "\044\004ﾯ\010ﾯ\011ﾯ\013ﾯ\015ﾯ\022ﾯ" + "\023ﾯ\024ﾯ\025ﾯ\026ﾯ\027ﾯ\030ﾯ\031" + "ﾯ\032ﾯ\033ﾯ\034ﾯ\035ﾯ\001\002\000\044" + "\004￈\010￈\011￈\013￈\015￈\022\107\023" + "\106\024\105\025￈\026￈\027￈\030￈\031￈" + "\032￈\033￈\034￈\035￈\001\002\000\036\004" + "ﾱ\010ﾱ\011ﾱ\013ﾱ\015\073\025\072\026ﾱ" + "\027ﾱ\030ﾱ\031ﾱ\032ﾱ\033ﾱ\034ﾱ\035" + "ﾱ\001\002\000\032\004ￃ\010ￃ\011ￃ\013ￃ" + "\026ￃ\027ￃ\030ￃ\031ￃ\032ￃ\033ￃ\034" + "ￃ\035ￃ\001\002\000\030\007\025\015\022\016\024" + "\020\021\021\020\041\054\047\043\052\035\053\030\054" + "\066\055\075\001\002\000\030\007\025\015\022\016\024" + "\020\021\021\020\041\054\047\043\052\035\053\030\054" + "\066\055\075\001\002\000\044\004￉\010￉\011￉" + "\013￉\015￉\022\107\023\106\024\105\025￉\026" + "￉\027￉\030￉\031￉\032￉\033￉\034￉" + "\035￉\001\002\000\056\004￵\007￠\010￵\011" + "￵\012￵\013￵\015￵\017￠\020\100\021\076" + "\022￵\023￵\024￵\025￵\026￵\027￵\030" + "￵\031￵\032￵\033￵\034￵\035￵\001\002" + "\000\044\004ￕ\010ￕ\011ￕ\013ￕ\015ￕ\022" + "ￕ\023ￕ\024ￕ\025ￕ\026ￕ\027ￕ\030ￕ" + "\031ￕ\032ￕ\033ￕ\034ￕ\035ￕ\001\002\000" + "\046\004ￜ\010ￜ\011ￜ\012\102\013ￜ\015ￜ" + "\022ￜ\023ￜ\024ￜ\025ￜ\026ￜ\027ￜ\030" + "ￜ\031ￜ\032ￜ\033ￜ\034ￜ\035ￜ\001\002" + "\000\044\004ￖ\010ￖ\011ￖ\013ￖ\015ￖ\022" + "ￖ\023ￖ\024ￖ\025ￖ\026ￖ\027ￖ\030ￖ" + "\031ￖ\032ￖ\033ￖ\034ￖ\035ￖ\001\002\000" + "\052\004￴\010￴\011￴\012￴\013￴\014￴" + "\015￴\022￴\023￴\024￴\025￴\026￴\027" + "￴\030￴\031￴\032￴\033￴\034￴\035￴" + "\055￴\001\002\000\030\007\025\015\022\016\024\020" + "\021\021\020\041\054\047\043\052\035\053\030\054\066" + "\055\051\001\002\000\004\013\104\001\002\000\052\004" + "￶\010￶\011￶\012￶\013￶\014￶\015￶" + "\022￶\023￶\024￶\025￶\026￶\027￶\030" + "￶\031￶\032￶\033￶\034￶\035￶\055￶" + "\001\002\000\030\007\025\015\022\016\024\020\021\021" + "\020\041\054\047\043\052\035\053\030\054\066\055\075" + "\001\002\000\030\007\025\015\022\016\024\020\021\021" + "\020\041\054\047\043\052\035\053\030\054\066\055\075" + "\001\002\000\030\007\025\015\022\016\024\020\021\021" + "\020\041\054\047\043\052\035\053\030\054\066\055\075" + "\001\002\000\044\004ￎ\010ￎ\011ￎ\013ￎ\015" + "ￎ\022ￎ\023ￎ\024ￎ\025ￎ\026ￎ\027ￎ" + "\030ￎ\031ￎ\032ￎ\033ￎ\034ￎ\035ￎ\001" + "\002\000\044\004ￍ\010ￍ\011ￍ\013ￍ\015ￍ" + "\022ￍ\023ￍ\024ￍ\025ￍ\026ￍ\027ￍ\030" + "ￍ\031ￍ\032ￍ\033ￍ\034ￍ\035ￍ\001\002" + "\000\044\004ￌ\010ￌ\011ￌ\013ￌ\015ￌ\022" + "ￌ\023ￌ\024ￌ\025ￌ\026ￌ\027ￌ\030ￌ" + "\031ￌ\032ￌ\033ￌ\034ￌ\035ￌ\001\002\000" + "\044\004ￊ\010ￊ\011ￊ\013ￊ\015ￊ\022\107" + "\023\106\024\105\025ￊ\026ￊ\027ￊ\030ￊ\031" + "ￊ\032ￊ\033ￊ\034ￊ\035ￊ\001\002\000\006" + "\012\102\055\116\001\002\000\006\004￰\011\122\001" + "\002\000\010\004￲\011￲\014\120\001\002\000\004" + "\004￳\001\002\000\030\007\025\015\022\016\024\020" + "\021\021\020\041\054\047\043\052\035\053\030\054\066" + "\055\051\001\002\000\006\004￱\011￱\001\002\000" + "\004\055\116\001\002\000\004\004￯\001\002\000\056" + "\005￮\006￮\007￮\015￮\016￮\020￮\021" + "￮\036￮\037￮\040￮\041￮\042￮\043￮" + "\045￮\046￮\047￮\050￮\051￮\052￮\053" + "￮\054￮\055￮\001\002\000\032\007\025\010ﾹ" + "\015\022\016\024\020\021\021\020\041\054\047\043\052" + "\035\053\030\054\066\055\051\001\002\000\004\010\132" + "\001\002\000\006\010ﾸ\011\130\001\002\000\032\007" + "\025\010ﾹ\015\022\016\024\020\021\021\020\041\054" + "\047\043\052\035\053\030\054\066\055\051\001\002\000" + "\004\010ﾷ\001\002\000\044\004￘\010￘\011￘" + "\013￘\015￘\022￘\023￘\024￘\025￘\026" + "￘\027￘\030￘\031￘\032￘\033￘\034￘" + "\035￘\001\002\000\044\004ￓ\010ￓ\011ￓ\013" + "ￓ\015ￓ\022ￓ\023ￓ\024ￓ\025ￓ\026ￓ" + "\027ￓ\030ￓ\031ￓ\032ￓ\033ￓ\034ￓ\035" + "ￓ\001\002\000\004\055\136\001\002\000\004\007￞" + "\001\002\000\006\007￠\017￠\001\002\000\050\004" + "ￜ\010ￜ\011ￜ\012\102\013ￜ\014￝\015ￜ" + "\022ￜ\023ￜ\024ￜ\025ￜ\026ￜ\027ￜ\030" + "ￜ\031ￜ\032ￜ\033ￜ\034ￜ\035ￜ\001\002" + "\000\030\007\025\015\022\016\024\020\021\021\020\041" + "\054\047\043\052\035\053\030\054\066\055\075\001\002" + "\000\014\004ﾻ\010ﾻ\011ﾻ\013ﾻ\035\142\001" + "\002\000\030\007\025\015\022\016\024\020\021\021\020" + "\041\054\047\043\052\035\053\030\054\066\055\075\001" + "\002\000\016\004ﾽ\010ﾽ\011ﾽ\013ﾽ\034\144" + "\035ﾽ\001\002\000\030\007\025\015\022\016\024\020" + "\021\021\020\041\054\047\043\052\035\053\030\054\066" + "\055\075\001\002\000\022\004﾿\010﾿\011﾿\013" + "﾿\032\146\033\147\034﾿\035﾿\001\002\000\030" + "\007\025\015\022\016\024\020\021\021\020\041\054\047" + "\043\052\035\053\030\054\066\055\075\001\002\000\030" + "\007\025\015\022\016\024\020\021\021\020\041\054\047" + "\043\052\035\053\030\054\066\055\075\001\002\000\032" + "\004￁\010￁\011￁\013￁\026\154\027\152\030" + "\153\031\151\032￁\033￁\034￁\035￁\001\002" + "\000\030\007\025\015\022\016\024\020\021\021\020\041" + "\054\047\043\052\035\053\030\054\066\055\075\001\002" + "\000\030\007\025\015\022\016\024\020\021\021\020\041" + "\054\047\043\052\035\053\030\054\066\055\075\001\002" + "\000\030\007\025\015\022\016\024\020\021\021\020\041" + "\054\047\043\052\035\053\030\054\066\055\075\001\002" + "\000\030\007\025\015\022\016\024\020\021\021\020\041" + "\054\047\043\052\035\053\030\054\066\055\075\001\002" + "\000\032\004ￇ\010ￇ\011ￇ\013ￇ\026ￇ\027" + "ￇ\030ￇ\031ￇ\032ￇ\033ￇ\034ￇ\035ￇ" + "\001\002\000\032\004ￅ\010ￅ\011ￅ\013ￅ\026" + "ￅ\027ￅ\030ￅ\031ￅ\032ￅ\033ￅ\034ￅ" + "\035ￅ\001\002\000\032\004ￆ\010ￆ\011ￆ\013" + "ￆ\026ￆ\027ￆ\030ￆ\031ￆ\032ￆ\033ￆ" + "\034ￆ\035ￆ\001\002\000\032\004ￄ\010ￄ\011" + "ￄ\013ￄ\026ￄ\027ￄ\030ￄ\031ￄ\032ￄ" + "\033ￄ\034ￄ\035ￄ\001\002\000\032\004ￂ\010" + "ￂ\011ￂ\013ￂ\026\154\027\152\030\153\031\151" + "\032ￂ\033ￂ\034ￂ\035ￂ\001\002\000\014\004" + "\163\036\013\037\012\045\006\050\015\001\002\000\030" + "\007\025\015\022\016\024\020\021\021\020\041\054\047" + "\043\052\035\053\030\054\066\055\051\001\002\000\004" + "\004\165\001\002\000\030\007\025\015\022\016\024\020" + "\021\021\020\041\054\047\043\052\035\053\030\054\066" + "\055\051\001\002\000\004\004\167\001\002\000\030\007" + "\025\015\022\016\024\020\021\021\020\041\054\047\043" + "\052\035\053\030\054\066\055\051\001\002\000\004\010" + "\171\001\002\000\052\005\027\007\025\015\022\016\024" + "\020\021\021\020\036\013\037\012\041\054\042\047\043" + "\046\045\006\046\045\047\043\050\015\051\042\052\035" + "\053\030\054\066\055\051\001\002\000\056\005￦\006" + "￦\007￦\015￦\016￦\020￦\021￦\036￦" + "\037￦\040￦\041￦\042￦\043￦\045￦\046" + "￦\047￦\050￦\051￦\052￦\053￦\054￦" + "\055￦\001\002\000\004\004\174\001\002\000\030\007" + "\025\015\022\016\024\020\021\021\020\041\054\047\043" + "\052\035\053\030\054\066\055\051\001\002\000\004\010" + "\176\001\002\000\052\005\027\007\025\015\022\016\024" + "\020\021\021\020\036\013\037\012\041\054\042\047\043" + "\046\045\006\046\045\047\043\050\015\051\042\052\035" + "\053\030\054\066\055\051\001\002\000\056\005￥\006" + "￥\007￥\015￥\016￥\020￥\021￥\036￥" + "\037￥\040￥\041￥\042￥\043￥\045￥\046" + "￥\047￥\050￥\051￥\052￥\053￥\054￥" + "\055￥\001\002\000\030\007\025\015\022\016\024\020" + "\021\021\020\041\054\047\043\052\035\053\030\054\066" + "\055\051\001\002\000\004\010\202\001\002\000\052\005" + "\027\007\025\015\022\016\024\020\021\021\020\036\013" + "\037\012\041\054\042\047\043\046\045\006\046\045\047" + "\043\050\015\051\042\052\035\053\030\054\066\055\051" + "\001\002\000\056\005￩\006￩\007￩\015￩\016" + "￩\020￩\021￩\036￩\037￩\040\204\041￩" + "\042￩\043￩\045￩\046￩\047￩\050￩\051" + "￩\052￩\053￩\054￩\055￩\001\002\000\052" + "\005\027\007\025\015\022\016\024\020\021\021\020\036" + "\013\037\012\041\054\042\047\043\046\045\006\046\045" + "\047\043\050\015\051\042\052\035\053\030\054\066\055" + "\051\001\002\000\056\005￨\006￨\007￨\015￨" + "\016￨\020￨\021￨\036￨\037￨\040￨\041" + "￨\042￨\043￨\045￨\046￨\047￨\050￨" + "\051￨\052￨\053￨\054￨\055￨\001\002\000" + "\056\005￫\006￫\007￫\015￫\016￫\020￫" + "\021￫\036￫\037￫\040￫\041￫\042￫\043" + "￫\045￫\046￫\047￫\050￫\051￫\052￫" + "\053￫\054￫\055￫\001\002\000\004\004\210\001" + "\002\000\056\005￬\006￬\007￬\015￬\016￬" + "\020￬\021￬\036￬\037￬\040￬\041￬\042" + "￬\043￬\045￬\046￬\047￬\050￬\051￬" + "\052￬\053￬\054￬\055￬\001\002\000\030\007" + "\025\015\022\016\024\020\021\021\020\041\054\047\043" + "\052\035\053\030\054\066\055\051\001\002\000\004\010" + "\213\001\002\000\052\005\027\007\025\015\022\016\024" + "\020\021\021\020\036\013\037\012\041\054\042\047\043" + "\046\045\006\046\045\047\043\050\015\051\042\052\035" + "\053\030\054\066\055\051\001\002\000\056\005￪\006" + "￪\007￪\015￪\016￪\020￪\021￪\036￪" + "\037￪\040￪\041￪\042￪\043￪\045￪\046" + "￪\047￪\050￪\051￪\052￪\053￪\054￪" + "\055￪\001\002\000\056\005￭\006￭\007￭\015" + "￭\016￭\020￭\021￭\036￭\037￭\040￭" + "\041￭\042￭\043￭\045￭\046￭\047￭\050" + "￭\051￭\052￭\053￭\054￭\055￭\001\002" + "\000\054\005\027\006\217\007\025\015\022\016\024\020" + "\021\021\020\036\013\037\012\041\054\042\047\043\046" + "\045\006\046\045\047\043\050\015\051\042\052\035\053" + "\030\054\066\055\051\001\002\000\056\005￧\006￧" + "\007￧\015￧\016￧\020￧\021￧\036￧\037" + "￧\040￧\041￧\042￧\043￧\045￧\046￧" + "\047￧\050￧\051￧\052￧\053￧\054￧\055" + "￧\001\002\000\004\010\223\001\002\000\004\010ﾵ" + "\001\002\000\004\010ﾶ\001\002\000\044\004ￛ\010" + "ￛ\011ￛ\013ￛ\015ￛ\022ￛ\023ￛ\024ￛ" + "\025ￛ\026ￛ\027ￛ\030ￛ\031ￛ\032ￛ\033" + "ￛ\034ￛ\035ￛ\001\002\000\044\004￑\010￑" + "\011￑\013￑\015￑\022￑\023￑\024￑\025" + "￑\026￑\027￑\030￑\031￑\032￑\033￑" + "\034￑\035￑\001\002\000\044\004￐\010￐\011" + "￐\013￐\015￐\022￐\023￐\024￐\025￐" + "\026￐\027￐\030￐\031￐\032￐\033￐\034" + "￐\035￐\001\002\000\004\004\227\001\002\000\016" + "\002�\036�\037�\044�\045�\050�\001" + "\002\000\006\012\102\055\231\001\002\000\004\007\232" + "\001\002\000\014\010￹\036\013\037\012\045\006\050" + "\015\001\002\000\004\010\242\001\002\000\006\012￵" + "\055￵\001\002\000\006\010￸\011\236\001\002\000" + "\014\010￹\036\013\037\012\045\006\050\015\001\002" + "\000\004\010￷\001\002\000\006\012\102\055\241\001" + "\002\000\006\010￺\011￺\001\002\000\004\005￻" + "\001\002\000\004\002\001\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\241\000\006\003\003\004\004\001\001\000\002\001" + "\001\000\010\005\010\006\013\051\006\001\001\000\002" + "\001\001\000\004\012\227\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\004\017\016\001\001\000" + "\064\013\055\016\043\020\052\021\051\022\054\023\047" + "\024\056\025\057\026\060\027\061\030\063\031\064\032" + "\066\033\067\034\030\035\031\036\036\037\037\040\040" + "\044\035\045\033\046\032\047\070\050\022\051\062\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\062\020\052\021" + "\051\022\054\023\047\024\056\025\057\026\060\027\061" + "\030\063\031\064\032\066\033\067\034\030\035\031\036" + "\036\037\037\040\220\042\217\043\221\044\035\045\033" + "\046\032\047\070\050\022\001\001\000\002\001\001\000" + "\004\017\215\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\056\020\052\021\051\022\054" + "\023\047\024\056\025\057\026\060\027\061\030\063\031" + "\064\032\066\033\067\034\030\035\031\036\036\037\037" + "\040\206\044\035\045\033\046\032\047\070\050\022\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\004\012\136\001\001\000\002\001\001\000\026\020" + "\052\021\051\022\054\024\056\025\057\026\060\027\061" + "\030\063\031\132\050\022\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\004\012" + "\113\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\030\020\052\021\051\022\054\024\056\025\057" + "\026\060\027\061\030\063\031\064\032\112\050\022\001" + "\001\000\030\020\052\021\051\022\054\024\056\025\057" + "\026\060\027\061\030\063\031\064\032\073\050\022\001" + "\001\000\002\001\001\000\004\012\076\001\001\000\002" + "\001\001\000\004\011\100\001\001\000\002\001\001\000" + "\002\001\001\000\056\020\052\021\051\022\054\023\047" + "\024\056\025\057\026\060\027\061\030\063\031\064\032" + "\066\033\067\034\030\035\031\036\036\037\037\040\102" + "\044\035\045\033\046\032\047\070\050\022\001\001\000" + "\002\001\001\000\002\001\001\000\026\020\052\021\051" + "\022\054\024\056\025\057\026\060\027\061\030\063\031" + "\111\050\022\001\001\000\026\020\052\021\051\022\054" + "\024\056\025\057\026\060\027\061\030\063\031\110\050" + "\022\001\001\000\026\020\052\021\051\022\054\024\056" + "\025\057\026\060\027\061\030\063\031\107\050\022\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\010\011\100\014\114\015\116\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\056\020\052\021\051\022\054\023\047\024\056\025" + "\057\026\060\027\061\030\063\031\064\032\066\033\067" + "\034\030\035\031\036\036\037\037\040\120\044\035\045" + "\033\046\032\047\070\050\022\001\001\000\002\001\001" + "\000\006\014\114\015\122\001\001\000\002\001\001\000" + "\002\001\001\000\060\020\052\021\051\022\054\023\047" + "\024\056\025\057\026\060\027\061\030\063\031\064\032" + "\066\033\067\034\030\035\031\036\036\037\037\040\126" + "\041\125\044\035\045\033\046\032\047\070\050\022\001" + "\001\000\002\001\001\000\002\001\001\000\060\020\052" + "\021\051\022\054\023\047\024\056\025\057\026\060\027" + "\061\030\063\031\064\032\066\033\067\034\030\035\031" + "\036\036\037\037\040\126\041\130\044\035\045\033\046" + "\032\047\070\050\022\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\006\021\051\022\134\001" + "\001\000\002\001\001\000\002\001\001\000\004\011\100" + "\001\001\000\052\020\052\021\051\022\054\024\056\025" + "\057\026\060\027\061\030\063\031\064\032\066\033\067" + "\034\030\035\031\036\036\037\140\044\035\045\033\046" + "\032\047\070\050\022\001\001\000\002\001\001\000\050" + "\020\052\021\051\022\054\024\056\025\057\026\060\027" + "\061\030\063\031\064\032\066\033\067\034\030\035\031" + "\036\142\044\035\045\033\046\032\047\070\050\022\001" + "\001\000\002\001\001\000\040\020\052\021\051\022\054" + "\024\056\025\057\026\060\027\061\030\063\031\064\032" + "\066\033\067\034\030\035\144\047\070\050\022\001\001" + "\000\002\001\001\000\036\020\052\021\051\022\054\024" + "\056\025\057\026\060\027\061\030\063\031\064\032\066" + "\033\067\034\160\047\070\050\022\001\001\000\036\020" + "\052\021\051\022\054\024\056\025\057\026\060\027\061" + "\030\063\031\064\032\066\033\067\034\147\047\070\050" + "\022\001\001\000\002\001\001\000\034\020\052\021\051" + "\022\054\024\056\025\057\026\060\027\061\030\063\031" + "\064\032\066\033\067\047\157\050\022\001\001\000\034" + "\020\052\021\051\022\054\024\056\025\057\026\060\027" + "\061\030\063\031\064\032\066\033\067\047\156\050\022" + "\001\001\000\034\020\052\021\051\022\054\024\056\025" + "\057\026\060\027\061\030\063\031\064\032\066\033\067" + "\047\155\050\022\001\001\000\034\020\052\021\051\022" + "\054\024\056\025\057\026\060\027\061\030\063\031\064" + "\032\066\033\067\047\154\050\022\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\006\013\163\051\062\001\001\000" + "\056\020\052\021\051\022\054\023\047\024\056\025\057" + "\026\060\027\061\030\063\031\064\032\066\033\067\034" + "\030\035\031\036\036\037\037\040\172\044\035\045\033" + "\046\032\047\070\050\022\001\001\000\002\001\001\000" + "\056\020\052\021\051\022\054\023\047\024\056\025\057" + "\026\060\027\061\030\063\031\064\032\066\033\067\034" + "\030\035\031\036\036\037\037\040\165\044\035\045\033" + "\046\032\047\070\050\022\001\001\000\002\001\001\000" + "\056\020\052\021\051\022\054\023\047\024\056\025\057" + "\026\060\027\061\030\063\031\064\032\066\033\067\034" + "\030\035\031\036\036\037\037\040\167\044\035\045\033" + "\046\032\047\070\050\022\001\001\000\002\001\001\000" + "\064\013\055\016\171\020\052\021\051\022\054\023\047" + "\024\056\025\057\026\060\027\061\030\063\031\064\032" + "\066\033\067\034\030\035\031\036\036\037\037\040\040" + "\044\035\045\033\046\032\047\070\050\022\051\062\001" + "\001\000\002\001\001\000\002\001\001\000\056\020\052" + "\021\051\022\054\023\047\024\056\025\057\026\060\027" + "\061\030\063\031\064\032\066\033\067\034\030\035\031" + "\036\036\037\037\040\174\044\035\045\033\046\032\047" + "\070\050\022\001\001\000\002\001\001\000\064\013\055" + "\016\176\020\052\021\051\022\054\023\047\024\056\025" + "\057\026\060\027\061\030\063\031\064\032\066\033\067" + "\034\030\035\031\036\036\037\037\040\040\044\035\045" + "\033\046\032\047\070\050\022\051\062\001\001\000\002" + "\001\001\000\056\020\052\021\051\022\054\023\047\024" + "\056\025\057\026\060\027\061\030\063\031\064\032\066" + "\033\067\034\030\035\031\036\036\037\037\040\200\044" + "\035\045\033\046\032\047\070\050\022\001\001\000\002" + "\001\001\000\064\013\055\016\202\020\052\021\051\022" + "\054\023\047\024\056\025\057\026\060\027\061\030\063" + "\031\064\032\066\033\067\034\030\035\031\036\036\037" + "\037\040\040\044\035\045\033\046\032\047\070\050\022" + "\051\062\001\001\000\002\001\001\000\064\013\055\016" + "\204\020\052\021\051\022\054\023\047\024\056\025\057" + "\026\060\027\061\030\063\031\064\032\066\033\067\034" + "\030\035\031\036\036\037\037\040\040\044\035\045\033" + "\046\032\047\070\050\022\051\062\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\056\020\052\021\051\022\054\023\047\024\056\025" + "\057\026\060\027\061\030\063\031\064\032\066\033\067" + "\034\030\035\031\036\036\037\037\040\211\044\035\045" + "\033\046\032\047\070\050\022\001\001\000\002\001\001" + "\000\064\013\055\016\213\020\052\021\051\022\054\023" + "\047\024\056\025\057\026\060\027\061\030\063\031\064" + "\032\066\033\067\034\030\035\031\036\036\037\037\040" + "\040\044\035\045\033\046\032\047\070\050\022\051\062" + "\001\001\000\002\001\001\000\002\001\001\000\064\013" + "\055\016\043\020\052\021\051\022\054\023\047\024\056" + "\025\057\026\060\027\061\030\063\031\064\032\066\033" + "\067\034\030\035\031\036\036\037\037\040\040\044\035" + "\045\033\046\032\047\070\050\022\051\062\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\004\011\100" + "\001\001\000\002\001\001\000\010\007\234\010\232\051" + "\233\001\001\000\002\001\001\000\004\012\237\001\001" + "\000\002\001\001\000\010\007\234\010\236\051\233\001" + "\001\000\002\001\001\000\004\011\100\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack, int top) throws java.lang.Exception {
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }

    public Javalette.Absyn.Program pProgram() throws Exception {
        java_cup.runtime.Symbol res = parse();
        return (Javalette.Absyn.Program) res.value;
    }

    public <B, A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) {
        xs.addFirst(x);
        return xs;
    }

    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        report_error("Syntax Error, trying to recover and continue parse...", cur_token);
    }

    public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception {
        throw new Exception("Unrecoverable Syntax Error");
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(int CUP$parser$act_num, java_cup.runtime.lr_parser CUP$parser$parser, java.util.Stack CUP$parser$stack, int CUP$parser$top) throws java.lang.Exception {
        java_cup.runtime.Symbol CUP$parser$result;
        switch(CUP$parser$act_num) {
            case 89:
                {
                    Javalette.Absyn.Type RESULT = null;
                    RESULT = new Javalette.Absyn.TVoid();
                    CUP$parser$result = new java_cup.runtime.Symbol(39, RESULT);
                }
                return CUP$parser$result;
            case 88:
                {
                    Javalette.Absyn.Type RESULT = null;
                    RESULT = new Javalette.Absyn.TBool();
                    CUP$parser$result = new java_cup.runtime.Symbol(39, RESULT);
                }
                return CUP$parser$result;
            case 87:
                {
                    Javalette.Absyn.Type RESULT = null;
                    RESULT = new Javalette.Absyn.TDouble();
                    CUP$parser$result = new java_cup.runtime.Symbol(39, RESULT);
                }
                return CUP$parser$result;
            case 86:
                {
                    Javalette.Absyn.Type RESULT = null;
                    RESULT = new Javalette.Absyn.TInt();
                    CUP$parser$result = new java_cup.runtime.Symbol(39, RESULT);
                }
                return CUP$parser$result;
            case 85:
                {
                    Javalette.Absyn.Literal RESULT = null;
                    RESULT = new Javalette.Absyn.LTrue();
                    CUP$parser$result = new java_cup.runtime.Symbol(38, RESULT);
                }
                return CUP$parser$result;
            case 84:
                {
                    Javalette.Absyn.Literal RESULT = null;
                    RESULT = new Javalette.Absyn.LFalse();
                    CUP$parser$result = new java_cup.runtime.Symbol(38, RESULT);
                }
                return CUP$parser$result;
            case 83:
                {
                    Javalette.Absyn.Literal RESULT = null;
                    String p_1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.LString(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(38, RESULT);
                }
                return CUP$parser$result;
            case 82:
                {
                    Javalette.Absyn.Literal RESULT = null;
                    Double p_1 = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.LDouble(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(38, RESULT);
                }
                return CUP$parser$result;
            case 81:
                {
                    Javalette.Absyn.Literal RESULT = null;
                    Integer p_1 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.LInteger(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(38, RESULT);
                }
                return CUP$parser$result;
            case 80:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(37, RESULT);
                }
                return CUP$parser$result;
            case 79:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(36, RESULT);
                }
                return CUP$parser$result;
            case 78:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(35, RESULT);
                }
                return CUP$parser$result;
            case 77:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(34, RESULT);
                }
                return CUP$parser$result;
            case 76:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(33, RESULT);
                }
                return CUP$parser$result;
            case 75:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(32, RESULT);
                }
                return CUP$parser$result;
            case 74:
                {
                    Javalette.Absyn.ListExp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.ListExp p_3 = (Javalette.Absyn.ListExp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_3;
                    p_3.addFirst(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(31, RESULT);
                }
                return CUP$parser$result;
            case 73:
                {
                    Javalette.Absyn.ListExp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.ListExp();
                    RESULT.addLast(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(31, RESULT);
                }
                return CUP$parser$result;
            case 72:
                {
                    Javalette.Absyn.ListExp RESULT = null;
                    RESULT = new Javalette.Absyn.ListExp();
                    CUP$parser$result = new java_cup.runtime.Symbol(31, RESULT);
                }
                return CUP$parser$result;
            case 71:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(30, RESULT);
                }
                return CUP$parser$result;
            case 70:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.CppIdentAss p_1 = (Javalette.Absyn.CppIdentAss) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EArrAss(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(30, RESULT);
                }
                return CUP$parser$result;
            case 69:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(29, RESULT);
                }
                return CUP$parser$result;
            case 68:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EDisj(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(29, RESULT);
                }
                return CUP$parser$result;
            case 67:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(28, RESULT);
                }
                return CUP$parser$result;
            case 66:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EConj(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(28, RESULT);
                }
                return CUP$parser$result;
            case 65:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(27, RESULT);
                }
                return CUP$parser$result;
            case 64:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EInEq(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(27, RESULT);
                }
                return CUP$parser$result;
            case 63:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EEq(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(27, RESULT);
                }
                return CUP$parser$result;
            case 62:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(26, RESULT);
                }
                return CUP$parser$result;
            case 61:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EComp4(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(26, RESULT);
                }
                return CUP$parser$result;
            case 60:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EComp3(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(26, RESULT);
                }
                return CUP$parser$result;
            case 59:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EComp2(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(26, RESULT);
                }
                return CUP$parser$result;
            case 58:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EComp1(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(26, RESULT);
                }
                return CUP$parser$result;
            case 57:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(25, RESULT);
                }
                return CUP$parser$result;
            case 56:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EMinus(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(25, RESULT);
                }
                return CUP$parser$result;
            case 55:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EPlus(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(25, RESULT);
                }
                return CUP$parser$result;
            case 54:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(24, RESULT);
                }
                return CUP$parser$result;
            case 53:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EDiv(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(24, RESULT);
                }
                return CUP$parser$result;
            case 52:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EMult(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(24, RESULT);
                }
                return CUP$parser$result;
            case 51:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EModulo(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(24, RESULT);
                }
                return CUP$parser$result;
            case 50:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(23, RESULT);
                }
                return CUP$parser$result;
            case 49:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    String p_2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EPreDec(p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(23, RESULT);
                }
                return CUP$parser$result;
            case 48:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    String p_2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EPreInc(p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(23, RESULT);
                }
                return CUP$parser$result;
            case 47:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(22, RESULT);
                }
                return CUP$parser$result;
            case 46:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Unary_operator p_1 = (Javalette.Absyn.Unary_operator) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    Javalette.Absyn.Exp p_2 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.EPreOp(p_1, p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(22, RESULT);
                }
                return CUP$parser$result;
            case 45:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(21, RESULT);
                }
                return CUP$parser$result;
            case 44:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    String p_1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = new Javalette.Absyn.EPostDec(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(21, RESULT);
                }
                return CUP$parser$result;
            case 43:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    String p_1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = new Javalette.Absyn.EPostInc(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(21, RESULT);
                }
                return CUP$parser$result;
            case 42:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(20, RESULT);
                }
                return CUP$parser$result;
            case 41:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.ListFuncName p_1 = (Javalette.Absyn.ListFuncName) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                    Javalette.Absyn.ListExp p_3 = (Javalette.Absyn.ListExp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = new Javalette.Absyn.EFuncCall(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(20, RESULT);
                }
                return CUP$parser$result;
            case 40:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    CUP$parser$result = new java_cup.runtime.Symbol(19, RESULT);
                }
                return CUP$parser$result;
            case 39:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Literal p_1 = (Javalette.Absyn.Literal) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.ELit(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(19, RESULT);
                }
                return CUP$parser$result;
            case 38:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    Javalette.Absyn.Exp p_2 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = p_2;
                    CUP$parser$result = new java_cup.runtime.Symbol(18, RESULT);
                }
                return CUP$parser$result;
            case 37:
                {
                    Javalette.Absyn.Exp RESULT = null;
                    String p_1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    Javalette.Absyn.ListArrDec p_2 = (Javalette.Absyn.ListArrDec) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.ECppIdentGet(p_1, p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(18, RESULT);
                }
                return CUP$parser$result;
            case 36:
                {
                    Javalette.Absyn.CppIdentAss RESULT = null;
                    String p_1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    Javalette.Absyn.ListArrDec p_2 = (Javalette.Absyn.ListArrDec) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.ACppIdentAss(p_1, p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(17, RESULT);
                }
                return CUP$parser$result;
            case 35:
                {
                    Javalette.Absyn.ListFuncName RESULT = null;
                    Javalette.Absyn.FuncName p_1 = (Javalette.Absyn.FuncName) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.ListFuncName p_3 = (Javalette.Absyn.ListFuncName) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_3;
                    p_3.addFirst(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(16, RESULT);
                }
                return CUP$parser$result;
            case 34:
                {
                    Javalette.Absyn.ListFuncName RESULT = null;
                    Javalette.Absyn.FuncName p_1 = (Javalette.Absyn.FuncName) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.ListFuncName();
                    RESULT.addLast(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(16, RESULT);
                }
                return CUP$parser$result;
            case 33:
                {
                    Javalette.Absyn.FuncName RESULT = null;
                    String p_1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.LocFunc(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(15, RESULT);
                }
                return CUP$parser$result;
            case 32:
                {
                    Javalette.Absyn.Unary_operator RESULT = null;
                    RESULT = new Javalette.Absyn.Logicalneg();
                    CUP$parser$result = new java_cup.runtime.Symbol(14, RESULT);
                }
                return CUP$parser$result;
            case 31:
                {
                    Javalette.Absyn.Unary_operator RESULT = null;
                    RESULT = new Javalette.Absyn.Negative();
                    CUP$parser$result = new java_cup.runtime.Symbol(14, RESULT);
                }
                return CUP$parser$result;
            case 30:
                {
                    Javalette.Absyn.ListStm RESULT = null;
                    Javalette.Absyn.ListStm p_1 = (Javalette.Absyn.ListStm) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    Javalette.Absyn.Stm p_2 = (Javalette.Absyn.Stm) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    p_1.addLast(p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(13, RESULT);
                }
                return CUP$parser$result;
            case 29:
                {
                    Javalette.Absyn.ListStm RESULT = null;
                    RESULT = new Javalette.Absyn.ListStm();
                    CUP$parser$result = new java_cup.runtime.Symbol(13, RESULT);
                }
                return CUP$parser$result;
            case 28:
                {
                    Javalette.Absyn.Stm RESULT = null;
                    Javalette.Absyn.Exp p_4 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                    Javalette.Absyn.Exp p_6 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Stm p_8 = (Javalette.Absyn.Stm) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.SForNonDec(p_4, p_6, p_8);
                    CUP$parser$result = new java_cup.runtime.Symbol(12, RESULT);
                }
                return CUP$parser$result;
            case 27:
                {
                    Javalette.Absyn.Stm RESULT = null;
                    Javalette.Absyn.Decl p_3 = (Javalette.Absyn.Decl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;
                    Javalette.Absyn.Exp p_5 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                    Javalette.Absyn.Exp p_7 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Stm p_9 = (Javalette.Absyn.Stm) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.SFor(p_3, p_5, p_7, p_9);
                    CUP$parser$result = new java_cup.runtime.Symbol(12, RESULT);
                }
                return CUP$parser$result;
            case 26:
                {
                    Javalette.Absyn.Stm RESULT = null;
                    Javalette.Absyn.ListStm p_2 = (Javalette.Absyn.ListStm) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = new Javalette.Absyn.SBlock(p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(12, RESULT);
                }
                return CUP$parser$result;
            case 25:
                {
                    Javalette.Absyn.Stm RESULT = null;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                    Javalette.Absyn.Stm p_5 = (Javalette.Absyn.Stm) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Stm p_7 = (Javalette.Absyn.Stm) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.SIfElse(p_3, p_5, p_7);
                    CUP$parser$result = new java_cup.runtime.Symbol(12, RESULT);
                }
                return CUP$parser$result;
            case 24:
                {
                    Javalette.Absyn.Stm RESULT = null;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Stm p_5 = (Javalette.Absyn.Stm) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.SIf(p_3, p_5);
                    CUP$parser$result = new java_cup.runtime.Symbol(12, RESULT);
                }
                return CUP$parser$result;
            case 23:
                {
                    Javalette.Absyn.Stm RESULT = null;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Stm p_5 = (Javalette.Absyn.Stm) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.SWhile(p_3, p_5);
                    CUP$parser$result = new java_cup.runtime.Symbol(12, RESULT);
                }
                return CUP$parser$result;
            case 22:
                {
                    Javalette.Absyn.Stm RESULT = null;
                    RESULT = new Javalette.Absyn.SRetV();
                    CUP$parser$result = new java_cup.runtime.Symbol(12, RESULT);
                }
                return CUP$parser$result;
            case 21:
                {
                    Javalette.Absyn.Stm RESULT = null;
                    Javalette.Absyn.Exp p_2 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = new Javalette.Absyn.SRet(p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(12, RESULT);
                }
                return CUP$parser$result;
            case 20:
                {
                    Javalette.Absyn.Stm RESULT = null;
                    Javalette.Absyn.Exp p_1 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = new Javalette.Absyn.SExp(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(12, RESULT);
                }
                return CUP$parser$result;
            case 19:
                {
                    Javalette.Absyn.Stm RESULT = null;
                    Javalette.Absyn.Decl p_1 = (Javalette.Absyn.Decl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = new Javalette.Absyn.SDecl(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(12, RESULT);
                }
                return CUP$parser$result;
            case 18:
                {
                    Javalette.Absyn.ListDeclAmb RESULT = null;
                    Javalette.Absyn.DeclAmb p_1 = (Javalette.Absyn.DeclAmb) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.ListDeclAmb p_3 = (Javalette.Absyn.ListDeclAmb) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_3;
                    p_3.addFirst(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(11, RESULT);
                }
                return CUP$parser$result;
            case 17:
                {
                    Javalette.Absyn.ListDeclAmb RESULT = null;
                    Javalette.Absyn.DeclAmb p_1 = (Javalette.Absyn.DeclAmb) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.ListDeclAmb();
                    RESULT.addLast(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(11, RESULT);
                }
                return CUP$parser$result;
            case 16:
                {
                    Javalette.Absyn.DeclAmb RESULT = null;
                    String p_1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.Exp p_3 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.DInit(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(10, RESULT);
                }
                return CUP$parser$result;
            case 15:
                {
                    Javalette.Absyn.DeclAmb RESULT = null;
                    String p_1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.DDecl(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(10, RESULT);
                }
                return CUP$parser$result;
            case 14:
                {
                    Javalette.Absyn.Decl RESULT = null;
                    Javalette.Absyn.Type p_1 = (Javalette.Absyn.Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.ListArrDec p_2 = (Javalette.Absyn.ListArrDec) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    Javalette.Absyn.ListDeclAmb p_3 = (Javalette.Absyn.ListDeclAmb) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.DArrDecIn(p_1, p_2, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(9, RESULT);
                }
                return CUP$parser$result;
            case 13:
                {
                    Javalette.Absyn.ListArrDec RESULT = null;
                    Javalette.Absyn.ListArrDec p_1 = (Javalette.Absyn.ListArrDec) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    Javalette.Absyn.ArrDec p_2 = (Javalette.Absyn.ArrDec) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    p_1.addLast(p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(8, RESULT);
                }
                return CUP$parser$result;
            case 12:
                {
                    Javalette.Absyn.ListArrDec RESULT = null;
                    RESULT = new Javalette.Absyn.ListArrDec();
                    CUP$parser$result = new java_cup.runtime.Symbol(8, RESULT);
                }
                return CUP$parser$result;
            case 11:
                {
                    Javalette.Absyn.ArrDec RESULT = null;
                    Javalette.Absyn.Exp p_2 = (Javalette.Absyn.Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = new Javalette.Absyn.ArrDec(p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(7, RESULT);
                }
                return CUP$parser$result;
            case 10:
                {
                    Javalette.Absyn.ListArgDecl RESULT = null;
                    Javalette.Absyn.ArgDecl p_1 = (Javalette.Absyn.ArgDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.ListArgDecl p_3 = (Javalette.Absyn.ListArgDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_3;
                    p_3.addFirst(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(6, RESULT);
                }
                return CUP$parser$result;
            case 9:
                {
                    Javalette.Absyn.ListArgDecl RESULT = null;
                    Javalette.Absyn.ArgDecl p_1 = (Javalette.Absyn.ArgDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.ListArgDecl();
                    RESULT.addLast(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(6, RESULT);
                }
                return CUP$parser$result;
            case 8:
                {
                    Javalette.Absyn.ListArgDecl RESULT = null;
                    RESULT = new Javalette.Absyn.ListArgDecl();
                    CUP$parser$result = new java_cup.runtime.Symbol(6, RESULT);
                }
                return CUP$parser$result;
            case 7:
                {
                    Javalette.Absyn.ArgDecl RESULT = null;
                    Javalette.Absyn.Type p_1 = (Javalette.Absyn.Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    Javalette.Absyn.ListArrDec p_2 = (Javalette.Absyn.ListArrDec) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    String p_3 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.ItemArgDecl(p_1, p_2, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(5, RESULT);
                }
                return CUP$parser$result;
            case 6:
                {
                    Javalette.Absyn.Header RESULT = null;
                    Javalette.Absyn.Type p_1 = (Javalette.Absyn.Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                    Javalette.Absyn.ListArrDec p_2 = (Javalette.Absyn.ListArrDec) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                    String p_3 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                    Javalette.Absyn.ListArgDecl p_5 = (Javalette.Absyn.ListArgDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = new Javalette.Absyn.Head(p_1, p_2, p_3, p_5);
                    CUP$parser$result = new java_cup.runtime.Symbol(4, RESULT);
                }
                return CUP$parser$result;
            case 5:
                {
                    Javalette.Absyn.Def RESULT = null;
                    Javalette.Absyn.Header p_1 = (Javalette.Absyn.Header) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                    Javalette.Absyn.ListStm p_3 = (Javalette.Absyn.ListStm) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = new Javalette.Absyn.DefFunc(p_1, p_3);
                    CUP$parser$result = new java_cup.runtime.Symbol(3, RESULT);
                }
                return CUP$parser$result;
            case 4:
                {
                    Javalette.Absyn.Def RESULT = null;
                    String p_2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = new Javalette.Absyn.DefImport(p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(3, RESULT);
                }
                return CUP$parser$result;
            case 3:
                {
                    Javalette.Absyn.ListDef RESULT = null;
                    Javalette.Absyn.ListDef p_1 = (Javalette.Absyn.ListDef) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    Javalette.Absyn.Def p_2 = (Javalette.Absyn.Def) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = p_1;
                    p_1.addLast(p_2);
                    CUP$parser$result = new java_cup.runtime.Symbol(2, RESULT);
                }
                return CUP$parser$result;
            case 2:
                {
                    Javalette.Absyn.ListDef RESULT = null;
                    RESULT = new Javalette.Absyn.ListDef();
                    CUP$parser$result = new java_cup.runtime.Symbol(2, RESULT);
                }
                return CUP$parser$result;
            case 1:
                {
                    Javalette.Absyn.Program RESULT = null;
                    Javalette.Absyn.ListDef p_1 = (Javalette.Absyn.ListDef) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = new Javalette.Absyn.Prog(p_1);
                    CUP$parser$result = new java_cup.runtime.Symbol(1, RESULT);
                }
                return CUP$parser$result;
            case 0:
                {
                    Object RESULT = null;
                    Javalette.Absyn.Program start_val = (Javalette.Absyn.Program) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$parser$result = new java_cup.runtime.Symbol(0, RESULT);
                }
                CUP$parser$parser.done_parsing();
                return CUP$parser$result;
            default:
                throw new Exception("Invalid action number found in internal parse table");
        }
    }
}
