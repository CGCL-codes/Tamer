package ejb.bprocess.administration;

import javax.ejb.*;

/**
 * Created Jun 29, 2003 9:49:46 AM
 * Code generated by the Sun ONE Studio EJB Builder
 * @author Administrator
 */
public class SubjectCorporateNameBean implements javax.ejb.SessionBean {

    private javax.ejb.SessionContext context;

    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context = aContext;
    }

    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {
    }

    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {
    }

    public java.lang.String getNamesSearchAsExactPhrase(java.lang.String searchString) {
        String xmlstr = "";
        try {
            java.util.Vector vall = ((ejb.objectmodel.administration.LocalSubCorporateName_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_AF")).getNamesSearchAsExactPhrase(searchString);
            xmlstr = (new ejb.bprocess.administration.SubjectCorporateNameXMLGenerator()).getNamesSearchAsExactPhrase(vall);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
        }
        return xmlstr;
    }

    public java.lang.String compareWithWholeData(java.lang.String name, java.util.Vector subUnits, java.util.Vector generalSD, java.util.Vector formSD, java.util.Vector chronologicalSD, java.util.Vector geographicalSd) {
        String xmlstr = "";
        try {
            java.util.Vector col = ((ejb.objectmodel.administration.LocalSubCorporateName_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_AF")).compareWithWholeData(name);
            boolean flag = true;
            java.util.Vector vMatch = null;
            java.util.Vector vUnmatchSimilar = null;
            java.util.HashSet hs = null;
            java.util.HashSet hsgsd = null;
            java.util.HashSet hsfsd = null;
            java.util.HashSet hscsd = null;
            java.util.HashSet hsgeosd = null;
            if (col.size() > 0) {
                for (int i = 0; i < col.size(); i += 4) {
                    flag = true;
                    Object[] objtitles = ((ejb.objectmodel.administration.LocalSub_UnitHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Sub_Unit")).findByCorporateNameIdLibraryId(Integer.parseInt(col.elementAt(i + 2).toString()), Integer.parseInt(col.elementAt(i + 3).toString())).toArray();
                    Object[] objtitlesgsd = ((ejb.objectmodel.administration.LocalSubCorporateName_GeneralSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeneralSD")).findBySubCorNameIdLibraryId(Integer.parseInt(col.elementAt(i).toString()), Integer.parseInt(col.elementAt(i + 1).toString())).toArray();
                    System.out.println(Integer.parseInt(col.elementAt(i).toString()));
                    System.out.println(Integer.parseInt(col.elementAt(i + 1).toString()));
                    Object[] objtitlesfsd = ((ejb.objectmodel.administration.LocalSubCorporateName_FormSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_FormSD")).findBySubCorNameIdLibraryId(Integer.parseInt(col.elementAt(i).toString()), Integer.parseInt(col.elementAt(i + 1).toString())).toArray();
                    Object[] objtitlescsd = ((ejb.objectmodel.administration.LocalSubCorporateName_ChronologicalHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_Chronological")).findBySubCorNameIdLibraryId(Integer.parseInt(col.elementAt(i).toString()), Integer.parseInt(col.elementAt(i + 1).toString())).toArray();
                    Object[] objtitlesgeosd = ((ejb.objectmodel.administration.LocalSubCorporateName_GeographicSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeographicSD")).findBySubCorNameIdLibraryId(Integer.parseInt(col.elementAt(i).toString()), Integer.parseInt(col.elementAt(i + 1).toString())).toArray();
                    hs = new java.util.HashSet();
                    hsgsd = new java.util.HashSet();
                    hsfsd = new java.util.HashSet();
                    hscsd = new java.util.HashSet();
                    hsgeosd = new java.util.HashSet();
                    for (int j = 0; j < objtitles.length; j++) {
                        ejb.objectmodel.administration.LocalSub_Unit nt = (ejb.objectmodel.administration.LocalSub_Unit) objtitles[j];
                        hs.add(nt.getSub_Unit_name().trim());
                    }
                    for (int j = 0; j < objtitlesgsd.length; j++) {
                        ejb.objectmodel.administration.LocalSubCorporateName_GeneralSD nt = (ejb.objectmodel.administration.LocalSubCorporateName_GeneralSD) objtitlesgsd[j];
                        hsgsd.add(nt.getGeneralSubDivision().trim());
                    }
                    for (int j = 0; j < objtitlesfsd.length; j++) {
                        ejb.objectmodel.administration.LocalSubCorporateName_FormSD nt = (ejb.objectmodel.administration.LocalSubCorporateName_FormSD) objtitlesfsd[j];
                        hsfsd.add(nt.getFormSubDivision().trim());
                    }
                    for (int j = 0; j < objtitlescsd.length; j++) {
                        ejb.objectmodel.administration.LocalSubCorporateName_Chronological nt = (ejb.objectmodel.administration.LocalSubCorporateName_Chronological) objtitlescsd[j];
                        hscsd.add(nt.getChronologicalSubDivision().trim());
                    }
                    for (int j = 0; j < objtitlesgeosd.length; j++) {
                        ejb.objectmodel.administration.LocalSubCorporateName_GeographicSD nt = (ejb.objectmodel.administration.LocalSubCorporateName_GeographicSD) objtitlesgeosd[j];
                        hsgeosd.add(nt.getGeographicSubDivision().trim());
                    }
                    if ((hs.size() == subUnits.size()) || (subUnits.size() < hs.size())) {
                        System.out.println("Entered here");
                        for (int j = 0; j < subUnits.size(); j++) {
                            if (!hs.contains(subUnits.get(j).toString().trim())) {
                                System.out.println("Flag faslse");
                                flag = false;
                            }
                        }
                    } else {
                        flag = false;
                    }
                    if (flag) {
                        if ((hsgsd.size() == generalSD.size()) || (generalSD.size() < hsgsd.size())) {
                            System.out.println("Entered here");
                            for (int j = 0; j < generalSD.size(); j++) {
                                if (!hsgsd.contains(generalSD.get(j).toString().trim())) {
                                    System.out.println("Flag faslse");
                                    flag = false;
                                }
                            }
                        } else {
                            flag = false;
                        }
                    }
                    if (flag) {
                        if ((hsfsd.size() == formSD.size()) || (formSD.size() < hsfsd.size())) {
                            System.out.println("Entered here");
                            for (int j = 0; j < formSD.size(); j++) {
                                if (!hsfsd.contains(formSD.get(j).toString().trim())) {
                                    System.out.println("Flag faslse");
                                    flag = false;
                                }
                            }
                        } else {
                            flag = false;
                        }
                    }
                    if (flag) {
                        if ((hscsd.size() == chronologicalSD.size()) || (chronologicalSD.size() < hscsd.size())) {
                            System.out.println("Entered here");
                            for (int j = 0; j < chronologicalSD.size(); j++) {
                                if (!hscsd.contains(chronologicalSD.get(j).toString().trim())) {
                                    System.out.println("Flag faslse");
                                    flag = false;
                                }
                            }
                        } else {
                            flag = false;
                        }
                    }
                    if (flag) {
                        if ((hsgeosd.size() == geographicalSd.size()) || (geographicalSd.size() < hsgeosd.size())) {
                            System.out.println("Entered here");
                            for (int j = 0; j < geographicalSd.size(); j++) {
                                if (!hsgeosd.contains(geographicalSd.get(j).toString().trim())) {
                                    System.out.println("Flag faslse");
                                    flag = false;
                                }
                            }
                        } else {
                            flag = false;
                        }
                    }
                    System.out.println("Flag status now: " + flag);
                    if (flag) {
                        vMatch = new java.util.Vector(1, 1);
                        vMatch.addElement(col.elementAt(i).toString());
                        vMatch.addElement(col.elementAt(i + 1).toString());
                        vMatch.addElement(col.elementAt(i + 2).toString());
                        vMatch.addElement(col.elementAt(i + 3).toString());
                        vMatch.addElement(name);
                        vMatch.addElement(hs);
                        vMatch.addElement(hsgsd);
                        vMatch.addElement(hsfsd);
                        vMatch.addElement(hscsd);
                        vMatch.addElement(hsgeosd);
                        System.out.println("Vmatch: " + vMatch);
                        break;
                    } else {
                        continue;
                    }
                }
            } else {
                flag = false;
            }
            if (!flag) {
                xmlstr = this.getNamesSearchAsExactPhrase(name);
            } else {
                xmlstr = (new ejb.bprocess.administration.SubjectCorporateNameXMLGenerator()).getMatchedDetails(vMatch);
            }
        } catch (Exception exp) {
            exp.printStackTrace();
        }
        return xmlstr;
    }

    public java.lang.String saveSubjectCorporateName(java.lang.String corporateNameId, java.lang.String corporateNameLibraryId, java.util.Vector generalSD, java.util.Vector formSD, java.util.Vector chronologicalSD, java.util.Vector geographicSd, java.lang.String entryId, java.lang.String entryLibraryId) {
        System.out.println("Call received at servlet");
        int returnCode = 2;
        try {
            Object[] obx = ((ejb.objectmodel.administration.LocalSubCorporateName_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_AF")).findByCorporateName(new Integer(Integer.parseInt(corporateNameId)), new Integer(Integer.parseInt(corporateNameLibraryId))).toArray();
            boolean flag = true;
            java.util.HashSet hsgsd = null;
            java.util.HashSet hsfsd = null;
            java.util.HashSet hscsd = null;
            java.util.HashSet hsgeosd = null;
            if (obx.length > 0) {
                for (int i = 0; i < obx.length; i++) {
                    flag = true;
                    ejb.objectmodel.administration.LocalSubCorporateName_AF spn = (ejb.objectmodel.administration.LocalSubCorporateName_AF) obx[i];
                    Object[] objtitlesgsd = ((ejb.objectmodel.administration.LocalSubCorporateName_GeneralSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeneralSD")).findBySubCorNameIdLibraryId(spn.getSubCorporateName_Id().intValue(), spn.getLibrary_Id().intValue()).toArray();
                    Object[] objtitlesfsd = ((ejb.objectmodel.administration.LocalSubCorporateName_FormSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_FormSD")).findBySubCorNameIdLibraryId(spn.getSubCorporateName_Id().intValue(), spn.getLibrary_Id().intValue()).toArray();
                    Object[] objtitlescsd = ((ejb.objectmodel.administration.LocalSubCorporateName_ChronologicalHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_Chronological")).findBySubCorNameIdLibraryId(spn.getSubCorporateName_Id().intValue(), spn.getLibrary_Id().intValue()).toArray();
                    Object[] objtitlesgeosd = ((ejb.objectmodel.administration.LocalSubCorporateName_GeographicSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeographicSD")).findBySubCorNameIdLibraryId(spn.getSubCorporateName_Id().intValue(), spn.getLibrary_Id().intValue()).toArray();
                    hsgsd = new java.util.HashSet();
                    hsfsd = new java.util.HashSet();
                    hscsd = new java.util.HashSet();
                    hsgeosd = new java.util.HashSet();
                    for (int j = 0; j < objtitlesgsd.length; j++) {
                        ejb.objectmodel.administration.LocalSubCorporateName_GeneralSD nt = (ejb.objectmodel.administration.LocalSubCorporateName_GeneralSD) objtitlesgsd[j];
                        hsgsd.add(nt.getGeneralSubDivision().trim());
                    }
                    for (int j = 0; j < objtitlesfsd.length; j++) {
                        ejb.objectmodel.administration.LocalSubCorporateName_FormSD nt = (ejb.objectmodel.administration.LocalSubCorporateName_FormSD) objtitlesfsd[j];
                        hsfsd.add(nt.getFormSubDivision().trim());
                    }
                    for (int j = 0; j < objtitlescsd.length; j++) {
                        ejb.objectmodel.administration.LocalSubCorporateName_Chronological nt = (ejb.objectmodel.administration.LocalSubCorporateName_Chronological) objtitlescsd[j];
                        hscsd.add(nt.getChronologicalSubDivision().trim());
                    }
                    for (int j = 0; j < objtitlesgeosd.length; j++) {
                        ejb.objectmodel.administration.LocalSubCorporateName_GeographicSD nt = (ejb.objectmodel.administration.LocalSubCorporateName_GeographicSD) objtitlesgeosd[j];
                        hsgeosd.add(nt.getGeographicSubDivision().trim());
                    }
                    if ((hsgsd.size() == generalSD.size()) || (generalSD.size() < hsgsd.size())) {
                        System.out.println("Entered here");
                        for (int j = 0; j < generalSD.size(); j++) {
                            if (!hsgsd.contains(generalSD.get(j).toString().trim())) {
                                System.out.println("Flag faslse");
                                flag = false;
                            }
                        }
                    } else {
                        flag = false;
                    }
                    if (flag) {
                        if ((hsfsd.size() == formSD.size()) || (formSD.size() < hsfsd.size())) {
                            System.out.println("Entered here");
                            for (int j = 0; j < formSD.size(); j++) {
                                if (!hsfsd.contains(formSD.get(j).toString().trim())) {
                                    System.out.println("Flag faslse");
                                    flag = false;
                                }
                            }
                        } else {
                            flag = false;
                        }
                    }
                    if (flag) {
                        if ((hscsd.size() == chronologicalSD.size()) || (chronologicalSD.size() < hscsd.size())) {
                            System.out.println("Entered here");
                            for (int j = 0; j < chronologicalSD.size(); j++) {
                                if (!hscsd.contains(chronologicalSD.get(j).toString().trim())) {
                                    System.out.println("Flag faslse");
                                    flag = false;
                                }
                            }
                        } else {
                            flag = false;
                        }
                    }
                    if (flag) {
                        if ((hsgsd.size() == geographicSd.size()) || (geographicSd.size() < hsgeosd.size())) {
                            System.out.println("Entered here");
                            for (int j = 0; j < geographicSd.size(); j++) {
                                if (!hsgeosd.contains(geographicSd.get(j).toString().trim())) {
                                    System.out.println("Flag faslse");
                                    flag = false;
                                }
                            }
                        } else {
                            flag = false;
                        }
                    }
                    System.out.println("Flag status now: " + flag);
                }
            } else {
                flag = false;
            }
            if (!flag) {
                Integer ownerlibraryid = new Integer(Integer.parseInt(entryLibraryId));
                Integer nameid = new Integer(ejb.bprocess.util.Utility.getInstance().getCorporateNameSHID(ownerlibraryid.intValue()));
                ((ejb.objectmodel.administration.LocalSubCorporateName_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_AF")).createUsingAllFields(nameid, ownerlibraryid, ownerlibraryid, entryId, new Integer(Integer.parseInt(corporateNameId)), new Integer(Integer.parseInt(corporateNameLibraryId)));
                for (int i = 0; i < generalSD.size(); i++) {
                    ((ejb.objectmodel.administration.LocalSubCorporateName_GeneralSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeneralSD")).createUsingAllFields(nameid, ownerlibraryid, generalSD.elementAt(i).toString());
                }
                for (int i = 0; i < chronologicalSD.size(); i++) {
                    ((ejb.objectmodel.administration.LocalSubCorporateName_ChronologicalHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_Chronological")).createUsingAllSubFields(nameid, ownerlibraryid, chronologicalSD.elementAt(i).toString());
                }
                for (int i = 0; i < formSD.size(); i++) {
                    ((ejb.objectmodel.administration.LocalSubCorporateName_FormSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_FormSD")).createUsingAllSubFields(nameid, ownerlibraryid, formSD.elementAt(i).toString());
                }
                for (int i = 0; i < geographicSd.size(); i++) {
                    ((ejb.objectmodel.administration.LocalSubCorporateName_GeographicSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeographicSD")).createUsingAllFields(nameid, ownerlibraryid, geographicSd.elementAt(i).toString());
                }
                returnCode = 0;
            } else {
                returnCode = 1;
            }
        } catch (Exception exp) {
            exp.printStackTrace();
            this.context.setRollbackOnly();
            returnCode = 2;
        }
        System.out.println("ret code here is: " + returnCode);
        return (new ejb.bprocess.util.NewGenXMLGenerator()).getReturnCodeXMLString(returnCode);
    }

    public java.lang.String modifySubjectCorporateName(java.lang.String corporateNameId, java.lang.String corporateNameLibraryId, java.util.Vector generalSD, java.util.Vector chronologicalSD, java.util.Vector formSD, java.util.Vector geographicSd, java.lang.String entryId, java.lang.String entryLibraryId, java.lang.String Id, java.lang.String libraryId) {
        Integer idInt = new Integer(Id);
        Integer libIdInt = new Integer(libraryId);
        int returnCode = 0;
        try {
            java.util.ArrayList alcatrecs = new java.util.ArrayList();
            Object[] obx = ((ejb.objectmodel.administration.LocalSearchable_CorporateSH_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CorporateSH_Ass")).findBySubjectCorporateName(idInt, libIdInt).toArray();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.administration.LocalSearchable_CorporateSH_Ass stta = (ejb.objectmodel.administration.LocalSearchable_CorporateSH_Ass) obx[i];
                alcatrecs.add(stta.getCatalogueRecordId());
                alcatrecs.add(stta.getOwner_Library_Id());
            }
            Object[] oby = ((ejb.objectmodel.administration.LocalSubCorporateName_GeneralSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeneralSD")).findBySubCorNameIdLibraryId(idInt.intValue(), libIdInt.intValue()).toArray();
            for (int j = 0; j < oby.length; j++) {
                ejb.objectmodel.administration.LocalSubCorporateName_GeneralSD psh = (ejb.objectmodel.administration.LocalSubCorporateName_GeneralSD) oby[j];
                psh.remove();
            }
            oby = ((ejb.objectmodel.administration.LocalSubCorporateName_FormSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_FormSD")).findBySubCorNameIdLibraryId(idInt.intValue(), libIdInt.intValue()).toArray();
            for (int j = 0; j < oby.length; j++) {
                ejb.objectmodel.administration.LocalSubCorporateName_FormSD psh = (ejb.objectmodel.administration.LocalSubCorporateName_FormSD) oby[j];
                psh.remove();
            }
            oby = ((ejb.objectmodel.administration.LocalSubCorporateName_ChronologicalHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_Chronological")).findBySubCorNameIdLibraryId(idInt.intValue(), libIdInt.intValue()).toArray();
            for (int j = 0; j < oby.length; j++) {
                ejb.objectmodel.administration.LocalSubCorporateName_Chronological psh = (ejb.objectmodel.administration.LocalSubCorporateName_Chronological) oby[j];
                psh.remove();
            }
            oby = ((ejb.objectmodel.administration.LocalSubCorporateName_GeographicSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeographicSD")).findBySubCorNameIdLibraryId(idInt.intValue(), libIdInt.intValue()).toArray();
            for (int j = 0; j < oby.length; j++) {
                ejb.objectmodel.administration.LocalSubCorporateName_GeographicSD psh = (ejb.objectmodel.administration.LocalSubCorporateName_GeographicSD) oby[j];
                psh.remove();
            }
            for (int j = 0; j < generalSD.size(); j++) {
                ((ejb.objectmodel.administration.LocalSubCorporateName_GeneralSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeneralSD")).createUsingAllFields(idInt, libIdInt, generalSD.elementAt(j).toString());
            }
            for (int j = 0; j < formSD.size(); j++) {
                ((ejb.objectmodel.administration.LocalSubCorporateName_FormSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_FormSD")).createUsingAllSubFields(idInt, libIdInt, formSD.elementAt(j).toString());
            }
            for (int j = 0; j < chronologicalSD.size(); j++) {
                ((ejb.objectmodel.administration.LocalSubCorporateName_ChronologicalHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_Chronological")).createUsingAllSubFields(idInt, libIdInt, chronologicalSD.elementAt(j).toString());
            }
            for (int j = 0; j < geographicSd.size(); j++) {
                ((ejb.objectmodel.administration.LocalSubCorporateName_GeographicSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeographicSD")).createUsingAllFields(idInt, libIdInt, geographicSd.elementAt(j).toString());
            }
            ejb.objectmodel.administration.SubCorporateName_AFKey pkey = new ejb.objectmodel.administration.SubCorporateName_AFKey();
            pkey.subCorporateName_Id = idInt;
            pkey.library_Id = libIdInt;
            ejb.objectmodel.administration.LocalSubCorporateName_AF ttsh = ((ejb.objectmodel.administration.LocalSubCorporateName_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_AF")).findByPrimaryKey(pkey);
            ttsh.setCorporate_Name_Id(new Integer(corporateNameId));
            ttsh.setCorporate_Name_Library_Id(new Integer(corporateNameLibraryId));
            ejb.bprocess.cataloguing.LocalRegenerateISORecord recgen = ((ejb.bprocess.cataloguing.LocalRegenerateISORecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("RegenerateISORecord")).create();
            for (int i = 0; i < alcatrecs.size(); i += 2) {
                Integer catrecid = (Integer) alcatrecs.get(i);
                Integer ownlibid = (Integer) alcatrecs.get(i + 1);
                ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey skey = new ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey();
                skey.catalogueRecordId = catrecid;
                skey.owner_Library_Id = ownlibid;
                ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord scatrec = ((ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CatalogueRecord")).findByPrimaryKey(skey);
                String wholerec = scatrec.getWholeCatalogueRecord();
                String newwholerec = recgen.regeneateISORecordFromAF(wholerec, catrecid.toString(), ownlibid.toString());
                scatrec.setWholeCatalogueRecord(newwholerec);
            }
            returnCode = 0;
        } catch (Exception exp) {
            context.setRollbackOnly();
            exp.printStackTrace();
            returnCode = 2;
        }
        String retxml = (new ejb.bprocess.util.NewGenXMLGenerator()).getReturnCodeXMLString(returnCode);
        return retxml;
    }

    public java.lang.String deleteAuthorityFile(java.lang.String id, java.lang.String libId, java.lang.String replaceId, java.lang.String replaceLibId) {
        Integer idInt = new Integer(id);
        Integer libIdInt = new Integer(libId);
        Integer replaceIdInt = null;
        Integer replaceLibIdInt = null;
        int returnCode = 0;
        if (!replaceId.equals("")) {
            replaceIdInt = new Integer(replaceId);
            replaceLibIdInt = new Integer(replaceLibId);
        }
        try {
            java.util.ArrayList alcatrecs = new java.util.ArrayList();
            Object[] obx = ((ejb.objectmodel.administration.LocalSearchable_CorporateSH_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CorporateSH_Ass")).findBySubjectCorporateName(idInt, libIdInt).toArray();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.administration.LocalSearchable_CorporateSH_Ass stta = (ejb.objectmodel.administration.LocalSearchable_CorporateSH_Ass) obx[i];
                alcatrecs.add(stta.getCatalogueRecordId());
                alcatrecs.add(stta.getOwner_Library_Id());
                if (replaceIdInt != null) {
                    try {
                        ((ejb.objectmodel.administration.LocalSearchable_CorporateSH_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CorporateSH_Ass")).createUsingAllFields(stta.getCatalogueRecordId(), stta.getOwner_Library_Id(), replaceIdInt, replaceLibIdInt);
                        stta.remove();
                    } catch (Exception exp) {
                        exp.printStackTrace();
                        stta.remove();
                    }
                } else {
                    stta.remove();
                }
            }
            Object[] oby = ((ejb.objectmodel.administration.LocalSubCorporateName_GeneralSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeneralSD")).findBySubCorNameIdLibraryId(idInt.intValue(), libIdInt.intValue()).toArray();
            for (int j = 0; j < oby.length; j++) {
                ejb.objectmodel.administration.LocalSubCorporateName_GeneralSD psh = (ejb.objectmodel.administration.LocalSubCorporateName_GeneralSD) oby[j];
                psh.remove();
            }
            oby = ((ejb.objectmodel.administration.LocalSubCorporateName_FormSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_FormSD")).findBySubCorNameIdLibraryId(idInt.intValue(), libIdInt.intValue()).toArray();
            for (int j = 0; j < oby.length; j++) {
                ejb.objectmodel.administration.LocalSubCorporateName_FormSD psh = (ejb.objectmodel.administration.LocalSubCorporateName_FormSD) oby[j];
                psh.remove();
            }
            oby = ((ejb.objectmodel.administration.LocalSubCorporateName_ChronologicalHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_Chronological")).findBySubCorNameIdLibraryId(idInt.intValue(), libIdInt.intValue()).toArray();
            for (int j = 0; j < oby.length; j++) {
                ejb.objectmodel.administration.LocalSubCorporateName_Chronological psh = (ejb.objectmodel.administration.LocalSubCorporateName_Chronological) oby[j];
                psh.remove();
            }
            oby = ((ejb.objectmodel.administration.LocalSubCorporateName_GeographicSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_GeographicSD")).findBySubCorNameIdLibraryId(idInt.intValue(), libIdInt.intValue()).toArray();
            for (int j = 0; j < oby.length; j++) {
                ejb.objectmodel.administration.LocalSubCorporateName_GeographicSD psh = (ejb.objectmodel.administration.LocalSubCorporateName_GeographicSD) oby[j];
                psh.remove();
            }
            ejb.objectmodel.administration.SubCorporateName_AFKey pkey = new ejb.objectmodel.administration.SubCorporateName_AFKey();
            pkey.subCorporateName_Id = idInt;
            pkey.library_Id = libIdInt;
            ((ejb.objectmodel.administration.LocalSubCorporateName_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubCorporateName_AF")).findByPrimaryKey(pkey).remove();
            ejb.bprocess.cataloguing.LocalRegenerateISORecord recgen = ((ejb.bprocess.cataloguing.LocalRegenerateISORecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("RegenerateISORecord")).create();
            for (int i = 0; i < alcatrecs.size(); i += 2) {
                Integer catrecid = (Integer) alcatrecs.get(i);
                Integer ownlibid = (Integer) alcatrecs.get(i + 1);
                ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey skey = new ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey();
                skey.catalogueRecordId = catrecid;
                skey.owner_Library_Id = ownlibid;
                ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord scatrec = ((ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CatalogueRecord")).findByPrimaryKey(skey);
                String wholerec = scatrec.getWholeCatalogueRecord();
                String newwholerec = recgen.regeneateISORecordFromAF(wholerec, catrecid.toString(), ownlibid.toString());
                scatrec.setWholeCatalogueRecord(newwholerec);
            }
            returnCode = 0;
        } catch (Exception exp) {
            context.setRollbackOnly();
            exp.printStackTrace();
            returnCode = 2;
        }
        String retxml = (new ejb.bprocess.util.NewGenXMLGenerator()).getReturnCodeXMLString(returnCode);
        return retxml;
    }
}
