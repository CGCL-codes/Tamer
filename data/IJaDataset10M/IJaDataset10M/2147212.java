package net.sf.tinyPayroll.dao;

import net.sf.tinyPayroll.event.DatabaseException;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Connects to the database and creates a new database if necessary.
 */
public class DBConnector {

    /**
     * Singleton instance of the class.
     */
    private static DBConnector instance;

    /**
     * Connection to the HSQL database.
     */
    private Connection conn;

    /**
     * Creates a blank database and the tables.
     *
     * @param dbToCreate The database file to be created.
     * @throws DatabaseException if there are problems with the database.
     */
    private void createDataFile(File dbToCreate) throws DatabaseException {
        try {
            createDB(dbToCreate);
            createBreakTable();
            createLogEntryTable();
            createPayPeriodTable();
            createTimeEntryTable();
            createUserTable();
        } catch (Exception e) {
            throw new DatabaseException("Error creating new data file: " + e.getMessage());
        }
    }

    /**
     * Private constructor that connects us to a database, and if that fails, it creates a brand new one for us.
     *
     * @param dbToConnect The database file to be connected.
     * @throws DatabaseException if there are issues creating the database.
     */
    private DBConnector(File dbToConnect) throws DatabaseException {
        System.out.println("dbToConnect = " + dbToConnect);
        try {
            connectDataFile(dbToConnect);
        } catch (Exception e) {
            System.out.println("Doesn't exist, creating new data file.");
            createDataFile(dbToConnect);
        }
    }

    /**
     * Initializes the driver and connects to the database.
     *
     * @param dbToConnect The database to connect to.
     * @throws DatabaseException If there is an error connecting to the database.
     */
    private void connectDataFile(File dbToConnect) throws DatabaseException {
        try {
            Class.forName("org.hsqldb.jdbcDriver");
            conn = DriverManager.getConnection("jdbc:hsqldb:file:" + dbToConnect.getAbsolutePath() + ";ifexists=true", "sa", "");
        } catch (SQLException e) {
            throw new DatabaseException("Error connecting to the data file:" + e.getMessage());
        } catch (ClassNotFoundException e) {
            throw new DatabaseException("Error initializing database driver: " + e.getMessage());
        }
    }

    /**
     * Singleton method that returns the instance of the {@link DBConnector}.
     *
     * @param fileToConnect the file to connect us to.
     * @return An instance of the DBConnector class.
     * @throws DatabaseException if there is an error connecting to the database.
     */
    public static DBConnector getInstance(File fileToConnect) throws DatabaseException {
        if (instance == null) {
            instance = new DBConnector(fileToConnect);
        }
        return instance;
    }

    /**
     * Cleans up at exit of the application by executing a shutdown on the database.
     *
     * @throws DatabaseException if there is a database error on shutdown.
     */
    public void cleanUp() throws DatabaseException {
        try {
            System.out.println("Shutting down the database connections.");
            PreparedStatement ps = conn.prepareStatement("SHUTDOWN");
            ps.executeUpdate();
            ps.close();
            conn.commit();
            conn.close();
        } catch (SQLException e) {
            throw new DatabaseException("Database exception: " + e.getMessage());
        }
    }

    /**
     * Creates a database file by connecting to a non-existent one.
     *
     * @param dbToCreate The database file to be created.
     * @throws SQLException           if there is an error in connecting to the database.
     * @throws ClassNotFoundException if the HSQL drivers can't be found.
     */
    private void createDB(File dbToCreate) throws ClassNotFoundException, SQLException {
        Class.forName("org.hsqldb.jdbcDriver");
        conn = DriverManager.getConnection("jdbc:hsqldb:file:" + dbToCreate.getAbsolutePath(), "sa", "");
    }

    /**
     * Creates the Break table in the connected database.
     *
     * @throws SQLException if there is an issue executing the SQL statement to create the table.
     */
    private void createBreakTable() throws SQLException {
        PreparedStatement ps = conn.prepareStatement("CREATE TABLE breaks(break_id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, time_entry_id INTEGER, " + "time_in TIMESTAMP, time_out TIMESTAMP)");
        ps.executeUpdate();
        ps.close();
        conn.commit();
        System.out.println("breaks table created.");
    }

    /**
     * Creates the <code>log_entry</code> table.
     *
     * @throws SQLException if there is an issue executing the SQL statement to create the table.
     */
    private void createLogEntryTable() throws SQLException {
        PreparedStatement ps = conn.prepareStatement("CREATE TABLE log_entries (log_entry_id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, message VARCHAR, " + "message_severity INTEGER, message_type NUMERIC, " + "time_entry_id INTEGER, date_logged TIMESTAMP, user_id INTEGER)");
        int st = ps.executeUpdate();
        if (st == -1) {
            ps.close();
            throw new SQLException("Create table didn't work.");
        } else {
            System.out.println("Create table users returned " + st + ".");
        }
        ps.close();
        conn.commit();
        System.out.println("log_entries table created.");
    }

    /**
     * Creates the <code>pay_periods</code> table.
     *
     * @throws SQLException if there is an issue executing the SQL statement to create the table.
     */
    private void createPayPeriodTable() throws SQLException {
        PreparedStatement ps = conn.prepareStatement("CREATE TABLE pay_periods (pay_period_id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, start_date TIMESTAMP, end_date TIMESTAMP)");
        ps.executeUpdate();
        ps.close();
        conn.commit();
        System.out.println("pay_periods table created.");
    }

    /**
     * Creates the <code>time_entries</code> table in the database.
     *
     * @throws SQLException if there is an issue executing the SQL statement to create the table.
     */
    private void createTimeEntryTable() throws SQLException {
        PreparedStatement ps = conn.prepareStatement("CREATE TABLE time_entries (time_entry_id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, time_in TIMESTAMP, time_out TIMESTAMP, " + "user_id INTEGER)");
        ps.executeUpdate();
        ps.close();
        conn.commit();
        System.out.println("time_entries table created.");
    }

    /**
     * Creates the <code>users</code> table for the connected database.
     *
     * @throws SQLException if there is an issue executing the SQL statement to create the table.
     */
    private void createUserTable() throws SQLException {
        PreparedStatement ps = conn.prepareStatement("CREATE TABLE users (user_id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, first_name VARCHAR, last_name VARCHAR, " + "pay_rate DOUBLE, status INTEGER, is_deleted BOOLEAN)");
        ps.executeUpdate();
        ps.close();
        conn.commit();
        ps = conn.prepareStatement("INSERT INTO users (first_name, last_name, pay_rate, status) " + "VALUES " + " ('Kevin', 'Wallace', 0.05, 0)");
        ps.executeUpdate();
        ps.close();
        conn.commit();
        System.out.println("users table created.");
    }

    /**
     * Gets the current connection.
     *
     * @return the current connection, or null if there is not one.
     */
    public Connection getConnection() {
        return conn;
    }
}
