package org.campware.cream.om;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.torque.NoRowsException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.BasePeer;
import org.apache.torque.util.Criteria;
import com.workingdogs.village.DataSetException;
import com.workingdogs.village.QueryDataSet;
import com.workingdogs.village.Record;
import org.campware.cream.om.map.*;

/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 */
public abstract class BasePaymentPeer extends BasePeer {

    /** the default database name for this class */
    public static final String DATABASE_NAME = "cream";

    /** the table name for this class */
    public static final String TABLE_NAME = "PAYMENT";

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static MapBuilder getMapBuilder() throws TorqueException {
        return getMapBuilder(PaymentMapBuilder.CLASS_NAME);
    }

    /** the column name for the PAYMENT_ID field */
    public static final String PAYMENT_ID;

    /** the column name for the PAYMENT_CODE field */
    public static final String PAYMENT_CODE;

    /** the column name for the STATUS field */
    public static final String STATUS;

    /** the column name for the PRIORITY field */
    public static final String PRIORITY;

    /** the column name for the ISSUED_DATE field */
    public static final String ISSUED_DATE;

    /** the column name for the CLOSED_DATE field */
    public static final String CLOSED_DATE;

    /** the column name for the CUSTOMER_ID field */
    public static final String CUSTOMER_ID;

    /** the column name for the PROJECT_ID field */
    public static final String PROJECT_ID;

    /** the column name for the SORDER_ID field */
    public static final String SORDER_ID;

    /** the column name for the INVOICE_CODE field */
    public static final String INVOICE_CODE;

    /** the column name for the PAY_TERM field */
    public static final String PAY_TERM;

    /** the column name for the PAY_METHOD field */
    public static final String PAY_METHOD;

    /** the column name for the CURRENCY_ID field */
    public static final String CURRENCY_ID;

    /** the column name for the CURRENCY_RATE field */
    public static final String CURRENCY_RATE;

    /** the column name for the CURRENCY_AMOUNT field */
    public static final String CURRENCY_AMOUNT;

    /** the column name for the TOTAL_AMOUNT field */
    public static final String TOTAL_AMOUNT;

    /** the column name for the SUBJECT field */
    public static final String SUBJECT;

    /** the column name for the NOTES field */
    public static final String NOTES;

    /** the column name for the CREATED field */
    public static final String CREATED;

    /** the column name for the MODIFIED field */
    public static final String MODIFIED;

    /** the column name for the CREATED_BY field */
    public static final String CREATED_BY;

    /** the column name for the MODIFIED_BY field */
    public static final String MODIFIED_BY;

    static {
        PAYMENT_ID = "PAYMENT.PAYMENT_ID";
        PAYMENT_CODE = "PAYMENT.PAYMENT_CODE";
        STATUS = "PAYMENT.STATUS";
        PRIORITY = "PAYMENT.PRIORITY";
        ISSUED_DATE = "PAYMENT.ISSUED_DATE";
        CLOSED_DATE = "PAYMENT.CLOSED_DATE";
        CUSTOMER_ID = "PAYMENT.CUSTOMER_ID";
        PROJECT_ID = "PAYMENT.PROJECT_ID";
        SORDER_ID = "PAYMENT.SORDER_ID";
        INVOICE_CODE = "PAYMENT.INVOICE_CODE";
        PAY_TERM = "PAYMENT.PAY_TERM";
        PAY_METHOD = "PAYMENT.PAY_METHOD";
        CURRENCY_ID = "PAYMENT.CURRENCY_ID";
        CURRENCY_RATE = "PAYMENT.CURRENCY_RATE";
        CURRENCY_AMOUNT = "PAYMENT.CURRENCY_AMOUNT";
        TOTAL_AMOUNT = "PAYMENT.TOTAL_AMOUNT";
        SUBJECT = "PAYMENT.SUBJECT";
        NOTES = "PAYMENT.NOTES";
        CREATED = "PAYMENT.CREATED";
        MODIFIED = "PAYMENT.MODIFIED";
        CREATED_BY = "PAYMENT.CREATED_BY";
        MODIFIED_BY = "PAYMENT.MODIFIED_BY";
        if (Torque.isInit()) {
            try {
                getMapBuilder(PaymentMapBuilder.CLASS_NAME);
            } catch (Exception e) {
                log.error("Could not initialize Peer", e);
            }
        } else {
            Torque.registerMapBuilder(PaymentMapBuilder.CLASS_NAME);
        }
    }

    /** number of columns for this peer */
    public static final int numColumns = 22;

    /** A class that can be returned by this peer. */
    protected static final String CLASSNAME_DEFAULT = "org.campware.cream.om.Payment";

    /** A class that can be returned by this peer. */
    protected static final Class CLASS_DEFAULT = initClass(CLASSNAME_DEFAULT);

    /**
     * Class object initialization method.
     *
     * @param className name of the class to initialize
     * @return the initialized class
     */
    private static Class initClass(String className) {
        Class c = null;
        try {
            c = Class.forName(className);
        } catch (Throwable t) {
            log.error("A FATAL ERROR has occurred which should not " + "have happened under any circumstance.  Please notify " + "the Torque developers <torque-dev@db.apache.org> " + "and give as many details as possible (including the error " + "stack trace).", t);
            if (t instanceof Error) {
                throw (Error) t.fillInStackTrace();
            }
        }
        return c;
    }

    /**
     * Get the list of objects for a ResultSet.  Please not that your
     * resultset MUST return columns in the right order.  You can use
     * getFieldNames() in BaseObject to get the correct sequence.
     *
     * @param results the ResultSet
     * @return the list of objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List resultSet2Objects(java.sql.ResultSet results) throws TorqueException {
        try {
            QueryDataSet qds = null;
            List rows = null;
            try {
                qds = new QueryDataSet(results);
                rows = getSelectResults(qds);
            } finally {
                if (qds != null) {
                    qds.close();
                }
            }
            return populateObjects(rows);
        } catch (SQLException e) {
            throw new TorqueException(e);
        } catch (DataSetException e) {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do inserts.
     *
     * @param criteria object used to create the INSERT statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria) throws TorqueException {
        return BasePaymentPeer.doInsert(criteria, (Connection) null);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object used to create the INSERT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria, Connection con) throws TorqueException {
        setDbName(criteria);
        if (con == null) {
            return BasePeer.doInsert(criteria);
        } else {
            return BasePeer.doInsert(criteria, con);
        }
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria) throws TorqueException {
        criteria.addSelectColumn(PAYMENT_ID);
        criteria.addSelectColumn(PAYMENT_CODE);
        criteria.addSelectColumn(STATUS);
        criteria.addSelectColumn(PRIORITY);
        criteria.addSelectColumn(ISSUED_DATE);
        criteria.addSelectColumn(CLOSED_DATE);
        criteria.addSelectColumn(CUSTOMER_ID);
        criteria.addSelectColumn(PROJECT_ID);
        criteria.addSelectColumn(SORDER_ID);
        criteria.addSelectColumn(INVOICE_CODE);
        criteria.addSelectColumn(PAY_TERM);
        criteria.addSelectColumn(PAY_METHOD);
        criteria.addSelectColumn(CURRENCY_ID);
        criteria.addSelectColumn(CURRENCY_RATE);
        criteria.addSelectColumn(CURRENCY_AMOUNT);
        criteria.addSelectColumn(TOTAL_AMOUNT);
        criteria.addSelectColumn(SUBJECT);
        criteria.addSelectColumn(NOTES);
        criteria.addSelectColumn(CREATED);
        criteria.addSelectColumn(MODIFIED);
        criteria.addSelectColumn(CREATED_BY);
        criteria.addSelectColumn(MODIFIED_BY);
    }

    /**
     * Create a new object of type cls from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Payment row2Object(Record row, int offset, Class cls) throws TorqueException {
        try {
            Payment obj = (Payment) cls.newInstance();
            PaymentPeer.populateObject(row, offset, obj);
            obj.setModified(false);
            obj.setNew(false);
            return obj;
        } catch (InstantiationException e) {
            throw new TorqueException(e);
        } catch (IllegalAccessException e) {
            throw new TorqueException(e);
        }
    }

    /**
     * Populates an object from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void populateObject(Record row, int offset, Payment obj) throws TorqueException {
        try {
            obj.setPaymentId(row.getValue(offset + 0).asInt());
            obj.setPaymentCode(row.getValue(offset + 1).asString());
            obj.setStatus(row.getValue(offset + 2).asInt());
            obj.setPriority(row.getValue(offset + 3).asInt());
            obj.setIssuedDate(row.getValue(offset + 4).asUtilDate());
            obj.setClosedDate(row.getValue(offset + 5).asUtilDate());
            obj.setCustomerId(row.getValue(offset + 6).asInt());
            obj.setProjectId(row.getValue(offset + 7).asInt());
            obj.setSorderId(row.getValue(offset + 8).asInt());
            obj.setInvoiceCode(row.getValue(offset + 9).asString());
            obj.setPayTerm(row.getValue(offset + 10).asInt());
            obj.setPayMethod(row.getValue(offset + 11).asInt());
            obj.setCurrencyId(row.getValue(offset + 12).asInt());
            obj.setCurrencyRate(row.getValue(offset + 13).asBigDecimal());
            obj.setCurrencyAmount(row.getValue(offset + 14).asBigDecimal());
            obj.setTotalAmount(row.getValue(offset + 15).asBigDecimal());
            obj.setSubject(row.getValue(offset + 16).asString());
            obj.setNotes(row.getValue(offset + 17).asString());
            obj.setCreated(row.getValue(offset + 18).asUtilDate());
            obj.setModified(row.getValue(offset + 19).asUtilDate());
            obj.setCreatedBy(row.getValue(offset + 20).asString());
            obj.setModifiedBy(row.getValue(offset + 21).asString());
        } catch (DataSetException e) {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do selects.
     *
     * @param criteria object used to create the SELECT statement.
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria) throws TorqueException {
        return populateObjects(doSelectVillageRecords(criteria));
    }

    /**
     * Method to do selects within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria, Connection con) throws TorqueException {
        return populateObjects(doSelectVillageRecords(criteria, con));
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method handles connections internally.  The Record objects
     * returned by this method should be considered readonly.  Do not
     * alter the data and call save(), your results may vary, but are
     * certainly likely to result in hard to track MT bugs.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria) throws TorqueException {
        return BasePaymentPeer.doSelectVillageRecords(criteria, (Connection) null);
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method should be used for transactions
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria, Connection con) throws TorqueException {
        if (criteria.getSelectColumns().size() == 0) {
            addSelectColumns(criteria);
        }
        setDbName(criteria);
        if (con == null) {
            return BasePeer.doSelect(criteria);
        } else {
            return BasePeer.doSelect(criteria, con);
        }
    }

    /**
     * The returned List will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List populateObjects(List records) throws TorqueException {
        List results = new ArrayList(records.size());
        for (int i = 0; i < records.size(); i++) {
            Record row = (Record) records.get(i);
            results.add(PaymentPeer.row2Object(row, 1, PaymentPeer.getOMClass()));
        }
        return results;
    }

    /**
     * The class that the Peer will make instances of.
     * If the BO is abstract then you must implement this method
     * in the BO.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass() throws TorqueException {
        return CLASS_DEFAULT;
    }

    /**
     * Method to do updates.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria) throws TorqueException {
        BasePaymentPeer.doUpdate(criteria, (Connection) null);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria, Connection con) throws TorqueException {
        Criteria selectCriteria = new Criteria(DATABASE_NAME, 2);
        selectCriteria.put(PAYMENT_ID, criteria.remove(PAYMENT_ID));
        setDbName(criteria);
        if (con == null) {
            BasePeer.doUpdate(selectCriteria, criteria);
        } else {
            BasePeer.doUpdate(selectCriteria, criteria, con);
        }
    }

    /**
     * Method to do deletes.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Criteria criteria) throws TorqueException {
        PaymentPeer.doDelete(criteria, (Connection) null);
    }

    /**
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doDelete(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Criteria criteria, Connection con) throws TorqueException {
        setDbName(criteria);
        if (con == null) {
            BasePeer.doDelete(criteria);
        } else {
            BasePeer.doDelete(criteria, con);
        }
    }

    /**
     * Method to do selects
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Payment obj) throws TorqueException {
        return doSelect(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Payment obj) throws TorqueException {
        obj.setPrimaryKey(doInsert(buildCriteria(obj)));
        obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * @param obj the data object to update in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Payment obj) throws TorqueException {
        doUpdate(buildCriteria(obj));
        obj.setModified(false);
    }

    /**
     * @param obj the data object to delete in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Payment obj) throws TorqueException {
        doDelete(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Payment) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Payment obj, Connection con) throws TorqueException {
        obj.setPrimaryKey(doInsert(buildCriteria(obj), con));
        obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Payment) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Payment obj, Connection con) throws TorqueException {
        doUpdate(buildCriteria(obj), con);
        obj.setModified(false);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(Payment) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Payment obj, Connection con) throws TorqueException {
        doDelete(buildSelectCriteria(obj), con);
    }

    /**
     * Method to do deletes.
     *
     * @param pk ObjectKey that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk) throws TorqueException {
        BasePaymentPeer.doDelete(pk, (Connection) null);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.  It will take
     * care of the connection details internally.
     *
     * @param pk the primary key for the object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk, Connection con) throws TorqueException {
        doDelete(buildCriteria(pk), con);
    }

    /** Build a Criteria object from an ObjectKey */
    public static Criteria buildCriteria(ObjectKey pk) {
        Criteria criteria = new Criteria();
        criteria.add(PAYMENT_ID, pk);
        return criteria;
    }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria(Payment obj) {
        Criteria criteria = new Criteria(DATABASE_NAME);
        if (!obj.isNew()) criteria.add(PAYMENT_ID, obj.getPaymentId());
        criteria.add(PAYMENT_CODE, obj.getPaymentCode());
        criteria.add(STATUS, obj.getStatus());
        criteria.add(PRIORITY, obj.getPriority());
        criteria.add(ISSUED_DATE, obj.getIssuedDate());
        criteria.add(CLOSED_DATE, obj.getClosedDate());
        criteria.add(CUSTOMER_ID, obj.getCustomerId());
        criteria.add(PROJECT_ID, obj.getProjectId());
        criteria.add(SORDER_ID, obj.getSorderId());
        criteria.add(INVOICE_CODE, obj.getInvoiceCode());
        criteria.add(PAY_TERM, obj.getPayTerm());
        criteria.add(PAY_METHOD, obj.getPayMethod());
        criteria.add(CURRENCY_ID, obj.getCurrencyId());
        criteria.add(CURRENCY_RATE, obj.getCurrencyRate());
        criteria.add(CURRENCY_AMOUNT, obj.getCurrencyAmount());
        criteria.add(TOTAL_AMOUNT, obj.getTotalAmount());
        criteria.add(SUBJECT, obj.getSubject());
        criteria.add(NOTES, obj.getNotes());
        criteria.add(CREATED, obj.getCreated());
        criteria.add(MODIFIED, obj.getModified());
        criteria.add(CREATED_BY, obj.getCreatedBy());
        criteria.add(MODIFIED_BY, obj.getModifiedBy());
        return criteria;
    }

    /** Build a Criteria object from the data object for this peer, skipping all binary columns */
    public static Criteria buildSelectCriteria(Payment obj) {
        Criteria criteria = new Criteria(DATABASE_NAME);
        if (!obj.isNew()) criteria.add(PAYMENT_ID, obj.getPaymentId());
        criteria.add(PAYMENT_CODE, obj.getPaymentCode());
        criteria.add(STATUS, obj.getStatus());
        criteria.add(PRIORITY, obj.getPriority());
        criteria.add(ISSUED_DATE, obj.getIssuedDate());
        criteria.add(CLOSED_DATE, obj.getClosedDate());
        criteria.add(CUSTOMER_ID, obj.getCustomerId());
        criteria.add(PROJECT_ID, obj.getProjectId());
        criteria.add(SORDER_ID, obj.getSorderId());
        criteria.add(INVOICE_CODE, obj.getInvoiceCode());
        criteria.add(PAY_TERM, obj.getPayTerm());
        criteria.add(PAY_METHOD, obj.getPayMethod());
        criteria.add(CURRENCY_ID, obj.getCurrencyId());
        criteria.add(CURRENCY_RATE, obj.getCurrencyRate());
        criteria.add(CURRENCY_AMOUNT, obj.getCurrencyAmount());
        criteria.add(TOTAL_AMOUNT, obj.getTotalAmount());
        criteria.add(SUBJECT, obj.getSubject());
        criteria.add(NOTES, obj.getNotes());
        criteria.add(CREATED, obj.getCreated());
        criteria.add(MODIFIED, obj.getModified());
        criteria.add(CREATED_BY, obj.getCreatedBy());
        criteria.add(MODIFIED_BY, obj.getModifiedBy());
        return criteria;
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Payment retrieveByPK(int pk) throws TorqueException, NoRowsException, TooManyRowsException {
        return retrieveByPK(SimpleKey.keyFor(pk));
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Payment retrieveByPK(int pk, Connection con) throws TorqueException, NoRowsException, TooManyRowsException {
        return retrieveByPK(SimpleKey.keyFor(pk), con);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Payment retrieveByPK(ObjectKey pk) throws TorqueException, NoRowsException, TooManyRowsException {
        Connection db = null;
        Payment retVal = null;
        try {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(pk, db);
        } finally {
            Torque.closeConnection(db);
        }
        return (retVal);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Payment retrieveByPK(ObjectKey pk, Connection con) throws TorqueException, NoRowsException, TooManyRowsException {
        Criteria criteria = buildCriteria(pk);
        List v = doSelect(criteria, con);
        if (v.size() == 0) {
            throw new NoRowsException("Failed to select a row.");
        } else if (v.size() > 1) {
            throw new TooManyRowsException("Failed to select only one row.");
        } else {
            return (Payment) v.get(0);
        }
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks) throws TorqueException {
        Connection db = null;
        List retVal = null;
        try {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPKs(pks, db);
        } finally {
            Torque.closeConnection(db);
        }
        return (retVal);
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks, Connection dbcon) throws TorqueException {
        List objs = null;
        if (pks == null || pks.size() == 0) {
            objs = new LinkedList();
        } else {
            Criteria criteria = new Criteria();
            criteria.addIn(PAYMENT_ID, pks);
            objs = doSelect(criteria, dbcon);
        }
        return objs;
    }

    /**
     * selects a collection of Payment objects pre-filled with their
     * Customer objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in PaymentPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinCustomer(Criteria criteria) throws TorqueException {
        setDbName(criteria);
        PaymentPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        CustomerPeer.addSelectColumns(criteria);
        criteria.addJoin(PaymentPeer.CUSTOMER_ID, CustomerPeer.CUSTOMER_ID);
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();
        for (int i = 0; i < rows.size(); i++) {
            Record row = (Record) rows.get(i);
            Class omClass = PaymentPeer.getOMClass();
            Payment obj1 = (Payment) PaymentPeer.row2Object(row, 1, omClass);
            omClass = CustomerPeer.getOMClass();
            Customer obj2 = (Customer) CustomerPeer.row2Object(row, offset, omClass);
            boolean newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Customer temp_obj2 = (Customer) temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey())) {
                    newObject = false;
                    temp_obj2.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj2.initPayments();
                obj2.addPayment(obj1);
            }
            results.add(obj1);
        }
        return results;
    }

    /**
     * selects a collection of Payment objects pre-filled with their
     * Project objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in PaymentPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinProject(Criteria criteria) throws TorqueException {
        setDbName(criteria);
        PaymentPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        ProjectPeer.addSelectColumns(criteria);
        criteria.addJoin(PaymentPeer.PROJECT_ID, ProjectPeer.PROJECT_ID);
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();
        for (int i = 0; i < rows.size(); i++) {
            Record row = (Record) rows.get(i);
            Class omClass = PaymentPeer.getOMClass();
            Payment obj1 = (Payment) PaymentPeer.row2Object(row, 1, omClass);
            omClass = ProjectPeer.getOMClass();
            Project obj2 = (Project) ProjectPeer.row2Object(row, offset, omClass);
            boolean newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Project temp_obj2 = (Project) temp_obj1.getProject();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey())) {
                    newObject = false;
                    temp_obj2.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj2.initPayments();
                obj2.addPayment(obj1);
            }
            results.add(obj1);
        }
        return results;
    }

    /**
     * selects a collection of Payment objects pre-filled with their
     * Sorder objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in PaymentPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinSorder(Criteria criteria) throws TorqueException {
        setDbName(criteria);
        PaymentPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        SorderPeer.addSelectColumns(criteria);
        criteria.addJoin(PaymentPeer.SORDER_ID, SorderPeer.SORDER_ID);
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();
        for (int i = 0; i < rows.size(); i++) {
            Record row = (Record) rows.get(i);
            Class omClass = PaymentPeer.getOMClass();
            Payment obj1 = (Payment) PaymentPeer.row2Object(row, 1, omClass);
            omClass = SorderPeer.getOMClass();
            Sorder obj2 = (Sorder) SorderPeer.row2Object(row, offset, omClass);
            boolean newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Sorder temp_obj2 = (Sorder) temp_obj1.getSorder();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey())) {
                    newObject = false;
                    temp_obj2.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj2.initPayments();
                obj2.addPayment(obj1);
            }
            results.add(obj1);
        }
        return results;
    }

    /**
     * selects a collection of Payment objects pre-filled with their
     * Currency objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in PaymentPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinCurrency(Criteria criteria) throws TorqueException {
        setDbName(criteria);
        PaymentPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        CurrencyPeer.addSelectColumns(criteria);
        criteria.addJoin(PaymentPeer.CURRENCY_ID, CurrencyPeer.CURRENCY_ID);
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();
        for (int i = 0; i < rows.size(); i++) {
            Record row = (Record) rows.get(i);
            Class omClass = PaymentPeer.getOMClass();
            Payment obj1 = (Payment) PaymentPeer.row2Object(row, 1, omClass);
            omClass = CurrencyPeer.getOMClass();
            Currency obj2 = (Currency) CurrencyPeer.row2Object(row, offset, omClass);
            boolean newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Currency temp_obj2 = (Currency) temp_obj1.getCurrency();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey())) {
                    newObject = false;
                    temp_obj2.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj2.initPayments();
                obj2.addPayment(obj1);
            }
            results.add(obj1);
        }
        return results;
    }

    /**
     * selects a collection of Payment objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in PaymentPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptCustomer(Criteria criteria) throws TorqueException {
        setDbName(criteria);
        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
        ProjectPeer.addSelectColumns(criteria);
        int offset3 = offset2 + ProjectPeer.numColumns;
        SorderPeer.addSelectColumns(criteria);
        int offset4 = offset3 + SorderPeer.numColumns;
        CurrencyPeer.addSelectColumns(criteria);
        int offset5 = offset4 + CurrencyPeer.numColumns;
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();
        for (int i = 0; i < rows.size(); i++) {
            Record row = (Record) rows.get(i);
            Class omClass = PaymentPeer.getOMClass();
            Payment obj1 = (Payment) PaymentPeer.row2Object(row, 1, omClass);
            omClass = ProjectPeer.getOMClass();
            Project obj2 = (Project) ProjectPeer.row2Object(row, offset2, omClass);
            boolean newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Project temp_obj2 = (Project) temp_obj1.getProject();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey())) {
                    newObject = false;
                    temp_obj2.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj2.initPayments();
                obj2.addPayment(obj1);
            }
            omClass = SorderPeer.getOMClass();
            Sorder obj3 = (Sorder) SorderPeer.row2Object(row, offset3, omClass);
            newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Sorder temp_obj3 = (Sorder) temp_obj1.getSorder();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey())) {
                    newObject = false;
                    temp_obj3.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj3.initPayments();
                obj3.addPayment(obj1);
            }
            omClass = CurrencyPeer.getOMClass();
            Currency obj4 = (Currency) CurrencyPeer.row2Object(row, offset4, omClass);
            newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Currency temp_obj4 = (Currency) temp_obj1.getCurrency();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey())) {
                    newObject = false;
                    temp_obj4.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj4.initPayments();
                obj4.addPayment(obj1);
            }
            results.add(obj1);
        }
        return results;
    }

    /**
     * selects a collection of Payment objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in PaymentPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptProject(Criteria criteria) throws TorqueException {
        setDbName(criteria);
        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
        CustomerPeer.addSelectColumns(criteria);
        int offset3 = offset2 + CustomerPeer.numColumns;
        SorderPeer.addSelectColumns(criteria);
        int offset4 = offset3 + SorderPeer.numColumns;
        CurrencyPeer.addSelectColumns(criteria);
        int offset5 = offset4 + CurrencyPeer.numColumns;
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();
        for (int i = 0; i < rows.size(); i++) {
            Record row = (Record) rows.get(i);
            Class omClass = PaymentPeer.getOMClass();
            Payment obj1 = (Payment) PaymentPeer.row2Object(row, 1, omClass);
            omClass = CustomerPeer.getOMClass();
            Customer obj2 = (Customer) CustomerPeer.row2Object(row, offset2, omClass);
            boolean newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Customer temp_obj2 = (Customer) temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey())) {
                    newObject = false;
                    temp_obj2.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj2.initPayments();
                obj2.addPayment(obj1);
            }
            omClass = SorderPeer.getOMClass();
            Sorder obj3 = (Sorder) SorderPeer.row2Object(row, offset3, omClass);
            newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Sorder temp_obj3 = (Sorder) temp_obj1.getSorder();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey())) {
                    newObject = false;
                    temp_obj3.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj3.initPayments();
                obj3.addPayment(obj1);
            }
            omClass = CurrencyPeer.getOMClass();
            Currency obj4 = (Currency) CurrencyPeer.row2Object(row, offset4, omClass);
            newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Currency temp_obj4 = (Currency) temp_obj1.getCurrency();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey())) {
                    newObject = false;
                    temp_obj4.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj4.initPayments();
                obj4.addPayment(obj1);
            }
            results.add(obj1);
        }
        return results;
    }

    /**
     * selects a collection of Payment objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in PaymentPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptSorder(Criteria criteria) throws TorqueException {
        setDbName(criteria);
        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
        CustomerPeer.addSelectColumns(criteria);
        int offset3 = offset2 + CustomerPeer.numColumns;
        ProjectPeer.addSelectColumns(criteria);
        int offset4 = offset3 + ProjectPeer.numColumns;
        CurrencyPeer.addSelectColumns(criteria);
        int offset5 = offset4 + CurrencyPeer.numColumns;
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();
        for (int i = 0; i < rows.size(); i++) {
            Record row = (Record) rows.get(i);
            Class omClass = PaymentPeer.getOMClass();
            Payment obj1 = (Payment) PaymentPeer.row2Object(row, 1, omClass);
            omClass = CustomerPeer.getOMClass();
            Customer obj2 = (Customer) CustomerPeer.row2Object(row, offset2, omClass);
            boolean newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Customer temp_obj2 = (Customer) temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey())) {
                    newObject = false;
                    temp_obj2.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj2.initPayments();
                obj2.addPayment(obj1);
            }
            omClass = ProjectPeer.getOMClass();
            Project obj3 = (Project) ProjectPeer.row2Object(row, offset3, omClass);
            newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Project temp_obj3 = (Project) temp_obj1.getProject();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey())) {
                    newObject = false;
                    temp_obj3.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj3.initPayments();
                obj3.addPayment(obj1);
            }
            omClass = CurrencyPeer.getOMClass();
            Currency obj4 = (Currency) CurrencyPeer.row2Object(row, offset4, omClass);
            newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Currency temp_obj4 = (Currency) temp_obj1.getCurrency();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey())) {
                    newObject = false;
                    temp_obj4.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj4.initPayments();
                obj4.addPayment(obj1);
            }
            results.add(obj1);
        }
        return results;
    }

    /**
     * selects a collection of Payment objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in PaymentPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptCurrency(Criteria criteria) throws TorqueException {
        setDbName(criteria);
        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
        CustomerPeer.addSelectColumns(criteria);
        int offset3 = offset2 + CustomerPeer.numColumns;
        ProjectPeer.addSelectColumns(criteria);
        int offset4 = offset3 + ProjectPeer.numColumns;
        SorderPeer.addSelectColumns(criteria);
        int offset5 = offset4 + SorderPeer.numColumns;
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();
        for (int i = 0; i < rows.size(); i++) {
            Record row = (Record) rows.get(i);
            Class omClass = PaymentPeer.getOMClass();
            Payment obj1 = (Payment) PaymentPeer.row2Object(row, 1, omClass);
            omClass = CustomerPeer.getOMClass();
            Customer obj2 = (Customer) CustomerPeer.row2Object(row, offset2, omClass);
            boolean newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Customer temp_obj2 = (Customer) temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey())) {
                    newObject = false;
                    temp_obj2.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj2.initPayments();
                obj2.addPayment(obj1);
            }
            omClass = ProjectPeer.getOMClass();
            Project obj3 = (Project) ProjectPeer.row2Object(row, offset3, omClass);
            newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Project temp_obj3 = (Project) temp_obj1.getProject();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey())) {
                    newObject = false;
                    temp_obj3.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj3.initPayments();
                obj3.addPayment(obj1);
            }
            omClass = SorderPeer.getOMClass();
            Sorder obj4 = (Sorder) SorderPeer.row2Object(row, offset4, omClass);
            newObject = true;
            for (int j = 0; j < results.size(); j++) {
                Payment temp_obj1 = (Payment) results.get(j);
                Sorder temp_obj4 = (Sorder) temp_obj1.getSorder();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey())) {
                    newObject = false;
                    temp_obj4.addPayment(obj1);
                    break;
                }
            }
            if (newObject) {
                obj4.initPayments();
                obj4.addPayment(obj1);
            }
            results.add(obj1);
        }
        return results;
    }

    /**
     * Returns the TableMap related to this peer.  This method is not
     * needed for general use but a specific application could have a need.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static TableMap getTableMap() throws TorqueException {
        return Torque.getDatabaseMap(DATABASE_NAME).getTable(TABLE_NAME);
    }

    private static void setDbName(Criteria crit) {
        if (crit.getDbName() == Torque.getDefaultDB()) {
            crit.setDbName(DATABASE_NAME);
        }
    }
}
