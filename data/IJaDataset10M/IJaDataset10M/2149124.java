package net.ontopia.topicmaps.db2tm;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import net.ontopia.utils.FileUtils;
import net.ontopia.utils.TestFileUtils;
import net.ontopia.utils.OntopiaRuntimeException;
import net.ontopia.infoset.core.LocatorIF;
import net.ontopia.topicmaps.core.TopicMapIF;
import net.ontopia.topicmaps.db2tm.*;
import net.ontopia.topicmaps.utils.ImportExportUtils;
import net.ontopia.topicmaps.xml.CanonicalXTMWriter;
import net.ontopia.topicmaps.utils.ltm.LTMTopicMapWriter;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class DB2TMGeneralTestCase {

    private static final boolean DEBUG_LTM = false;

    protected boolean recanonicalizeSource = true;

    private static final String testdataDirectory = "db2tm";

    /**
   * @return The test cases generated by this.
   */
    @Parameters
    public static List generateTests() throws IOException {
        TestFileUtils.transferTestInputDirectory(testdataDirectory + "/in");
        return TestFileUtils.getTestInputFiles(testdataDirectory, "in", ".xml");
    }

    private String base;

    private String filename;

    public DB2TMGeneralTestCase(String root, String filename) {
        this.filename = filename;
        this.base = TestFileUtils.getTestdataOutputDirectory() + testdataDirectory;
    }

    @Test
    public void testFile() throws IOException {
        TestFileUtils.verifyDirectory(base, "out");
        String name = filename.substring(0, filename.length() - 4);
        String cfg = TestFileUtils.getTransferredTestInputFile(testdataDirectory, "in", filename).getPath();
        String in = TestFileUtils.getTestInputFile(testdataDirectory, "in", name + ".ltm");
        File cxtm = TestFileUtils.getTestOutputFile(testdataDirectory, "out", name + ".cxtm");
        String baseline = TestFileUtils.getTestInputFile(testdataDirectory, "baseline", name + ".cxtm");
        TopicMapIF topicmap = ImportExportUtils.getReader(in).read();
        DB2TM.add(cfg, topicmap);
        if (DEBUG_LTM) {
            File ltm = TestFileUtils.getTestOutputFile(testdataDirectory, "out", name + ".ltm");
            (new LTMTopicMapWriter(new FileOutputStream(ltm))).write(topicmap);
        }
        FileOutputStream out = new FileOutputStream(cxtm);
        (new CanonicalXTMWriter(out)).write(topicmap);
        out.close();
        Assert.assertTrue("The canonicalized conversion from " + filename + " does not match the baseline: " + cxtm + " " + baseline, FileUtils.compareFileToResource(cxtm, baseline));
    }
}
