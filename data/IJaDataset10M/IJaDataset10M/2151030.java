package com.android.ide.eclipse.adt.internal.resources.manager;

import com.android.ide.eclipse.adt.internal.resources.ResourceType;
import com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration;
import com.android.ide.eclipse.adt.internal.resources.manager.files.IAbstractFile;
import com.android.layoutlib.api.IResourceValue;
import java.util.Collection;

/**
 * Represents a Resource file (a file under $Project/res/)
 */
public abstract class ResourceFile extends Resource {

    private final IAbstractFile mFile;

    private final ResourceFolder mFolder;

    protected ResourceFile(IAbstractFile file, ResourceFolder folder) {
        mFile = file;
        mFolder = folder;
    }

    @Override
    public FolderConfiguration getConfiguration() {
        return mFolder.getConfiguration();
    }

    /**
     * Returns the IFile associated with the ResourceFile.
     */
    public final IAbstractFile getFile() {
        return mFile;
    }

    /**
     * Returns the parent folder as a {@link ResourceFolder}.
     */
    public final ResourceFolder getFolder() {
        return mFolder;
    }

    /**
     * Returns whether the resource is a framework resource.
     */
    public final boolean isFramework() {
        return mFolder.isFramework();
    }

    /**
     * Returns the list of {@link ResourceType} generated by the file.
     */
    public abstract ResourceType[] getResourceTypes();

    /**
     * Returns whether the file generated a resource of a specific type.
     * @param type The {@link ResourceType}
     */
    public abstract boolean hasResources(ResourceType type);

    /**
     * Get the list of {@link ProjectResourceItem} of a specific type generated by the file.
     * This method must make sure not to create duplicate.
     * @param type The type of {@link ProjectResourceItem} to return.
     * @param projectResources The global Project Resource object, allowing the implementation to
     * query for already existing {@link ProjectResourceItem}
     * @return The list of <b>new</b> {@link ProjectResourceItem}
     * @see ProjectResources#findResourceItem(ResourceType, String)
     */
    public abstract Collection<ProjectResourceItem> getResources(ResourceType type, ProjectResources projectResources);

    /**
     * Returns the value of a resource generated by this file by {@link ResourceType} and name.
     * <p/>If no resource match, <code>null</code> is returned. 
     * @param type the type of the resource.
     * @param name the name of the resource.
     */
    public abstract IResourceValue getValue(ResourceType type, String name);
}
