package src.lib.ioInterfaces;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.zip.GZIPOutputStream;

/**
 * @version $Revision: 558 $
 * @author 
 */
public class Wigwriter {

    private static boolean display_version = true;

    private static Log_Buffer LB;

    BufferedWriter bw;

    private String prepend;

    /**
	 * @param logbuffer
	 * @param file
	 * @param prepend_to_name
	 *            A string to prepend to names of chromosomes, if required.
	 *            Mainly for use at the GSC, where chromosome names do not
	 *            naturally contain the "chr" prefix, required by UCSC Genome
	 *            browser
	 */
    public Wigwriter(Log_Buffer logbuffer, String file, String prepend_to_name) {
        LB = logbuffer;
        if (display_version) {
            LB.Version("Wigwriter", "$Revision: 558 $");
            display_version = false;
        }
        prepend = prepend_to_name;
        try {
            bw = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(file))));
        } catch (IOException io) {
            LB.error("Error: Coundn't create wig file : " + file);
            LB.error("Message thrown by Java environment (may be null):" + io.getMessage());
            LB.die();
        }
    }

    /**
	 * 
	 * @param name
	 * @param desc
	 */
    public void header(String name, String desc) {
        this.writeln("# This wig was generated by FindPeaks, written by Anthony Fejes");
        this.writeln("# Wigwriter Version: " + "$Revision: 558 $");
        this.write("track type=\"wiggle_0\" ");
        this.write("name=\"" + name);
        this.write("\" description=\"" + desc);
        this.write("\" color=50,50,150 ");
        this.write("yLineMark=0.0 ");
        this.write("yLineOnOff=on ");
        this.write("visibility=2 ");
        this.write("priority=1 ");
        this.writeln("maxHeightPixels=40:40:2");
    }

    /**
	 * 
	 * @param chromosome
	 * @param start
	 * @param end
	 */
    public void browser_postion(String chromosome, int start, int end) {
        this.write("browser position " + prepend + chromosome + ":" + start + "-" + end);
    }

    /**
	 * 
	 * @param chrname
	 * @param startlocation
	 */
    public void section_header(String chrname, int startlocation) {
        this.writeln("fixedStep chrom=" + prepend + chrname + " start=" + startlocation + " step=1 ");
    }

    /**
	 * 
	 * @param st
	 */
    public void comments(String st) {
        this.writeln("# " + st + "\n");
    }

    /**
	 * 
	 * @param X
	 */
    public void writeln(String X) {
        try {
            bw.write(X);
            bw.newLine();
        } catch (IOException io) {
            LB.warning("Could not write \"" + X + "\"  to file : ");
            LB.warning("Message thrown by Java environment (may be null):" + io.getMessage());
        }
    }

    /**
	 * 
	 * @param X
	 */
    public void write(int X) {
        this.write(Integer.toString(X));
    }

    /**
	 * 
	 * @param X
	 */
    public void writeln(int X) {
        this.writeln(Integer.toString(X));
    }

    /**
	 * 
	 * @param X
	 */
    public void write(String X) {
        try {
            bw.write(X);
        } catch (IOException io) {
            LB.warning("Could not write \"" + X + "\"  to file.");
            LB.warning("Message thrown by Java environment (may be null):" + io.getMessage());
        }
    }

    public void close() {
        try {
            bw.close();
        } catch (IOException io) {
            LB.warning("Could not close buffered writer");
            LB.warning("Message thrown by Java environment (may be null):" + io.getMessage());
        }
    }
}
