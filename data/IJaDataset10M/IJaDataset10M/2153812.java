package name.ddns.green.mobile.FATJava;

import java.io.IOException;

/** This class emulates the java.io.File class for the FATJava project
 * @author paulg
 *
 */
public class File {

    public static final String separator = "/";

    public static final char separatorChar = '/';

    private String filePath = null;

    private String fileName = null;

    /** Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate
	 *  its name. Invoking this method is equivalent to invoking createTempFile(prefix, suffix, null).
	 * 
	 * @param prefix The prefix string to be used in generating the file's name; must be at least three characters long
	 * @param suffix The suffix string to be used in generating the file's name; may be null, in which case the suffix
	 * 				 ".tmp" will be used
	 * @return An abstract pathname denoting a newly-created empty file
	 * @throws IOException If a file could not be created
	 */
    public static File createTempFile(String prefix, String suffix) throws IOException {
        return createTempFile(prefix, suffix, null);
    }

    /**  Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate
	 *  its name. If this method returns successfully then it is guaranteed that:<br/><br/>
	 *  <ol>
	 *  <li>The file denoted by the returned abstract pathname did not exist before this method was invoked, and</li>
	 *  <li>Neither this method nor any of its variants will return the same abstract pathname again in the current
	 *  invocation of the virtual machine.</li></ol>
	 *  This method provides only part of a temporary-file facility. To arrange for a file created by this method to
	 *  be deleted automatically, use the deleteOnExit() method.<br/><br/>
	 *  The prefix argument must be at least three characters long. It is recommended that the prefix be a short,
	 *  meaningful string such as "hjb" or "mail". The suffix argument may be null, in which case the suffix ".tmp"
	 *  will be used.<br/><br/>
	 *  To create the new file, the prefix and the suffix may first be adjusted to fit the limitations of the
	 *  underlying platform. If the prefix is too long then it will be truncated, but its first three characters will
	 *  always be preserved. If the suffix is too long then it too will be truncated, but if it begins with a period
	 *  character ('.') then the period and the first three characters following it will always be preserved. Once
	 *  these adjustments have been made the name of the new file will be generated by concatenating the prefix, five
	 *  or more internally-generated characters, and the suffix.<br/><br/>
	 *  If the directory argument is null then the root directory will be used.
	 * 
	 * @param prefix The prefix string to be used in generating the file's name; must be at least three characters long
	 * @param suffix The suffix string to be used in generating the file's name; may be null, in which case the suffix
	 *  ".tmp" will be used
	 * @param directory The directory in which the file is to be created, or null if the default temporary-file directory
	 *  is to be used
	 * @return An abstract pathname denoting a newly-created empty file
	 * @throws IOException If a file could not be created
	 */
    public static File createTempFile(String prefix, String suffix, File directory) throws IOException {
        return new File("");
    }

    /** List the available filesystem roots.
	 * This method returns an array of File objects that denote the root directories of the available filesystem
	 * roots. It is guaranteed that the canonical pathname of any file physically present on the local machine will
	 * begin with one of the roots returned by this method.<br/><br/>
	 * 
	 * @return An array of File objects denoting the available filesystem roots, or null if the set of roots could
	 * 			not be determined. The array will be empty if there are no filesystem roots.
	 */
    public static File[] listRoots() {
        FATJava handle = FATJava.getInstance();
        String[] roots = handle.listRoots();
        File[] list = new File[roots.length];
        for (int cntr = 0; cntr < roots.length; cntr++) list[cntr] = new File(roots[cntr]);
        return list;
    }

    /** Convert this File to a string
	 * 
	 */
    public String toString() {
        return (filePath != null ? filePath : "") + separator + (fileName != null ? fileName : "");
    }

    /** Creates a new File instance by converting the given pathname string into an abstract pathname.
	 * If the given string is the empty string, then the result is the empty abstract pathname.
	 * 
	 * @param pathname A pathname string
	 * @throws NullPointerException If the pathname argument is null
	 */
    public File(String pathname) throws NullPointerException {
        int splitPoint = pathname.lastIndexOf(separatorChar);
        filePath = pathname.substring(0, splitPoint != -1 ? splitPoint : 0);
        fileName = pathname.substring(splitPoint < 0 ? 0 : splitPoint + 1);
    }
}
