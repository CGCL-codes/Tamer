package com.velocityme.client.gui.node.user;

import com.velocityme.client.gui.ChangeDeltaPanel;
import com.velocityme.client.gui.GuiDisplayUserAccessByUser;
import com.velocityme.client.gui.exception.ExceptionWindow;
import com.velocityme.client.utility.StatelessRemoteClientSessionUtil;
import com.velocityme.entity.PermissionBean;
import com.velocityme.interfaces.KeySession;
import com.velocityme.interfaces.NodePK;
import com.velocityme.interfaces.PermissionPK;
import com.velocityme.interfaces.UserPK;
import com.velocityme.utility.DuplicateUserException;
import com.velocityme.utility.InvalidKeyException;
import com.velocityme.utility.PermissionDeniedException;
import com.velocityme.valueobjects.UserValue;
import java.rmi.RemoteException;
import java.util.Collection;
import java.util.Set;
import javax.ejb.CreateException;
import javax.naming.NamingException;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;

/**
 *
 * @author  Robert Crida Work
 */
public class UserControl extends javax.swing.JPanel {

    private UserPK m_userPK;

    private NodePK m_parentNodePK;

    private KeySession m_key;

    private UserValueDisplay m_userValueDisplay;

    private boolean m_editing = true;

    private Set m_setPermissions;

    private Collection m_allPersonValues = null;

    /** Creates new form UserControl */
    public UserControl(KeySession p_key, UserPK p_userPK, boolean p_editing, Set p_setPermissions) {
        initComponents();
        m_key = p_key;
        m_userPK = p_userPK;
        m_editing = p_editing;
        m_setPermissions = p_setPermissions;
        try {
            if (p_editing) m_allPersonValues = StatelessRemoteClientSessionUtil.getSession().getAllPersonValues(m_key);
            m_userValueDisplay = new UserValueDisplay(StatelessRemoteClientSessionUtil.getSession().getUserValue(m_key, m_userPK), m_allPersonValues);
            if (!p_editing) {
                jTabbedPane1.addTab("Change Log", new ChangeDeltaPanel(m_key, new NodePK(m_userPK.getUserId())));
                jTabbedPane1.addTab("My Access", new GuiDisplayUserAccessByUser(m_key, m_userPK));
                jButtonEdit.setEnabled(m_setPermissions.contains(new PermissionPK(new Integer(PermissionBean.USER_EDIT))));
                jButtonPassword.setEnabled(true);
                jButtonToggleEnabled.setEnabled(m_setPermissions.contains(new PermissionPK(new Integer(PermissionBean.USER_ENABLE))));
            } else {
                jButtonOK.setEnabled(true);
                jButtonCancel.setEnabled(true);
            }
            m_userValueDisplay.setEditable(p_editing);
            m_userValueDisplay.setCreating(false);
            jPanel2.add(m_userValueDisplay, java.awt.BorderLayout.CENTER);
        } catch (RemoteException e) {
            ExceptionWindow.showError(e);
        } catch (NamingException e) {
            ExceptionWindow.showError(e);
        } catch (CreateException e) {
            ExceptionWindow.showError(e);
        } catch (InvalidKeyException e) {
            ExceptionWindow.showError(e);
        } catch (PermissionDeniedException e) {
            JOptionPane.showMessageDialog(this, "Permission denied!", "View User", JOptionPane.WARNING_MESSAGE);
        }
    }

    /** Creates new form UserControl */
    public UserControl(KeySession p_key, NodePK p_parentNodePK) {
        initComponents();
        m_key = p_key;
        m_parentNodePK = p_parentNodePK;
        try {
            m_allPersonValues = StatelessRemoteClientSessionUtil.getSession().getAllPersonValues(m_key);
            m_userValueDisplay = new UserValueDisplay(new UserValue(), m_allPersonValues);
            m_userValueDisplay.setEditable(true);
            m_userValueDisplay.setCreating(true);
            jPanel2.add(m_userValueDisplay, java.awt.BorderLayout.NORTH);
        } catch (RemoteException e) {
            ExceptionWindow.showError(e);
        } catch (NamingException e) {
            ExceptionWindow.showError(e);
        } catch (CreateException e) {
            ExceptionWindow.showError(e);
        } catch (InvalidKeyException e) {
            ExceptionWindow.showError(e);
        }
        jButtonOK.setEnabled(true);
        jButtonCancel.setEnabled(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButtonEdit = new javax.swing.JButton();
        jButtonPassword = new javax.swing.JButton();
        jButtonToggleEnabled = new javax.swing.JButton();
        jButtonOK = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        setLayout(new java.awt.BorderLayout());
        jPanel2.setLayout(new java.awt.BorderLayout());
        jPanel2.addComponentListener(new java.awt.event.ComponentAdapter() {

            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel2ComponentShown(evt);
            }
        });
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));
        jButtonEdit.setText("Edit");
        jButtonEdit.setEnabled(false);
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonEdit);
        jButtonPassword.setText("Password");
        jButtonPassword.setEnabled(false);
        jButtonPassword.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPasswordActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonPassword);
        jButtonToggleEnabled.setText("Toggle Enabled");
        jButtonToggleEnabled.setEnabled(false);
        jButtonToggleEnabled.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonToggleEnabledActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonToggleEnabled);
        jButtonOK.setText("OK");
        jButtonOK.setEnabled(false);
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonOK);
        jButtonCancel.setText("Cancel");
        jButtonCancel.setEnabled(false);
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCancel);
        jPanel2.add(jPanel1, java.awt.BorderLayout.SOUTH);
        jTabbedPane1.addTab("User", jPanel2);
        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }

    private void jButtonToggleEnabledActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            Boolean enabled = m_userValueDisplay.getUserValue().getIsEnabled().booleanValue() ? Boolean.FALSE : Boolean.TRUE;
            StatelessRemoteClientSessionUtil.getSession().userSetEnabled(m_key, m_userPK, enabled);
            m_userValueDisplay.setUserValue(StatelessRemoteClientSessionUtil.getSession().getUserValue(m_key, m_userPK), m_allPersonValues);
        } catch (PermissionDeniedException e) {
            JOptionPane.showMessageDialog(this, "Permission denied!", "Toggle Enabled", JOptionPane.WARNING_MESSAGE);
        } catch (CreateException e) {
            ExceptionWindow.showError(e);
        } catch (NamingException e) {
            ExceptionWindow.showError(e);
        } catch (InvalidKeyException e) {
            ExceptionWindow.showError(e);
        } catch (RemoteException e) {
            ExceptionWindow.showError(e);
        }
    }

    private void jButtonPasswordActionPerformed(java.awt.event.ActionEvent evt) {
        PasswordControl passwordPanel = new PasswordControl(m_key, m_userPK, m_setPermissions);
        ((JTabbedPane) getParent()).addTab("Change Password", passwordPanel);
        ((JTabbedPane) getParent()).setSelectedComponent(passwordPanel);
    }

    private void jPanel2ComponentShown(java.awt.event.ComponentEvent evt) {
        try {
            if (!m_editing) m_userValueDisplay.setUserValue(StatelessRemoteClientSessionUtil.getSession().getUserValue(m_key, m_userPK), m_allPersonValues);
        } catch (CreateException e) {
            ExceptionWindow.showError(e);
        } catch (NamingException e) {
            ExceptionWindow.showError(e);
        } catch (InvalidKeyException e) {
            ExceptionWindow.showError(e);
        } catch (RemoteException e) {
            ExceptionWindow.showError(e);
        } catch (PermissionDeniedException e) {
            JOptionPane.showMessageDialog(this, "Permission denied!", "View User", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {
        getParent().remove(this);
    }

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            UserValue userValue = m_userValueDisplay.getUserValue();
            if (userValue.userIdHasBeenSet()) StatelessRemoteClientSessionUtil.getSession().userEdit(m_key, m_userPK, userValue); else {
                String password = m_userValueDisplay.getPassword();
                StatelessRemoteClientSessionUtil.getSession().userCreate(m_key, m_parentNodePK, userValue, password);
            }
            getParent().remove(this);
        } catch (RemoteException e) {
            ExceptionWindow.showError(e);
        } catch (NamingException e) {
            ExceptionWindow.showError(e);
        } catch (CreateException e) {
            ExceptionWindow.showError(e);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Both instances of the password must be the same.", "Set password", JOptionPane.WARNING_MESSAGE);
        } catch (PermissionDeniedException e) {
            JOptionPane.showMessageDialog(this, "Permission denied!", "Set password", JOptionPane.WARNING_MESSAGE);
        } catch (DuplicateUserException e) {
            JOptionPane.showMessageDialog(this, "Another user with the same name already exists", "Duplicate user", JOptionPane.WARNING_MESSAGE);
        } catch (InvalidKeyException e) {
            ExceptionWindow.showError(e);
        }
    }

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {
        UserControl editPanel = new UserControl(m_key, m_userPK, true, m_setPermissions);
        ((JTabbedPane) getParent()).addTab("Edit User", editPanel);
        ((JTabbedPane) getParent()).setSelectedComponent(editPanel);
    }

    private javax.swing.JButton jButtonCancel;

    private javax.swing.JButton jButtonEdit;

    private javax.swing.JButton jButtonOK;

    private javax.swing.JButton jButtonPassword;

    private javax.swing.JButton jButtonToggleEnabled;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JTabbedPane jTabbedPane1;
}
