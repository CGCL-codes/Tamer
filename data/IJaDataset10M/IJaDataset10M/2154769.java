package sinhalatransliterartor;

import Dictionary.Data;
import com.sun.star.frame.XController;
import com.sun.star.frame.XDesktop;
import com.sun.star.frame.XModel;
import com.sun.star.lang.XComponent;
import com.sun.star.lang.XMultiComponentFactory;
import com.sun.star.text.XText;
import com.sun.star.text.XTextCursor;
import com.sun.star.text.XTextViewCursor;
import com.sun.star.text.XTextViewCursorSupplier;
import com.sun.star.uno.Exception;
import com.sun.star.uno.UnoRuntime;
import com.sun.star.uno.XComponentContext;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.BadLocationException;

/**
 * This class creates a GUI for the Transliteration System.
 * It has a text area where user can enter text in English and it is
 * transliterated back to Sinhala.
 * @author SUMEDHA
 */
public class TransliterationUI extends javax.swing.JFrame {

    Transliterator transliterator;

    private String path;

    private XComponentContext m_xContext;

    private XText xText;

    private XTextViewCursor xViewCursor;

    private XTextCursor xTextCursor;

    private String trnsWord;

    private String word = "";

    private String displayWord = "";

    private int charCount = 0;

    private int spaceCount = 0;

    private int preSpaceCount;

    private char preKeyChar;

    /**
     * Creates a new Form of Transliteration UI
     * @param path  The path to the location of the Character Map image which is a String
     * @param context   XComponentContext Object
     */
    public TransliterationUI(String path, XComponentContext context) {
        try {
            Data data = new Data();
            this.path = path + data.getImageLocation();
            this.m_xContext = context;
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            initComponents();
            initializeComponents();
            setBottomLocation();
            jTextArea1.setLineWrap(true);
            transliterator = new Transliterator();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TransliterationUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(TransliterationUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(TransliterationUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(TransliterationUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        keyMapButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Transliterator");
        setResizable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Iskoola Pota", 0, 18));
        jTextArea1.setRows(5);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea1KeyReleased(evt);
            }

            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);
        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sinhalatransliterartor/Images/stock_check_filled.png")));
        okButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sinhalatransliterartor/Images/cancel.png")));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        keyMapButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sinhalatransliterartor/Images/accessories_character_map.png")));
        keyMapButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyMapButtonActionPerformed(evt);
            }
        });
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sinhalatransliterartor/Images/openoffice-logo-small.jpg")));
        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 18));
        jLabel2.setText("Enter Text Here");
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addContainerGap().addComponent(jLabel1).addGap(57, 57, 57).addComponent(okButton).addGap(18, 18, 18).addComponent(keyMapButton).addGap(18, 18, 18).addComponent(cancelButton)).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addContainerGap().addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel1).addGroup(layout.createSequentialGroup().addGap(23, 23, 23).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(cancelButton).addComponent(keyMapButton).addComponent(okButton)))).addContainerGap()));
        pack();
    }

    /**
     * When a key is released this method checks which key is released
     * and if the space key is released it transliterate the word which has been
     * entered prior to the space.
     * @param evt
     */
    private void jTextArea1KeyReleased(java.awt.event.KeyEvent evt) {
        if (evt.getKeyChar() == KeyEvent.VK_SPACE) {
            charCount++;
            trnsWord = displayWord + transliterator.transliterate(word);
            jTextArea1.replaceRange(trnsWord, spaceCount, charCount - 1);
            word = "";
            preSpaceCount = spaceCount;
            spaceCount = jTextArea1.getText().length();
            charCount = spaceCount;
            displayWord = "";
            preKeyChar = KeyEvent.VK_SPACE;
        }
    }

    /**
     *  This method shows the Key Map. Path is generated when the extension initialize
     * (When reading the data bases) and it is used to access the image containing the map
     * @param evt
     */
    private void keyMapButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ShowMap showMap = new ShowMap(getPath());
        showMap.showKeyMap(getPath());
    }

    /**
     * When OK button is pressed the text which has been transliterated
     * will be entered in to Open Office by insertText() method
     * @param evt
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String text = jTextArea1.getText();
            insertText(text);
            jTextArea1.setText("");
            charCount = 0;
            spaceCount = 0;
            preSpaceCount = 0;
            word = displayWord = "";
        } catch (Exception ex) {
            Logger.getLogger(TransliterationUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * When the cancel button is clicked the frame is disposed.
     * @param evt
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        this.dispose();
    }

    /**
     * This method is called when a key is typed. If the key is an alpha numeric
     * key a word is formed using the input character and the previous characters.
     * Alternation of the previously transliterated or entered text is detected
     * by use of Back space, Delete or arrow keys.
     * Variables spaceCount and preSpaceCount is used to determine the positions
     * of spaces in the text
     * @param evt
     */
    private void jTextArea1KeyTyped(java.awt.event.KeyEvent evt) {
        if (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE || evt.getKeyChar() == KeyEvent.VK_DELETE || evt.getKeyChar() == KeyEvent.VK_RIGHT || evt.getKeyChar() == KeyEvent.VK_LEFT) {
            if (jTextArea1.getText().length() >= preSpaceCount) {
                if (preKeyChar == KeyEvent.VK_SPACE) {
                    try {
                        charCount = jTextArea1.getText().length();
                        spaceCount = preSpaceCount;
                        int length = charCount - preSpaceCount;
                        displayWord = jTextArea1.getText(preSpaceCount, length);
                    } catch (BadLocationException ex) {
                        Logger.getLogger(TransliterationUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    try {
                        charCount = jTextArea1.getText().length();
                        word = jTextArea1.getText(spaceCount, charCount - spaceCount);
                    } catch (BadLocationException ex) {
                        Logger.getLogger(TransliterationUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                String text = jTextArea1.getText();
                reset();
                jTextArea1.setText(text);
            }
        } else {
            charCount++;
            word = word + evt.getKeyChar();
            preKeyChar = evt.getKeyChar();
        }
    }

    private javax.swing.JButton cancelButton;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JTextArea jTextArea1;

    private javax.swing.JButton keyMapButton;

    private javax.swing.JButton okButton;

    /**
     * This method inserts a text(String) to  an Open Office Document. It inserts
     * the text to the position where the cursor is.
     * @param text the text to be inserted
     * @throws com.sun.star.uno.Exception
     */
    protected void insertText(String text) throws com.sun.star.uno.Exception {
        xText = xViewCursor.getText();
        xTextCursor = xText.createTextCursorByRange(xViewCursor.getStart());
        xText.insertString(xTextCursor, text, true);
    }

    /**
     * This method initialize the components that are used to access the environment
     * of Open Office. They are used to insert text into the document
     */
    private void initializeComponents() {
        try {
            XMultiComponentFactory xmcf = m_xContext.getServiceManager();
            Object desktop = xmcf.createInstanceWithContext("com.sun.star." + "frame.Desktop", m_xContext);
            XDesktop xDesktop = (XDesktop) UnoRuntime.queryInterface(XDesktop.class, desktop);
            XComponent xCurrentComponent = xDesktop.getCurrentComponent();
            XModel xModel = (XModel) UnoRuntime.queryInterface(XModel.class, xCurrentComponent);
            XController xController = xModel.getCurrentController();
            XTextViewCursorSupplier xViewCursorSupplier = (XTextViewCursorSupplier) UnoRuntime.queryInterface(XTextViewCursorSupplier.class, xController);
            xViewCursor = xViewCursorSupplier.getViewCursor();
        } catch (Exception ex) {
            Logger.getLogger(TransliterationUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method set the location of the frame in the bottom of the
     * screen.
     */
    private void setBottomLocation() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int w = this.getSize().width;
        int h = this.getSize().height;
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;
        this.setLocation(x, dim.height - 5 * h / 4);
    }

    /**
     * @return the path
     */
    public String getPath() {
        return path;
    }

    /**
     * @param path the path to set
     */
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * This method reset the variables used in transliteration and display of the
     * frame.
     */
    private void reset() {
        word = "";
        displayWord = "";
        charCount = 0;
        spaceCount = 0;
        preSpaceCount = 0;
    }
}
