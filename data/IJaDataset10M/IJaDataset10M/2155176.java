package org.tolven.app;

import java.util.Map;
import javax.jms.JMSException;
import javax.xml.bind.JAXBException;
import org.tolven.app.entity.TrimHeader;
import org.tolven.trim.Trim;
import org.tolven.trim.ex.TrimEx;

/**
 * Provide parsing and loading services for trims and trimHeaders.
 * @author John Churin
 *
 */
public interface TrimRemote {

    /** CCHIT merge
	 * Create a TrimHeader.
	 * This new style of loading trims does not create MenuData, which will be done later.
	 * It makes no change if the XML has not changed (using a straight string compare).
	 * @param trimXML The XML representation of the trim as a string
	 * @param user
	 * @param comment A comment about his change (for history)
	 * @param autogenerated If true, indicates that this trim entry is uploaded from an automated source
	 * @return The internal name of the trim as extracted from the &lt;name&gt; element.
	 */
    public String createTrimHeader(String trimXML, String user, String comment, boolean autogenerated);

    /**
	 * Create a batch of trim headers (useful by remote clients)
	 * @param trimXMLs An array of Trims, as XML strings
	 * @param user
	 * @param comment A comment about his change (for history)
	 * @param autogenerated If true, indicates that this trim entry is uploaded from an automated source
	 */
    public void createTrimHeaders(String[] trimXMLs, String user, String comment, boolean autogenerated);

    /**
	 * Any new TrimHeaders (completely new or just a new version) are parsed and added to appropriate menus.
	 * @return true if there's more work to be done
	 */
    public boolean activateNewTrimHeaders();

    /** CCHIT merge
	 * Queue a process to activate new trim headers.
	 * @return true if there's more work to be done
	 */
    public void queueActivateNewTrimHeaders() throws JMSException;

    /**
	 * Find a trim regardless of the menu or account
	 * @throws JAXBException 
	 */
    public Trim findTrim(String name) throws JAXBException;

    /**
	 * Persist a new trim header and return its ID
	 * @param trimHeader
	 * @return
	 */
    public long persistTrimHeader(TrimHeader trimHeader);

    /**
	 * Create a menu-data item based on a trim header.
	 * @param msId
	 * @param trimHeaderId
	 * @param code
	 * @param description
	 */
    public void shortTrim(long msId, long trimHeaderId, String code, String description);

    public TrimHeader findTrimHeader(String name);

    /**
	 * Same a findTrimHeader but return null if the header is not found.
	 * @param name
	 * @return
	 */
    public TrimHeader findOptionalTrimHeader(String name);

    public java.util.List<String> findAllActiveTrimHeaderNames();

    public String findTrimXml(String name) throws JAXBException;

    public java.util.List<TrimHeader> findTrimHeaderVersions(String trimHeaderName);

    public String findTrimXml(TrimHeader trimheader);

    public void setComment(TrimHeader trimheader, String comment);

    public String findTrimXML(Long id) throws JAXBException;

    /**
	 * Given a TRIM XML string, evaluate embedded expression language against the supplied map of variables and then parse and return the
	 * Trim object structure.
	 * @param trimXML
	 * @param variables
	 * @return
	 * @throws JAXBException
	 */
    public TrimEx evaluateAndParseTrim(String trimName, Map<String, Object> variables) throws JAXBException;
}
