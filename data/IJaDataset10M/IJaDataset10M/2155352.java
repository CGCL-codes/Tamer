package net.sf.laja.example.computer.state;

import net.sf.laja.example.computer.behaviour.Processor;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sourceforge.net
 */
public class ComputerState implements ComputerSubstate {

    public String name;

    public Processor processor;

    public int releaseYear;

    public int memoryInKilobytes;

    public String owner;

    private boolean _encapsulated = false;

    ComputerState() {
    }

    public static class Certificate {

        public Certificate() {
        }
    }

    public static ComputerStateBuilder build() {
        return new ComputerStateBuilder();
    }

    public static ComputerStateBuilder build(ComputerSubstate state) {
        return new ComputerStateBuilder(state);
    }

    public boolean isValid() {
        if ((_encapsulated && name == null) || (_encapsulated && processor == null) || owner == null) {
            return false;
        }
        return true;
    }

    public String getName() {
        return name;
    }

    public Processor getProcessor() {
        return processor;
    }

    public int getReleaseYear() {
        return releaseYear;
    }

    public int getMemoryInKilobytes() {
        return memoryInKilobytes;
    }

    public String getOwner() {
        return owner;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setProcessor(Processor processor) {
        this.processor = processor;
    }

    public void setReleaseYear(int releaseYear) {
        this.releaseYear = releaseYear;
    }

    public void setMemoryInKilobytes(int memoryInKilobytes) {
        this.memoryInKilobytes = memoryInKilobytes;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    public void encapsulate() {
        throwExceptionIfInvalid();
        _encapsulated = true;
    }

    public boolean isEncapsulated() {
        return _encapsulated;
    }

    public void throwExceptionIfInvalid() {
        if (!isValid()) {
            throw new IllegalStateException("The computer state is invalid");
        }
    }

    public void throwExceptionIfEncapsulated() {
        if (isEncapsulated()) {
            throw new IllegalStateException("The state has been encapsulated and can only be changed from within a \"computer behaviour\" class");
        }
    }

    @Override
    public int hashCode() {
        int result = name != null ? name.hashCode() : 0;
        result = 31 * result + (processor != null ? processor.hashCode() : 0);
        result = 31 * result + releaseYear;
        result = 31 * result + memoryInKilobytes;
        result = 31 * result + (owner != null ? owner.hashCode() : 0);
        return result;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ComputerState state = (ComputerState) o;
        if (name != null ? !name.equals(state.name) : state.name != null) return false;
        if (processor != null ? !processor.equals(state.processor) : state.processor != null) return false;
        if (releaseYear != state.releaseYear) return false;
        if (memoryInKilobytes != state.memoryInKilobytes) return false;
        if (owner != null ? !owner.equals(state.owner) : state.owner != null) return false;
        return true;
    }

    @Override
    public String toString() {
        return "{name=" + (name == null ? null : '\'' + name + '\'') + ", processor=" + processor + ", releaseYear=" + releaseYear + ", memoryInKilobytes=" + memoryInKilobytes + ", owner='" + owner + '\'' + "}";
    }
}
