package avnmp.java.tutorial.SnmpConn;

import avnmp.java.lp.SnmpInterface;
import java.util.*;
import snmp.*;
import snmp.agent.*;

/**   
 * These are the packets generated by LoadGen.
 * @see avnmp.java.load.LoadGen
 *
 * This research is funded by DARPA/ITO Contract Number:    
 * F30602-98-C-0230 supported by the Air Force Research    
 * Laboratory/IF.   
 * 
 * @author Steve Bush    
 * @version $Revision: 1.1.1.1 $ $State: Exp $ 
 */
public class LoadPacket extends LoadBase implements SnmpInterface {

    /** 
 * The number of milliseconds this application has been running.
 */
    long uptime = 0;

    /**
 * The Snmp Agent Context
 */
    private transient AppCommunicator context;

    /**
 * @param ut The number of milliseconds LoadGen has been running.
 */
    public LoadPacket(long ut) {
        uptime = ut;
    }

    public synchronized void exec() {
        String NodeName = GetNodeName();
        context = new AppCommunicator();
        if (!NodeName.equals(Source_Address)) {
            setObject(loadAppUptime.toString(), uptime, "0");
        }
        incrObject(loadAppPackets.toString(), (long) 1, "0");
        if (NodeName.equals(Destination_Address)) {
            halt();
        }
    }

    private void updateObject(String oid, int value, String index) {
        try {
            context.updateSubAgent(oid, value, index);
        } catch (InvalidIdException iie) {
            System.err.println("UpdateSA: Object " + oid + " not found");
        }
    }

    private void updateObject(String oid, String value, String index) {
        try {
            context.updateSubAgent(oid, value, index);
        } catch (InvalidIdException iie) {
            System.err.println("UpdateSA: Object " + oid + " not found");
        }
    }

    private void updateObject(String oid, long value, String index) {
        try {
            context.updateSubAgent(oid, value, index);
        } catch (InvalidIdException iie) {
            System.err.println("UpdateSA: Object " + oid + " not found");
        }
    }

    private void addObject(String oid, int value) {
        try {
            context.addSubAgent(oid, value);
        } catch (DuplicateEntryException dee) {
            System.err.println("AddAgent: Object " + oid + " already exists");
        }
    }

    private void addObject(String oid, long value) {
        try {
            context.addSubAgent(oid, value);
        } catch (DuplicateEntryException dee) {
            System.err.println("AddAgent: Object " + oid + " already exists");
        }
    }

    private void addObject(String oid, String value) {
        try {
            context.addSubAgent(oid, value);
        } catch (DuplicateEntryException dee) {
            System.err.println("AddAgent: Object " + oid + " already exists");
        }
    }

    /**
 * Set an object Id value. Monitor internal to this method is required
 * to lock operations so that there is no intereference with the set 
 * operation.
 */
    private synchronized void setObject(String oid, long setVal, String idx) {
        context.startTrans();
        try {
            context.getLongSubAgent(oid + "." + idx);
        } catch (InvalidIdException iie) {
            try {
                context.addSubAgent(oid + "." + idx, setVal);
            } catch (DuplicateEntryException dee) {
                System.err.println("LoadPacket DuplicateEntryException: " + dee);
            }
        }
        try {
            context.updateSubAgent(oid, (long) setVal, idx);
        } catch (InvalidIdException iie) {
            System.err.println("LoadPacket InvalidIdException: " + iie);
        }
        context.commitTrans();
    }

    /** 
 * Increment an object Id value. Monitor internal to this method is required
 * to lock operations so that there is no intereference with the set 
 * operation.
 */
    private synchronized void incrObject(String oid, long addme, String idx) {
        long val;
        context.startTrans();
        try {
            val = context.getLongSubAgent(oid + "." + idx);
        } catch (InvalidIdException iie) {
            val = (long) 0;
            try {
                context.addSubAgent(oid + "." + idx, val);
            } catch (DuplicateEntryException dee) {
                System.err.println("LoadPacket DuplicateEntryException: " + dee);
            }
        }
        try {
            context.updateSubAgent(oid, (long) val + addme, idx);
        } catch (InvalidIdException iie) {
            System.err.println("LoadPacket InvalidIdException: " + iie);
        }
        context.commitTrans();
    }
}
