package preprocessing.methods.Import.databasedata.database;

import java.sql.DatabaseMetaData;
import java.sql.SQLException;
import java.util.SortedMap;

/**
 *Database interface.
 *
 * @author Jiri Petnik
 */
public interface DatabaseInterface {

    /**
     * Executes query and retrieves data from database.
     *
     * @param sql sql query
     * @param selfGenerated true when sql is generated by program; false otherwise
     * @return DatabaseResultSet with retrieved data
     * @throws SQLException thrown when problem with connection
     */
    public DatabaseResultSet executeQuery(String sql, boolean selfGenerated) throws SQLException;

    /**
     * Retrieves Table from database.
     *
     * @param tableName table name
     * @return Table object
     */
    public Table getTable(String tableName);

    /**
     * Inserts new table to the database.
     *
     * @param table new table to insert
     * @return Table when input table already exists in database; null otherwise
     */
    public Table putTable(Table table);

    /**
     * Retrieves all tables from database.
     *
     * @return all tables
     */
    public SortedMap<String, Table> getAllTables();

    /**
     * Clears whole database.
     */
    public void clear();

    /**
     * Closes connection to database.
     *
     * @throws SQLException thrown when problem with connection
     */
    public void close() throws SQLException;

    /**
     * Retrieves database schema.
     * 
     * @return database schema
     */
    public String getSchema();

    /**
     * Retrieves database catalog.
     *
     * @return database catalog
     */
    public String getCatalog();

    /**
     * Retrieves DatabaseMetaData object.
     *
     * @return DatabaseMetaData object
     */
    public DatabaseMetaData getMeta();

    /**
     * Retrieves database name.
     *
     * @return database name
     */
    public String getDatabaseName();

    /**
     * Retrieves database type.
     *
     * @return database type
     */
    public String getDatabaseType();

    /**
     * Retrieves table filter, what is an array of names which represent objects from database - tables, views...
     *
     * @return table filter
     */
    public String[] getTableFilterType();
}
