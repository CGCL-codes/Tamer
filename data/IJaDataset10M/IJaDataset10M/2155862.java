package de.psychomatic.mp3db.core.dblayer;

import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

/**
 * Coveritem
 *
 * This class was autogenerated by Torque on:
 *
 * [Sat Apr 07 21:19:13 CEST 2007]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Coveritem
 */
public abstract class BaseCoveritem extends BaseObject {

    /** Serial version */
    private static final long serialVersionUID = 1175973553529L;

    /** The Peer class */
    private static final CoveritemPeer peer = new CoveritemPeer();

    /** The value for the ciid field */
    private int ciid;

    /** The value for the albumid field */
    private int albumid;

    /** The value for the citype field */
    private String citype;

    /** The value for the cidata field */
    private byte[] cidata;

    /**
     * Get the Ciid
     *
     * @return int
     */
    public int getCiid() {
        return ciid;
    }

    /**
     * Set the value of Ciid
     *
     * @param v new value
     */
    public void setCiid(int v) {
        if (this.ciid != v) {
            this.ciid = v;
            setModified(true);
        }
    }

    /**
     * Get the Albumid
     *
     * @return int
     */
    public int getAlbumid() {
        return albumid;
    }

    /**
     * Set the value of Albumid
     *
     * @param v new value
     */
    public void setAlbumid(int v) throws TorqueException {
        if (this.albumid != v) {
            this.albumid = v;
            setModified(true);
        }
        if (aAlbum != null && !(aAlbum.getAid() == v)) {
            aAlbum = null;
        }
    }

    /**
     * Get the Citype
     *
     * @return String
     */
    public String getCitype() {
        return citype;
    }

    /**
     * Set the value of Citype
     *
     * @param v new value
     */
    public void setCitype(String v) {
        if (!ObjectUtils.equals(this.citype, v)) {
            this.citype = v;
            setModified(true);
        }
    }

    /**
     * Get the Cidata
     *
     * @return byte[]
     */
    public byte[] getCidata() {
        return cidata;
    }

    /**
     * Set the value of Cidata
     *
     * @param v new value
     */
    public void setCidata(byte[] v) {
        if (!ObjectUtils.equals(this.cidata, v)) {
            this.cidata = v;
            setModified(true);
        }
    }

    private Album aAlbum;

    /**
     * Declares an association between this object and a Album object
     *
     * @param v Album
     * @throws TorqueException
     */
    public void setAlbum(Album v) throws TorqueException {
        if (v == null) {
            setAlbumid(0);
        } else {
            setAlbumid(v.getAid());
        }
        aAlbum = v;
    }

    /**
     * Returns the associated Album object.
           * If it was not retrieved before, the object is retrieved from
     * the database
           *
     * @return the associated Album object
           * @throws TorqueException
           */
    public Album getAlbum() throws TorqueException {
        if (aAlbum == null && (this.albumid != 0)) {
            aAlbum = AlbumPeer.retrieveByPK(SimpleKey.keyFor(this.albumid));
        }
        return aAlbum;
    }

    /**
     * Return the associated Album object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Album object
     * @throws TorqueException
     */
    public Album getAlbum(Connection connection) throws TorqueException {
        if (aAlbum == null && (this.albumid != 0)) {
            aAlbum = AlbumPeer.retrieveByPK(SimpleKey.keyFor(this.albumid), connection);
        }
        return aAlbum;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setAlbumKey(ObjectKey key) throws TorqueException {
        setAlbumid(((NumberKey) key).intValue());
    }

    private static List<String> fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List<String> getFieldNames() {
        if (fieldNames == null) {
            fieldNames = new ArrayList<String>();
            fieldNames.add("Ciid");
            fieldNames.add("Albumid");
            fieldNames.add("Citype");
            fieldNames.add("Cidata");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name) {
        if (name.equals("Ciid")) {
            return new Integer(getCiid());
        }
        if (name.equals("Albumid")) {
            return new Integer(getAlbumid());
        }
        if (name.equals("Citype")) {
            return getCitype();
        }
        if (name.equals("Cidata")) {
            return getCidata();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByName(String name, Object value) throws TorqueException, IllegalArgumentException {
        if (name.equals("Ciid")) {
            if (value == null || !(Integer.class.isInstance(value))) {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setCiid(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Albumid")) {
            if (value == null || !(Integer.class.isInstance(value))) {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setAlbumid(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Citype")) {
            if (value != null && !String.class.isInstance(value)) {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCitype((String) value);
            return true;
        }
        if (name.equals("Cidata")) {
            if (value != null && !byte[].class.isInstance(value)) {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCidata((byte[]) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name) {
        if (name.equals(CoveritemPeer.CIID)) {
            return new Integer(getCiid());
        }
        if (name.equals(CoveritemPeer.ALBUMID)) {
            return new Integer(getAlbumid());
        }
        if (name.equals(CoveritemPeer.CITYPE)) {
            return getCitype();
        }
        if (name.equals(CoveritemPeer.CIDATA)) {
            return getCidata();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value) throws TorqueException, IllegalArgumentException {
        if (CoveritemPeer.CIID.equals(name)) {
            return setByName("Ciid", value);
        }
        if (CoveritemPeer.ALBUMID.equals(name)) {
            return setByName("Albumid", value);
        }
        if (CoveritemPeer.CITYPE.equals(name)) {
            return setByName("Citype", value);
        }
        if (CoveritemPeer.CIDATA.equals(name)) {
            return setByName("Cidata", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos) {
        if (pos == 0) {
            return new Integer(getCiid());
        }
        if (pos == 1) {
            return new Integer(getAlbumid());
        }
        if (pos == 2) {
            return getCitype();
        }
        if (pos == 3) {
            return getCidata();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value) throws TorqueException, IllegalArgumentException {
        if (position == 0) {
            return setByName("Ciid", value);
        }
        if (position == 1) {
            return setByName("Albumid", value);
        }
        if (position == 2) {
            return setByName("Citype", value);
        }
        if (position == 3) {
            return setByName("Cidata", value);
        }
        return false;
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception {
        save(CoveritemPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException {
        Connection con = null;
        try {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        } catch (TorqueException e) {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException {
        if (!alreadyInSave) {
            alreadyInSave = true;
            if (isModified()) {
                if (isNew()) {
                    CoveritemPeer.doInsert((Coveritem) this, con);
                    setNew(false);
                } else {
                    CoveritemPeer.doUpdate((Coveritem) this, con);
                }
            }
            alreadyInSave = false;
        }
    }

    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key ciid ObjectKey
     */
    public void setPrimaryKey(ObjectKey key) {
        setCiid(((NumberKey) key).intValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) {
        setCiid(Integer.parseInt(key));
    }

    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() {
        return SimpleKey.keyFor(getCiid());
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
    public Coveritem copy() throws TorqueException {
        return copy(true);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Coveritem copy(boolean deepcopy) throws TorqueException {
        return copyInto(new Coveritem(), deepcopy);
    }

    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     * @param copyObj the object to fill.
     */
    protected Coveritem copyInto(Coveritem copyObj) throws TorqueException {
        return copyInto(copyObj, true);
    }

    /**
     * Fills the copyObj with the contents of this object.
       * If deepcopy is true, The associated objects are also copied 
     * and treated as new objects.
       * @param copyObj the object to fill.
       * @param deepcopy whether the associated objects should be copied.
       */
    protected Coveritem copyInto(Coveritem copyObj, boolean deepcopy) throws TorqueException {
        copyObj.setCiid(ciid);
        copyObj.setAlbumid(albumid);
        copyObj.setCitype(citype);
        copyObj.setCidata(cidata);
        copyObj.setCiid(0);
        if (deepcopy) {
        }
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public CoveritemPeer getPeer() {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException {
        return CoveritemPeer.getTableMap();
    }

    public String toString() {
        StringBuffer str = new StringBuffer();
        str.append("Coveritem:\n");
        str.append("Ciid = ").append(getCiid()).append("\n");
        str.append("Albumid = ").append(getAlbumid()).append("\n");
        str.append("Citype = ").append(getCitype()).append("\n");
        str.append("Cidata = ").append("<binary>").append("\n");
        return (str.toString());
    }
}
