package musite.ui;

import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import musite.MusiteInit;
import musite.Protein;
import musite.Proteins;
import musite.ProteinsImpl;
import musite.PTM;
import musite.prediction.PredictionModel;
import musite.prediction.feature.disorder.DisorderInfoBatchReaderFromFasta;
import musite.prediction.feature.disorder.DisorderInfoBatchWriter;
import musite.prediction.feature.disorder.DisorderInfoBatchWriterFasta;
import musite.prediction.feature.disorder.DisorderPredictorVSL2;
import musite.prediction.feature.disorder.DisorderUtil;
import musite.io.Reader;
import musite.io.fasta.ModifiedProteinsFastaReaderBuilder;
import musite.io.xml.ProteinsXMLReader;
import musite.ui.task.DisorderPredictionTask;
import musite.ui.task.MusiteTrainTask;
import musite.ui.task.SerializeTask;
import musite.ui.task.ReadTask;
import musite.ui.task.TaskUtil;
import musite.ui.task.WriteTask;
import musite.ui.util.CheckComboBox;
import musite.util.AminoAcid;
import musite.util.CollectionUtil;
import musite.util.FileExtensionsFilter;
import musite.util.FilePathParser;

/**
 *
 * @author Jianjiong Gao
 */
public class MusiteTrainDialog extends javax.swing.JDialog {

    /** Creates new form MusiteTrainDialog */
    public MusiteTrainDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        fileTypeTabbedPane = new javax.swing.JTabbedPane();
        xmlPanel = new javax.swing.JPanel();
        javax.swing.JPanel xmlFilePanel = new javax.swing.JPanel();
        javax.swing.JPanel trainXmlFilePanel = new javax.swing.JPanel();
        trainXmlFileTextField = new javax.swing.JTextField();
        javax.swing.JButton trainXmlFileButton = new javax.swing.JButton();
        javax.swing.JScrollPane noteXMLScrollPane = new javax.swing.JScrollPane();
        javax.swing.JTextArea noteXMLTextArea = new javax.swing.JTextArea();
        fastaPanel = new javax.swing.JPanel();
        javax.swing.JPanel fastaFilePanel = new javax.swing.JPanel();
        javax.swing.JPanel trainFastaFilePanel = new javax.swing.JPanel();
        trainFastaFileTextField = new javax.swing.JTextField();
        javax.swing.JButton trainFastaFileButton = new javax.swing.JButton();
        disorderPanel = new javax.swing.JPanel();
        disorderFileCheckBox = new javax.swing.JCheckBox();
        disordeFileTextField = new javax.swing.JTextField();
        disorderFileButton = new javax.swing.JButton();
        saveDisorderFileCheckBox = new javax.swing.JCheckBox();
        saveDisordeFileTextField = new javax.swing.JTextField();
        saveDisorderFileButton = new javax.swing.JButton();
        javax.swing.JPanel modelPanel = new javax.swing.JPanel();
        javax.swing.JPanel modelFilePanel = new javax.swing.JPanel();
        modelFileTextField = new javax.swing.JTextField();
        javax.swing.JPanel ptmPanel = new javax.swing.JPanel();
        ptmComboBox = new javax.swing.JComboBox();
        javax.swing.JPanel aatypePanel = new javax.swing.JPanel();
        javax.swing.JPanel aatypeComboPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane noteTypeScrollPane = new javax.swing.JScrollPane();
        javax.swing.JTextArea noteTypeTextArea = new javax.swing.JTextArea();
        javax.swing.JPanel optionPanel = new javax.swing.JPanel();
        javax.swing.JButton optionBtn = new javax.swing.JButton();
        javax.swing.JPanel OKPanel = new javax.swing.JPanel();
        OKBtn = new javax.swing.JButton();
        javax.swing.JButton cancelBtn = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Prediction Model Training");
        getContentPane().setLayout(new java.awt.GridBagLayout());
        xmlPanel.setLayout(new java.awt.GridBagLayout());
        xmlFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Training file in XML format"));
        xmlFilePanel.setMinimumSize(new java.awt.Dimension(400, 63));
        xmlFilePanel.setPreferredSize(new java.awt.Dimension(500, 63));
        xmlFilePanel.setLayout(new java.awt.GridBagLayout());
        trainXmlFilePanel.setLayout(new java.awt.GridBagLayout());
        trainXmlFileTextField.setToolTipText("Please select a FASTA training file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        trainXmlFilePanel.add(trainXmlFileTextField, gridBagConstraints);
        trainXmlFileButton.setText("Open");
        trainXmlFileButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainXmlFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        trainXmlFilePanel.add(trainXmlFileButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        xmlFilePanel.add(trainXmlFilePanel, gridBagConstraints);
        noteXMLScrollPane.setBorder(null);
        noteXMLScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        noteXMLTextArea.setColumns(20);
        noteXMLTextArea.setEditable(false);
        noteXMLTextArea.setFont(noteXMLTextArea.getFont().deriveFont(noteXMLTextArea.getFont().getSize() - 2f));
        noteXMLTextArea.setLineWrap(true);
        noteXMLTextArea.setRows(5);
        noteXMLTextArea.setText("Note: if you use disorder features when training a model, the training XML file is required to contain disorder scores. Please go to menu Tools => Feature Extraction => Disorder Predition to predict the disorder scores for your files.");
        noteXMLTextArea.setWrapStyleWord(true);
        noteXMLTextArea.setOpaque(false);
        noteXMLScrollPane.setViewportView(noteXMLTextArea);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        xmlFilePanel.add(noteXMLScrollPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        xmlPanel.add(xmlFilePanel, gridBagConstraints);
        fileTypeTabbedPane.addTab("Musite XML", xmlPanel);
        fastaPanel.setLayout(new java.awt.GridBagLayout());
        fastaFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Training file in FASTA format"));
        fastaFilePanel.setMinimumSize(new java.awt.Dimension(400, 63));
        fastaFilePanel.setPreferredSize(new java.awt.Dimension(500, 63));
        fastaFilePanel.setLayout(new java.awt.GridBagLayout());
        trainFastaFilePanel.setLayout(new java.awt.GridBagLayout());
        trainFastaFileTextField.setToolTipText("Please select a FASTA training file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        trainFastaFilePanel.add(trainFastaFileTextField, gridBagConstraints);
        trainFastaFileButton.setText("Open");
        trainFastaFileButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainFastaFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        trainFastaFilePanel.add(trainFastaFileButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        fastaFilePanel.add(trainFastaFilePanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fastaPanel.add(fastaFilePanel, gridBagConstraints);
        disorderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("File containing predicted disorder scores [optional]"));
        disorderPanel.setLayout(new java.awt.GridBagLayout());
        disorderPanel.setVisible(MusiteInit.trainingProps.getProperty(MusiteInit.TRAINING_PROPS_USE_DISORDER_FEATURES).equalsIgnoreCase("true"));
        disorderFileCheckBox.setSelected(true);
        disorderFileCheckBox.setText("Disorder file:");
        disorderFileCheckBox.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disorderFileCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        disorderPanel.add(disorderFileCheckBox, gridBagConstraints);
        disordeFileTextField.setToolTipText("Please select file containing the disorder scores");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        disorderPanel.add(disordeFileTextField, gridBagConstraints);
        disorderFileButton.setText("Open");
        disorderFileButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disorderFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        disorderPanel.add(disorderFileButton, gridBagConstraints);
        saveDisorderFileCheckBox.setText("Save disorder result:");
        saveDisorderFileCheckBox.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        disorderPanel.add(saveDisorderFileCheckBox, gridBagConstraints);
        saveDisordeFileTextField.setToolTipText("Please select file to save the model");
        saveDisordeFileTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        disorderPanel.add(saveDisordeFileTextField, gridBagConstraints);
        saveDisorderFileButton.setText("Open");
        saveDisorderFileButton.setEnabled(false);
        saveDisorderFileButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDisorderFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        disorderPanel.add(saveDisorderFileButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fastaPanel.add(disorderPanel, gridBagConstraints);
        fileTypeTabbedPane.addTab("FASTA", fastaPanel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(fileTypeTabbedPane, gridBagConstraints);
        modelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output model name"));
        modelPanel.setLayout(new java.awt.GridBagLayout());
        modelFilePanel.setLayout(new java.awt.GridBagLayout());
        modelFileTextField.setToolTipText("Please specify the model name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        modelFilePanel.add(modelFileTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        modelPanel.add(modelFilePanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(modelPanel, gridBagConstraints);
        ptmPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("PTM type"));
        ptmPanel.setLayout(new java.awt.GridBagLayout());
        ptmComboBox.setModel(new javax.swing.DefaultComboBoxModel(PTM.values()));
        ptmComboBox.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ptmComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        ptmPanel.add(ptmComboBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(ptmPanel, gridBagConstraints);
        aatypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Residue types"));
        aatypePanel.setLayout(new java.awt.GridBagLayout());
        aatypeComboPanel.setLayout(new javax.swing.BoxLayout(aatypeComboPanel, javax.swing.BoxLayout.LINE_AXIS));
        typesCombo = new CheckComboBox(((PTM) ptmComboBox.getSelectedItem()).getAminoAcids());
        aatypeComboPanel.add(typesCombo);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        aatypePanel.add(aatypeComboPanel, gridBagConstraints);
        noteTypeScrollPane.setBorder(null);
        noteTypeScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        noteTypeTextArea.setColumns(20);
        noteTypeTextArea.setEditable(false);
        noteTypeTextArea.setFont(noteTypeTextArea.getFont().deriveFont(noteTypeTextArea.getFont().getSize() - 2f));
        noteTypeTextArea.setLineWrap(true);
        noteTypeTextArea.setRows(5);
        noteTypeTextArea.setText("Hint: selected amino acids will be trained together. For example, for phosphorylation, it is advisable to train serine and threonine together, but it may not be a good practice to train serine, threonine, and tyrosine together.");
        noteTypeTextArea.setWrapStyleWord(true);
        noteTypeTextArea.setOpaque(false);
        noteTypeScrollPane.setViewportView(noteTypeTextArea);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        aatypePanel.add(noteTypeScrollPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(aatypePanel, gridBagConstraints);
        optionBtn.setText("Advanced options");
        optionBtn.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionBtnActionPerformed(evt);
            }
        });
        optionPanel.add(optionBtn);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(optionPanel, gridBagConstraints);
        OKBtn.setText("   OK   ");
        OKBtn.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKBtnActionPerformed(evt);
            }
        });
        OKPanel.add(OKBtn);
        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        OKPanel.add(cancelBtn);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(OKPanel, gridBagConstraints);
        pack();
    }

    private void optionBtnActionPerformed(java.awt.event.ActionEvent evt) {
        TrainingOptionDialog srcConfDialog = new TrainingOptionDialog(this, true);
        srcConfDialog.setLocationRelativeTo(this);
        srcConfDialog.setVisible(true);
        if (!srcConfDialog.isCancelled()) {
            disorderPanel.setVisible(MusiteInit.trainingProps.getProperty(MusiteInit.TRAINING_PROPS_USE_DISORDER_FEATURES).equalsIgnoreCase("true"));
            this.pack();
        }
    }

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {
        setVisible(false);
        dispose();
    }

    private void OKBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (!verifyInput()) return;
        PTM ptm = (PTM) ptmComboBox.getSelectedItem();
        final int maxSize = 20000;
        final Proteins proteins = new ProteinsImpl();
        final List<String> accs = new ArrayList();
        final List<Boolean> removed = new ArrayList();
        Proteins.ProteinFilter proteinFilter = new Proteins.ProteinFilter() {

            public boolean filter(Protein protein) {
                if (protein == null) return false;
                int n = accs.size();
                accs.add(protein.getAccession());
                if (n < maxSize) {
                    removed.add(Boolean.FALSE);
                    return true;
                }
                if (Math.random() < 1.0 * maxSize / (n + 1)) {
                    int ixRmv = (int) (Math.random() * n);
                    while (removed.get(ixRmv)) {
                        ixRmv = (int) (Math.random() * n);
                    }
                    removed.set(ixRmv, true);
                    proteins.removeProtein(accs.get(ixRmv));
                    removed.add(Boolean.FALSE);
                    return true;
                } else {
                    removed.add(Boolean.TRUE);
                    return false;
                }
            }
        };
        ReadTask<Proteins> readTask;
        switch(fileTypeTabbedPane.getSelectedIndex()) {
            case 0:
                {
                    ProteinsXMLReader reader = DisorderUtil.getDisorderXMLReader(proteins);
                    reader.setProteinFilter(proteinFilter);
                    readTask = new ReadTask(reader, trainXmlFileTextField.getText());
                    break;
                }
            case 1:
                {
                    Reader<Proteins> reader = new ModifiedProteinsFastaReaderBuilder().ptm(ptm).filter(proteinFilter).proteins(proteins).build();
                    readTask = new ReadTask(reader, trainFastaFileTextField.getText());
                    break;
                }
            default:
                return;
        }
        TaskUtil.execute(readTask);
        if (!readTask.success()) {
            JOptionPane.showMessageDialog(this, "Failed to read the training file");
            return;
        }
        if (fileTypeTabbedPane.getSelectedIndex() == 1) {
            boolean useDisorder = MusiteInit.trainingProps.getProperty(MusiteInit.TRAINING_PROPS_USE_DISORDER_FEATURES).equalsIgnoreCase("true");
            if (useDisorder) {
                String dirDisorder = null;
                String dirDisSaveTo = null;
                if (useDisorder) {
                    boolean hasDisFile = disorderFileCheckBox.isSelected();
                    dirDisorder = hasDisFile ? disordeFileTextField.getText() : null;
                    boolean disSave = !hasDisFile & saveDisorderFileCheckBox.isSelected();
                    dirDisSaveTo = disSave ? saveDisordeFileTextField.getText() : null;
                }
                Map<String, List<Double>> mapDis = null;
                if (dirDisorder == null) {
                    String dirVSL2 = MusiteInit.globalProps.getProperty(MusiteInit.GLOBAL_PROP_VSL2_FILE);
                    DisorderPredictorVSL2 disorderPredictor = new DisorderPredictorVSL2(dirVSL2);
                    DisorderPredictionTask disTask = new DisorderPredictionTask(proteins, disorderPredictor);
                    TaskUtil.execute(disTask);
                    if (!disTask.success()) {
                        JOptionPane.showMessageDialog(this, "Failed to predict disorder");
                        return;
                    }
                    mapDis = disTask.getDisorder();
                    if (dirDisSaveTo != null && mapDis != null) {
                        DisorderInfoBatchWriter writer = new DisorderInfoBatchWriterFasta();
                        WriteTask writeTask = new WriteTask(mapDis, writer, dirDisSaveTo);
                        TaskUtil.execute(writeTask);
                        if (!writeTask.success()) {
                            JOptionPane.showMessageDialog(this, "Failed to save the disorder information");
                            return;
                        }
                    }
                } else {
                    DisorderInfoBatchReaderFromFasta reader = new DisorderInfoBatchReaderFromFasta();
                    reader.setAccessionFilter(proteins.getProteinsAccessions());
                    ReadTask<Map<String, List<Double>>> disReadTask = new ReadTask(reader, dirDisorder);
                    TaskUtil.execute(disReadTask);
                    if (!disReadTask.success()) {
                        JOptionPane.showMessageDialog(this, "Failed to read disorder");
                        return;
                    }
                    mapDis = disReadTask.getResultObject();
                }
                DisorderUtil.integrateDisorder(proteins, mapDis);
            }
        }
        Set<AminoAcid> types = getAminoAcidTypes();
        MusiteTrainTask trainTask = new MusiteTrainTask(proteins, ptm, types, MusiteInit.trainingProps);
        TaskUtil.execute(trainTask);
        if (!trainTask.success()) {
            JOptionPane.showMessageDialog(this, "Failed to train the model.");
            return;
        }
        PredictionModel model = trainTask.getModel();
        if (model == null) {
            JOptionPane.showMessageDialog(this, "Failed to train the model.");
            return;
        }
        String modelName = modelFileTextField.getText();
        if (!modelName.endsWith("." + MusiteInit.MODEL_APPEDIX)) modelName += "." + MusiteInit.MODEL_APPEDIX;
        model.setName(modelName.substring(0, modelName.length() - MusiteInit.MODEL_APPEDIX.length() - 1));
        String dirModel = MusiteInit.MODEL_DIR + File.separator + modelName;
        String format = "gz";
        SerializeTask serializeTask = new SerializeTask(CollectionUtil.getList(model), dirModel, format);
        TaskUtil.execute(serializeTask);
        if (!serializeTask.success()) {
            JOptionPane.showMessageDialog(this, "Failed to save the model.");
            return;
        }
        succ = true;
        musite.MusiteInit.initializeModels();
        this.setVisible(false);
        this.dispose();
        JOptionPane.showMessageDialog(this, "Model trained successfully.");
    }

    private void trainFastaFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser(MusiteInit.defaultPath);
        ArrayList<String> exts = new ArrayList<String>(1);
        String ext = "fasta";
        exts.add(ext);
        fc.setFileFilter(new FileExtensionsFilter(exts, "FASTA file (.fasta)"));
        fc.setDialogTitle("Select a Fasta file...");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            MusiteInit.defaultPath = file.getParent();
            String filePath = MusiteInit.defaultPath + File.separator + file.getName();
            trainFastaFileTextField.setText(filePath);
            String fileName = FilePathParser.getName(filePath);
            modelFileTextField.setText(fileName + ".model");
            saveDisordeFileTextField.setText(MusiteInit.defaultPath + File.separator + fileName + ".model");
        }
    }

    private void disorderFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser(MusiteInit.defaultPath);
        ArrayList<String> exts = new ArrayList<String>(1);
        String ext = "disorder";
        exts.add(ext);
        fc.setFileFilter(new FileExtensionsFilter(exts, "Disorder file (.disorder)"));
        fc.setDialogTitle("Select a disorder file...");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            MusiteInit.defaultPath = file.getParent();
            String filePath = MusiteInit.defaultPath + File.separator + file.getName();
            disordeFileTextField.setText(filePath);
        }
    }

    private void saveDisorderFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser(MusiteInit.defaultPath);
        ArrayList<String> exts = new ArrayList<String>(1);
        String ext = "disorder";
        exts.add(ext);
        fc.setFileFilter(new FileExtensionsFilter(exts, "Disorder file (.disorder)"));
        fc.setDialogTitle("Save the the disorder scores to...");
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            MusiteInit.defaultPath = file.getParent();
            String filePath = MusiteInit.defaultPath + File.separator + file.getName();
            saveDisordeFileTextField.setText(filePath);
        }
    }

    private void disorderFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        if (disorderFileCheckBox.isSelected()) {
            disordeFileTextField.setEnabled(true);
            disorderFileButton.setEnabled(true);
            saveDisordeFileTextField.setEnabled(false);
            saveDisorderFileButton.setEnabled(false);
            saveDisorderFileCheckBox.setEnabled(false);
            saveDisorderFileCheckBox.setSelected(false);
        } else {
            disordeFileTextField.setEnabled(false);
            disorderFileButton.setEnabled(false);
            saveDisordeFileTextField.setEnabled(true);
            saveDisorderFileButton.setEnabled(true);
            saveDisorderFileCheckBox.setEnabled(true);
            saveDisorderFileCheckBox.setSelected(true);
        }
    }

    private void trainXmlFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser(MusiteInit.defaultPath);
        ArrayList<String> exts = new ArrayList<String>(1);
        String ext = "xml";
        exts.add(ext);
        fc.setFileFilter(new FileExtensionsFilter(exts, "XML file (.xml)"));
        fc.setDialogTitle("Select a XML file...");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            MusiteInit.defaultPath = file.getParent();
            String filePath = MusiteInit.defaultPath + File.separator + file.getName();
            trainXmlFileTextField.setText(filePath);
            String fileName = FilePathParser.getName(filePath);
            modelFileTextField.setText(fileName + ".model");
        }
    }

    private void ptmComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
        typesCombo.setObjs(((PTM) ptmComboBox.getSelectedItem()).getAminoAcids(), false);
    }

    private Set<AminoAcid> getAminoAcidTypes() {
        return new HashSet(typesCombo.getSelectedItems());
    }

    private boolean verifyInput() {
        Set<AminoAcid> types = getAminoAcidTypes();
        if (types.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Error: select at least one type of amino acid.");
            return false;
        }
        switch(fileTypeTabbedPane.getSelectedIndex()) {
            case 0:
                if (trainXmlFileTextField.getText().length() == 0) {
                    JOptionPane.showMessageDialog(this, "Error: specify a XML file containing the protein sequences.");
                    return false;
                }
                break;
            case 1:
                String dirPhospho = trainFastaFileTextField.getText();
                if (dirPhospho.length() == 0) {
                    JOptionPane.showMessageDialog(this, "Error: specify a FASTA file containing the protein sequences.");
                    return false;
                }
                boolean useDisorder = MusiteInit.trainingProps.getProperty(MusiteInit.TRAINING_PROPS_USE_DISORDER_FEATURES).equalsIgnoreCase("true");
                String dirDisorder = null;
                String dirDisSaveTo = null;
                if (useDisorder) {
                    boolean hasDisFile = disorderFileCheckBox.isSelected();
                    dirDisorder = hasDisFile ? disordeFileTextField.getText() : null;
                    if (hasDisFile && (dirDisorder == null || dirDisorder.length() == 0)) {
                        JOptionPane.showMessageDialog(this, "Error: specify a file containing disorder scores if you selected to use one.");
                        return false;
                    }
                    boolean disSave = !hasDisFile & saveDisorderFileCheckBox.isSelected();
                    dirDisSaveTo = disSave ? saveDisordeFileTextField.getText() : null;
                    if (disSave) {
                        if (dirDisSaveTo == null || dirDisSaveTo.length() == 0) {
                            JOptionPane.showMessageDialog(this, "Error: specify a file to save the disorder result.");
                            return false;
                        } else if (musite.util.IOUtil.fileExist(dirDisSaveTo)) {
                            int ret = JOptionPane.showConfirmDialog(this, "Are you sure to replace the existing disorder file?", null, JOptionPane.YES_NO_OPTION);
                            if (ret == JOptionPane.NO_OPTION) {
                                return false;
                            }
                        }
                    }
                }
                break;
            default:
                return false;
        }
        String dirModel = MusiteInit.MODEL_DIR + File.separator + modelFileTextField.getText();
        if (dirModel.length() == 0) {
            JOptionPane.showMessageDialog(this, "Error: specify the model name.");
            return false;
        }
        if (!dirModel.endsWith("." + MusiteInit.MODEL_APPEDIX)) dirModel += "." + MusiteInit.MODEL_APPEDIX;
        if (musite.util.IOUtil.fileExist(dirModel)) {
            int ret = JOptionPane.showConfirmDialog(this, "Are you sure to replace the existing model?", null, JOptionPane.YES_NO_OPTION);
            if (ret == JOptionPane.NO_OPTION) {
                return false;
            }
        }
        return true;
    }

    public boolean success() {
        return succ;
    }

    private boolean succ = false;

    private CheckComboBox typesCombo;

    private javax.swing.JButton OKBtn;

    private javax.swing.JTextField disordeFileTextField;

    private javax.swing.JButton disorderFileButton;

    private javax.swing.JCheckBox disorderFileCheckBox;

    private javax.swing.JPanel disorderPanel;

    private javax.swing.JPanel fastaPanel;

    private javax.swing.JTabbedPane fileTypeTabbedPane;

    private javax.swing.JTextField modelFileTextField;

    private javax.swing.JComboBox ptmComboBox;

    private javax.swing.JTextField saveDisordeFileTextField;

    private javax.swing.JButton saveDisorderFileButton;

    private javax.swing.JCheckBox saveDisorderFileCheckBox;

    private javax.swing.JTextField trainFastaFileTextField;

    private javax.swing.JTextField trainXmlFileTextField;

    private javax.swing.JPanel xmlPanel;
}
