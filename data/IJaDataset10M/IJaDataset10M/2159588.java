package samples;

import mojasi.HashedByteWord;
import mojasi.Mojasi;
import mojasi.MojasiException;
import mojasi.MojasiFactory;
import mojasi.MojasiField;
import mojasi.MojasiName;
import mojasi.MojasiParser;
import mojasi.MojasiToken;
import mojasi.MojasiWriter;
import org.json.JSONException;
import org.json.JSONObject;
import org.junit.Assert;
import org.junit.Test;

/**
 * simple example - basic types Included classes
 * 
 * @author alanwootton
 * 
 */
@MojasiName(value = "Samp", fieldSize = 3)
public class Sample {

    private int myInt = 12345;

    protected String aString = "a String in here";

    long time = 88888;

    Sample1 s1 = new Sample1sub();

    @MojasiField(alias = "", mask = 1 + 2)
    Sample1sub s2 = new Sample1sub();

    public void setMyInt(int val) {
        myInt = val;
    }

    /**
     * This is the serialization interface for objects. I got sick of debugging the
     * reflection involved with other serialization methods, and they were slow.
     * </p>
     * It is generated by <code>GenerateMojasi</code> so don't bother editing it. <code>GenerateMojasi</code>
     * will generate code to support adding and deleting instance variables by keeping state in a m.json file of the
     * same name as the alias of this class.
     */
    public static class SampleMFactory extends MojasiFactory {

        private HashedByteWord myInt_moj = new HashedByteWord(",myI");

        private HashedByteWord aString_moj = new HashedByteWord(",aSt");

        private HashedByteWord time_moj = new HashedByteWord(",tim");

        private HashedByteWord s1_moj = new HashedByteWord(",s1");

        private HashedByteWord s2_moj = new HashedByteWord(",s2");

        @SuppressWarnings("unchecked")
        public SampleMFactory() {
            super(new MojasiToken("Samp"), Sample.class);
        }

        @SuppressWarnings("unchecked")
        public SampleMFactory(MojasiToken name, Class clazz) {
            super(name, clazz);
        }

        @Override
        public Object read(MojasiParser parser, MojasiToken token, Object obj) throws MojasiException {
            parser.loadDictionary(token);
            Sample me = (Sample) obj;
            MojasiToken kv;
            if ((kv = parser.find(myInt_moj)) != null) me.myInt = parser.parseInt(kv);
            if ((kv = parser.find(aString_moj)) != null) me.aString = parser.parseString(kv);
            if ((kv = parser.find(time_moj)) != null) me.time = parser.parseLong(kv);
            if ((kv = parser.find(s1_moj)) != null) me.s1 = (Sample1) parser.parseObject(kv);
            if ((kv = parser.find(s2_moj)) != null) me.s2 = (Sample1sub) parser.parseObject(kv);
            return obj;
        }

        ;

        @Override
        public void write(MojasiWriter w, Object obj1) throws MojasiException {
            Sample me = (Sample) obj1;
            if ((w.mask & 0xffff) != 0) w.writeInt(myInt_moj, me.myInt);
            if ((w.mask & 0xffff) != 0) w.writeString(aString_moj, me.aString);
            if ((w.mask & 0xffff) != 0) w.writeLong(time_moj, me.time);
            if ((w.mask & 0xffff) != 0) w.writeGenericObject(s1_moj, me.s1);
            if ((w.mask & 0x3) != 0) w.writeGenericObject(s2_moj, me.s2);
        }

        ;

        @Override
        public Object make(MojasiParser parser, MojasiToken token) {
            Object tmp = null;
            if (tmp == null) tmp = new Sample();
            return tmp;
        }

        ;

        @Override
        public void init() {
            super.init();
            addAlias("myI", "myInt");
            addAlias("aSt", "aString");
            addAlias("tim", "time");
            addAlias("s1", "s1");
            addAlias("s2", "s2");
        }

        ;
    }

    ;

    public void basic() throws MojasiException, JSONException {
        Sample test1 = new Sample();
        byte[] got1 = MojasiWriter.object2bytes(test1);
        @SuppressWarnings("unused") Sample test2 = (Sample) MojasiParser.bytes2Object(got1);
        System.out.println(new String(got1));
        String json = Mojasi.toJson(got1);
        System.out.println(json);
        System.out.println(new JSONObject(json).toString(4));
        System.out.println(Mojasi.toJsonLong(test2, 4));
    }

    @Test
    public void tryme() {
        for (int i = 1; i < 100; i++) {
            Sample test1 = new Sample();
            for (int j = 1; j < i; j++) test1.aString = "lslsllslsl" + test1.aString;
            byte[] got1 = MojasiWriter.object2bytes(test1);
            Sample test2 = (Sample) MojasiParser.bytes2Object(got1);
            byte[] got2 = MojasiWriter.object2bytes(test2);
            Assert.assertEquals(new String(got1), new String(got2));
        }
    }

    public static void main(String[] args) throws Exception {
        Sample test1 = new Sample();
        test1.basic();
        test1.tryme();
    }
}
