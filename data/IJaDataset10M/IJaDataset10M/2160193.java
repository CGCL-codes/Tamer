package net.sourceforge.ondex.server.plugins.transformer;

import net.sourceforge.ondex.ONDEXPluginArguments;
import net.sourceforge.ondex.core.ONDEXGraph;
import net.sourceforge.ondex.wsapi.exceptions.*;
import net.sourceforge.ondex.wsapi.plugins.ZipFormat;
import org.apache.log4j.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import java.io.File;
import java.io.StringWriter;
import net.sourceforge.ondex.server.plugins.Base;
import net.sourceforge.ondex.wsapi.exceptions.WebserviceException;

/**
* AutoGenerated
* @author Christian Brenninkmeijer
*/
public class TransformerAuto extends Base {

    private static final Logger logger = Logger.getLogger(TransformerAuto.class);

    public TransformerAuto() throws CaughtException {
        super();
    }

    /**
     * Method to run Transformer in coocurrence package.
     *
 	 *    Status: STABLE Transforms text mining results into a weighted co-occurrence network (Hassani-Pak et al, JIB 2010). Tested June 2011 (Keywan Hassani-Pak)
 	 *    Authors: Keywan Hassani-Pak, 
 	 *    Custodians: Keywan Hassani-Pak, 
     * @param TargetConceptClass
 	 *            (Optional. Defaults to :Publication) ConceptClass of target concept, e.g. Publication.
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the transformer
     * @throws WebserviceException
     */
    @WebResult(name = "info")
    @WebMethod(exclude = false)
    public String coocurrenceTransformer(@WebParam(name = "TargetConceptClass") java.lang.String TargetConceptClass, @WebParam(name = "graphId") Long graphId) throws WebserviceException {
        try {
            logger.info("transformer coocurrence called");
            net.sourceforge.ondex.transformer.coocurrence.Transformer transformer = new net.sourceforge.ondex.transformer.coocurrence.Transformer();
            logger.info(");Transformer created " + transformer);
            ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
            logger.info("found graph");
            ONDEXPluginArguments arguments = new ONDEXPluginArguments(transformer.getArgumentDefinitions());
            createArguement(transformer, arguments, "TargetConceptClass", TargetConceptClass);
            logger.info("created arguements");
            return runTransformer(graph, transformer, arguments);
        } catch (WebserviceException e) {
            throw e;
        } catch (Exception e) {
            throw new CaughtException(e, logger);
        }
    }

    /**
     * Method to run Transformer in relationcollapser package.
     *
 	 *    Status: STABLE Tested March 2010 (Artem Lysenko)
 	 *    Authors: Matthew Hindle, 
 	 *    Custodians: Jochen Weile, 
     * @param RelationType
 	 *            (REQUIRED! No Default!) [List]The relation type to collapse (!SPECIFING MORE THAN ONE RT IS NOT EQUIVILENT TO MULTIPLE COLLAPSES!! be careful specifying more than one relation type; concepts will be collapsed across RELATION TYPES and concept based restrictions will apply equaly to all)
     * @param ConceptClassRestriction
 	 *            (Optional. No Default.) [List]A Concept Class Restriction as an ordered pair representing from and to Concepts in an evaluated Relation (reverse compliment is included by default)
     * @param DataSourceRestriction
 	 *            (Optional. No Default.) [List]A DataSource Restriction as an ordered pair representing from and to Concepts in an evaluated Relation (reverse compliment is included by default)
     * @param CloneAttributes
 	 *            (Optional. Defaults to :true) Add inherited Attribute properties to the new collapsed concepts (set false to speed up significantly)
     * @param CopyTagReferences
 	 *            (Optional. Defaults to :false) Creates a tag list entry pointing the new concept on all concepts and relations which had any of the collapsed concepts in their tag list.
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the transformer
     * @throws WebserviceException
     */
    @WebResult(name = "info")
    @WebMethod(exclude = false)
    public String relationcollapserTransformer(@WebParam(name = "RelationType") java.lang.String[] RelationType, @WebParam(name = "ConceptClassRestriction") java.lang.String[] ConceptClassRestriction, @WebParam(name = "DataSourceRestriction") java.lang.String[] DataSourceRestriction, @WebParam(name = "CloneAttributes") java.lang.Boolean CloneAttributes, @WebParam(name = "CopyTagReferences") java.lang.Boolean CopyTagReferences, @WebParam(name = "graphId") Long graphId) throws WebserviceException {
        try {
            logger.info("transformer relationcollapser called");
            net.sourceforge.ondex.transformer.relationcollapser.Transformer transformer = new net.sourceforge.ondex.transformer.relationcollapser.Transformer();
            logger.info(");Transformer created " + transformer);
            ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
            logger.info("found graph");
            ONDEXPluginArguments arguments = new ONDEXPluginArguments(transformer.getArgumentDefinitions());
            createArguement(transformer, arguments, "RelationType", RelationType);
            createArguement(transformer, arguments, "ConceptClassRestriction", ConceptClassRestriction);
            createArguement(transformer, arguments, "DataSourceRestriction", DataSourceRestriction);
            createArguement(transformer, arguments, "CloneAttributes", CloneAttributes);
            createArguement(transformer, arguments, "CopyTagReferences", CopyTagReferences);
            logger.info("created arguements");
            return runTransformer(graph, transformer, arguments);
        } catch (WebserviceException e) {
            throw e;
        } catch (Exception e) {
            throw new CaughtException(e, logger);
        }
    }
}
