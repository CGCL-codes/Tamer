package br.ufal.ic.forbile.infra.emathema.ontology.impl;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.*;
import edu.stanford.smi.protegex.owl.model.impl.*;
import java.util.*;
import br.ufal.ic.forbile.infra.emathema.ontology.*;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.owl-ontologies.com/emathema.owl#MotivationalInformation
 *
 * @version generated on Wed Sep 27 02:26:46 GMT-03:00 2006
 */
public class DefaultMotivationalInformation extends DefaultDymamicInformation implements MotivationalInformation {

    public DefaultMotivationalInformation(OWLModel owlModel, FrameID id) {
        super(owlModel, id);
    }

    public DefaultMotivationalInformation() {
    }

    public Collection getIsComposedBy_Characteristics() {
        return getPropertyValuesAs(getIsComposedBy_CharacteristicsProperty(), Characteristics.class);
    }

    public RDFProperty getIsComposedBy_CharacteristicsProperty() {
        final String uri = "http://www.owl-ontologies.com/emathema.owl#isComposedBy_Characteristics";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }

    public boolean hasIsComposedBy_Characteristics() {
        return getPropertyValueCount(getIsComposedBy_CharacteristicsProperty()) > 0;
    }

    public Iterator listIsComposedBy_Characteristics() {
        return listPropertyValuesAs(getIsComposedBy_CharacteristicsProperty(), Characteristics.class);
    }

    public void addIsComposedBy_Characteristics(Characteristics newIsComposedBy_Characteristics) {
        addPropertyValue(getIsComposedBy_CharacteristicsProperty(), newIsComposedBy_Characteristics);
    }

    public void removeIsComposedBy_Characteristics(Characteristics oldIsComposedBy_Characteristics) {
        removePropertyValue(getIsComposedBy_CharacteristicsProperty(), oldIsComposedBy_Characteristics);
    }

    public void setIsComposedBy_Characteristics(Collection newIsComposedBy_Characteristics) {
        setPropertyValues(getIsComposedBy_CharacteristicsProperty(), newIsComposedBy_Characteristics);
    }

    public Collection getIsComposedBy_MentalState() {
        return getPropertyValuesAs(getIsComposedBy_MentalStateProperty(), MentalState.class);
    }

    public RDFProperty getIsComposedBy_MentalStateProperty() {
        final String uri = "http://www.owl-ontologies.com/emathema.owl#isComposedBy_MentalState";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }

    public boolean hasIsComposedBy_MentalState() {
        return getPropertyValueCount(getIsComposedBy_MentalStateProperty()) > 0;
    }

    public Iterator listIsComposedBy_MentalState() {
        return listPropertyValuesAs(getIsComposedBy_MentalStateProperty(), MentalState.class);
    }

    public void addIsComposedBy_MentalState(MentalState newIsComposedBy_MentalState) {
        addPropertyValue(getIsComposedBy_MentalStateProperty(), newIsComposedBy_MentalState);
    }

    public void removeIsComposedBy_MentalState(MentalState oldIsComposedBy_MentalState) {
        removePropertyValue(getIsComposedBy_MentalStateProperty(), oldIsComposedBy_MentalState);
    }

    public void setIsComposedBy_MentalState(Collection newIsComposedBy_MentalState) {
        setPropertyValues(getIsComposedBy_MentalStateProperty(), newIsComposedBy_MentalState);
    }

    public Collection getIsComposedBy_Personality() {
        return getPropertyValuesAs(getIsComposedBy_PersonalityProperty(), Personality.class);
    }

    public RDFProperty getIsComposedBy_PersonalityProperty() {
        final String uri = "http://www.owl-ontologies.com/emathema.owl#isComposedBy_Personality";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }

    public boolean hasIsComposedBy_Personality() {
        return getPropertyValueCount(getIsComposedBy_PersonalityProperty()) > 0;
    }

    public Iterator listIsComposedBy_Personality() {
        return listPropertyValuesAs(getIsComposedBy_PersonalityProperty(), Personality.class);
    }

    public void addIsComposedBy_Personality(Personality newIsComposedBy_Personality) {
        addPropertyValue(getIsComposedBy_PersonalityProperty(), newIsComposedBy_Personality);
    }

    public void removeIsComposedBy_Personality(Personality oldIsComposedBy_Personality) {
        removePropertyValue(getIsComposedBy_PersonalityProperty(), oldIsComposedBy_Personality);
    }

    public void setIsComposedBy_Personality(Collection newIsComposedBy_Personality) {
        setPropertyValues(getIsComposedBy_PersonalityProperty(), newIsComposedBy_Personality);
    }
}
