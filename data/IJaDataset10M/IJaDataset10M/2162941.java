package it.bfp.sark.sql.input.msaccess;

import it.bfp.sark.common.NameFormatter;
import it.bfp.sark.sql.input.SqlInput;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * 
 * @author BFP
 */
public class MsAccessSqlInput extends SqlInput {

    @Override
    protected String getTableName(String tableOwner, String tableName) {
        return NameFormatter.toClassName(tableName);
    }

    @Override
    protected boolean isValidTable(String tableOwner) throws SQLException {
        return true;
    }

    @Override
    protected boolean isAutoGenerated(ResultSet rsColumns, String tableName, String columnName) throws SQLException {
        boolean isAutoGen = false;
        Statement statement = jdbcConnect.getConnection().createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT " + columnName + " FROM " + tableName);
        ResultSetMetaData metadata = resultSet.getMetaData();
        if (metadata.isAutoIncrement(1)) {
            isAutoGen = true;
        }
        resultSet.close();
        statement.close();
        return isAutoGen;
    }

    @Override
    protected Set<String> getPrimaryKeys(String tableName) throws SQLException {
        ResultSet rsPrimaryKeys = null;
        String databaseColumnName = null;
        Set<String> primaryKeys = new HashSet<String>();
        DatabaseMetaData dm = jdbcConnect.getConnection().getMetaData();
        rsPrimaryKeys = dm.getIndexInfo(null, null, tableName, true, true);
        while (rsPrimaryKeys.next()) {
            String tmp = rsPrimaryKeys.getString(9);
            databaseColumnName = rsPrimaryKeys.getString(6);
            if (tmp != null && databaseColumnName.equals("PrimaryKey")) {
                primaryKeys.add(tmp);
            }
        }
        rsPrimaryKeys.close();
        return primaryKeys;
    }

    @Override
    protected Set<String> getUniqueKeys(String tableName, String tableType) throws SQLException {
        String columnName = null;
        Set<String> uniqueKeys = new HashSet<String>();
        DatabaseMetaData dm = jdbcConnect.getConnection().getMetaData();
        ResultSet rsUniqueKeys = dm.getIndexInfo(null, null, tableName, true, true);
        while (rsUniqueKeys.next()) {
            columnName = rsUniqueKeys.getString("COLUMN_NAME");
            if (columnName != null) {
                uniqueKeys.add(columnName);
            }
        }
        rsUniqueKeys.close();
        return uniqueKeys;
    }

    @Override
    protected ResultSet getImportedKeys(DatabaseMetaData dm, String tableName) throws SQLException {
        Statement stmt = dm.getConnection().createStatement();
        ResultSet rs = stmt.executeQuery("SELECT  szRelationship, szReferencedObject, szColumn, szReferencedColumn, szObject, " + "ccolumn, grbit, icolumn  FROM MSysRelationships WHERE szObject like '" + tableName + "'");
        stmt.close();
        return rs;
    }

    @Override
    protected Map<String, String> getValuesForImportedKeys(ResultSet rsImportedKeys) throws SQLException {
        Map<String, String> values = new HashMap<String, String>();
        values.put("FK_NAME", rsImportedKeys.getString(1));
        values.put("PKTABLE_NAME", rsImportedKeys.getString(2));
        values.put("PKCOLUMN_NAME", rsImportedKeys.getString(4));
        values.put("FKCOLUMN_NAME", rsImportedKeys.getString(3));
        values.put("KEY_SEQ", Integer.toString(rsImportedKeys.getInt(8) + 1));
        return values;
    }
}
