package com.dna.motion.entities;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import org.hibernate.annotations.GenericGenerator;

/**
 * TypeMedia generated by hbm2java
 */
@Entity
@NamedQueries({ @NamedQuery(name = "selectTypeContentById", query = "select TypeContent from TypeContent typeContent where typeContent.idTypeContent = :idTypeContent"), @NamedQuery(name = "selectTypeContentByName", query = "select TypeContent from TypeContent typeContent where typeContent.name = :name"), @NamedQuery(name = "selectAllTypeContents", query = "select TypeContent from TypeContent typeContent") })
@Table(name = "dnam_type_content")
public class TypeContent implements java.io.Serializable, Cloneable {

    @Id
    @Column(nullable = false, columnDefinition = "INTEGER", length = 9)
    @GeneratedValue(generator = "inc-gen")
    @GenericGenerator(name = "inc-gen", strategy = "increment")
    private Integer idTypeContent;

    @Column(name = "name")
    private String name;

    @Column(name = "typeMIME")
    private String typeMIME;

    @Column(name = "description", columnDefinition = "TEXT")
    private String description;

    public TypeContent() {
    }

    public Integer getIdTypeContent() {
        return idTypeContent;
    }

    public void setIdTypeContent(Integer idTypeContent) {
        this.idTypeContent = idTypeContent;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getTypeMIME() {
        return typeMIME;
    }

    public void setTypeMIME(String typeMIME) {
        this.typeMIME = typeMIME;
    }

    @Override
    public TypeContent clone() {
        try {
            return (TypeContent) super.clone();
        } catch (CloneNotSupportedException e) {
            return null;
        }
    }
}
