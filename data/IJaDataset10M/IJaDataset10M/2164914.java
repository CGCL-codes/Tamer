package org.gomba;

import java.util.Map;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;

/**
 * Base class for servlets that support RESTful transactions.
 * 
 * <p>
 * Context params:
 * </p>
 * <dl>
 * <dt>org.gomba.transactionURI</dt>
 * <dd>Expression that evaluates to a transaction identifier or to
 * <code>null</code> if the current request is not bound to a transaction.
 * This context-param is a shortcut to globally configure all
 * <code>TransactorAbstractServlet</code>.
 * </dd>
 * </dl>
 * 
 * <p>
 * Init params:
 * </p>
 * <dl>
 * <dt>transaction-uri</dt>
 * <dd>Expression that evaluates to a transaction identifier or to
 * <code>null</code> if the current request is not bound to a transaction.
 * </dd>
 * </dl>
 * 
 * @author Flavio Tordini
 * @version $Id: TransactorAbstractServlet.java,v 1.1 2004/11/26 17:52:58
 *                flaviotordini Exp $
 */
public abstract class TransactorAbstractServlet extends HttpServlet {

    /**
     * Name of the request attribute that holds a transaction generated by a
     * servlet (i.e. MultiServlet).
     */
    protected static final String REQUEST_ATTRIBUTE_NAME_TRANSACTION = "org_gomba_transaction";

    protected static final String CONTEXT_PARAM_TRANSACTION_URI = "org.gomba.transactionURI";

    private static final String INIT_PARAM_TRANSACTION_URI = "transaction-uri";

    private Expression transactionUriExpression;

    /**
     * @see javax.servlet.Servlet#init(javax.servlet.ServletConfig)
     */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
        this.transactionUriExpression = getTransactionURIExpression(config);
    }

    /**
     * Get the configured expression for the transaction URI.
     */
    private static final Expression getTransactionURIExpression(ServletConfig config) throws ServletException {
        final Expression transactionUriExpression;
        String uriExpressionStr = config.getInitParameter(INIT_PARAM_TRANSACTION_URI);
        if (uriExpressionStr == null) {
            uriExpressionStr = config.getServletContext().getInitParameter(CONTEXT_PARAM_TRANSACTION_URI);
        }
        if (uriExpressionStr == null) {
            return null;
        }
        try {
            transactionUriExpression = new Expression(uriExpressionStr);
        } catch (Exception e) {
            throw new ServletException("Error parsing " + INIT_PARAM_TRANSACTION_URI, e);
        }
        return transactionUriExpression;
    }

    /**
     * Get the transaction URI for the current request, if any.
     * 
     * @return A String representing the transaction URI or null, if none is
     *               available.
     */
    private final String getTransactionURI(ParameterResolver parameterResolver) throws ServletException {
        Object obj;
        try {
            obj = this.transactionUriExpression.replaceParameters(parameterResolver);
        } catch (MissingParameterException e) {
            return null;
        } catch (Exception e) {
            throw new ServletException("Error evaluating transaction URI expression.", e);
        }
        return obj.toString();
    }

    /**
     * Subclasses may call this method to retrieve the current Transaction.
     * 
     * @param parameterResolver
     *                   A ParameterResolver resolver instance.
     * @return A Transaction instance or null, if the current request is not
     *               part of a transaction.
     */
    protected final Transaction getTransaction(ParameterResolver parameterResolver) throws ServletException {
        Transaction transaction = (Transaction) parameterResolver.getRequest().getAttribute(REQUEST_ATTRIBUTE_NAME_TRANSACTION);
        if (transaction != null) {
            return transaction;
        }
        if (this.transactionUriExpression == null) {
            return null;
        }
        String transactionURI = getTransactionURI(parameterResolver);
        if (transactionURI == null) {
            return null;
        }
        Map transactions = (Map) getServletContext().getAttribute(TransactionServlet.CONTEXT_ATTRIBUTE_NAME_TRANSACTIONS);
        if (transactions == null) {
            return null;
        }
        transaction = (Transaction) transactions.get(transactionURI);
        if (transaction == null) {
            throw new ServletException("Invalid transaction: " + transactionURI);
        }
        return transaction;
    }
}
