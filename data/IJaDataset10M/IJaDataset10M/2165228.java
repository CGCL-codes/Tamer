package rpr2_d18.fixedRecordRepresentations;

import java.util.Iterator;
import java.util.ArrayList;
import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.ByteWrapper;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.encoding.HLAfixedRecord;
import rpr2_d18.simpleDataRepresentations.unsignedInt32;
import rpr2_d18.fixedRecordRepresentations.EntityTypeStruct;
import rpr2_d18.simpleDataRepresentations.int32;
import rpr2_d18.simpleDataRepresentations.unsignedInt16;
import rpr2_d18.arrayDataRepresentations.PaddingArrayLen2;

/**
 * JAVADOC_COMMENTS
 * semantics : -NULL-
 *
 * @author : auto generated by DRDC FOM Generator
 */
public class FlareStateRecStruct implements HLAfixedRecord {

    private unsignedInt32 TimeSinceCreation;

    private EntityTypeStruct Source;

    private int32 NumberIntensity;

    private int32 NumberOfSources;

    private unsignedInt16 GeometryIndex;

    private PaddingArrayLen2 Padding;

    /**
   * Constructor
   */
    public FlareStateRecStruct() throws RTIinternalError {
        TimeSinceCreation = new unsignedInt32();
        Source = new EntityTypeStruct();
        NumberIntensity = new int32();
        NumberOfSources = new int32();
        GeometryIndex = new unsignedInt16();
        Padding = new PaddingArrayLen2();
    }

    /**
   * Encodes this element into the specified ByteWrapper.
   * 
   * @param byteWrapper
   */
    public void encode(ByteWrapper byteWrapper) {
        TimeSinceCreation.encode(byteWrapper);
        Source.encode(byteWrapper);
        NumberIntensity.encode(byteWrapper);
        NumberOfSources.encode(byteWrapper);
        GeometryIndex.encode(byteWrapper);
        Padding.encode(byteWrapper);
    }

    /**
   * Decodes this element from the ByteWrapper
   * 
   * @param byteWrapper
   */
    public void decode(ByteWrapper byteWrapper) throws DecoderException {
        TimeSinceCreation.decode(byteWrapper);
        Source.decode(byteWrapper);
        NumberIntensity.decode(byteWrapper);
        NumberOfSources.decode(byteWrapper);
        GeometryIndex.decode(byteWrapper);
        Padding.decode(byteWrapper);
    }

    /**
   * Decodes this element from the byte array
   * 
   * @param byte array
   */
    public void decode(byte[] bytes) throws DecoderException {
        TimeSinceCreation.decode(bytes);
        Source.decode(bytes);
        NumberIntensity.decode(bytes);
        NumberOfSources.decode(bytes);
        GeometryIndex.decode(bytes);
        Padding.decode(bytes);
    }

    /**
   * Returns the octet boundary of this element.
   * - not really relavent for data structures
   * - return the boundary of the first field
   * 
   * @return
   */
    public int getOctetBoundary() {
        return getEncodedLength() % 4;
    }

    /**
   * convert this data structure into a byte array
   * 
   */
    public byte[] toByteArray() {
        int size = getEncodedLength();
        byte[] result = new byte[size];
        byte[] temp;
        int pos = 0;
        temp = TimeSinceCreation.toByteArray();
        System.arraycopy(temp, 0, result, pos, TimeSinceCreation.getEncodedLength());
        temp = Source.toByteArray();
        System.arraycopy(temp, 0, result, pos, Source.getEncodedLength());
        temp = NumberIntensity.toByteArray();
        System.arraycopy(temp, 0, result, pos, NumberIntensity.getEncodedLength());
        temp = NumberOfSources.toByteArray();
        System.arraycopy(temp, 0, result, pos, NumberOfSources.getEncodedLength());
        temp = GeometryIndex.toByteArray();
        System.arraycopy(temp, 0, result, pos, GeometryIndex.getEncodedLength());
        temp = Padding.toByteArray();
        System.arraycopy(temp, 0, result, pos, Padding.getEncodedLength());
        return result;
    }

    /**
   * add an element to this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param DataElement dataElement
   */
    public void add(DataElement dataElement) {
    }

    /**
   * get the full size of this data structure
   * - add up the size of each member field
   * 
   */
    public int size() {
        return getEncodedLength();
    }

    /**
   * get an element from this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param int index
   */
    public DataElement get(int index) {
        return null;
    }

    /**
   * get an iterator for this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param int index
   */
    public Iterator<DataElement> iterator() {
        return null;
    }

    /**
   * Returns the size in bytes of this element's encoding.
   * 
   * @return size
   */
    public int getEncodedLength() {
        int size = 0;
        size += TimeSinceCreation.getEncodedLength();
        size += Source.getEncodedLength();
        size += NumberIntensity.getEncodedLength();
        size += NumberOfSources.getEncodedLength();
        size += GeometryIndex.getEncodedLength();
        size += Padding.getEncodedLength();
        return size;
    }

    public unsignedInt32 getTimeSinceCreation() {
        return this.TimeSinceCreation;
    }

    public EntityTypeStruct getSource() {
        return this.Source;
    }

    public int32 getNumberIntensity() {
        return this.NumberIntensity;
    }

    public int32 getNumberOfSources() {
        return this.NumberOfSources;
    }

    public unsignedInt16 getGeometryIndex() {
        return this.GeometryIndex;
    }

    public PaddingArrayLen2 getPadding() {
        return this.Padding;
    }

    public void setTimeSinceCreation(unsignedInt32 TimeSinceCreation) {
        this.TimeSinceCreation = TimeSinceCreation;
    }

    public void setSource(EntityTypeStruct Source) {
        this.Source = Source;
    }

    public void setNumberIntensity(int32 NumberIntensity) {
        this.NumberIntensity = NumberIntensity;
    }

    public void setNumberOfSources(int32 NumberOfSources) {
        this.NumberOfSources = NumberOfSources;
    }

    public void setGeometryIndex(unsignedInt16 GeometryIndex) {
        this.GeometryIndex = GeometryIndex;
    }

    public void setPadding(PaddingArrayLen2 Padding) {
        this.Padding = Padding;
    }
}
