package rpr2_d18.objectClassRepresentations;

import java.util.HashMap;
import hla.rti1516e.AttributeHandleValueMap;
import hla.rti1516e.AttributeHandleValueMapFactory;
import hla.rti1516e.RTIambassador;
import hla.rti1516e.ObjectInstanceHandle;
import hla.rti1516e.ObjectClassHandle;
import hla.rti1516e.AttributeHandle;
import hla.rti1516e.AttributeHandleSet;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.exceptions.AttributeNotDefined;
import hla.rti1516e.exceptions.FederateNotExecutionMember;
import hla.rti1516e.exceptions.InvalidAttributeHandle;
import hla.rti1516e.exceptions.InvalidInteractionClassHandle;
import hla.rti1516e.exceptions.InvalidObjectClassHandle;
import hla.rti1516e.exceptions.NameNotFound;
import hla.rti1516e.exceptions.NotConnected;
import hla.rti1516e.exceptions.ObjectClassNotDefined;
import hla.rti1516e.exceptions.ObjectClassNotPublished;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.exceptions.RestoreInProgress;
import hla.rti1516e.exceptions.SaveInProgress;
import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.ByteWrapper;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.encoding.DecoderException;
import rpr2_d18.enumeratedDataRepresentations.IffAlternateMode4Enum8;
import rpr2_d18.enumeratedDataRepresentations.OMT13boolean;
import rpr2_d18.simpleDataRepresentations.unsignedInt16;

/**
 * JAVADOC_COMMENTS
 * name : NatoIFF
 * sharing : Neither
 * semantics : NATO Identification Friend or Foe (IFF) system that uses electromagnetic transmissions to which friendly forces' equipment automatically responds.
 *
 * @author : auto generated by DRDC FOM Generator
 */
public class NatoIFF extends IFF {

    private IffAlternateMode4Enum8 AlternateMode4;

    private OMT13boolean Mode1Enabled;

    private OMT13boolean Mode1IsDamaged;

    private OMT13boolean Mode1IsMalfunctioning;

    private OMT13boolean Mode1IsOn;

    private OMT13boolean Mode2Enabled;

    private OMT13boolean Mode2IsDamaged;

    private OMT13boolean Mode2IsMalfunctioning;

    private OMT13boolean Mode2IsOn;

    private OMT13boolean Mode3AEnabled;

    private OMT13boolean Mode3AIsDamaged;

    private OMT13boolean Mode3AIsMalfunctioning;

    private OMT13boolean Mode3AIsOn;

    private OMT13boolean Mode4Enabled;

    private OMT13boolean Mode4IsDamaged;

    private OMT13boolean Mode4IsMalfunctioning;

    private OMT13boolean Mode4IsOn;

    private unsignedInt16 Mode4PseudoCrypto;

    private OMT13boolean Mode4PseudoCryptoAvailable;

    private OMT13boolean Mode5CEnabled;

    private OMT13boolean Mode5CIsDamaged;

    private OMT13boolean Mode5CIsMalfunctioning;

    private OMT13boolean Mode5CIsOn;

    private OMT13boolean ModeSEnabled;

    private OMT13boolean ModeSIsDamaged;

    private OMT13boolean ModeSIsMalfunctioning;

    private OMT13boolean ModeSIsOn;

    private OMT13boolean ModeSIsTcasI;

    /**
   * Constructor
   */
    public NatoIFF(RTIambassador rtiAmb) throws FederateNotExecutionMember, NotConnected {
        super(rtiAmb);
    }

    /**
   * Constructor
   */
    public NatoIFF(RTIambassador rtiAmb, String className) throws NameNotFound, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, className);
    }

    /**
   * Constructor
   */
    public NatoIFF(RTIambassador rtiAmb, ObjectClassHandle classHandle) throws NameNotFound, InvalidObjectClassHandle, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, classHandle);
    }

    /**
   * Constructor
   */
    public NatoIFF(RTIambassador rtiAmb, ObjectClassHandle classHandle, String instanceName) throws NameNotFound, InvalidObjectClassHandle, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, classHandle, instanceName);
    }

    /**
   * Constructor
   */
    public NatoIFF(RTIambassador rtiAmb, String className, String instanceName) throws NameNotFound, InvalidObjectClassHandle, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, className, instanceName);
    }

    /**
   * Constructor
   */
    public NatoIFF(RTIambassador rtiAmb, String className, ObjectInstanceHandle instanceHandle, String instanceName) throws NameNotFound, InvalidObjectClassHandle, FederateNotExecutionMember, NotConnected, RTIinternalError {
        super(rtiAmb, className, instanceHandle, instanceName);
    }

    /**
   * Decode Attributes
   * Calls the decoder for each possible attribute
   * NOTE: since attributes are now in a map, order within the byte stream is not improtant
   */
    public void decodeAttributes(AttributeHandleValueMap attributes) throws NameNotFound, FederateNotExecutionMember, NotConnected, RTIinternalError, InvalidObjectClassHandle, DecoderException {
        super.decodeAttributes(attributes);
        AlternateMode4.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "AlternateMode4")));
        Mode1Enabled.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode1Enabled")));
        Mode1IsDamaged.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode1IsDamaged")));
        Mode1IsMalfunctioning.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode1IsMalfunctioning")));
        Mode1IsOn.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode1IsOn")));
        Mode2Enabled.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode2Enabled")));
        Mode2IsDamaged.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode2IsDamaged")));
        Mode2IsMalfunctioning.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode2IsMalfunctioning")));
        Mode2IsOn.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode2IsOn")));
        Mode3AEnabled.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode3AEnabled")));
        Mode3AIsDamaged.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode3AIsDamaged")));
        Mode3AIsMalfunctioning.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode3AIsMalfunctioning")));
        Mode3AIsOn.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode3AIsOn")));
        Mode4Enabled.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode4Enabled")));
        Mode4IsDamaged.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode4IsDamaged")));
        Mode4IsMalfunctioning.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode4IsMalfunctioning")));
        Mode4IsOn.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode4IsOn")));
        Mode4PseudoCrypto.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode4PseudoCrypto")));
        Mode4PseudoCryptoAvailable.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode4PseudoCryptoAvailable")));
        Mode5CEnabled.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode5CEnabled")));
        Mode5CIsDamaged.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode5CIsDamaged")));
        Mode5CIsMalfunctioning.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode5CIsMalfunctioning")));
        Mode5CIsOn.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "Mode5CIsOn")));
        ModeSEnabled.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "ModeSEnabled")));
        ModeSIsDamaged.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "ModeSIsDamaged")));
        ModeSIsMalfunctioning.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "ModeSIsMalfunctioning")));
        ModeSIsOn.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "ModeSIsOn")));
        ModeSIsTcasI.decode(attributes.getValueReference(rtiAmb.getAttributeHandle(objectClassHandle, "ModeSIsTcasI")));
    }

    /**
   * Encode Parameters
   * Adds each parameter to the parameter handle / value maop
   */
    public void encodeAttributes() throws NameNotFound, FederateNotExecutionMember, NotConnected, RTIinternalError, InvalidObjectClassHandle, DecoderException {
        super.encodeAttributes();
        addAttribute("AlternateMode4", AlternateMode4.toByteArray());
        addAttribute("Mode1Enabled", Mode1Enabled.toByteArray());
        addAttribute("Mode1IsDamaged", Mode1IsDamaged.toByteArray());
        addAttribute("Mode1IsMalfunctioning", Mode1IsMalfunctioning.toByteArray());
        addAttribute("Mode1IsOn", Mode1IsOn.toByteArray());
        addAttribute("Mode2Enabled", Mode2Enabled.toByteArray());
        addAttribute("Mode2IsDamaged", Mode2IsDamaged.toByteArray());
        addAttribute("Mode2IsMalfunctioning", Mode2IsMalfunctioning.toByteArray());
        addAttribute("Mode2IsOn", Mode2IsOn.toByteArray());
        addAttribute("Mode3AEnabled", Mode3AEnabled.toByteArray());
        addAttribute("Mode3AIsDamaged", Mode3AIsDamaged.toByteArray());
        addAttribute("Mode3AIsMalfunctioning", Mode3AIsMalfunctioning.toByteArray());
        addAttribute("Mode3AIsOn", Mode3AIsOn.toByteArray());
        addAttribute("Mode4Enabled", Mode4Enabled.toByteArray());
        addAttribute("Mode4IsDamaged", Mode4IsDamaged.toByteArray());
        addAttribute("Mode4IsMalfunctioning", Mode4IsMalfunctioning.toByteArray());
        addAttribute("Mode4IsOn", Mode4IsOn.toByteArray());
        addAttribute("Mode4PseudoCrypto", Mode4PseudoCrypto.toByteArray());
        addAttribute("Mode4PseudoCryptoAvailable", Mode4PseudoCryptoAvailable.toByteArray());
        addAttribute("Mode5CEnabled", Mode5CEnabled.toByteArray());
        addAttribute("Mode5CIsDamaged", Mode5CIsDamaged.toByteArray());
        addAttribute("Mode5CIsMalfunctioning", Mode5CIsMalfunctioning.toByteArray());
        addAttribute("Mode5CIsOn", Mode5CIsOn.toByteArray());
        addAttribute("ModeSEnabled", ModeSEnabled.toByteArray());
        addAttribute("ModeSIsDamaged", ModeSIsDamaged.toByteArray());
        addAttribute("ModeSIsMalfunctioning", ModeSIsMalfunctioning.toByteArray());
        addAttribute("ModeSIsOn", ModeSIsOn.toByteArray());
        addAttribute("ModeSIsTcasI", ModeSIsTcasI.toByteArray());
    }

    public IffAlternateMode4Enum8 getAlternateMode4() {
        return this.AlternateMode4;
    }

    public OMT13boolean getMode1Enabled() {
        return this.Mode1Enabled;
    }

    public OMT13boolean getMode1IsDamaged() {
        return this.Mode1IsDamaged;
    }

    public OMT13boolean getMode1IsMalfunctioning() {
        return this.Mode1IsMalfunctioning;
    }

    public OMT13boolean getMode1IsOn() {
        return this.Mode1IsOn;
    }

    public OMT13boolean getMode2Enabled() {
        return this.Mode2Enabled;
    }

    public OMT13boolean getMode2IsDamaged() {
        return this.Mode2IsDamaged;
    }

    public OMT13boolean getMode2IsMalfunctioning() {
        return this.Mode2IsMalfunctioning;
    }

    public OMT13boolean getMode2IsOn() {
        return this.Mode2IsOn;
    }

    public OMT13boolean getMode3AEnabled() {
        return this.Mode3AEnabled;
    }

    public OMT13boolean getMode3AIsDamaged() {
        return this.Mode3AIsDamaged;
    }

    public OMT13boolean getMode3AIsMalfunctioning() {
        return this.Mode3AIsMalfunctioning;
    }

    public OMT13boolean getMode3AIsOn() {
        return this.Mode3AIsOn;
    }

    public OMT13boolean getMode4Enabled() {
        return this.Mode4Enabled;
    }

    public OMT13boolean getMode4IsDamaged() {
        return this.Mode4IsDamaged;
    }

    public OMT13boolean getMode4IsMalfunctioning() {
        return this.Mode4IsMalfunctioning;
    }

    public OMT13boolean getMode4IsOn() {
        return this.Mode4IsOn;
    }

    public unsignedInt16 getMode4PseudoCrypto() {
        return this.Mode4PseudoCrypto;
    }

    public OMT13boolean getMode4PseudoCryptoAvailable() {
        return this.Mode4PseudoCryptoAvailable;
    }

    public OMT13boolean getMode5CEnabled() {
        return this.Mode5CEnabled;
    }

    public OMT13boolean getMode5CIsDamaged() {
        return this.Mode5CIsDamaged;
    }

    public OMT13boolean getMode5CIsMalfunctioning() {
        return this.Mode5CIsMalfunctioning;
    }

    public OMT13boolean getMode5CIsOn() {
        return this.Mode5CIsOn;
    }

    public OMT13boolean getModeSEnabled() {
        return this.ModeSEnabled;
    }

    public OMT13boolean getModeSIsDamaged() {
        return this.ModeSIsDamaged;
    }

    public OMT13boolean getModeSIsMalfunctioning() {
        return this.ModeSIsMalfunctioning;
    }

    public OMT13boolean getModeSIsOn() {
        return this.ModeSIsOn;
    }

    public OMT13boolean getModeSIsTcasI() {
        return this.ModeSIsTcasI;
    }

    public void setAlternateMode4(IffAlternateMode4Enum8 AlternateMode4) {
        this.AlternateMode4 = AlternateMode4;
    }

    public void setMode1Enabled(OMT13boolean Mode1Enabled) {
        this.Mode1Enabled = Mode1Enabled;
    }

    public void setMode1IsDamaged(OMT13boolean Mode1IsDamaged) {
        this.Mode1IsDamaged = Mode1IsDamaged;
    }

    public void setMode1IsMalfunctioning(OMT13boolean Mode1IsMalfunctioning) {
        this.Mode1IsMalfunctioning = Mode1IsMalfunctioning;
    }

    public void setMode1IsOn(OMT13boolean Mode1IsOn) {
        this.Mode1IsOn = Mode1IsOn;
    }

    public void setMode2Enabled(OMT13boolean Mode2Enabled) {
        this.Mode2Enabled = Mode2Enabled;
    }

    public void setMode2IsDamaged(OMT13boolean Mode2IsDamaged) {
        this.Mode2IsDamaged = Mode2IsDamaged;
    }

    public void setMode2IsMalfunctioning(OMT13boolean Mode2IsMalfunctioning) {
        this.Mode2IsMalfunctioning = Mode2IsMalfunctioning;
    }

    public void setMode2IsOn(OMT13boolean Mode2IsOn) {
        this.Mode2IsOn = Mode2IsOn;
    }

    public void setMode3AEnabled(OMT13boolean Mode3AEnabled) {
        this.Mode3AEnabled = Mode3AEnabled;
    }

    public void setMode3AIsDamaged(OMT13boolean Mode3AIsDamaged) {
        this.Mode3AIsDamaged = Mode3AIsDamaged;
    }

    public void setMode3AIsMalfunctioning(OMT13boolean Mode3AIsMalfunctioning) {
        this.Mode3AIsMalfunctioning = Mode3AIsMalfunctioning;
    }

    public void setMode3AIsOn(OMT13boolean Mode3AIsOn) {
        this.Mode3AIsOn = Mode3AIsOn;
    }

    public void setMode4Enabled(OMT13boolean Mode4Enabled) {
        this.Mode4Enabled = Mode4Enabled;
    }

    public void setMode4IsDamaged(OMT13boolean Mode4IsDamaged) {
        this.Mode4IsDamaged = Mode4IsDamaged;
    }

    public void setMode4IsMalfunctioning(OMT13boolean Mode4IsMalfunctioning) {
        this.Mode4IsMalfunctioning = Mode4IsMalfunctioning;
    }

    public void setMode4IsOn(OMT13boolean Mode4IsOn) {
        this.Mode4IsOn = Mode4IsOn;
    }

    public void setMode4PseudoCrypto(unsignedInt16 Mode4PseudoCrypto) {
        this.Mode4PseudoCrypto = Mode4PseudoCrypto;
    }

    public void setMode4PseudoCryptoAvailable(OMT13boolean Mode4PseudoCryptoAvailable) {
        this.Mode4PseudoCryptoAvailable = Mode4PseudoCryptoAvailable;
    }

    public void setMode5CEnabled(OMT13boolean Mode5CEnabled) {
        this.Mode5CEnabled = Mode5CEnabled;
    }

    public void setMode5CIsDamaged(OMT13boolean Mode5CIsDamaged) {
        this.Mode5CIsDamaged = Mode5CIsDamaged;
    }

    public void setMode5CIsMalfunctioning(OMT13boolean Mode5CIsMalfunctioning) {
        this.Mode5CIsMalfunctioning = Mode5CIsMalfunctioning;
    }

    public void setMode5CIsOn(OMT13boolean Mode5CIsOn) {
        this.Mode5CIsOn = Mode5CIsOn;
    }

    public void setModeSEnabled(OMT13boolean ModeSEnabled) {
        this.ModeSEnabled = ModeSEnabled;
    }

    public void setModeSIsDamaged(OMT13boolean ModeSIsDamaged) {
        this.ModeSIsDamaged = ModeSIsDamaged;
    }

    public void setModeSIsMalfunctioning(OMT13boolean ModeSIsMalfunctioning) {
        this.ModeSIsMalfunctioning = ModeSIsMalfunctioning;
    }

    public void setModeSIsOn(OMT13boolean ModeSIsOn) {
        this.ModeSIsOn = ModeSIsOn;
    }

    public void setModeSIsTcasI(OMT13boolean ModeSIsTcasI) {
        this.ModeSIsTcasI = ModeSIsTcasI;
    }
}
