package org.redsocial.dao.ibatis;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.redsocial.dao.EstudiosDAO;
import org.redsocial.model.Estudios;
import org.redsocial.model.EstudiosExample;
import org.redsocial.model.Trabajos;
import org.redsocial.model.TrabajosExample;
import org.redsocial.model.EstudiosExample.Criteria;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class EstudiosDAOImpl extends SqlMapClientDaoSupport implements EstudiosDAO {

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public EstudiosDAOImpl() {
        super();
    }

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public int countByExample(EstudiosExample example) {
        Integer count = (Integer) getSqlMapClientTemplate().queryForObject("estudios.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public int deleteByExample(EstudiosExample example) {
        int rows = getSqlMapClientTemplate().delete("estudios.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public int deleteByPrimaryKey(Integer id) {
        Estudios key = new Estudios();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("estudios.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public void insert(Estudios record) {
        getSqlMapClientTemplate().insert("estudios.ibatorgenerated_insert", record);
    }

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public void insertSelective(Estudios record) {
        getSqlMapClientTemplate().insert("estudios.ibatorgenerated_insertSelective", record);
    }

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public List selectByExample(EstudiosExample example) {
        List list = getSqlMapClientTemplate().queryForList("estudios.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public Estudios selectByPrimaryKey(Integer id) {
        Estudios key = new Estudios();
        key.setId(id);
        Estudios record = (Estudios) getSqlMapClientTemplate().queryForObject("estudios.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public int updateByExampleSelective(Estudios record, EstudiosExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("estudios.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public int updateByExample(Estudios record, EstudiosExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("estudios.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public int updateByPrimaryKeySelective(Estudios record) {
        int rows = getSqlMapClientTemplate().update("estudios.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    public int updateByPrimaryKey(Estudios record) {
        int rows = getSqlMapClientTemplate().update("estudios.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table estudios
	 * @ibatorgenerated  Sun Apr 19 18:41:18 CEST 2009
	 */
    private static class UpdateByExampleParms extends EstudiosExample {

        private Object record;

        public UpdateByExampleParms(Object record, EstudiosExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }

    public List<Estudios> getEstudiosUsuario(int usuarioId) throws SQLException {
        EstudiosExample example = new EstudiosExample();
        Criteria criteria = example.createCriteria();
        criteria.andUsuarioEqualTo(usuarioId);
        return (List<Estudios>) selectByExample(example);
    }

    public Estudios getEstudios(int id) throws SQLException {
        return selectByPrimaryKey(id);
    }

    public void insertarEstudios(Estudios datos) throws SQLException {
        insertSelective(datos);
    }

    public void updateEstudios(Estudios datos) throws SQLException {
        updateByPrimaryKey(datos);
    }

    public void deleteEstudios(int id) throws SQLException {
        deleteByPrimaryKey(id);
    }

    public List<Integer> buscarUsuariosCon(Estudios curso) {
        EstudiosExample example = new EstudiosExample();
        Criteria crit = example.createCriteria();
        if (curso.getInstitucion() != null && curso.getInstitucion().length() > 0) {
            crit.andInstitucionLike("%" + curso.getInstitucion() + "%");
        }
        if (curso.getTitulo() != null && curso.getTitulo().length() > 0) {
            crit.andTituloLike("%" + curso.getTitulo() + "%");
        }
        crit.andUsuarioGreaterThan(0);
        List lCursos = selectByExample(example);
        List<Integer> lUsuarios = new ArrayList<Integer>(lCursos.size());
        Iterator it = lCursos.iterator();
        while (it.hasNext()) {
            lUsuarios.add(((Estudios) it.next()).getUsuario());
        }
        return lUsuarios;
    }
}
