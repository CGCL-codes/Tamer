package lokahi.model;

import lokahi.httpd.api.pool.ApachePool;
import lokahi.httpd.api.worker.ApacheWorker;
import lokahi.core.api.pool.HostingPool;
import lokahi.core.api.instance.Instance;
import lokahi.tomcat.api.pool.TomcatPool;
import lokahi.tomcat.api.worker.TomcatWorker;
import lokahi.util.collection.TMCCollectionImpl;
import lokahi.util.collection.TMCSet;
import java.sql.SQLException;
import java.util.Collection;

/**
 * @author Stephen Toback
 * @version $Id: WorkersPropertiesFile.java,v 1.4 2006/03/07 19:52:06 drtobes Exp $
 */
public class WorkersPropertiesFile {

    private ApacheWorker aw;

    private Collection<TomcatWorker> usedWorkers = new TMCSet<TomcatWorker>();

    private StringBuffer workerList = new StringBuffer();

    public WorkersPropertiesFile(ApacheWorker aw) {
        this.aw = aw;
    }

    public String build() throws SQLException {
        String ret = null;
        StringBuffer props = new StringBuffer();
        props.append("### define your current Tomcat Home\nworkers.tomcat_home=/usr/local/covalent/tomcat4.0.4\n\n### should match current JDK being used\nworkers.java_home=/usr/local/java/IBMjava1.4.0_00\n\n### Set to \"/\" for linux\nps=/\n");
        StringBuffer workers = new StringBuffer();
        Instance i = aw.getHardware().getInstance();
        Collection<HostingPool> c = HostingPool.getHostingPools(aw, true);
        TMCSet<TomcatPool> tps = new TMCSet<TomcatPool>();
        if (c != null) {
            for (final HostingPool hp : c) {
                TomcatPool tp = hp.getTomcatPool();
                ApachePool ap = hp.getApachePool();
                if (ap != null) {
                    int awPosition = determinePosition(ap, i);
                    if (!tps.contains(tp) && tp != null && tp.isActive()) {
                        tps.add(tp);
                        workers.append(buildTomcatPoolWorkersDefinition(tp, awPosition, i));
                    }
                }
            }
            props.append(workerList);
            props.append('\n');
            props.append(workers.append('\n'));
            props.insert(0, "#This file automatically generated by TMC DO NOT MODIFY\n");
            ret = props.toString();
        }
        return ret;
    }

    private StringBuffer buildTomcatPoolWorkersDefinition(TomcatPool tp, int awPosition, Instance i) {
        StringBuffer ret = new StringBuffer();
        for (TomcatWorker tw : tp.getTomcatWorkers()) {
            if (!usedWorkers.contains(tw) && tw.getHardware() != null && i.equals(tw.getHardware().getInstance()) && tw.isActive()) {
                ret.append(buildWorkerEntry(tw));
            }
        }
        if (tp.getTomcatWorkers(i).size() > 0) {
            ret.append("worker.");
            ret.append(tp.getWorkerName());
            ret.append(".type=lb\nworker.");
            ret.append(tp.getWorkerName());
            ret.append(".balanced_workers=");
            ret.append(this.getWorkerNames(tp, awPosition, i));
            ret.append("\n\n");
            if (workerList.length() < 1) {
                workerList.append("worker.list=");
                workerList.append(tp.getWorkerName());
            } else {
                workerList.append(',');
                workerList.append(tp.getWorkerName());
            }
        }
        return ret;
    }

    private StringBuffer buildWorkerEntry(TomcatWorker tw) {
        StringBuffer poolWorkers = new StringBuffer();
        poolWorkers.append("worker.");
        poolWorkers.append(tw.getWorkerName());
        poolWorkers.append(".port=");
        poolWorkers.append(tw.getTomcat().getHttpPort() - 1);
        poolWorkers.append("\nworker.");
        poolWorkers.append(tw.getWorkerName());
        poolWorkers.append(".host=");
        poolWorkers.append(tw.getHardware().getServerName());
        poolWorkers.append("\nworker.");
        poolWorkers.append(tw.getWorkerName());
        poolWorkers.append(".type=ajp13\nworker.");
        poolWorkers.append(tw.getWorkerName());
        poolWorkers.append(".lbfactor=1\n\n");
        usedWorkers.add(tw);
        return poolWorkers;
    }

    private int determinePosition(ApachePool ap, Instance i) {
        int ret = 0;
        TMCCollectionImpl<ApacheWorker> col = new TMCCollectionImpl<ApacheWorker>(ap.getApaches(i));
        ApacheWorker[] workers = col.orderedList().values().toArray(new ApacheWorker[] {});
        for (int index = 0; index < workers.length; index++) {
            if (aw.equals(workers[index])) {
                ret = index;
            }
        }
        ret++;
        return ret;
    }

    public String getWorkerNames(TomcatPool tp, int awPosition, Instance instance) {
        tp.getTomcatWorkers();
        StringBuffer front = new StringBuffer();
        StringBuffer end = new StringBuffer();
        if (awPosition > tp.getTomcatWorkers(instance).size()) {
            awPosition %= tp.getTomcatWorkers(instance).size();
        }
        awPosition--;
        if (awPosition < 0) awPosition += tp.getTomcatWorkers(instance).size();
        TMCCollectionImpl<TomcatWorker> col = new TMCCollectionImpl<TomcatWorker>(tp.getTomcatWorkers(instance));
        TomcatWorker[] workers = col.orderedList().values().toArray(new TomcatWorker[] {});
        for (int i = 0; i < workers.length; i++) {
            if (workers[i].isActive()) if (i < awPosition) {
                end.append(workers[i].getWorkerName());
                end.append(',');
            } else {
                front.append(workers[i].getWorkerName());
                front.append(',');
            }
        }
        front.append(end);
        String ret = "";
        if (front.length() > 1) {
            ret = front.toString();
            ret = ret.substring(0, ret.lastIndexOf(','));
        }
        return ret;
    }
}
