package org.jude.client.editor.swing.logical;

import java.awt.datatransfer.*;
import java.awt.*;
import javax.swing.*;
import java.util.*;
import java.io.*;
import org.jude.client.*;
import org.jude.client.logger.*;
import org.jude.client.db.*;
import org.jude.client.db.kb.*;
import org.jude.client.content.*;
import org.jude.client.content.autogenerated.*;
import org.jude.client.editor.*;
import org.jude.client.editor.swing.*;
import org.jude.client.dataflavor.*;
import org.jude.simplelogic.*;

/**
 * <p> A view of a relation declaration.
 *
 * @author Massimo Zaniboni
 * @version $Revision: 1.3 $
 */
public class JudeRelationDeclarationViewer extends JudeRelationDeclarationLiteViewer {

    protected JPanel mainPanel = new JPanel();

    public static String editorDescription = "Display the declaration of a relation.";

    public static JudeObject editorCategory = Editor.SWING_EDITOR;

    public static Class javaContentClass = JudeObject.class;

    public static JudeObject editorType = Editor.VIEWER;

    public static JudeObject contentLogicalType = DB.id("relation_");

    public JudeRelationDeclarationViewer() {
        mainPanel.setLayout(new BorderLayout());
        wrapper = new SwingEditorWrapper(this, mainPanel);
    }

    public void updateView() {
        mainPanel.removeAll();
        JudeRelationDeclarationLiteViewer declaration = new JudeRelationDeclarationLiteViewer();
        declaration.setContent(getJudeObjectRelation());
        mainPanel.add(new JScrollPane(declaration.getComponent()), BorderLayout.NORTH);
        mainPanel.add(new JScrollPane(getRelationDescription(getJudeObjectRelation())), BorderLayout.CENTER);
    }

    /**
     * @return a description of the relation
     */
    protected JComponent getRelationDescription(JudeObject relation_) {
        JTextArea rulesText = new JTextArea();
        rulesText.setEditable(false);
        rulesText.setLineWrap(true);
        rulesText.setWrapStyleWord(true);
        StringBuffer ruleDescr = new StringBuffer();
        ruleDescr.append(DB.getDescription(relation_));
        ruleDescr.append("\n\n");
        QuerySolutions solutions = DB.get(DB.var("CODE"), DB.has_all_static_rule_simplelogic_source_code(false, relation_, DB.var("CODE")));
        Iterator it2 = solutions.iterator();
        while (it2.hasNext()) {
            JudeObject jo = (JudeObject) it2.next();
            ruleDescr.append("\n\n");
            ruleDescr.append(jo.getString());
        }
        rulesText.setText(ruleDescr.toString());
        return rulesText;
    }
}
