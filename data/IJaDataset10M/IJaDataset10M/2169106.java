package gov.sns.apps.jeri.application;

import java.util.*;
import javax.sql.*;
import javax.swing.*;

/**
 * Provides a super class that holds the properties and methods common to all 
 * file parsers in Jeri.
 * 
 * @author Chris Fowlkes
 */
public class Parser {

    /**
   * Holds the <CODE>JProgressBar</CODE> that displays the progress of the 
   * import.
   */
    private JProgressBar progressBar;

    /**
   * Holds the <CODE>JLabel</CODE> that displays status messages for the import 
   * operation.
   */
    private JLabel progressLabel;

    /**
   * Holds the messages generated by the import.
   */
    private ArrayList messages = new ArrayList();

    /**
   * Holds the <CODE>DefaultlistModel</CODE> that error messages should be added 
   * to as they occur.
   */
    private DefaultListModel messagesListModel;

    /**
   * Flag to determine if the import has been canceled.
   */
    private boolean parseCanceled = false;

    /**
   * Holds the <CODE>DataSource</CODE> for the window. This is used to make 
   * database connections.
   */
    private DataSource connectionPool;

    /**
   * Creates a new <CODE>Parser</CODE>.
   */
    public Parser() {
    }

    /**
   * Gets the <CODE>JProgressBar</CODE> used to display the progress of the
   * import operation to the user. This is <CODE>null</CODE> by default.
   * 
   * @return The <CODE>JProgressBar</CODE> that displays the progress of the operation.
   */
    public JProgressBar getProgressBar() {
        return progressBar;
    }

    /**
   * Sets the <CODE>JProgressBar</CODE> the class is to update with the 
   * progress information for the import operation.
   * 
   * @param newProgressBar The <CODE>JProgressBar</CODE> with which to display progress information.
   */
    public void setProgressBar(JProgressBar newProgressBar) {
        progressBar = newProgressBar;
    }

    /**
   * Uses <CODE>SwingUtilities.invokeLater</CODE> to set the indeterminate 
   * property of the progress bar.
   * 
   * @param indeterminate The new value of the indeterminate property of the progress bar.
   */
    protected void setProgressIndeterminate(final boolean indeterminate) {
        final JProgressBar progressBar = getProgressBar();
        if (progressBar != null) SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                progressBar.setIndeterminate(indeterminate);
            }
        });
    }

    /**
   * Uses <CODE>SwingUtilities.invokeLater</CODE> to safely set the value of the 
   * progress bar from a <CODE>Thread</CODE>.
   * 
   * @param progressValue The value to pass to the <CODE>setValue</CODE> method of the progress bar.
   */
    protected void setProgressValue(final int progressValue) {
        final JProgressBar progressBar = getProgressBar();
        if (progressBar != null) SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                progressBar.setValue(progressValue);
            }
        });
    }

    /**
   * Uses <CODE>SwingUtilities.invokeLater</CODE> to safely set the maximum 
   * value of the progress bar from a <CODE>Thread</CODE>.
   * 
   * @param progressMaximum The value to pass to the <CODE>setMaximum</CODE> method of the progress bar.
   */
    protected void setProgressMaximum(final int progressMaximum) {
        final JProgressBar progressBar = getProgressBar();
        if (progressBar != null) SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                progressBar.setMaximum(progressMaximum);
            }
        });
    }

    /**
   * Uses <CODE>SwingUtilities.invokeLater</CODE> to safely set the text of the 
   * label in the status bar from a <CODE>Thread</CODE>.
   * 
   * @param message The value to pass to the <CODE>setText</CODE> method of the label.
   */
    protected void setMessage(final String message) {
        final JLabel progressLabel = getProgressLabel();
        if (progressLabel != null) SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                progressLabel.setText(message);
            }
        });
    }

    /**
   * Clears the progress settings.
   */
    protected void clearProgress() {
        setMessage(" ");
        setProgressValue(0);
        setProgressIndeterminate(false);
    }

    /**
   * Gets the label that displays import status messages. <CODE>null</CODE> by 
   * default.
   * 
   * @return The <CODE>JLabel</CODE> that displays import status messages.
   */
    public JLabel getProgressLabel() {
        return progressLabel;
    }

    /**
   * Sets the <CODE>JLabel</CODE>, if any, that is to be used to display import
   * status messages.
   * 
   * @param newProgressLabel The <CODE>JLabel</CODE> used to display import status messages.
   */
    public void setProgressLabel(JLabel newProgressLabel) {
        progressLabel = newProgressLabel;
    }

    /**
   * Uses <CODE>SwingUtilities.invokeLater</CODE> to add a message to the 
   * message pane. This method provides a thread safe way to update the messages 
   * tab.
   * 
   * @param message The message to add to the messages tab.
   */
    protected void addMessage(final String message) {
        messages.add(message);
        if (messagesListModel != null) SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                if (!messagesListModel.contains(message)) messagesListModel.addElement(message);
            }
        });
    }

    /**
   * Gets the messages generated by the import. The messages are HTML formatted.
   * 
   * @return An <CODE>ArrayList</CODE> containing instances of <CODE>String</CODE> error messages.
   */
    public ArrayList getMessages() {
        return messages;
    }

    /**
   * Gets the <CODE>DefaultListModel</CODE> that will display the error messages 
   * as they occur. <CODE>null</CODE> by default.
   * 
   * @return The <CODE>DefaultlistModel</CODE> that will display the import error messages.
   */
    public DefaultListModel getMessagesListModel() {
        return messagesListModel;
    }

    /**
   * Sets the <CODE>DefaultlistModel</CODE>, if any, that will display the 
   * import error messages.
   * 
   * @param newMessagesListModel The <CODE>DefaultListModel</CODE> import errors are to be displayed in as they happen.
   */
    public void setMessagesListModel(DefaultListModel newMessagesListModel) {
        messagesListModel = newMessagesListModel;
    }

    /**
   * Cancels the current operation, if any.
   */
    public void cancel() {
        parseCanceled = true;
    }

    /**
   * Determines of the parse operation has been canceled.
   * 
   * @return <CODE>true</CODE> if the parse has been canceled via the <CODE>isParseCanceled</CODE> method.
   */
    public boolean isParseCanceled() {
        return parseCanceled;
    }

    /**
   * Resets the parse canceled flag. This method should be called at the start 
   * of a parse operation to reset the canceled flag.
   */
    protected void resetParseCanceled() {
        parseCanceled = false;
    }

    /**
   * Gets the <CODE>DataSource</CODE> used by the parser to connect to the 
   * database.
   *
   * @return The <CODE>DataSource</CODE> used to connect to the database.
   */
    public DataSource getDataSource() {
        return connectionPool;
    }

    /**
   * Sets the <CODE>DataSource</CODE> used by the parser to connect to the 
   * database.
   *
   * @param connectionPool The <CODE>DataSource</CODE> to use to connect to the database.
   * @throws java.sql.SQLException Not thrown in this method, but can be thrown in subclasses.
   */
    public void setDataSource(DataSource connectionPool) throws java.sql.SQLException {
        this.connectionPool = connectionPool;
    }
}
