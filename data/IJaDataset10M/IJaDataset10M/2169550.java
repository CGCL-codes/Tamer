package org.dmd.features.extgwt.examples.generated.dmw;

import java.util.*;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcValueException;
import org.dmd.features.extgwt.generated.types.MvcActionREF;
import org.dmd.features.extgwt.generated.types.MvcConfigREF;
import org.dmd.features.extgwt.generated.types.MvcControllerREF;
import org.dmd.features.extgwt.generated.types.MvcEventREF;
import org.dmd.features.extgwt.generated.types.MvcMenuREF;
import org.dmd.features.extgwt.generated.types.MvcMenuItemREF;
import org.dmd.features.extgwt.generated.types.MvcMenuSeparatorREF;
import org.dmd.features.extgwt.generated.types.MvcMultiViewREF;
import org.dmd.features.extgwt.generated.types.MvcRegistryItemREF;
import org.dmd.features.extgwt.generated.types.MvcServerEventREF;
import org.dmd.features.extgwt.generated.types.MvcViewREF;
import org.dmd.dmc.types.StringName;
import org.dmd.dmc.DmcNamedObjectIF;
import org.dmd.features.extgwt.client.DmoExtGWTWrapperBase;
import org.dmd.features.extgwt.generated.dmo.MvcControllerDMO;

/**
 * The MvcController class allows for the definition of controllers. The
 * abstract controller generated by this definition will automatically
 * register for the events you specify via the handlesEvent attribute.
 * Likewise, it will have a standard handleEvent() method that forwards typed
 * events to abstract handler functions that you'll have to write.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.features.extgwt.generators.ExtGWTWrapperGenerator.dumpWrapper(ExtGWTWrapperGenerator.java:168)
 */
public class MvcControllerDMW extends DmoExtGWTWrapperBase<MvcControllerDMO> implements DmcNamedObjectIF {

    public MvcControllerDMW() {
        core = new MvcControllerDMO();
    }

    public MvcControllerDMW(MvcControllerDMO obj) {
        super(obj);
    }

    public MvcControllerDMO getDMO() {
        return ((MvcControllerDMO) core);
    }

    public StringName getObjectName() {
        return (core.getName());
    }

    public DmcAttribute<?> getObjectNameAttribute() {
        return (core.getObjectNameAttribute());
    }

    public boolean equals(Object obj) {
        if (obj instanceof MvcControllerDMW) {
            return (getObjectName().equals(((MvcControllerDMW) obj).getObjectName()));
        }
        return (false);
    }

    public String getAlias() {
        return (core.getAlias());
    }

    public void setAlias(Object value) throws DmcValueException {
        core.setAlias(value);
    }

    public Iterator<MvcMultiViewREF> getControlsMultiView() {
        return (core.getControlsMultiView());
    }

    public void addControlsMultiView(Object value) throws DmcValueException {
        core.addControlsMultiView(value);
    }

    public void delControlsMultiView(Object value) throws DmcValueException {
        core.delControlsMultiView(value);
    }

    public Iterator<MvcViewREF> getControlsView() {
        return (core.getControlsView());
    }

    public void addControlsView(Object value) throws DmcValueException {
        core.addControlsView(value);
    }

    public void delControlsView(Object value) throws DmcValueException {
        core.delControlsView(value);
    }

    public Iterator<MvcRegistryItemREF> getCreatesRegistryItem() {
        return (core.getCreatesRegistryItem());
    }

    public void addCreatesRegistryItem(Object value) throws DmcValueException {
        core.addCreatesRegistryItem(value);
    }

    public void delCreatesRegistryItem(Object value) throws DmcValueException {
        core.delCreatesRegistryItem(value);
    }

    public MvcConfigREF getDefinedInMVCConfig() {
        return (core.getDefinedInMVCConfig());
    }

    public void setDefinedInMVCConfig(Object value) throws DmcValueException {
        core.setDefinedInMVCConfig(value);
    }

    public Iterator<MvcActionREF> getDefinesAction() {
        return (core.getDefinesAction());
    }

    public void addDefinesAction(Object value) throws DmcValueException {
        core.addDefinesAction(value);
    }

    public void delDefinesAction(Object value) throws DmcValueException {
        core.delDefinesAction(value);
    }

    public Iterator<MvcMenuREF> getDefinesMenu() {
        return (core.getDefinesMenu());
    }

    public void addDefinesMenu(Object value) throws DmcValueException {
        core.addDefinesMenu(value);
    }

    public void delDefinesMenu(Object value) throws DmcValueException {
        core.delDefinesMenu(value);
    }

    public Iterator<MvcMenuItemREF> getDefinesMenuItem() {
        return (core.getDefinesMenuItem());
    }

    public void addDefinesMenuItem(Object value) throws DmcValueException {
        core.addDefinesMenuItem(value);
    }

    public void delDefinesMenuItem(Object value) throws DmcValueException {
        core.delDefinesMenuItem(value);
    }

    public Iterator<MvcMenuSeparatorREF> getDefinesMenuSeparator() {
        return (core.getDefinesMenuSeparator());
    }

    public void addDefinesMenuSeparator(Object value) throws DmcValueException {
        core.addDefinesMenuSeparator(value);
    }

    public void delDefinesMenuSeparator(Object value) throws DmcValueException {
        core.delDefinesMenuSeparator(value);
    }

    public String getDescription() {
        return (core.getDescription());
    }

    public void setDescription(Object value) throws DmcValueException {
        core.setDescription(value);
    }

    public Iterator<MvcEventREF> getDispatchesEvent() {
        return (core.getDispatchesEvent());
    }

    public void addDispatchesEvent(Object value) throws DmcValueException {
        core.addDispatchesEvent(value);
    }

    public void delDispatchesEvent(Object value) throws DmcValueException {
        core.delDispatchesEvent(value);
    }

    public String getFile() {
        return (core.getFile());
    }

    public void setFile(Object value) throws DmcValueException {
        core.setFile(value);
    }

    public Iterator<MvcEventREF> getHandlesEvent() {
        return (core.getHandlesEvent());
    }

    public void addHandlesEvent(Object value) throws DmcValueException {
        core.addHandlesEvent(value);
    }

    public void delHandlesEvent(Object value) throws DmcValueException {
        core.delHandlesEvent(value);
    }

    public Iterator<MvcServerEventREF> getHandlesServerEvent() {
        return (core.getHandlesServerEvent());
    }

    public void addHandlesServerEvent(Object value) throws DmcValueException {
        core.addHandlesServerEvent(value);
    }

    public void delHandlesServerEvent(Object value) throws DmcValueException {
        core.delHandlesServerEvent(value);
    }

    public Integer getLineNumber() {
        return (core.getLineNumber());
    }

    public void setLineNumber(Object value) throws DmcValueException {
        core.setLineNumber(value);
    }

    public StringName getName() {
        return (core.getName());
    }

    public void setName(Object value) throws DmcValueException {
        core.setName(value);
    }

    public MvcControllerREF getParentController() {
        return (core.getParentController());
    }

    public void setParentController(Object value) throws DmcValueException {
        core.setParentController(value);
    }

    public String getSubpackage() {
        return (core.getSubpackage());
    }

    public void setSubpackage(Object value) throws DmcValueException {
        core.setSubpackage(value);
    }

    public Iterator<MvcRegistryItemREF> getUsesRegistryItem() {
        return (core.getUsesRegistryItem());
    }

    public void addUsesRegistryItem(Object value) throws DmcValueException {
        core.addUsesRegistryItem(value);
    }

    public void delUsesRegistryItem(Object value) throws DmcValueException {
        core.delUsesRegistryItem(value);
    }
}
