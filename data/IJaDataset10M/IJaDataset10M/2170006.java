package org.dmd.mvw.tools.mvwgenerator.generated.dmo;

import java.io.Serializable;
import java.util.*;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcNamedObjectIF;
import org.dmd.dmc.DmcSliceInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.types.CamelCaseName;
import org.dmd.dmg.generated.dmo.DmgDMSAG;
import org.dmd.dms.generated.dmo.MetaDMSAG;
import org.dmd.dms.generated.types.DmcTypeBooleanSV;
import org.dmd.dms.generated.types.DmcTypeCamelCaseNameSV;
import org.dmd.dms.generated.types.DmcTypeModifierMV;
import org.dmd.dms.generated.types.DmcTypeStringMV;
import org.dmd.dms.generated.types.DmcTypeStringSET;
import org.dmd.dms.generated.types.DmcTypeStringSV;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDefinitionDMO;
import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The Module is used to define a reusable set of MVW functionality which can
 * be referred to in Application definitions or other Module definitions.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class ModuleDMO extends MvwDefinitionDMO implements DmcNamedObjectIF, Serializable {

    public static final String constructionClassName = "Module";

    static Map<Integer, HashMap<String, DmcAttributeValidator>> _AvDmAp;

    static Map<String, DmcObjectValidator> _OvDmAp;

    static {
        _AvDmAp = new HashMap<Integer, HashMap<String, DmcAttributeValidator>>();
        _OvDmAp = new HashMap<String, DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(), MetaVCAG.__AttributeSetValidator);
    }

    public ModuleDMO() {
        super("Module");
    }

    protected ModuleDMO(String oc) {
        super(oc);
    }

    protected Map<Integer, HashMap<String, DmcAttributeValidator>> getAttributeValidators() {
        return (_AvDmAp);
    }

    protected Map<String, DmcObjectValidator> getObjectValidators() {
        return (_OvDmAp);
    }

    @Override
    public ModuleDMO getNew() {
        ModuleDMO rc = new ModuleDMO();
        return (rc);
    }

    @Override
    public ModuleDMO getSlice(DmcSliceInfo info) {
        ModuleDMO rc = new ModuleDMO();
        populateSlice(rc, info);
        return (rc);
    }

    public ModuleDMO(DmcTypeModifierMV mods) {
        super("Module");
        modrec(true);
        setModifier(mods);
    }

    public ModuleDMO getModificationRecorder() {
        ModuleDMO rc = new ModuleDMO();
        rc.setModuleName(getModuleName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return (rc);
    }

    public CamelCaseName getObjectName() {
        DmcAttribute<?> name = get(MvwDMSAG.__moduleName);
        if (name != null) return ((CamelCaseName) name.getSV());
        return (null);
    }

    public DmcAttribute<?> getObjectNameAttribute() {
        DmcAttribute<?> name = get(MvwDMSAG.__moduleName);
        return (name);
    }

    public boolean equals(Object obj) {
        if (obj instanceof ModuleDMO) {
            return (getObjectName().equals(((ModuleDMO) obj).getObjectName()));
        }
        return (false);
    }

    public int hashCode() {
        CamelCaseName objn = getObjectName();
        if (objn == null) return (0);
        return (objn.hashCode());
    }

    /**
     * @return An Iterator of String objects.
     */
    @SuppressWarnings("unchecked")
    public Iterator<String> getDependsOnModule() {
        DmcTypeStringSET attr = (DmcTypeStringSET) get(MvwDMSAG.__dependsOnModule);
        if (attr == null) return (((List<String>) Collections.EMPTY_LIST).iterator());
        return (attr.getMV());
    }

    public String getNthDependsOnModule(int i) {
        DmcTypeStringSET attr = (DmcTypeStringSET) get(MvwDMSAG.__dependsOnModule);
        if (attr == null) return (null);
        return (attr.getMVnth(i));
    }

    public DmcAttribute<?> addDependsOnModule(String value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__dependsOnModule);
        if (attr == null) attr = new DmcTypeStringSET(MvwDMSAG.__dependsOnModule);
        try {
            setLastValue(attr.add(value));
            add(MvwDMSAG.__dependsOnModule, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific add() method shouldn't throw exceptions!", ex));
        }
        return (attr);
    }

    public boolean dependsOnModuleContains(String value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__dependsOnModule);
        if (attr == null) return (false);
        return (attr.contains(value));
    }

    public DmcAttribute<?> addDependsOnModule(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__dependsOnModule);
        if (attr == null) attr = new DmcTypeStringSET(MvwDMSAG.__dependsOnModule);
        setLastValue(attr.add(value));
        add(MvwDMSAG.__dependsOnModule, attr);
        return (attr);
    }

    public int getDependsOnModuleSize() {
        DmcAttribute<?> attr = get(MvwDMSAG.__dependsOnModule);
        if (attr == null) {
            if (MvwDMSAG.__dependsOnModule.indexSize == 0) return (0); else return (MvwDMSAG.__dependsOnModule.indexSize);
        }
        return (attr.getMVSize());
    }

    public DmcAttribute<?> delDependsOnModule(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__dependsOnModule);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeStringSET(MvwDMSAG.__dependsOnModule), value); else attr = del(MvwDMSAG.__dependsOnModule, value);
        return (attr);
    }

    public DmcAttribute<?> delDependsOnModule(String value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__dependsOnModule);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeStringSET(MvwDMSAG.__dependsOnModule), value); else attr = del(MvwDMSAG.__dependsOnModule, value);
        return (attr);
    }

    public void remDependsOnModule() {
        rem(MvwDMSAG.__dependsOnModule);
    }

    /**
     * @return An Iterator of String objects.
     */
    @SuppressWarnings("unchecked")
    public Iterator<String> getDependsOnSchema() {
        DmcTypeStringMV attr = (DmcTypeStringMV) get(MetaDMSAG.__dependsOnSchema);
        if (attr == null) return (((List<String>) Collections.EMPTY_LIST).iterator());
        return (attr.getMV());
    }

    public String getNthDependsOnSchema(int i) {
        DmcTypeStringMV attr = (DmcTypeStringMV) get(MetaDMSAG.__dependsOnSchema);
        if (attr == null) return (null);
        return (attr.getMVnth(i));
    }

    public DmcAttribute<?> addDependsOnSchema(String value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOnSchema);
        if (attr == null) attr = new DmcTypeStringMV(MetaDMSAG.__dependsOnSchema);
        try {
            setLastValue(attr.add(value));
            add(MetaDMSAG.__dependsOnSchema, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific add() method shouldn't throw exceptions!", ex));
        }
        return (attr);
    }

    public boolean dependsOnSchemaContains(String value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOnSchema);
        if (attr == null) return (false);
        return (attr.contains(value));
    }

    public DmcAttribute<?> addDependsOnSchema(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOnSchema);
        if (attr == null) attr = new DmcTypeStringMV(MetaDMSAG.__dependsOnSchema);
        setLastValue(attr.add(value));
        add(MetaDMSAG.__dependsOnSchema, attr);
        return (attr);
    }

    public int getDependsOnSchemaSize() {
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOnSchema);
        if (attr == null) {
            if (MetaDMSAG.__dependsOnSchema.indexSize == 0) return (0); else return (MetaDMSAG.__dependsOnSchema.indexSize);
        }
        return (attr.getMVSize());
    }

    public DmcAttribute<?> delDependsOnSchema(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOnSchema);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeStringMV(MetaDMSAG.__dependsOnSchema), value); else attr = del(MetaDMSAG.__dependsOnSchema, value);
        return (attr);
    }

    public DmcAttribute<?> delDependsOnSchema(String value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOnSchema);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeStringMV(MetaDMSAG.__dependsOnSchema), value); else attr = del(MetaDMSAG.__dependsOnSchema, value);
        return (attr);
    }

    public void remDependsOnSchema() {
        rem(MetaDMSAG.__dependsOnSchema);
    }

    public Boolean isUsingStandardSubpackages() {
        DmcTypeBooleanSV attr = (DmcTypeBooleanSV) get(MvwDMSAG.__usingStandardSubpackages);
        if (attr == null) return (false);
        return (attr.getSV());
    }

    public void setUsingStandardSubpackages(Boolean value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__usingStandardSubpackages);
        if (attr == null) attr = new DmcTypeBooleanSV(MvwDMSAG.__usingStandardSubpackages);
        try {
            attr.set(value);
            set(MvwDMSAG.__usingStandardSubpackages, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setUsingStandardSubpackages(Object value) throws DmcValueException {
        DmcTypeBooleanSV attr = (DmcTypeBooleanSV) get(MvwDMSAG.__usingStandardSubpackages);
        if (attr == null) attr = new DmcTypeBooleanSV(MvwDMSAG.__usingStandardSubpackages);
        attr.set(value);
        set(MvwDMSAG.__usingStandardSubpackages, attr);
    }

    public void remUsingStandardSubpackages() {
        rem(MvwDMSAG.__usingStandardSubpackages);
    }

    public CamelCaseName getModuleName() {
        DmcTypeCamelCaseNameSV attr = (DmcTypeCamelCaseNameSV) get(MvwDMSAG.__moduleName);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setModuleName(CamelCaseName value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__moduleName);
        if (attr == null) attr = new DmcTypeCamelCaseNameSV(MvwDMSAG.__moduleName);
        try {
            attr.set(value);
            set(MvwDMSAG.__moduleName, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setModuleName(Object value) throws DmcValueException {
        DmcTypeCamelCaseNameSV attr = (DmcTypeCamelCaseNameSV) get(MvwDMSAG.__moduleName);
        if (attr == null) attr = new DmcTypeCamelCaseNameSV(MvwDMSAG.__moduleName);
        attr.set(value);
        set(MvwDMSAG.__moduleName, attr);
    }

    public void remModuleName() {
        rem(MvwDMSAG.__moduleName);
    }

    public String getGenPackage() {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmgDMSAG.__genPackage);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setGenPackage(String value) {
        DmcAttribute<?> attr = get(DmgDMSAG.__genPackage);
        if (attr == null) attr = new DmcTypeStringSV(DmgDMSAG.__genPackage);
        try {
            attr.set(value);
            set(DmgDMSAG.__genPackage, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setGenPackage(Object value) throws DmcValueException {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmgDMSAG.__genPackage);
        if (attr == null) attr = new DmcTypeStringSV(DmgDMSAG.__genPackage);
        attr.set(value);
        set(DmgDMSAG.__genPackage, attr);
    }

    public void remGenPackage() {
        rem(DmgDMSAG.__genPackage);
    }
}
