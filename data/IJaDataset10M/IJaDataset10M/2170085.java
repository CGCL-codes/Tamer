package net.sf.istcontract.aws.communication.protocol.Toy13_4_5;

import net.sf.istcontract.aws.communication.message.MessageTemplate;
import net.sf.istcontract.aws.communication.performative.ConsentSuggestion;
import net.sf.istcontract.aws.communication.performative.Inform;
import net.sf.istcontract.aws.communication.performative.Propose;
import net.sf.istcontract.aws.communication.performative.Suggest;
import net.sf.istcontract.aws.knowledge.actor.Role;
import java.util.HashMap;
import java.util.Vector;
import net.sf.istcontract.aws.communication.protocol.*;

/**
 *
 * This is a protocol implementation
 *
 * It is part of the CommunicationManager component.
 *
 * @author Autogenerated by ingenias2contractcodegenerator (Ignasi Gomez-Sebastia)
 *
 */
public class Toy13_4_5 extends Protocol {

    private static HashMap Predecessors = new HashMap();

    public Toy13_4_5() {
        if (name == null) {
            System.err.println("Toy_13_4_5 name=null");
        }
        try {
            Role Listener, Observer;
            Listener = addActor(ListenerRole.class.getName());
            Observer = addActor(ObserverRole.class.getName());
            MessageTemplate Inform_InteractionUnitObserverListener = addMessage(Observer, Listener, Inform_InteractionUnit.class, EBookContractOntology.class);
            MessageTemplate Failure_InteractionUnitObserverListener = addMessage(Observer, Listener, Failure_InteractionUnit.class, EBookContractOntology.class);
            MessageTemplate Refuse_InteractionUnitObserverListener = addMessage(Observer, Listener, Refuse_InteractionUnit.class, EBookContractOntology.class);
            MessageTemplate Suscribe_InteractionUnitListenerObserver = addMessage(Listener, Observer, Suscribe_InteractionUnit.class, EBookContractOntology.class);
            MessageTemplate Agree_InteractionUnitObserverListener = addMessage(Observer, Listener, Agree_InteractionUnit.class, EBookContractOntology.class);
            setStartMessage(Suscribe_InteractionUnitListenerObserver);
            setConversationInitiator(ListenerRole.class);
            setConversationParticipant(ObserverRole.class);
            LinkFollowingMessage(Inform_InteractionUnitObserverListener, Failure_InteractionUnitObserverListener);
            LinkFollowingMessage(Inform_InteractionUnitObserverListener, Inform_InteractionUnitObserverListener);
            LinkFollowingMessage(Suscribe_InteractionUnitListenerObserver, Refuse_InteractionUnitObserverListener);
            LinkFollowingMessage(Suscribe_InteractionUnitListenerObserver, Agree_InteractionUnitObserverListener);
            LinkFollowingMessage(Suscribe_InteractionUnitListenerObserver, Failure_InteractionUnitObserverListener);
            LinkFollowingMessage(Agree_InteractionUnitObserverListener, Inform_InteractionUnitObserverListener);
        } catch (Exception E) {
            E.printStackTrace();
        }
    }
}
