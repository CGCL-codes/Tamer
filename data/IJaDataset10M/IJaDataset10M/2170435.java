package com.safi.core.scripting.provider;

import com.safi.core.scripting.util.ScriptingAdapterFactory;
import java.util.ArrayList;
import java.util.Collection;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScriptingItemProviderAdapterFactory extends ScriptingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {

    /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    public ScriptingItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
	 * This keeps track of the one adapter used for all {@link com.safi.core.scripting.RhinoSafletScript} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    protected RhinoSafletScriptItemProvider rhinoSafletScriptItemProvider;

    /**
	 * This creates an adapter for a {@link com.safi.core.scripting.RhinoSafletScript}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createRhinoSafletScriptAdapter() {
        if (rhinoSafletScriptItemProvider == null) {
            rhinoSafletScriptItemProvider = new RhinoSafletScriptItemProvider(this);
        }
        return rhinoSafletScriptItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link com.safi.core.scripting.RhinoSafletScriptEnvironment} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    protected RhinoSafletScriptEnvironmentItemProvider rhinoSafletScriptEnvironmentItemProvider;

    /**
	 * This creates an adapter for a {@link com.safi.core.scripting.RhinoSafletScriptEnvironment}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createRhinoSafletScriptEnvironmentAdapter() {
        if (rhinoSafletScriptEnvironmentItemProvider == null) {
            rhinoSafletScriptEnvironmentItemProvider = new RhinoSafletScriptEnvironmentItemProvider(this);
        }
        return rhinoSafletScriptEnvironmentItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link com.safi.core.scripting.RhinoSafletScriptFactory} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    protected RhinoSafletScriptFactoryItemProvider rhinoSafletScriptFactoryItemProvider;

    /**
	 * This creates an adapter for a {@link com.safi.core.scripting.RhinoSafletScriptFactory}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createRhinoSafletScriptFactoryAdapter() {
        if (rhinoSafletScriptFactoryItemProvider == null) {
            rhinoSafletScriptFactoryItemProvider = new RhinoSafletScriptFactoryItemProvider(this);
        }
        return rhinoSafletScriptFactoryItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link com.safi.core.scripting.RhinoScriptScope} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    protected RhinoScriptScopeItemProvider rhinoScriptScopeItemProvider;

    /**
	 * This creates an adapter for a {@link com.safi.core.scripting.RhinoScriptScope}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createRhinoScriptScopeAdapter() {
        if (rhinoScriptScopeItemProvider == null) {
            rhinoScriptScopeItemProvider = new RhinoScriptScopeItemProvider(this);
        }
        return rhinoScriptScopeItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link com.safi.core.scripting.RhinoScriptScopeFactory} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    protected RhinoScriptScopeFactoryItemProvider rhinoScriptScopeFactoryItemProvider;

    /**
	 * This creates an adapter for a {@link com.safi.core.scripting.RhinoScriptScopeFactory}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createRhinoScriptScopeFactoryAdapter() {
        if (rhinoScriptScopeFactoryItemProvider == null) {
            rhinoScriptScopeFactoryItemProvider = new RhinoScriptScopeFactoryItemProvider(this);
        }
        return rhinoScriptScopeFactoryItemProvider;
    }

    /**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }
        return null;
    }

    /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);
        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
    public void dispose() {
        if (rhinoSafletScriptItemProvider != null) rhinoSafletScriptItemProvider.dispose();
        if (rhinoSafletScriptEnvironmentItemProvider != null) rhinoSafletScriptEnvironmentItemProvider.dispose();
        if (rhinoSafletScriptFactoryItemProvider != null) rhinoSafletScriptFactoryItemProvider.dispose();
        if (rhinoScriptScopeItemProvider != null) rhinoScriptScopeItemProvider.dispose();
        if (rhinoScriptScopeFactoryItemProvider != null) rhinoScriptScopeFactoryItemProvider.dispose();
    }
}
