package com.xepto.webgis.geocoder.linesegment.test;

import com.xepto.webgis.geocoder.linesegment.LineSegmentPosition;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JFrame;

/**
 *
 * @author Peter Johan Salomonsen
 */
public class LineSegmentPositionTest extends javax.swing.JFrame {

    static LineSegmentPosition lsp = new LineSegmentPosition(-50, -50, 50, 50, 50, 0);

    static boolean dragged = false;

    int selectedPoint = -1;

    /** Creates new form LineSegmentPositionTest */
    public LineSegmentPositionTest() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 300, Short.MAX_VALUE));
        pack();
    }

    @Override
    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        g.clearRect(0, 0, getWidth(), getHeight());
        g.drawString("Distance from line: " + lsp.getPointDistanceFromLine(), 10, 50);
        g.drawString("AngleRotation: " + ((lsp.getLineRotationAngleToPoint() / (Math.PI * 2)) * 360.0), 10, 70);
        g.drawString("Is within segment: " + lsp.doesNormalInetersectLineSegment(), 10, 90);
        g.drawString("Position on line: " + lsp.getPointNormalPositionOnLine(), 10, 110);
        Point2D l1 = new Point2D.Double(lsp.getX1(), -lsp.getY1());
        Point2D l2 = new Point2D.Double(lsp.getX2(), -lsp.getY2());
        Point2D p = new Point2D.Double(lsp.getPx(), -lsp.getPy());
        Line2D l12 = new Line2D.Double(l1, l2);
        Line2D l1p = new Line2D.Double(l1, p);
        Line2D l2p = new Line2D.Double(l2, p);
        g2.translate(getWidth() / 2, getHeight() / 2);
        g2.draw(l12);
        g2.setColor(Color.RED);
        g2.draw(l1p);
        g2.setColor(Color.GREEN);
        g2.draw(l2p);
        try {
            Point2D mousePos = g2.getTransform().inverseTransform(getMousePosition(), null);
            if (!dragged) {
                if (mousePos.distance(l1) < 5) {
                    selectedPoint = 1;
                    g2.draw(new Rectangle2D.Double(l1.getX() - 3, l1.getY() - 3, 7, 7));
                } else if (mousePos.distance(l2) < 5) {
                    selectedPoint = 2;
                    g2.draw(new Rectangle2D.Double(l2.getX() - 3, l2.getY() - 3, 7, 7));
                } else if (mousePos.distance(p) < 5) {
                    selectedPoint = 3;
                    g2.draw(new Rectangle2D.Double(p.getX() - 3, p.getY() - 3, 7, 7));
                } else {
                    selectedPoint = 0;
                }
            } else {
                if (selectedPoint == 1) {
                    lsp.setX1(mousePos.getX());
                    lsp.setY1(-mousePos.getY());
                } else if (selectedPoint == 2) {
                    lsp.setX2(mousePos.getX());
                    lsp.setY2(-mousePos.getY());
                } else if (selectedPoint == 3) {
                    lsp.setPx(mousePos.getX());
                    lsp.setPy(-mousePos.getY());
                }
            }
        } catch (Exception e) {
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                final JFrame f = (JFrame) new LineSegmentPositionTest();
                f.setVisible(true);
                f.addMouseMotionListener(new MouseMotionListener() {

                    public void mouseDragged(MouseEvent e) {
                        dragged = true;
                        f.repaint();
                    }

                    public void mouseMoved(MouseEvent e) {
                        dragged = false;
                        f.repaint();
                    }
                });
            }
        });
    }
}
