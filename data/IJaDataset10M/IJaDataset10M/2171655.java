package rpr2_d18.arrayDataRepresentations;

import hla.rti1516e.encoding.HLAbyte;
import hla.rti1516e.exceptions.RTIinternalError;
import java.util.Iterator;
import java.util.ArrayList;
import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.ByteWrapper;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.encoding.HLAfixedArray;
import rpr2_d18.simpleDataRepresentations.unsignedInt64;

/**
 * JAVADOC_COMMENTS
 * cardinality = Dynamic 
 * encoding   = HLAvariableArray
 * semantics  = -NULL- 
 * @author : auto generated by DRDC FOM Generator
 */
public class unsignedInt64Array implements HLAfixedArray {

    ArrayList<unsignedInt64> value = new ArrayList<unsignedInt64>();

    /**
   * Constructor
   */
    public unsignedInt64Array() throws RTIinternalError {
        value = new ArrayList<unsignedInt64>();
        for (int i = 0; i < value.size(); i++) value.add(new unsignedInt64());
    }

    /**
   * Get the data element at the index position
   * 
   * @param index : the position of the requested element
   */
    public unsignedInt64 get(int index) {
        return value.get(index);
    }

    /**
   * Add a data element at the index position
   * 
   * @param newElement : an instance of the data to add
   */
    public void addElement(DataElement newElement) {
        value.add((unsignedInt64) newElement);
    }

    /**
   * Resize the variable array to a new length
   * 
   * @param newSize : the new size of the array
   */
    public void resize(int newSize) {
        ArrayList<unsignedInt64> tempValue = value;
        value = new ArrayList<unsignedInt64>(newSize);
        try {
            for (int i = 0; i < value.size(); i++) value.add(new unsignedInt64());
        } catch (RTIinternalError e) {
            value = tempValue;
            e.printStackTrace();
        }
    }

    /**
   * Returns the size in bytes of this element's encoding.
   * 
   * @return : length in bytes
   */
    public int getEncodedLength() {
        int size = 0;
        for (int i = 0; i < value.size(); i++) size += value.get(i).getEncodedLength();
        return size;
    }

    /**
   * Returns the octet boundary of this element.
   *  
   * @return : octet boundary position
   */
    public int getOctetBoundary() {
        int size = 0;
        for (int i = 0; i < value.size(); i++) size += value.get(i).getEncodedLength();
        return size % 4;
    }

    /**
   * Encodes this element into the specified ByteWrapper.
   * 
   * @param byteWrapper : organized byte array containing native java value
   */
    public void encode(ByteWrapper byteWrapper) {
        for (int i = 0; i < value.size(); i++) value.get(i).encode(byteWrapper);
    }

    /**
   * Decodes this element from a ByteWrapper object
   * 
   * @param byteWrapper : organized array of bytes 
   */
    public void decode(ByteWrapper byteWrapper) throws DecoderException {
        for (int i = 0; i < value.size(); i++) value.get(i).decode(byteWrapper);
    }

    /**
   * Decodes this element from an array of bytes
   * 
   * @param bytes : array of bytes 
   */
    public void decode(byte[] bytes) throws DecoderException {
        for (int i = 0; i < value.size(); i++) value.get(i).decode(bytes);
    }

    /**
   * Returns this data value element
   * 
   * @return : native value type
   */
    public ArrayList<unsignedInt64> getValue() {
        return value;
    }

    /**
   * Copies the value into an array of bytes
   * 
   * @return : array of bytes
   */
    public byte[] toByteArray() {
        byte[] result = new byte[getEncodedLength()];
        int pos = 0;
        for (int i = 0; i < value.size(); i++) {
            byte[] b = value.get(i).toByteArray();
            System.arraycopy(b, 0, result, pos, value.get(i).getEncodedLength());
        }
        return result;
    }

    /**
   * Set the value from a native java type
   * 
   * @param newValue : the value to set it to
   */
    public void setValue(ArrayList<unsignedInt64> newValue) throws RTIinternalError {
        value = new ArrayList<unsignedInt64>(newValue.size());
        for (int i = 0; i < value.size(); i++) value.add(newValue.get(i));
    }

    /**
   * Return an Iterator for this array
   */
    public Iterator iterator() {
        return value.iterator();
    }

    /**
   * Return the size of this array element
   */
    public int size() {
        return value.size();
    }
}
