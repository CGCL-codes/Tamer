package ru.adv.test.util.image;

import java.io.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import ru.adv.test.AbstractTest;
import static org.junit.Assert.*;
import ru.adv.util.image.PNGInfoReader;
import ru.adv.util.image.ImageInfo;
import ru.adv.util.image.ImageInfoReadException;

/**
 * 
 * @version $Revision: 1.1 $
 */
public class PNGImageInfoTest extends AbstractTest {

    private PNGInfoReader reader;

    private static final String GOOD1 = "good1.png";

    static final int[] goodPng1 = { 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x08, 0x02, 0x00, 0x00, 0x00, 0x8d, 0x32, 0x4e, 0x82, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc, 0x61, 0x05, 0x00, 0x00, 0x00, 0x06, 0x62, 0x4b, 0x47, 0x44, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xa0, 0xbd, 0xa7, 0x93, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x00, 0x0b, 0x12, 0x01, 0xd2, 0xdd, 0x7e, 0xfc, 0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4d, 0x45, 0x07, 0xd2, 0x07, 0x08, 0x09, 0x32, 0x1b, 0x8c, 0x72, 0x45, 0x69, 0x00, 0x00, 0x00, 0x19, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0x63, 0xf8, 0xff, 0xff, 0x3f, 0x13, 0x03, 0x03, 0xc3, 0x28, 0x1e, 0xc5, 0xa3, 0x78, 0x14, 0x0f, 0x76, 0x0c, 0x00, 0x7b, 0x53, 0x05, 0x54, 0x6a, 0x31, 0xc0, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82 };

    private static final String GOOD2 = "good2.png";

    private static final int[] goodPng2 = { 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x04, 0x7e, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc, 0x61, 0x05, 0x00, 0x00, 0x00, 0x06, 0x62, 0x4b, 0x47, 0x44, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xa0, 0xbd, 0xa7, 0x93, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x00, 0x0b, 0x12, 0x01, 0xd2, 0xdd, 0x7e, 0xfc, 0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4d, 0x45, 0x07, 0xd2, 0x07, 0x08, 0x09, 0x33, 0x21, 0x53, 0x65, 0xad, 0x9a, 0x00, 0x00, 0x00, 0x14, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0x63, 0xfc, 0xff, 0xff, 0x3f, 0xc3, 0x28, 0x18, 0x05, 0xa3, 0x60, 0xe0, 0x00, 0x00, 0x86, 0x17, 0x02, 0xff, 0x6e, 0x62, 0xfe, 0x43, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82 };

    private static final String BIG = "big.png";

    private static final int[] bigSizePng = { 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x02, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x04, 0x7e, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc, 0x61, 0x05, 0x00, 0x00, 0x00, 0x06, 0x62, 0x4b, 0x47, 0x44, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xa0, 0xbd, 0xa7, 0x93, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x00, 0x0b, 0x12, 0x01, 0xd2, 0xdd, 0x7e, 0xfc, 0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4d, 0x45, 0x07, 0xd2, 0x07, 0x08, 0x09, 0x33, 0x21, 0x53, 0x65, 0xad, 0x9a, 0x00, 0x00, 0x00, 0x14, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0x63, 0xfc, 0xff, 0xff, 0x3f, 0xc3, 0x28, 0x18, 0x05, 0xa3, 0x60, 0xe0, 0x00, 0x00, 0x86, 0x17, 0x02, 0xff, 0x6e, 0x62, 0xfe, 0x43, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82 };

    private static final String BAD1 = "bad1.png";

    private static final int[] badPng1 = {};

    private static final String BAD2 = "bad2.png";

    private static final int[] badPng2 = { 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a };

    private static final String BAD3 = "bad3.png";

    private static final int[] badPng3 = { 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52 };

    private static final String BAD4 = "bad4.png";

    private static final int[] badPng4 = { 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x2c };

    private static final String BAD5 = "bad5.png";

    private static final int[] badPng5 = { 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x00, 0x00 };

    private File tmpdir = new File("tmp");

    @Before
    public void setUp() {
        reader = new PNGInfoReader();
        tmpdir.mkdirs();
        writeFile(GOOD1, goodPng1);
        writeFile(GOOD2, goodPng2);
        writeFile(BIG, bigSizePng);
        writeFile(BAD1, badPng1);
        writeFile(BAD2, badPng2);
        writeFile(BAD3, badPng3);
        writeFile(BAD4, badPng4);
        writeFile(BAD5, badPng5);
    }

    @After
    public void tearDown() {
        deleteFile(GOOD1);
        deleteFile(GOOD2);
        deleteFile(BIG);
        deleteFile(BAD1);
        deleteFile(BAD2);
        deleteFile(BAD3);
        deleteFile(BAD4);
        deleteFile(BAD5);
        tmpdir.delete();
    }

    private String filename(String name) {
        return tmpdir.getAbsolutePath() + File.separator + name;
    }

    private void writeFile(String name, int[] data) {
        try {
            File f = new File(filename(name));
            FileOutputStream fs = new FileOutputStream(f);
            for (int i = 0; i < data.length; i++) {
                fs.write((byte) data[i]);
            }
            fs.close();
        } catch (IOException e) {
            assertTrue(e.getMessage(), false);
        }
    }

    private void deleteFile(String name) {
        File f = new File(filename(name));
        f.delete();
    }

    private void goodFile(String name, long width, long height) {
        try {
            ImageInfo ii = reader.readInfo(filename(name));
            assertTrue("image " + name + "size mismatch. must be: " + width + " x " + height + " read: " + ii.getWidth() + " x " + ii.getHeight(), width == ii.getWidth() && height == ii.getHeight());
        } catch (ImageInfoReadException e) {
            assertTrue("cannot read " + name + " file: " + e.getMessage(), false);
        }
    }

    private void bigSizeFile(String name) {
        try {
            ImageInfo ii = reader.readInfo(filename(name));
            assertTrue("image " + name + "cannot has size more than " + PNGInfoReader.MAX_IMAGE_SIZE + " x " + PNGInfoReader.MAX_IMAGE_SIZE, false);
        } catch (ImageInfoReadException e) {
            return;
        }
    }

    private void badFile(String name) {
        try {
            ImageInfo ii = reader.readInfo(filename(name));
        } catch (ImageInfoReadException e) {
            return;
        }
        assertTrue("image " + name + " cannot have corrupted header", false);
    }

    @Test
    public void testGoodFiles() {
        goodFile(GOOD1, 1, 300);
        goodFile(GOOD2, 300, 1);
    }

    @Test
    public void testMaxSizeFile() {
        bigSizeFile(BIG);
    }

    @Test
    public void testBadFiles() {
        badFile(BAD1);
        badFile(BAD2);
        badFile(BAD3);
        badFile(BAD4);
        badFile(BAD5);
    }
}
