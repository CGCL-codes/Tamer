package com.example.nn_pruning;

import java.util.LinkedHashSet;
import com.github.wolfie.refresher.Refresher;
import com.invient.vaadin.charts.InvientCharts;
import com.invient.vaadin.charts.InvientCharts.DecimalPoint;
import com.invient.vaadin.charts.InvientCharts.PointClickEvent;
import com.invient.vaadin.charts.InvientCharts.Series;
import com.invient.vaadin.charts.InvientCharts.SeriesType;
import com.invient.vaadin.charts.InvientCharts.XYSeries;
import com.invient.vaadin.charts.InvientChartsConfig;
import com.invient.vaadin.charts.InvientChartsConfig.NumberXAxis;
import com.invient.vaadin.charts.InvientChartsConfig.NumberYAxis;
import com.invient.vaadin.charts.InvientChartsConfig.SeriesConfig;
import com.invient.vaadin.charts.InvientChartsConfig.Tooltip;
import com.invient.vaadin.charts.InvientChartsConfig.XAxis;
import com.invient.vaadin.charts.InvientChartsConfig.AxisBase.AxisTitle;
import com.invient.vaadin.charts.InvientChartsConfig.XAxisDataLabel;
import com.invient.vaadin.charts.InvientChartsConfig.YAxis;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.Action;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.ProgressIndicator;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.HeaderClickEvent;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Upload.FinishedEvent;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.Notification;

@SuppressWarnings("serial")
public class VaadinComposite extends CustomComponent {

    @AutoGenerated
    private AbsoluteLayout mainLayout;

    private TabSheet inputAndInfoTabSheet;

    @AutoGenerated
    private VerticalLayout tab1InputLayout;

    private VerticalLayout tab2ToyProblems;

    private VerticalLayout tab3PruningAlgorithm;

    private VerticalLayout tab4About;

    @AutoGenerated
    private NativeSelect numberOfRunsSelect;

    private NativeSelect numberOfRunsToySelect;

    @AutoGenerated
    private NativeSelect buildToTestSelect;

    private NativeSelect hiddenNodesSelect;

    private NativeSelect hiddenNodesToySelect;

    private NativeSelect aValueSelect;

    private NativeSelect bValueSelect;

    @AutoGenerated
    private Label label_1;

    @AutoGenerated
    private HorizontalLayout horizontalLayout_1;

    @AutoGenerated
    private Upload upload_1;

    private Button runButton;

    private Button problem1Button;

    private Button problem2Button;

    private Button problem3Button;

    Window pruuningProgressWindow;

    private Button cancelPruningButton;

    private ProgressIndicator pruningProgress;

    Window resultWindow;

    Table resultTable;

    IndexedContainer resultTableDataSource;

    Window inputWindow;

    Table inputTable;

    IndexedContainer inputTableDataSource;

    private Button undoLastChangeButton;

    private int lagValue;

    private boolean enableLagInputColumnMode;

    private boolean enableDeleteColumnMode;

    private boolean isRunable = false;

    private boolean isRunning = false;

    final Refresher refresher = new Refresher();

    pruning_logic theLogic;

    private static final String[] Nhid_selection = new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" };

    private static final String[] buildToTest_selection_text = new String[] { "25% / 75%", "50% / 50%", "75% / 25%", "80% / 20%", "90% / 10%" };

    private static final String[] numberOfRuns_selection = new String[] { "1", "3", "5", "10", "15", "20", "25", "50", "100", "500", "1000" };

    private static final String[] aAndB_selection = new String[] { "0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0" };

    InputReceiver inputreceiver = new InputReceiver();

    /**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
    public VaadinComposite(pruning_logic _theLogic) {
        theLogic = _theLogic;
        buildMainLayout();
        setCompositionRoot(mainLayout);
        upload_1.addListener(new Upload.FinishedListener() {

            public void uploadFinished(FinishedEvent event) {
                inputreceiver.processUploadedFile();
                if (inputreceiver.noError()) {
                    inputWindow = buildInputWindow(true);
                    getWindow().addWindow(inputWindow);
                } else if (inputreceiver.isCorrectShapeButContainsNonNumbners()) {
                    getWindow().showNotification("Upload failed", "The uploaded file: " + inputreceiver.getFileName() + " could not be used." + inputreceiver.getErrorMessage(), Notification.TYPE_ERROR_MESSAGE);
                    isRunable = false;
                    runButton.setEnabled(false);
                } else {
                    getWindow().showNotification("Upload failed", "The uploaded file: " + inputreceiver.getFileName() + " could not be used." + inputreceiver.getErrorMessage(), Notification.TYPE_ERROR_MESSAGE);
                    isRunable = false;
                    runButton.setEnabled(false);
                }
            }
        });
        hiddenNodesSelect.addListener(new Property.ValueChangeListener() {

            public void valueChange(ValueChangeEvent event) {
                theLogic.setNhid((int) Double.parseDouble(event.getProperty().toString()));
                hiddenNodesToySelect.setValue(Integer.toString(theLogic.getNhid()));
            }
        });
        hiddenNodesToySelect.addListener(new Property.ValueChangeListener() {

            public void valueChange(ValueChangeEvent event) {
                theLogic.setNhid((int) Double.parseDouble(event.getProperty().toString()));
                hiddenNodesSelect.setValue(Integer.toString(theLogic.getNhid()));
            }
        });
        buildToTestSelect.addListener(new Property.ValueChangeListener() {

            public void valueChange(ValueChangeEvent event) {
                theLogic.setBuildToTestRatio(0.01 * Double.parseDouble(event.getProperty().toString().substring(0, 2)));
            }
        });
        numberOfRunsSelect.addListener(new Property.ValueChangeListener() {

            public void valueChange(ValueChangeEvent event) {
                theLogic.setNumberOfRuns(Integer.parseInt(event.getProperty().toString()));
                numberOfRunsToySelect.setValue(Integer.toString(theLogic.getNumberOfRuns()));
            }
        });
        numberOfRunsToySelect.addListener(new Property.ValueChangeListener() {

            public void valueChange(ValueChangeEvent event) {
                theLogic.setNumberOfRuns(Integer.parseInt(event.getProperty().toString()));
                numberOfRunsSelect.setValue(Integer.toString(theLogic.getNumberOfRuns()));
            }
        });
        aValueSelect.addListener(new Property.ValueChangeListener() {

            public void valueChange(ValueChangeEvent event) {
                theLogic.setA(Double.parseDouble(event.getProperty().toString()));
            }
        });
        bValueSelect.addListener(new Property.ValueChangeListener() {

            public void valueChange(ValueChangeEvent event) {
                theLogic.setB(Double.parseDouble(event.getProperty().toString()));
            }
        });
        cancelPruningButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                theLogic.cancelPruning();
                (pruuningProgressWindow.getParent()).removeWindow(pruuningProgressWindow);
                isRunning = false;
                pruningProgress.setValue(0f);
                setRunButtons(true);
            }
        });
        runButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                System.out.println("run button clicked");
                if (isRunable) {
                    getWindow().addWindow(pruuningProgressWindow);
                    setRunButtons(false);
                    theLogic.do_prunings();
                    isRunning = true;
                } else {
                    getWindow().showNotification("Could not run program, try uploading a file again" + inputreceiver.getErrorMessage(), Notification.TYPE_ERROR_MESSAGE);
                }
            }
        });
        problem1Button.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                System.out.println("problem1 button clicked");
                setRunButtons(false);
                getWindow().addWindow(pruuningProgressWindow);
                theLogic.makeSampleProblem(1);
                isRunning = true;
                int testSelectStart = (int) (theLogic.getBuildToTestRatio() * 100);
                buildToTestSelect.setValue(Integer.toString(testSelectStart) + "% / " + Integer.toString(100 - testSelectStart) + "%");
            }
        });
        problem2Button.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                System.out.println("problem2 button clicked");
                setRunButtons(false);
                getWindow().addWindow(pruuningProgressWindow);
                theLogic.makeSampleProblem(2);
                isRunning = true;
                int testSelectStart = (int) (theLogic.getBuildToTestRatio() * 100);
                buildToTestSelect.setValue(Integer.toString(testSelectStart) + "% / " + Integer.toString(100 - testSelectStart) + "%");
            }
        });
        problem3Button.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                System.out.println("problem3 button clicked");
                setRunButtons(false);
                getWindow().addWindow(pruuningProgressWindow);
                theLogic.makeSampleProblem(3);
                isRunning = true;
                int testSelectStart = (int) (theLogic.getBuildToTestRatio() * 100);
                buildToTestSelect.setValue(Integer.toString(testSelectStart) + "% / " + Integer.toString(100 - testSelectStart) + "%");
            }
        });
        refresher.addListener(new Refresher.RefreshListener() {

            public void refresh(Refresher source) {
                if (isRunning) {
                    double progress = theLogic.getProgress();
                    pruningProgress.setValue(progress);
                    if (theLogic.isFinnished()) {
                        (pruuningProgressWindow.getParent()).removeWindow(pruuningProgressWindow);
                        setRunButtons(true);
                        isRunning = false;
                        resultWindow = buildResultWindow();
                        getWindow().addWindow(resultWindow);
                    }
                }
            }
        });
    }

    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
        mainLayout = new AbsoluteLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");
        mainLayout.setMargin(false);
        setWidth("100.0%");
        setHeight("100.0%");
        inputAndInfoTabSheet = buildinputAndInfoTabSheet();
        mainLayout.addComponent(inputAndInfoTabSheet);
        mainLayout.addComponent(refresher);
        pruuningProgressWindow = buildPruuningProgressWindow();
        return mainLayout;
    }

    private TabSheet buildinputAndInfoTabSheet() {
        inputAndInfoTabSheet = new TabSheet();
        inputAndInfoTabSheet.setWidth("-1px");
        inputAndInfoTabSheet.setHeight("-1px");
        tab1InputLayout = buildtab1InputLayout();
        tab1InputLayout.setSpacing(true);
        tab2ToyProblems = buildTab2ToyProblems();
        tab3PruningAlgorithm = buildTab3PruningAlgorithm();
        tab4About = buildTab4About();
        inputAndInfoTabSheet.addTab(tab1InputLayout, "Neural network pruning", null);
        inputAndInfoTabSheet.addTab(tab2ToyProblems, "Toy problems", null);
        inputAndInfoTabSheet.addTab(tab3PruningAlgorithm, "The algorithm", null);
        inputAndInfoTabSheet.addTab(tab4About, "About", null);
        return inputAndInfoTabSheet;
    }

    private VerticalLayout buildtab1InputLayout() {
        tab1InputLayout = new VerticalLayout();
        tab1InputLayout.setImmediate(false);
        tab1InputLayout.setWidth("600px");
        tab1InputLayout.setHeight("600px");
        tab1InputLayout.setMargin(true);
        Label plainText = new Label("Upload a file with the depent variable" + " in the last column and all the independent variables in the other columns." + " The file should be separated by one or two spaces between the number values e.g. a matlab file.");
        plainText.setContentMode(Label.CONTENT_TEXT);
        plainText.setHeight("25px");
        tab1InputLayout.addComponent(plainText);
        horizontalLayout_1 = buildHorizontalLayout_1();
        tab1InputLayout.addComponent(horizontalLayout_1);
        label_1 = new Label("<h3>Below this text is the settings of the pruning that can be altered:</h3>", Label.CONTENT_XHTML);
        label_1.setImmediate(false);
        label_1.setWidth("-1px");
        label_1.setHeight("-1px");
        tab1InputLayout.addComponent(label_1);
        tab1InputLayout.setComponentAlignment(label_1, Alignment.TOP_CENTER);
        hiddenNodesSelect = new NativeSelect();
        for (int i = 0; i < Nhid_selection.length; i++) {
            hiddenNodesSelect.addItem(Nhid_selection[i]);
        }
        hiddenNodesSelect.setValue(Integer.toString(theLogic.getNhid()));
        hiddenNodesSelect.setCaption("Number of hidden nodes in the neural network");
        hiddenNodesSelect.setImmediate(false);
        hiddenNodesSelect.setDescription("Number of hidden nodes in the neural network, it is typically of the same size as the number of inputs");
        hiddenNodesSelect.setWidth("-1px");
        hiddenNodesSelect.setHeight("-1px");
        hiddenNodesSelect.setNullSelectionAllowed(false);
        tab1InputLayout.addComponent(hiddenNodesSelect);
        buildToTestSelect = new NativeSelect();
        for (int i = 0; i < buildToTest_selection_text.length; i++) {
            buildToTestSelect.addItem(buildToTest_selection_text[i]);
        }
        int testSelectStart = (int) (theLogic.getBuildToTestRatio() * 100);
        buildToTestSelect.setValue(Integer.toString(testSelectStart) + "% / " + Integer.toString(100 - testSelectStart) + "%");
        buildToTestSelect.setCaption("Training data vs test data");
        buildToTestSelect.setImmediate(false);
        buildToTestSelect.setDescription("Training data vs test data should typically be 75% / 25% meaning that the training data is 3 times bigger than the test data");
        buildToTestSelect.setWidth("-1px");
        buildToTestSelect.setHeight("-1px");
        buildToTestSelect.setNullSelectionAllowed(false);
        tab1InputLayout.addComponent(buildToTestSelect);
        numberOfRunsSelect = new NativeSelect("Number of runs");
        for (int i = 0; i < numberOfRuns_selection.length; i++) {
            numberOfRunsSelect.addItem(numberOfRuns_selection[i]);
        }
        numberOfRunsSelect.setValue(Integer.toString(theLogic.getNumberOfRuns()));
        numberOfRunsSelect.setImmediate(true);
        numberOfRunsSelect.setDescription("Number of pruning runs that should be performed");
        numberOfRunsSelect.setWidth("-1px");
        numberOfRunsSelect.setHeight("-1px");
        numberOfRunsSelect.setNullSelectionAllowed(false);
        tab1InputLayout.addComponent(numberOfRunsSelect);
        runButton = new Button("RUN");
        runButton.setDescription("Run the pruning algorithm");
        runButton.setEnabled(false);
        tab1InputLayout.addComponent(runButton);
        return tab1InputLayout;
    }

    private VerticalLayout buildTab2ToyProblems() {
        tab2ToyProblems = new VerticalLayout();
        tab2ToyProblems.setHeight("600px");
        tab2ToyProblems.setWidth("600px");
        tab2ToyProblems.setMargin(true);
        Label plainText = new Label("Here are three toy problems to get a grip of what the neural network pruning algorithm does." + " All problems contain 100 observations of which 75 are used for training and 25 for testing." + " You can edit the variables a and b, and chose between three different problems.");
        plainText.setContentMode(Label.CONTENT_TEXT);
        plainText.setHeight("-1px");
        plainText.setWidth("400px");
        tab2ToyProblems.addComponent(plainText);
        HorizontalLayout textAndButtonsLayout = new HorizontalLayout();
        VerticalLayout textLayout = new VerticalLayout();
        VerticalLayout buttonsLayout = new VerticalLayout();
        hiddenNodesToySelect = new NativeSelect();
        for (int i = 0; i < Nhid_selection.length; i++) {
            hiddenNodesToySelect.addItem(Nhid_selection[i]);
        }
        hiddenNodesToySelect.setValue(Integer.toString(theLogic.getNhid()));
        hiddenNodesToySelect.setImmediate(false);
        hiddenNodesToySelect.setDescription("Number of hidden nodes in the neural network, it is typically of the same size as the number of inputs");
        hiddenNodesToySelect.setWidth("-1px");
        hiddenNodesToySelect.setHeight("-1px");
        hiddenNodesToySelect.setNullSelectionAllowed(false);
        Label labelForHiddenNodes = new Label("<b>The amount of hidden nodes in the neural network:</b>", Label.CONTENT_XHTML);
        textLayout.addComponent(labelForHiddenNodes);
        buttonsLayout.addComponent(hiddenNodesToySelect);
        numberOfRunsToySelect = new NativeSelect();
        for (int i = 0; i < numberOfRuns_selection.length; i++) {
            numberOfRunsToySelect.addItem(numberOfRuns_selection[i]);
        }
        numberOfRunsToySelect.setValue(Integer.toString(theLogic.getNumberOfRuns()));
        numberOfRunsToySelect.setImmediate(true);
        numberOfRunsToySelect.setDescription("Number of pruning runs that should be performed");
        numberOfRunsToySelect.setWidth("-1px");
        numberOfRunsToySelect.setHeight("-1px");
        numberOfRunsToySelect.setNullSelectionAllowed(false);
        Label labelForNumberOfRuns = new Label("<b>Number of runs:</b>", Label.CONTENT_XHTML);
        textLayout.addComponent(labelForNumberOfRuns);
        buttonsLayout.addComponent(numberOfRunsToySelect);
        aValueSelect = new NativeSelect();
        for (int i = 0; i < aAndB_selection.length; i++) {
            aValueSelect.addItem(aAndB_selection[i]);
        }
        aValueSelect.setValue(Double.toString(theLogic.getA()));
        aValueSelect.setImmediate(true);
        aValueSelect.setDescription("The value a which is part of the toy problems");
        aValueSelect.setWidth("-1px");
        aValueSelect.setHeight("-1px");
        aValueSelect.setNullSelectionAllowed(false);
        Label labelForA = new Label("<b>The value of a:</b>", Label.CONTENT_XHTML);
        textLayout.addComponent(labelForA);
        buttonsLayout.addComponent(aValueSelect);
        bValueSelect = new NativeSelect();
        for (int i = 0; i < aAndB_selection.length; i++) {
            bValueSelect.addItem(aAndB_selection[i]);
        }
        bValueSelect.setValue(Double.toString(theLogic.getB()));
        bValueSelect.setImmediate(true);
        bValueSelect.setDescription("The value b which is part of the toy problems");
        bValueSelect.setWidth("-1px");
        bValueSelect.setHeight("-1px");
        bValueSelect.setNullSelectionAllowed(false);
        Label labelForB = new Label("<b>The value of b:</b>", Label.CONTENT_XHTML);
        textLayout.addComponent(labelForB);
        buttonsLayout.addComponent(bValueSelect);
        textAndButtonsLayout.addComponent(textLayout);
        textAndButtonsLayout.addComponent(buttonsLayout);
        textAndButtonsLayout.setSpacing(true);
        tab2ToyProblems.addComponent(textAndButtonsLayout);
        Embedded image1 = new Embedded("Problem 1: ", new ThemeResource("img/problem1.png"));
        image1.setMimeType("Embedded.TYPE_IMAGE");
        tab2ToyProblems.addComponent(image1);
        problem1Button = new Button("RUN PROBLEM1");
        problem1Button.setDescription("Run the pruning algorithm on the first problem");
        tab2ToyProblems.addComponent(problem1Button);
        Embedded image2 = new Embedded("Problem 2: ", new ThemeResource("img/problem2.png"));
        image2.setMimeType("Embedded.TYPE_IMAGE");
        tab2ToyProblems.addComponent(image2);
        problem2Button = new Button("RUN PROBLEM2");
        problem2Button.setDescription("Run the pruning algorithm on the second problem");
        tab2ToyProblems.addComponent(problem2Button);
        Embedded image3 = new Embedded("Problem 3: ", new ThemeResource("img/problem3.png"));
        image3.setMimeType("Embedded.TYPE_IMAGE");
        tab2ToyProblems.addComponent(image3);
        problem3Button = new Button("RUN PROBLEM3");
        problem3Button.setDescription("Run the pruning algorithm on the third problem");
        tab2ToyProblems.addComponent(problem3Button);
        return tab2ToyProblems;
    }

    private VerticalLayout buildTab3PruningAlgorithm() {
        tab3PruningAlgorithm = new VerticalLayout();
        tab3PruningAlgorithm.setHeight("600px");
        tab3PruningAlgorithm.setWidth("600px");
        tab3PruningAlgorithm.setMargin(true);
        Embedded image = new Embedded("The Neural Network Pruning algorithm: ", new ThemeResource("img/Algorithm.png"));
        image.setMimeType("Embedded.TYPE_IMAGE");
        tab3PruningAlgorithm.addComponent(image);
        return tab3PruningAlgorithm;
    }

    private VerticalLayout buildTab4About() {
        tab4About = new VerticalLayout();
        tab4About.setHeight("600px");
        tab4About.setWidth("600px");
        tab4About.setMargin(true);
        Label plainText = new Label("This program is created by Oskar �stman." + " \nIt is based on a algorithm described by Henrik Sax�n and Frank Petersson in:" + "\n\nSax�n, H. and F. Pettersson" + "\nMethod for the selection of inputs and structure of feedforward neural networks" + "\nComputers & Chemical Engineering 30 (2006) 1038-1045");
        plainText.setContentMode(Label.CONTENT_PREFORMATTED);
        plainText.setHeight("25px");
        tab4About.addComponent(plainText);
        return tab4About;
    }

    @AutoGenerated
    private Window buildResultWindow() {
        resultWindow = new Window("Result window");
        resultWindow.setPositionX(100);
        resultWindow.setPositionY(150);
        VerticalLayout layout = (VerticalLayout) resultWindow.getContent();
        layout.setMargin(true);
        layout.setSpacing(true);
        layout.setSizeUndefined();
        InvientChartsConfig chartConfig = new InvientChartsConfig();
        chartConfig.getGeneralChartConfig().setType(SeriesType.LINE);
        chartConfig.getTitle().setText("Chart showing the pruning errors");
        NumberYAxis yAxis = new NumberYAxis();
        yAxis.setTitle(new AxisTitle("RMSE (Root Mean Square Error)"));
        LinkedHashSet<YAxis> yAxesSet = new LinkedHashSet<InvientChartsConfig.YAxis>();
        yAxesSet.add(yAxis);
        chartConfig.setYAxes(yAxesSet);
        NumberXAxis xAxis = new NumberXAxis();
        xAxis.setReversed(true);
        xAxis.setTitle(new AxisTitle("Remaining lower-layer weights"));
        xAxis.setLabel(new XAxisDataLabel());
        xAxis.setMaxPadding(0.05);
        xAxis.setShowLastLabel(true);
        xAxis.setAllowDecimals(false);
        LinkedHashSet<XAxis> xAxesSet = new LinkedHashSet<InvientChartsConfig.XAxis>();
        xAxesSet.add(xAxis);
        chartConfig.setXAxes(xAxesSet);
        Tooltip tooltip = new Tooltip();
        tooltip.setFormatterJsFunc("function() {" + " return '' + this.series.name +': '+ this.y +''; " + "}");
        chartConfig.setTooltip(tooltip);
        chartConfig.getCredit().setEnabled(false);
        InvientCharts invChart;
        XYSeries seriesTestData = null;
        XYSeries seriesBuildData = null;
        invChart = new InvientCharts(chartConfig);
        SeriesConfig testErrorConfig = new SeriesConfig();
        invChart.removeSeries("Test error");
        seriesTestData = new XYSeries("Test error", testErrorConfig);
        seriesTestData.setSeriesPoints(getPoints(seriesTestData, theLogic.getTotal_all_err_test()));
        invChart.addSeries(seriesTestData);
        SeriesConfig buildErrorConfig = new SeriesConfig();
        invChart.removeSeries("Build error");
        seriesBuildData = new XYSeries("Build error", buildErrorConfig);
        seriesBuildData.setSeriesPoints(getPoints(seriesBuildData, theLogic.getTotal_all_err()));
        invChart.addSeries(seriesBuildData);
        invChart.addListener(new InvientCharts.PointClickListener() {

            public void pointClick(PointClickEvent pointClickEvent) {
                getApplication().getMainWindow().showNotification("Weights left: " + ((Double) pointClickEvent.getPoint().getX()).intValue() + ", RMSE : " + (Double) pointClickEvent.getPoint().getY());
            }
        });
        resultWindow.addComponent(invChart);
        final NativeSelect topWeightsFrequencySelect = new NativeSelect("Number of last input nodes used in determining the importance");
        for (int i = 2; i < theLogic.getNhid() * theLogic.getNin(); i++) {
            topWeightsFrequencySelect.addItem(Integer.toString(i));
        }
        topWeightsFrequencySelect.setValue("5");
        topWeightsFrequencySelect.setImmediate(true);
        topWeightsFrequencySelect.setDescription("Set the number of non-zero weights left (same weights that are plotted) from which the input variables importance should be determined.");
        topWeightsFrequencySelect.setWidth("-1px");
        topWeightsFrequencySelect.setHeight("-1px");
        topWeightsFrequencySelect.setNullSelectionAllowed(false);
        resultWindow.addComponent(topWeightsFrequencySelect);
        topWeightsFrequencySelect.addListener(new Property.ValueChangeListener() {

            public void valueChange(ValueChangeEvent event) {
                updateResultTable(Integer.parseInt(event.getProperty().toString()));
            }
        });
        Integer[] resultList = theLogic.getBestInputNodes(5);
        resultTableDataSource = new IndexedContainer();
        resultTableDataSource.addContainerProperty("Variable(Column)", Integer.class, 0);
        resultTableDataSource.addContainerProperty("Importance", Integer.class, 0);
        for (Integer i = 0; i < resultList.length; i++) {
            Object item = resultTableDataSource.addItem();
            resultTableDataSource.getContainerProperty(item, "Variable(Column)").setValue(i + 1);
            resultTableDataSource.getContainerProperty(item, "Importance").setValue(resultList[i]);
        }
        resultTable = new Table("Table for the results", resultTableDataSource);
        resultTable.setPageLength(resultList.length);
        resultTable.setWidth("600px");
        resultWindow.addComponent(resultTable);
        return resultWindow;
    }

    @AutoGenerated
    private HorizontalLayout buildHorizontalLayout_1() {
        horizontalLayout_1 = new HorizontalLayout();
        horizontalLayout_1.setImmediate(false);
        horizontalLayout_1.setWidth("-1px");
        horizontalLayout_1.setHeight("-1px");
        horizontalLayout_1.setMargin(false);
        upload_1 = new Upload("", inputreceiver);
        upload_1.setImmediate(true);
        upload_1.setWidth("-1px");
        upload_1.setHeight("-1px");
        horizontalLayout_1.addComponent(upload_1);
        return horizontalLayout_1;
    }

    private Window buildPruuningProgressWindow() {
        pruuningProgressWindow = new Window();
        pruuningProgressWindow.setClosable(false);
        pruuningProgressWindow.setPositionX(150);
        pruuningProgressWindow.setPositionY(200);
        VerticalLayout layout = (VerticalLayout) pruuningProgressWindow.getContent();
        layout.setMargin(true);
        layout.setSpacing(true);
        layout.setSizeUndefined();
        Label cancel_text = new Label("<h3>Pruning in progress</h3>", Label.CONTENT_XHTML);
        pruuningProgressWindow.addComponent(cancel_text);
        pruningProgress = new ProgressIndicator();
        pruningProgress.setIndeterminate(false);
        pruningProgress.setEnabled(false);
        pruuningProgressWindow.addComponent(pruningProgress);
        cancelPruningButton = new Button("Cancel");
        cancelPruningButton.setDescription("Cancel the pruning being run");
        pruuningProgressWindow.addComponent(cancelPruningButton);
        return pruuningProgressWindow;
    }

    private Window buildInputWindow(boolean isFullyWorking) {
        inputWindow = new Window();
        inputWindow.setClosable(false);
        inputWindow.setPositionX(150);
        inputWindow.setPositionY(200);
        VerticalLayout layout = (VerticalLayout) inputWindow.getContent();
        layout.setMargin(true);
        layout.setSpacing(true);
        layout.setSizeUndefined();
        final Action ACTION_DELETE = new Action("Delete row");
        final Action[] ACTIONS_AVAILABLE = new Action[] { ACTION_DELETE };
        enableLagInputColumnMode = false;
        enableDeleteColumnMode = false;
        inputTableDataSource = new IndexedContainer();
        if (isFullyWorking) {
            Label uploadSuccess = new Label("<h3>The uploaded text consists of viable" + "\n numbers, press to \"ok\" to accept the upload</h3>", Label.CONTENT_XHTML);
            inputWindow.addComponent(uploadSuccess);
            populateInputTableDataSource(true);
        } else {
        }
        inputTable = new Table("Uploaded input data", inputTableDataSource);
        int pageLength = inputreceiver.getRows();
        if (pageLength > 10) pageLength = 10;
        inputTable.setPageLength(pageLength);
        inputTable.setWidth("600px");
        inputTable.setSortDisabled(true);
        inputTable.setSelectable(true);
        inputTable.addActionHandler(new Action.Handler() {

            public Action[] getActions(Object target, Object sender) {
                return ACTIONS_AVAILABLE;
            }

            public void handleAction(Action action, Object sender, Object target) {
                if (ACTION_DELETE == action) {
                    Window deleteOneRowWindow = buildDeleteOneRowWindow(Integer.parseInt(target.toString()) - Integer.parseInt(inputTable.firstItemId().toString()));
                    getWindow().addWindow(deleteOneRowWindow);
                }
            }
        });
        inputTable.addListener(new Table.HeaderClickListener() {

            public void headerClick(HeaderClickEvent event) {
                if (enableDeleteColumnMode) {
                    enableDeleteColumnMode = false;
                    Window deleteOneColumnWindow = buildDeleteOneColumnWindow(Integer.parseInt(event.getPropertyId().toString()));
                    getWindow().addWindow(deleteOneColumnWindow);
                }
                if (enableLagInputColumnMode) {
                    enableLagInputColumnMode = false;
                    Window lagOneColumnWindow = buildLagOneColumnWindow(Integer.parseInt(event.getPropertyId().toString()));
                    getWindow().addWindow(lagOneColumnWindow);
                }
            }
        });
        Button deleteInputButton = new Button("Delete a input column", new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                enableDeleteColumnMode = true;
                enableLagInputColumnMode = false;
            }
        });
        deleteInputButton.setDescription("After clicking this button one can chose to delete inputs columns");
        final Button lagInputColButton = new Button("Lag individual input columns");
        lagInputColButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                enableLagInputColumnMode = true;
                enableDeleteColumnMode = false;
            }
        });
        lagInputColButton.setDescription("After clicking this button one can chose to lag individual input columns by clicking their headers");
        final Button lagAllInputColButton = new Button("Lag all input columns");
        lagAllInputColButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                Window lagAllColumnsWindow = buildLagAllColumnsWindow();
                getWindow().addWindow(lagAllColumnsWindow);
            }
        });
        lagAllInputColButton.setDescription("After clicking this button one lag all input columns from a pop up window");
        HorizontalLayout horizontalButtonLayout = new HorizontalLayout();
        horizontalButtonLayout.setSpacing(true);
        horizontalButtonLayout.setWidth("100%");
        horizontalButtonLayout.addComponent(deleteInputButton);
        horizontalButtonLayout.setComponentAlignment(deleteInputButton, Alignment.BOTTOM_LEFT);
        horizontalButtonLayout.addComponent(lagInputColButton);
        horizontalButtonLayout.setComponentAlignment(lagInputColButton, Alignment.BOTTOM_CENTER);
        horizontalButtonLayout.addComponent(lagAllInputColButton);
        horizontalButtonLayout.setComponentAlignment(lagAllInputColButton, Alignment.BOTTOM_RIGHT);
        inputWindow.addComponent(horizontalButtonLayout);
        undoLastChangeButton = new Button("Undo last action");
        undoLastChangeButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                undoLastChangeButton.setEnabled(false);
                inputreceiver.undoLastChange();
                inputTable.removeAllItems();
                populateInputTableDataSource(false);
            }
        });
        undoLastChangeButton.setEnabled(false);
        undoLastChangeButton.setDescription("Clicking this button undo the last change made to the data");
        Button saveUploadButton = new Button("Upload the data", new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                if (inputreceiver.getColumns() > 1 && inputreceiver.getRows() > 1) {
                    isRunable = true;
                    runButton.setEnabled(true);
                    theLogic.setInputMatrix(inputreceiver.getInMatrix(), inputreceiver.getRows(), inputreceiver.getColumns());
                } else {
                    getWindow().showNotification("Cannot use the data since it has less than two columns or less than two rows", Notification.TYPE_ERROR_MESSAGE);
                }
                (inputWindow.getParent()).removeWindow(inputWindow);
            }
        });
        saveUploadButton.setDescription("Clicking this button accepts the data inside the table");
        Button cancelWindowButton = new Button("Discard the data", new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                (inputWindow.getParent()).removeWindow(inputWindow);
            }
        });
        cancelWindowButton.setDescription("Clicking this button discards the data in the model and does not upload anything to the logic");
        inputWindow.addComponent(inputTable);
        HorizontalLayout secondHorizontalButtonLayout = new HorizontalLayout();
        secondHorizontalButtonLayout.setSpacing(true);
        secondHorizontalButtonLayout.setWidth("100%");
        secondHorizontalButtonLayout.addComponent(undoLastChangeButton);
        secondHorizontalButtonLayout.setComponentAlignment(undoLastChangeButton, Alignment.BOTTOM_LEFT);
        secondHorizontalButtonLayout.addComponent(saveUploadButton);
        secondHorizontalButtonLayout.setComponentAlignment(saveUploadButton, Alignment.BOTTOM_CENTER);
        secondHorizontalButtonLayout.addComponent(cancelWindowButton);
        secondHorizontalButtonLayout.setComponentAlignment(cancelWindowButton, Alignment.BOTTOM_RIGHT);
        inputWindow.addComponent(secondHorizontalButtonLayout);
        return inputWindow;
    }

    private Window buildLagAllColumnsWindow() {
        final Window lagAllColumnsWindow = new Window("Lag all inputs");
        final Button contentLagButton = new Button();
        lagValue = 0;
        contentLagButton.setCaption("Lag all input data " + lagValue + " time steps.");
        lagAllColumnsWindow.setClosable(false);
        lagAllColumnsWindow.setPositionX(150);
        lagAllColumnsWindow.setPositionY(200);
        lagAllColumnsWindow.setModal(true);
        VerticalLayout layout = (VerticalLayout) lagAllColumnsWindow.getContent();
        layout.setMargin(true);
        layout.setSpacing(true);
        layout.setSizeUndefined();
        final Button minusButton = new Button("-");
        minusButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                lagValue--;
                if (lagValue < 0) lagValue = 0;
                contentLagButton.setCaption("Lag all input data " + lagValue + " time steps.");
            }
        });
        final Button plusButton = new Button("+");
        plusButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                lagValue++;
                if (lagValue > inputreceiver.getRows() / 2) lagValue = inputreceiver.getRows() / 2;
                contentLagButton.setCaption("Lag all input data " + lagValue + " time steps.");
            }
        });
        contentLagButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                inputreceiver.lagAllInput(lagValue);
                (lagAllColumnsWindow.getParent()).removeWindow(lagAllColumnsWindow);
                inputTable.removeAllItems();
                populateInputTableDataSource(false);
                undoLastChangeButton.setEnabled(true);
            }
        });
        VerticalLayout buttonsLayout = new VerticalLayout();
        buttonsLayout.addComponent(minusButton);
        buttonsLayout.addComponent(plusButton);
        buttonsLayout.setSpacing(true);
        HorizontalLayout entireLocalLayout = new HorizontalLayout();
        entireLocalLayout.addComponent(buttonsLayout);
        entireLocalLayout.addComponent(contentLagButton);
        entireLocalLayout.setComponentAlignment(contentLagButton, Alignment.MIDDLE_CENTER);
        lagAllColumnsWindow.addComponent(entireLocalLayout);
        return lagAllColumnsWindow;
    }

    private Window buildLagOneColumnWindow(final int chosenColumn) {
        final Window lagOneColumnWindow = new Window("Lag column(variable) " + chosenColumn);
        final Button contentLagButton = new Button();
        lagValue = 0;
        contentLagButton.setCaption("Lag column number " + chosenColumn + " " + lagValue + " time steps.");
        lagOneColumnWindow.setClosable(false);
        lagOneColumnWindow.setPositionX(160);
        lagOneColumnWindow.setPositionY(200);
        lagOneColumnWindow.setModal(true);
        VerticalLayout layout = (VerticalLayout) lagOneColumnWindow.getContent();
        layout.setMargin(true);
        layout.setSpacing(true);
        layout.setSizeUndefined();
        final Button minusButton = new Button("-");
        minusButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                lagValue--;
                if (lagValue < 0) lagValue = 0;
                contentLagButton.setCaption("Lag column number " + chosenColumn + " " + lagValue + " time steps.");
            }
        });
        final Button plusButton = new Button("+");
        plusButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                lagValue++;
                if (lagValue > inputreceiver.getRows() / 2) lagValue = inputreceiver.getRows() / 2;
                contentLagButton.setCaption("Lag column number " + chosenColumn + " " + lagValue + " time steps.");
            }
        });
        contentLagButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                inputreceiver.lagOneInput(lagValue, chosenColumn - 1);
                (lagOneColumnWindow.getParent()).removeWindow(lagOneColumnWindow);
                inputTable.removeAllItems();
                populateInputTableDataSource(false);
                undoLastChangeButton.setEnabled(true);
            }
        });
        VerticalLayout buttonsLayout = new VerticalLayout();
        buttonsLayout.addComponent(minusButton);
        buttonsLayout.addComponent(plusButton);
        buttonsLayout.setSpacing(true);
        HorizontalLayout entireLocalLayout = new HorizontalLayout();
        entireLocalLayout.addComponent(buttonsLayout);
        entireLocalLayout.addComponent(contentLagButton);
        entireLocalLayout.setComponentAlignment(contentLagButton, Alignment.MIDDLE_CENTER);
        lagOneColumnWindow.addComponent(entireLocalLayout);
        return lagOneColumnWindow;
    }

    private Window buildDeleteOneColumnWindow(final int chosenColumn) {
        final Window deleteOneColumnWindow = new Window("Delete column: " + chosenColumn);
        final Label contentDeleteText = new Label("Do you want to delete column: " + chosenColumn);
        deleteOneColumnWindow.setClosable(false);
        deleteOneColumnWindow.setPositionX(160);
        deleteOneColumnWindow.setPositionY(200);
        deleteOneColumnWindow.setModal(true);
        VerticalLayout layout = (VerticalLayout) deleteOneColumnWindow.getContent();
        layout.setMargin(true);
        layout.setSpacing(true);
        layout.setSizeUndefined();
        final Button yesButton = new Button("YES");
        yesButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                inputreceiver.deleteColumn(chosenColumn);
                (deleteOneColumnWindow.getParent()).removeWindow(deleteOneColumnWindow);
                inputTable.removeAllItems();
                populateInputTableDataSource(false);
                undoLastChangeButton.setEnabled(true);
            }
        });
        final Button noButton = new Button("NO");
        noButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                (deleteOneColumnWindow.getParent()).removeWindow(deleteOneColumnWindow);
            }
        });
        HorizontalLayout buttonsLayout = new HorizontalLayout();
        buttonsLayout.addComponent(yesButton);
        buttonsLayout.addComponent(noButton);
        buttonsLayout.setSpacing(true);
        deleteOneColumnWindow.addComponent(contentDeleteText);
        deleteOneColumnWindow.addComponent(buttonsLayout);
        return deleteOneColumnWindow;
    }

    private Window buildDeleteOneRowWindow(final int chosenRow) {
        final Window deleteOneRowWindow = new Window("Delete row: " + (chosenRow + 1));
        final Label contentDeleteText = new Label("Do you want to delete row: " + (chosenRow + 1));
        deleteOneRowWindow.setClosable(false);
        deleteOneRowWindow.setPositionX(160);
        deleteOneRowWindow.setPositionY(200);
        deleteOneRowWindow.setModal(true);
        VerticalLayout layout = (VerticalLayout) deleteOneRowWindow.getContent();
        layout.setMargin(true);
        layout.setSpacing(true);
        layout.setSizeUndefined();
        final Button yesButton = new Button("YES");
        yesButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                inputreceiver.deleteRow(chosenRow);
                (deleteOneRowWindow.getParent()).removeWindow(deleteOneRowWindow);
                populateInputTableDataSource(false);
                undoLastChangeButton.setEnabled(true);
            }
        });
        final Button noButton = new Button("NO");
        noButton.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                (deleteOneRowWindow.getParent()).removeWindow(deleteOneRowWindow);
            }
        });
        HorizontalLayout buttonsLayout = new HorizontalLayout();
        buttonsLayout.addComponent(yesButton);
        buttonsLayout.addComponent(noButton);
        buttonsLayout.setSpacing(true);
        deleteOneRowWindow.addComponent(contentDeleteText);
        deleteOneRowWindow.addComponent(buttonsLayout);
        return deleteOneRowWindow;
    }

    private static LinkedHashSet<DecimalPoint> getPoints(Series series, double... values) {
        LinkedHashSet<DecimalPoint> points = new LinkedHashSet<DecimalPoint>();
        int number = 1;
        for (double value : values) {
            points.add(new DecimalPoint(series, number, value));
            number++;
        }
        return points;
    }

    private void setRunButtons(boolean buttonEnabled) {
        if (isRunable | !buttonEnabled) runButton.setEnabled(buttonEnabled);
        problem1Button.setEnabled(buttonEnabled);
        problem2Button.setEnabled(buttonEnabled);
        problem3Button.setEnabled(buttonEnabled);
    }

    private void updateResultTable(Integer newValue) {
        Integer[] resultList = theLogic.getBestInputNodes(newValue);
        resultTableDataSource.removeAllItems();
        resultTableDataSource.addContainerProperty("Variable(Column)", Integer.class, 0);
        resultTableDataSource.addContainerProperty("Importance", Integer.class, 0);
        for (Integer i = 0; i < resultList.length; i++) {
            Object item = resultTableDataSource.addItem();
            resultTableDataSource.getContainerProperty(item, "Variable(Column)").setValue(i + 1);
            resultTableDataSource.getContainerProperty(item, "Importance").setValue(resultList[i]);
        }
        resultTable.setPageLength(resultList.length);
        resultTable.setWidth("600px");
    }

    private void populateInputTableDataSource(boolean first) {
        double[][] inputMatrix = inputreceiver.getInMatrix();
        inputTableDataSource.removeAllItems();
        System.out.print("number of columns: " + inputreceiver.getColumns() + " ");
        for (int i = 0; i < inputreceiver.getColumns(); i++) {
            inputTableDataSource.addContainerProperty(Integer.toString(i + 1), Double.class, -1);
        }
        for (Integer i = 0; i < inputreceiver.getRows(); i++) {
            Object item = inputTableDataSource.addItem();
            for (int j = 0; j < inputreceiver.getColumns(); j++) {
                inputTableDataSource.getContainerProperty(item, Integer.toString(j + 1)).setValue(inputMatrix[i][j]);
            }
        }
    }
}
