package org.simconomy.simkart.hibernate;

import java.util.Date;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Customers generated by hbm2java
 */
@Entity
@Table(name = "customers", catalog = "konakart", uniqueConstraints = {  })
public class Customers implements java.io.Serializable {

    private int customersId;

    private char customersGender;

    private String customersFirstname;

    private String customersLastname;

    private Date customersDob;

    private String customersEmailAddress;

    private AddressBook customersDefaultAddress;

    private String customersTelephone;

    private String customersFax;

    private String customersPassword;

    private Character customersNewsletter;

    private String custom1;

    private String custom2;

    private String custom3;

    private String custom4;

    private String custom5;

    private Integer customersType;

    private Integer customersEnabled;

    private Integer customersGroupId;

    private List<AddressBook> addressBooks = null;

    private List<CustomersBasket> customersBaskets = null;

    private List<CustomersBasketAttributes> customersBasketAttributes = null;

    private List<IpnHistory> ipnHistories = null;

    private List<Orders> orders = null;

    private List<ProductsNotifications> productsNotifications = null;

    /** default constructor */
    public Customers() {
    }

    /** minimal constructor */
    public Customers(int customersId, char customersGender, String customersFirstname, String customersLastname, Date customersDob, String customersEmailAddress, AddressBook customersDefaultAddress, String customersTelephone, String customersPassword) {
        this.customersId = customersId;
        this.customersGender = customersGender;
        this.customersFirstname = customersFirstname;
        this.customersLastname = customersLastname;
        this.customersDob = customersDob;
        this.customersEmailAddress = customersEmailAddress;
        this.customersDefaultAddress = customersDefaultAddress;
        this.customersTelephone = customersTelephone;
        this.customersPassword = customersPassword;
    }

    /** full constructor */
    public Customers(int customersId, char customersGender, String customersFirstname, String customersLastname, Date customersDob, String customersEmailAddress, AddressBook customersDefaultAddress, String customersTelephone, String customersFax, String customersPassword, Character customersNewsletter, String custom1, String custom2, String custom3, String custom4, String custom5, Integer customersType, Integer customersEnabled, Integer customersGroupId) {
        this.customersId = customersId;
        this.customersGender = customersGender;
        this.customersFirstname = customersFirstname;
        this.customersLastname = customersLastname;
        this.customersDob = customersDob;
        this.customersEmailAddress = customersEmailAddress;
        this.customersDefaultAddress = customersDefaultAddress;
        this.customersTelephone = customersTelephone;
        this.customersFax = customersFax;
        this.customersPassword = customersPassword;
        this.customersNewsletter = customersNewsletter;
        this.custom1 = custom1;
        this.custom2 = custom2;
        this.custom3 = custom3;
        this.custom4 = custom4;
        this.custom5 = custom5;
        this.customersType = customersType;
        this.customersEnabled = customersEnabled;
        this.customersGroupId = customersGroupId;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "customers_id", unique = true, nullable = false, insertable = true, updatable = true)
    public int getCustomersId() {
        return this.customersId;
    }

    public void setCustomersId(int customersId) {
        this.customersId = customersId;
    }

    @Column(name = "customers_gender", unique = false, nullable = false, insertable = true, updatable = true, length = 1)
    public char getCustomersGender() {
        return this.customersGender;
    }

    public void setCustomersGender(char customersGender) {
        this.customersGender = customersGender;
    }

    @Column(name = "customers_firstname", unique = false, nullable = false, insertable = true, updatable = true, length = 32)
    public String getCustomersFirstname() {
        return this.customersFirstname;
    }

    public void setCustomersFirstname(String customersFirstname) {
        this.customersFirstname = customersFirstname;
    }

    @Column(name = "customers_lastname", unique = false, nullable = false, insertable = true, updatable = true, length = 32)
    public String getCustomersLastname() {
        return this.customersLastname;
    }

    public void setCustomersLastname(String customersLastname) {
        this.customersLastname = customersLastname;
    }

    @Column(name = "customers_dob", unique = false, nullable = false, insertable = true, updatable = true, length = 0)
    public Date getCustomersDob() {
        return this.customersDob;
    }

    public void setCustomersDob(Date customersDob) {
        this.customersDob = customersDob;
    }

    @Column(name = "customers_email_address", unique = false, nullable = false, insertable = true, updatable = true, length = 96)
    public String getCustomersEmailAddress() {
        return this.customersEmailAddress;
    }

    public void setCustomersEmailAddress(String customersEmailAddress) {
        this.customersEmailAddress = customersEmailAddress;
    }

    @Column(name = "customers_default_address_id")
    @ManyToOne(optional = true, fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    public AddressBook getCustomersDefaultAddress() {
        return this.customersDefaultAddress;
    }

    public void setCustomersDefaultAddress(AddressBook customersDefaultAddress) {
        this.customersDefaultAddress = customersDefaultAddress;
    }

    @Column(name = "customers_telephone", unique = false, nullable = false, insertable = true, updatable = true, length = 32)
    public String getCustomersTelephone() {
        return this.customersTelephone;
    }

    public void setCustomersTelephone(String customersTelephone) {
        this.customersTelephone = customersTelephone;
    }

    @Column(name = "customers_fax", unique = false, nullable = true, insertable = true, updatable = true, length = 32)
    public String getCustomersFax() {
        return this.customersFax;
    }

    public void setCustomersFax(String customersFax) {
        this.customersFax = customersFax;
    }

    @Column(name = "customers_password", unique = false, nullable = false, insertable = true, updatable = true, length = 40)
    public String getCustomersPassword() {
        return this.customersPassword;
    }

    public void setCustomersPassword(String customersPassword) {
        this.customersPassword = customersPassword;
    }

    @Column(name = "customers_newsletter", unique = false, nullable = true, insertable = true, updatable = true, length = 1)
    public Character getCustomersNewsletter() {
        return this.customersNewsletter;
    }

    public void setCustomersNewsletter(Character customersNewsletter) {
        this.customersNewsletter = customersNewsletter;
    }

    @Column(name = "custom1", unique = false, nullable = true, insertable = true, updatable = true, length = 128)
    public String getCustom1() {
        return this.custom1;
    }

    public void setCustom1(String custom1) {
        this.custom1 = custom1;
    }

    @Column(name = "custom2", unique = false, nullable = true, insertable = true, updatable = true, length = 128)
    public String getCustom2() {
        return this.custom2;
    }

    public void setCustom2(String custom2) {
        this.custom2 = custom2;
    }

    @Column(name = "custom3", unique = false, nullable = true, insertable = true, updatable = true, length = 128)
    public String getCustom3() {
        return this.custom3;
    }

    public void setCustom3(String custom3) {
        this.custom3 = custom3;
    }

    @Column(name = "custom4", unique = false, nullable = true, insertable = true, updatable = true, length = 128)
    public String getCustom4() {
        return this.custom4;
    }

    public void setCustom4(String custom4) {
        this.custom4 = custom4;
    }

    @Column(name = "custom5", unique = false, nullable = true, insertable = true, updatable = true, length = 128)
    public String getCustom5() {
        return this.custom5;
    }

    public void setCustom5(String custom5) {
        this.custom5 = custom5;
    }

    @Column(name = "customers_type", unique = false, nullable = true, insertable = true, updatable = true)
    public Integer getCustomersType() {
        return this.customersType;
    }

    public void setCustomersType(Integer customersType) {
        this.customersType = customersType;
    }

    @Column(name = "customers_enabled", unique = false, nullable = true, insertable = true, updatable = true)
    public Integer getCustomersEnabled() {
        return this.customersEnabled;
    }

    public void setCustomersEnabled(Integer customersEnabled) {
        this.customersEnabled = customersEnabled;
    }

    @Column(name = "customers_group_id", unique = false, nullable = true, insertable = true, updatable = true)
    public Integer getCustomersGroupId() {
        return this.customersGroupId;
    }

    public void setCustomersGroupId(Integer customersGroupId) {
        this.customersGroupId = customersGroupId;
    }

    /**
     * @todo add comment for javadoc
     * @generated
     */
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    public List<AddressBook> getAddressBooks() {
        if (this.addressBooks == null) {
            this.addressBooks = new java.util.ArrayList<AddressBook>();
        }
        return addressBooks;
    }

    /** @generated */
    public void setAddressBooks(final List<AddressBook> addressBooks) {
        this.addressBooks = addressBooks;
    }

    /**
     * Associate Definition with AddressBook
     *
     * @generated
     */
    public void addAddressBook(AddressBook addressBook) {
        if (addressBook == null) return;
        getAddressBooks().add(addressBook);
        addressBook.setCustomers(this);
    }

    /**
     * Unassociate Definition from AddressBook
     *
     * @generated
     */
    public void removeAddressBook(AddressBook addressBook) {
        if (addressBook == null) return;
        getAddressBooks().remove(addressBook);
        addressBook.setCustomers(null);
    }

    /**
     * @generated
     */
    public void removeAllAddressBooks() {
        List<AddressBook> remove = new java.util.ArrayList<AddressBook>();
        remove.addAll(getAddressBooks());
        for (AddressBook element : remove) {
            removeAddressBook(element);
        }
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    public List<CustomersBasket> getCustomersBasket() {
        if (this.customersBaskets == null) {
            this.customersBaskets = new java.util.ArrayList<CustomersBasket>();
        }
        return customersBaskets;
    }

    /** @generated */
    public void setCustomersBasket(final List<CustomersBasket> customersBaskets) {
        this.customersBaskets = customersBaskets;
    }

    /**
     * Associate Definition with CustomersBasket
     * @generated
     */
    public void addCustomersBasket(CustomersBasket customersBasket) {
        if (customersBasket == null) return;
        getCustomersBasket().add(customersBasket);
        customersBasket.setCustomers(this);
    }

    /**
     * Unassociate Definition from CustomersBasket
     * @generated
     */
    public void removeCustomersBasket(CustomersBasket customersBasket) {
        if (customersBasket == null) return;
        getCustomersBasket().remove(customersBasket);
        customersBasket.setCustomers(null);
    }

    /**
     * @generated
     */
    public void removeAllCustomersBasket() {
        List<CustomersBasket> remove = new java.util.ArrayList<CustomersBasket>();
        remove.addAll(getCustomersBasket());
        for (CustomersBasket element : remove) {
            removeCustomersBasket(element);
        }
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    public List<CustomersBasketAttributes> getCustomersBasketAttributes() {
        if (this.customersBasketAttributes == null) {
            this.customersBasketAttributes = new java.util.ArrayList<CustomersBasketAttributes>();
        }
        return customersBasketAttributes;
    }

    /** @generated */
    public void setCustomersBasketAttributes(final List<CustomersBasketAttributes> customersBasketAttributes) {
        this.customersBasketAttributes = customersBasketAttributes;
    }

    /**
     * Associate Definition with CustomersBasketAttributes
     * @generated
     */
    public void addCustomersBasketAttribute(CustomersBasketAttributes customersBasketAttribute) {
        if (customersBasketAttribute == null) return;
        getCustomersBasketAttributes().add(customersBasketAttribute);
        customersBasketAttribute.setCustomer(this);
    }

    /**
     * Unassociate Definition from CustomersBasketAttributes
     * @generated
     */
    public void removeCustomersBasketAttribute(CustomersBasketAttributes customersBasketAttribute) {
        if (customersBasketAttribute == null) return;
        getCustomersBasketAttributes().remove(customersBasketAttribute);
        customersBasketAttribute.setCustomer(null);
    }

    /**
     * @generated
     */
    public void removeAllCustomersBasketAttributess() {
        List<CustomersBasketAttributes> remove = new java.util.ArrayList<CustomersBasketAttributes>();
        remove.addAll(getCustomersBasketAttributes());
        for (CustomersBasketAttributes element : remove) {
            removeCustomersBasketAttribute(element);
        }
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    public List<IpnHistory> getIpnHistories() {
        if (this.ipnHistories == null) {
            this.ipnHistories = new java.util.ArrayList<IpnHistory>();
        }
        return ipnHistories;
    }

    /** @generated */
    public void setIpnHistories(final List<IpnHistory> ipnHistories) {
        this.ipnHistories = ipnHistories;
    }

    /**
     * Associate Definition with IpnHistory
     * @generated
     */
    public void addIpnHistory(IpnHistory ipnHistory) {
        if (ipnHistory == null) return;
        getIpnHistories().add(ipnHistory);
        ipnHistory.setCustomer(this);
    }

    /**
     * Unassociate Definition from IpnHistory
     * @generated
     */
    public void removeIpnHistory(IpnHistory ipnHistory) {
        if (ipnHistory == null) return;
        getIpnHistories().remove(ipnHistory);
        ipnHistory.setCustomer(null);
    }

    /**
     * @generated
     */
    public void removeAllIpnHistories() {
        List<IpnHistory> remove = new java.util.ArrayList<IpnHistory>();
        remove.addAll(getIpnHistories());
        for (IpnHistory element : remove) {
            removeIpnHistory(element);
        }
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    public List<Orders> getOrders() {
        if (this.orders == null) {
            this.orders = new java.util.ArrayList<Orders>();
        }
        return orders;
    }

    /** @generated */
    public void setOrders(final List<Orders> orders) {
        this.orders = orders;
    }

    /**
     * Associate Definition with AddressBook
     *
     * @generated
     */
    public void addOrder(Orders order) {
        if (order == null) return;
        getOrders().add(order);
        order.setCustomer(this);
    }

    /**
     * Unassociate Definition from AddressBook
     *
     * @generated
     */
    public void removeOrder(Orders order) {
        if (order == null) return;
        getOrders().remove(order);
        order.setCustomer(null);
    }

    /**
     * @generated
     */
    public void removeAllOrders() {
        List<Orders> remove = new java.util.ArrayList<Orders>();
        remove.addAll(getOrders());
        for (Orders element : remove) {
            removeOrder(element);
        }
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    public List<ProductsNotifications> getProductsNotifications() {
        if (this.productsNotifications == null) {
            this.productsNotifications = new java.util.ArrayList<ProductsNotifications>();
        }
        return productsNotifications;
    }
}
