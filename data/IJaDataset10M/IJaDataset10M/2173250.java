package org.nexopenframework.management.jee.monitor.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import org.nexopenframework.management.jee.monitor.events.StatementEvent;
import org.nexopenframework.management.monitor.spi.EventNotifier;
import org.nexopenframework.management.support.Handle;

/**
 * <p>NexOpen Framework</p>
 * 
 * <p></p>
 * 
 * @see org.nexopenframework.management.jee.monitor.events.StatementEvent
 * @see java.sql.Statement
 * @see org.nexopenframework.management.support.Handle
 * @author Francesc Xavier Magdaleno
 * @version 1.0
 * @since 1.0.0.m2
 */
public class DelegateStatement implements Statement, Handle<Statement> {

    /**Class which deals with sending events*/
    private final EventNotifier notifier;

    /**JDBC {@link Statement} to be monitored*/
    private final Statement monitoredStatement;

    /**Original JDBC connection*/
    private final Connection originalConn;

    /**
	 * <p></p>
	 * 
	 * @param originalConn
	 * @param stmt
	 * @param notifier
	 */
    DelegateStatement(final Connection originalConn, final Statement stmt, final EventNotifier notifier) {
        this.originalConn = originalConn;
        this.monitoredStatement = stmt;
        this.notifier = notifier;
    }

    /**
	 * <p></p>
	 * 
	 * @see org.nexopenframework.management.support.Handle#getHandle()
	 */
    public Statement getHandle() {
        return monitoredStatement;
    }

    public void addBatch(final String sql) throws SQLException {
        this.monitoredStatement.addBatch(sql);
    }

    public void cancel() throws SQLException {
        this.monitoredStatement.cancel();
    }

    public void clearBatch() throws SQLException {
        this.monitoredStatement.clearBatch();
    }

    public void clearWarnings() throws SQLException {
        this.monitoredStatement.clearWarnings();
    }

    public void close() throws SQLException {
        this.monitoredStatement.close();
    }

    public boolean execute(final String sql) throws SQLException {
        final StatementEvent event = StatementEvent.Factory.createStatementEvent(monitoredStatement, sql);
        this.notifier.sendEvent(event);
        try {
            return this.monitoredStatement.execute(sql);
        } finally {
            event.stop();
            this.notifier.sendEvent(event);
        }
    }

    public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
        final StatementEvent event = StatementEvent.Factory.createStatementEvent(monitoredStatement, sql);
        this.notifier.sendEvent(event);
        try {
            return this.monitoredStatement.execute(sql, autoGeneratedKeys);
        } finally {
            event.stop();
            this.notifier.sendEvent(event);
        }
    }

    public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
        final StatementEvent event = StatementEvent.Factory.createStatementEvent(monitoredStatement, sql);
        this.notifier.sendEvent(event);
        try {
            return this.monitoredStatement.execute(sql, columnIndexes);
        } finally {
            event.stop();
            this.notifier.sendEvent(event);
        }
    }

    public boolean execute(final String sql, final String[] columnNames) throws SQLException {
        final StatementEvent event = StatementEvent.Factory.createStatementEvent(monitoredStatement, sql);
        this.notifier.sendEvent(event);
        try {
            return this.monitoredStatement.execute(sql, columnNames);
        } finally {
            event.stop();
            this.notifier.sendEvent(event);
        }
    }

    public int[] executeBatch() throws SQLException {
        return this.monitoredStatement.executeBatch();
    }

    public ResultSet executeQuery(final String sql) throws SQLException {
        final StatementEvent event = StatementEvent.Factory.createStatementEvent(monitoredStatement, sql);
        this.notifier.sendEvent(event);
        try {
            return this.monitoredStatement.executeQuery(sql);
        } finally {
            event.stop();
            this.notifier.sendEvent(event);
        }
    }

    public int executeUpdate(final String sql) throws SQLException {
        final StatementEvent event = StatementEvent.Factory.createStatementEvent(monitoredStatement, sql);
        this.notifier.sendEvent(event);
        try {
            return this.monitoredStatement.executeUpdate(sql);
        } finally {
            event.stop();
            this.notifier.sendEvent(event);
        }
    }

    public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
        final StatementEvent event = StatementEvent.Factory.createStatementEvent(monitoredStatement, sql);
        this.notifier.sendEvent(event);
        try {
            return this.monitoredStatement.executeUpdate(sql, autoGeneratedKeys);
        } finally {
            event.stop();
            this.notifier.sendEvent(event);
        }
    }

    public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
        final StatementEvent event = StatementEvent.Factory.createStatementEvent(monitoredStatement, sql);
        this.notifier.sendEvent(event);
        try {
            return this.monitoredStatement.executeUpdate(sql, columnIndexes);
        } finally {
            event.stop();
            this.notifier.sendEvent(event);
        }
    }

    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
        final StatementEvent event = StatementEvent.Factory.createStatementEvent(monitoredStatement, sql);
        this.notifier.sendEvent(event);
        try {
            return this.monitoredStatement.executeUpdate(sql, columnNames);
        } finally {
            event.stop();
            this.notifier.sendEvent(event);
        }
    }

    public Connection getConnection() throws SQLException {
        return originalConn;
    }

    public int getFetchDirection() throws SQLException {
        return monitoredStatement.getFetchDirection();
    }

    public int getFetchSize() throws SQLException {
        return this.monitoredStatement.getFetchSize();
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return this.monitoredStatement.getGeneratedKeys();
    }

    public int getMaxFieldSize() throws SQLException {
        return this.monitoredStatement.getMaxFieldSize();
    }

    public int getMaxRows() throws SQLException {
        return this.monitoredStatement.getMaxRows();
    }

    public boolean getMoreResults() throws SQLException {
        return this.monitoredStatement.getMoreResults();
    }

    public boolean getMoreResults(final int current) throws SQLException {
        return this.monitoredStatement.getMoreResults(current);
    }

    public int getQueryTimeout() throws SQLException {
        return this.monitoredStatement.getQueryTimeout();
    }

    public ResultSet getResultSet() throws SQLException {
        return this.monitoredStatement.getResultSet();
    }

    public int getResultSetConcurrency() throws SQLException {
        return this.monitoredStatement.getResultSetConcurrency();
    }

    public int getResultSetHoldability() throws SQLException {
        return this.monitoredStatement.getResultSetHoldability();
    }

    public int getResultSetType() throws SQLException {
        return this.monitoredStatement.getResultSetType();
    }

    public int getUpdateCount() throws SQLException {
        return this.monitoredStatement.getUpdateCount();
    }

    public SQLWarning getWarnings() throws SQLException {
        return this.monitoredStatement.getWarnings();
    }

    public void setCursorName(final String name) throws SQLException {
        this.monitoredStatement.setCursorName(name);
    }

    public void setEscapeProcessing(final boolean enable) throws SQLException {
        this.monitoredStatement.setEscapeProcessing(enable);
    }

    public void setFetchDirection(final int direction) throws SQLException {
        this.monitoredStatement.setFetchDirection(direction);
    }

    public void setFetchSize(final int rows) throws SQLException {
        this.monitoredStatement.setFetchSize(rows);
    }

    public void setMaxFieldSize(final int max) throws SQLException {
        this.monitoredStatement.setMaxFieldSize(max);
    }

    public void setMaxRows(final int max) throws SQLException {
        this.monitoredStatement.setMaxRows(max);
    }

    public void setQueryTimeout(final int seconds) throws SQLException {
        this.monitoredStatement.setQueryTimeout(seconds);
    }
}
