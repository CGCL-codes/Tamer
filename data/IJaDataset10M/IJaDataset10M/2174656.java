package com.league.schedule.model.impl;

import com.league.schedule.model.Team;
import com.league.schedule.model.TeamModel;
import com.league.schedule.model.TeamSoap;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import java.io.Serializable;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the Team service. Represents a row in the &quot;LPF_Team&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.league.schedule.model.TeamModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TeamImpl}.
 * </p>
 *
 * @author Guolin Wang
 * @see TeamImpl
 * @see com.league.schedule.model.Team
 * @see com.league.schedule.model.TeamModel
 * @generated
 */
@JSON(strict = true)
public class TeamModelImpl extends BaseModelImpl<Team> implements TeamModel {

    public static final String TABLE_NAME = "LPF_Team";

    public static final Object[][] TABLE_COLUMNS = { { "team_id", Types.BIGINT }, { "division_id", Types.BIGINT }, { "team_name", Types.VARCHAR }, { "team_manager_id", Types.BIGINT }, { "member_group_id", Types.BIGINT } };

    public static final String TABLE_SQL_CREATE = "create table LPF_Team (team_id LONG not null primary key,division_id LONG,team_name VARCHAR(75) null,team_manager_id LONG,member_group_id LONG)";

    public static final String TABLE_SQL_DROP = "drop table LPF_Team";

    public static final String ORDER_BY_JPQL = " ORDER BY team.team_id ASC";

    public static final String ORDER_BY_SQL = " ORDER BY LPF_Team.team_id ASC";

    public static final String DATA_SOURCE = "liferayDataSource";

    public static final String SESSION_FACTORY = "liferaySessionFactory";

    public static final String TX_MANAGER = "liferayTransactionManager";

    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get("value.object.entity.cache.enabled.com.league.schedule.model.Team"), true);

    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get("value.object.finder.cache.enabled.com.league.schedule.model.Team"), true);

    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get("value.object.column.bitmask.enabled.com.league.schedule.model.Team"), true);

    public static long TEAM_NAME_COLUMN_BITMASK = 1L;

    /**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
    public static Team toModel(TeamSoap soapModel) {
        Team model = new TeamImpl();
        model.setTeam_id(soapModel.getTeam_id());
        model.setDivision_id(soapModel.getDivision_id());
        model.setTeam_name(soapModel.getTeam_name());
        model.setTeam_manager_id(soapModel.getTeam_manager_id());
        model.setMember_group_id(soapModel.getMember_group_id());
        return model;
    }

    /**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
    public static List<Team> toModels(TeamSoap[] soapModels) {
        List<Team> models = new ArrayList<Team>(soapModels.length);
        for (TeamSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }
        return models;
    }

    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get("lock.expiration.time.com.league.schedule.model.Team"));

    public TeamModelImpl() {
    }

    public long getPrimaryKey() {
        return _team_id;
    }

    public void setPrimaryKey(long primaryKey) {
        setTeam_id(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_team_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Team.class;
    }

    public String getModelClassName() {
        return Team.class.getName();
    }

    @JSON
    public long getTeam_id() {
        return _team_id;
    }

    public void setTeam_id(long team_id) {
        _columnBitmask = -1L;
        _team_id = team_id;
    }

    @JSON
    public long getDivision_id() {
        return _division_id;
    }

    public void setDivision_id(long division_id) {
        _division_id = division_id;
    }

    @JSON
    public String getTeam_name() {
        if (_team_name == null) {
            return StringPool.BLANK;
        } else {
            return _team_name;
        }
    }

    public void setTeam_name(String team_name) {
        _columnBitmask |= TEAM_NAME_COLUMN_BITMASK;
        if (_originalTeam_name == null) {
            _originalTeam_name = _team_name;
        }
        _team_name = team_name;
    }

    public String getOriginalTeam_name() {
        return GetterUtil.getString(_originalTeam_name);
    }

    @JSON
    public long getTeam_manager_id() {
        return _team_manager_id;
    }

    public void setTeam_manager_id(long team_manager_id) {
        _team_manager_id = team_manager_id;
    }

    @JSON
    public long getMember_group_id() {
        return _member_group_id;
    }

    public void setMember_group_id(long member_group_id) {
        _member_group_id = member_group_id;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Team toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Team) ProxyUtil.newProxyInstance(_classLoader, _escapedModelProxyInterfaces, new AutoEscapeBeanHandler(this));
        }
        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0, Team.class.getName(), getPrimaryKey());
        }
        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        TeamImpl teamImpl = new TeamImpl();
        teamImpl.setTeam_id(getTeam_id());
        teamImpl.setDivision_id(getDivision_id());
        teamImpl.setTeam_name(getTeam_name());
        teamImpl.setTeam_manager_id(getTeam_manager_id());
        teamImpl.setMember_group_id(getMember_group_id());
        teamImpl.resetOriginalValues();
        return teamImpl;
    }

    public int compareTo(Team team) {
        int value = 0;
        if (getTeam_id() < team.getTeam_id()) {
            value = -1;
        } else if (getTeam_id() > team.getTeam_id()) {
            value = 1;
        } else {
            value = 0;
        }
        if (value != 0) {
            return value;
        }
        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        Team team = null;
        try {
            team = (Team) obj;
        } catch (ClassCastException cce) {
            return false;
        }
        long primaryKey = team.getPrimaryKey();
        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        TeamModelImpl teamModelImpl = this;
        teamModelImpl._originalTeam_name = teamModelImpl._team_name;
        teamModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Team> toCacheModel() {
        TeamCacheModel teamCacheModel = new TeamCacheModel();
        teamCacheModel.team_id = getTeam_id();
        teamCacheModel.division_id = getDivision_id();
        teamCacheModel.team_name = getTeam_name();
        String team_name = teamCacheModel.team_name;
        if ((team_name != null) && (team_name.length() == 0)) {
            teamCacheModel.team_name = null;
        }
        teamCacheModel.team_manager_id = getTeam_manager_id();
        teamCacheModel.member_group_id = getMember_group_id();
        return teamCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);
        sb.append("{team_id=");
        sb.append(getTeam_id());
        sb.append(", division_id=");
        sb.append(getDivision_id());
        sb.append(", team_name=");
        sb.append(getTeam_name());
        sb.append(", team_manager_id=");
        sb.append(getTeam_manager_id());
        sb.append(", member_group_id=");
        sb.append(getMember_group_id());
        sb.append("}");
        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);
        sb.append("<model><model-name>");
        sb.append("com.league.schedule.model.Team");
        sb.append("</model-name>");
        sb.append("<column><column-name>team_id</column-name><column-value><![CDATA[");
        sb.append(getTeam_id());
        sb.append("]]></column-value></column>");
        sb.append("<column><column-name>division_id</column-name><column-value><![CDATA[");
        sb.append(getDivision_id());
        sb.append("]]></column-value></column>");
        sb.append("<column><column-name>team_name</column-name><column-value><![CDATA[");
        sb.append(getTeam_name());
        sb.append("]]></column-value></column>");
        sb.append("<column><column-name>team_manager_id</column-name><column-value><![CDATA[");
        sb.append(getTeam_manager_id());
        sb.append("]]></column-value></column>");
        sb.append("<column><column-name>member_group_id</column-name><column-value><![CDATA[");
        sb.append(getMember_group_id());
        sb.append("]]></column-value></column>");
        sb.append("</model>");
        return sb.toString();
    }

    private static ClassLoader _classLoader = Team.class.getClassLoader();

    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] { Team.class };

    private long _team_id;

    private long _division_id;

    private String _team_name;

    private String _originalTeam_name;

    private long _team_manager_id;

    private long _member_group_id;

    private transient ExpandoBridge _expandoBridge;

    private long _columnBitmask;

    private Team _escapedModelProxy;
}
