package org.mobicents.ssf.event;

import java.util.EventObject;
import javax.servlet.sip.ServletTimer;
import javax.servlet.sip.SipApplicationSession;
import javax.servlet.sip.SipApplicationSessionBindingEvent;
import javax.servlet.sip.SipApplicationSessionEvent;
import javax.servlet.sip.SipErrorEvent;
import javax.servlet.sip.SipServletMessage;
import javax.servlet.sip.SipSessionBindingEvent;
import javax.servlet.sip.SipSessionEvent;
import org.mobicents.ssf.bind.DispatcherParams;
import org.mobicents.ssf.util.LogUtils;

/**
 * {@.en
 * The base class of events that generated by SSF.  
 * }
 * {@.ja
 * SSFで生成されるイベントの基底クラスです。
 * }
 * 
 * @author nisihara
 * 
 */
public class Event extends EventObject {

    private static final long serialVersionUID = 5404885892807812410L;

    public final long timestamp = System.currentTimeMillis();

    public final String id;

    public final Object event;

    public final EventType type;

    public Event(Object source, Object event, String id, EventType type) {
        super(source);
        this.id = id;
        this.type = type;
        this.event = event;
    }

    public Object getTargetEvent() {
        if (event instanceof ServletTimer) {
            ServletTimer timer = (ServletTimer) this.event;
            Object obj = timer.getInfo();
            if (obj instanceof DispatcherParams) {
                return obj;
            }
        }
        return this.event;
    }

    public String getId() {
        return this.id;
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("[id:" + id + "],[event:" + LogUtils.getInfo(getTargetEvent()) + "],[type:" + type + "]");
        return sb.toString();
    }

    public SipApplicationSession getApplicationSession() {
        Object obj = getTargetEvent();
        SipApplicationSession appSession = null;
        if (obj instanceof SipApplicationSessionEvent) {
            SipApplicationSessionEvent appEvent = (SipApplicationSessionEvent) obj;
            appSession = appEvent.getApplicationSession();
        } else if (obj instanceof SipApplicationSessionBindingEvent) {
            SipApplicationSessionBindingEvent appEvent = (SipApplicationSessionBindingEvent) obj;
            appSession = appEvent.getApplicationSession();
        } else if (obj instanceof SipSessionEvent) {
            SipSessionEvent sessEvent = (SipSessionEvent) obj;
            appSession = sessEvent.getSession().getApplicationSession();
        } else if (obj instanceof SipSessionBindingEvent) {
            SipSessionBindingEvent sessEvent = (SipSessionBindingEvent) obj;
            appSession = sessEvent.getSession().getApplicationSession();
        } else if (obj instanceof SipServletMessage) {
            SipServletMessage msg = (SipServletMessage) obj;
            appSession = msg.getApplicationSession();
        } else if (obj instanceof ServletTimer) {
            ServletTimer timer = (ServletTimer) obj;
            appSession = timer.getApplicationSession();
        } else if (obj instanceof SipErrorEvent) {
            SipErrorEvent errorEvent = (SipErrorEvent) obj;
            appSession = errorEvent.getRequest().getApplicationSession();
        } else if (obj instanceof DispatcherParams) {
            DispatcherParams params = (DispatcherParams) obj;
            appSession = params.getApplicationSession();
        }
        return appSession;
    }
}
