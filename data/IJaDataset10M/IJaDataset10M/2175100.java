package org.cleartk.token.tokenizer;

import java.util.regex.Pattern;

/**
 * <br>
 * Copyright (c) 2007-2008, Regents of the University of Colorado <br>
 * All rights reserved.
 * 
 * <p>
 * 
 * This tokenizer is named 'Subtokenizer' because it is designed to over-generate tokens that can
 * then be used as input for another tokenization approach. Specifically, this tokenizer can be used
 * as input for BIO-styled tokenization using a classifier. Each token generated by this tokenizer
 * would be assigned a B-TOKEN (or something similar) or I-TOKEN for a given set of gold-standard
 * tokens or based on the results of a classifier.
 * <p>
 * 
 * Please see the corresponding unit tests for examples of how this tokenizer produces tokens.
 * 
 * @author Philip
 * 
 */
public class Subtokenizer extends Tokenizer_ImplBase {

    public static String subtokensRegex = "([a-zA-Z]+|[0-9]+|\\W)";

    public static Pattern subtokensPattern = Pattern.compile(subtokensRegex, Pattern.MULTILINE);

    public static String multipleWhitespaceRegex = "(\\s+)";

    public static Pattern multipleWhitespacePattern = Pattern.compile(multipleWhitespaceRegex, Pattern.MULTILINE);

    public String[] getTokenTexts(String text) {
        text = subtokensPattern.matcher(text).replaceAll(" $1 ");
        text = multipleWhitespacePattern.matcher(text).replaceAll(" ");
        text = text.trim();
        return text.split(" ");
    }
}
