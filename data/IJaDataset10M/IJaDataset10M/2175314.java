package org.rr.jsendfile.gui;

import java.io.File;
import java.text.MessageFormat;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.table.DefaultTableModel;
import org.rr.jsendfile.app.Receive;
import org.rr.jsendfile.util.ProgInfo;
import org.rr.jsendfile.util.Sysinfo;
import org.rr.jsendfile.util.TxtUtil;
import com.l2fprod.gui.plaf.skin.Skin;
import com.l2fprod.gui.plaf.skin.SkinLookAndFeel;

/**
 * Hauptbildschirm f�r die verwaltung empfangener Files. 
 * Von hier aus k�nnen alle weiteren Oberfl�chen erreicht werden.
 */
public class SendfileGUI extends JFrame {

    private static final String EIGENE_DATEIEN = "/Eigene Dateien/";

    SendfileAbout sendfileAbout = null;

    SendfileOptions sendfileOptions = null;

    SendfileContacts sendfileContacts = null;

    SendfileMessages sendfileMessages = null;

    SendfileSend sendfileSend = null;

    SendfileForward sendfileForward = null;

    /** Creates new form SendfileGUI */
    public SendfileGUI() {
        if (!ProgInfo.DEBUG) {
            GUIutils.disableSystemOutpuStream();
        }
        new Config().readConfig();
        SendfileSplash splash = new SendfileSplash();
        this.setSkinLF();
        initComponents();
        splash.dispose();
        new Thread() {

            public void run() {
                boolean loop = true;
                while (loop) {
                    try {
                        sleep(5000);
                    } catch (InterruptedException e) {
                        loop = false;
                    }
                    receiveList();
                }
            }
        }.start();
        new Thread() {

            public void run() {
                if (sendfileSend == null) {
                    sendfileSend = new SendfileSend();
                }
                synchronized (SendfileForward.__SENDFILEFORWARDINIT) {
                    if (sendfileForward == null) {
                        sendfileForward = new SendfileForward();
                    }
                }
                synchronized (SendfileSend.__SENDFILESENDINIT) {
                    if (sendfileAbout == null) {
                        sendfileAbout = new SendfileAbout();
                    }
                }
                if (sendfileOptions == null) {
                    sendfileOptions = new SendfileOptions();
                }
                if (sendfileContacts == null) {
                    sendfileContacts = new SendfileContacts();
                }
                if (sendfileMessages == null) {
                    sendfileMessages = new SendfileMessages();
                }
            }
        }.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jPanel_for_toolbar = new javax.swing.JPanel();
        jToolBar_main = new javax.swing.JToolBar();
        jButton_sendfile = new javax.swing.JButton();
        jButton_savefile = new javax.swing.JButton();
        jButton_bounce = new javax.swing.JButton();
        jButton_delete = new javax.swing.JButton();
        jButton_sendmsg = new javax.swing.JButton();
        jButton_contacts = new javax.swing.JButton();
        jButton_options = new javax.swing.JButton();
        jButton_about = new javax.swing.JButton();
        jButton_exit = new javax.swing.JButton();
        jPanel_main = new javax.swing.JPanel();
        jScrollPane_table = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel_status = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel_filecount = new javax.swing.JLabel();
        jLabel_filecount_label = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel_status_label = new javax.swing.JLabel();
        jLabel_status = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu_File = new javax.swing.JMenu();
        jMenuItem_sendfile = new javax.swing.JMenuItem();
        jMenuItem_sendmsg = new javax.swing.JMenuItem();
        jMenuItem_refresh = new javax.swing.JMenuItem();
        jMenuItem_save = new javax.swing.JMenuItem();
        jMenuItem_forward = new javax.swing.JMenuItem();
        jMenuItem_delete = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem_exit = new javax.swing.JMenuItem();
        jMenu_Settings = new javax.swing.JMenu();
        jMenuItem_options = new javax.swing.JMenuItem();
        jMenu_Help = new javax.swing.JMenu();
        jMenuItem_about = new javax.swing.JMenuItem();
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));
        setTitle(MessageFormat.format(GUIutils.getBundleString("main.title"), new Object[] { ProgInfo.VERSION }));
        setIconImage(new ImageIcon(new Config().getButtonPixmapResource("/16x16/logo.png")).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        jPanel_for_toolbar.setLayout(new javax.swing.BoxLayout(jPanel_for_toolbar, javax.swing.BoxLayout.X_AXIS));
        jPanel_for_toolbar.setMaximumSize(new java.awt.Dimension(32767, 80));
        jToolBar_main.setFont(new java.awt.Font("Dialog", 0, 10));
        jToolBar_main.setMaximumSize(new java.awt.Dimension(5000, 124));
        jButton_sendfile.setFont(new java.awt.Font("Dialog", 0, 12));
        jButton_sendfile.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/up.png")));
        jButton_sendfile.setMnemonic(GUIutils.getMnemonicChar("main.button.send"));
        jButton_sendfile.setText(GUIutils.getBundleString("main.button.send"));
        jButton_sendfile.setToolTipText(GUIutils.getBundleString("main.tooltip.send"));
        jButton_sendfile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_sendfile.setMaximumSize(new java.awt.Dimension(500, 500));
        jButton_sendfile.setMinimumSize(new java.awt.Dimension(60, 60));
        jButton_sendfile.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton_sendfile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_sendfile.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sendfile(evt);
            }
        });
        jToolBar_main.add(jButton_sendfile);
        jButton_savefile.setFont(new java.awt.Font("Dialog", 0, 12));
        jButton_savefile.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/save.png")));
        jButton_savefile.setMnemonic(GUIutils.getMnemonicChar("main.button.saveFile"));
        jButton_savefile.setText(GUIutils.getBundleString("main.button.saveFile"));
        jButton_savefile.setToolTipText(GUIutils.getBundleString("main.tooltip.saveFile"));
        jButton_savefile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_savefile.setMaximumSize(new java.awt.Dimension(500, 500));
        jButton_savefile.setMinimumSize(new java.awt.Dimension(60, 60));
        jButton_savefile.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton_savefile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_savefile.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_save(evt);
            }
        });
        jToolBar_main.add(jButton_savefile);
        jButton_bounce.setFont(new java.awt.Font("Dialog", 0, 12));
        jButton_bounce.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/forward.png")));
        jButton_bounce.setMnemonic(GUIutils.getMnemonicChar("main.button.forward"));
        jButton_bounce.setText(GUIutils.getBundleString("main.button.forward"));
        jButton_bounce.setToolTipText(GUIutils.getBundleString("main.tooltip.forward"));
        jButton_bounce.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_bounce.setMaximumSize(new java.awt.Dimension(500, 500));
        jButton_bounce.setMinimumSize(new java.awt.Dimension(60, 60));
        jButton_bounce.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton_bounce.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_bounce.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_forward(evt);
            }
        });
        jToolBar_main.add(jButton_bounce);
        jButton_delete.setFont(new java.awt.Font("Dialog", 0, 12));
        jButton_delete.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/delete.png")));
        jButton_delete.setMnemonic(GUIutils.getMnemonicChar("main.button.delete"));
        jButton_delete.setText(GUIutils.getBundleString("main.button.delete"));
        jButton_delete.setToolTipText(GUIutils.getBundleString("main.tooltip.delete"));
        jButton_delete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_delete.setMaximumSize(new java.awt.Dimension(500, 500));
        jButton_delete.setMinimumSize(new java.awt.Dimension(60, 60));
        jButton_delete.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton_delete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_delete.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_delete(evt);
            }
        });
        jToolBar_main.add(jButton_delete);
        jButton_sendmsg.setFont(new java.awt.Font("Dialog", 0, 12));
        jButton_sendmsg.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/message.png")));
        jButton_sendmsg.setMnemonic(GUIutils.getMnemonicChar("main.button.messages"));
        jButton_sendmsg.setText(GUIutils.getBundleString("main.button.messages"));
        jButton_sendmsg.setToolTipText(GUIutils.getBundleString("main.tooltip.messages"));
        jButton_sendmsg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_sendmsg.setMaximumSize(new java.awt.Dimension(500, 500));
        jButton_sendmsg.setMinimumSize(new java.awt.Dimension(60, 60));
        jButton_sendmsg.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton_sendmsg.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_sendmsg.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sendmessage(evt);
            }
        });
        jToolBar_main.add(jButton_sendmsg);
        jButton_contacts.setFont(new java.awt.Font("Dialog", 0, 12));
        jButton_contacts.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/contact.png")));
        jButton_contacts.setMnemonic(GUIutils.getMnemonicChar("main.button.contacts"));
        jButton_contacts.setText(GUIutils.getBundleString("main.button.contacts"));
        jButton_contacts.setToolTipText(GUIutils.getBundleString("main.tooltip.contacts"));
        jButton_contacts.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_contacts.setMaximumSize(new java.awt.Dimension(500, 500));
        jButton_contacts.setMinimumSize(new java.awt.Dimension(60, 60));
        jButton_contacts.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton_contacts.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_contacts.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_contacts(evt);
            }
        });
        jToolBar_main.add(jButton_contacts);
        jButton_options.setFont(new java.awt.Font("Dialog", 0, 12));
        jButton_options.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/properties.png")));
        jButton_options.setMnemonic(GUIutils.getMnemonicChar("main.button.options"));
        jButton_options.setText(GUIutils.getBundleString("main.button.options"));
        jButton_options.setToolTipText(GUIutils.getBundleString("main.tooltip.options"));
        jButton_options.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_options.setMaximumSize(new java.awt.Dimension(500, 500));
        jButton_options.setMinimumSize(new java.awt.Dimension(60, 60));
        jButton_options.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton_options.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_options.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_options(evt);
            }
        });
        jToolBar_main.add(jButton_options);
        jButton_about.setFont(new java.awt.Font("Dialog", 0, 12));
        jButton_about.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/about.png")));
        jButton_about.setMnemonic(GUIutils.getMnemonicChar("main.button.about"));
        jButton_about.setText(GUIutils.getBundleString("main.button.about"));
        jButton_about.setToolTipText(GUIutils.getBundleString("main.tooltip.about"));
        jButton_about.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_about.setMaximumSize(new java.awt.Dimension(500, 500));
        jButton_about.setMinimumSize(new java.awt.Dimension(60, 60));
        jButton_about.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton_about.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_about.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_about(evt);
            }
        });
        jToolBar_main.add(jButton_about);
        jButton_exit.setFont(new java.awt.Font("Dialog", 0, 12));
        jButton_exit.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/exit.png")));
        jButton_exit.setMnemonic(GUIutils.getMnemonicChar("main.button.exit"));
        jButton_exit.setText(GUIutils.getBundleString("main.button.exit"));
        jButton_exit.setToolTipText(GUIutils.getBundleString("main.tooltip.exit"));
        jButton_exit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_exit.setMaximumSize(new java.awt.Dimension(500, 500));
        jButton_exit.setMinimumSize(new java.awt.Dimension(60, 60));
        jButton_exit.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton_exit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_exit.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exit(evt);
            }
        });
        jToolBar_main.add(jButton_exit);
        jPanel_for_toolbar.add(jToolBar_main);
        getContentPane().add(jPanel_for_toolbar);
        jPanel_main.setLayout(new javax.swing.BoxLayout(jPanel_main, javax.swing.BoxLayout.Y_AXIS));
        this.receiveList();
        jTable1.setModel(defTableModel);
        jTable1.setFocusable(false);
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jScrollPane_table.setViewportView(jTable1);
        jPanel_main.add(jScrollPane_table);
        jPanel_status.setLayout(new javax.swing.BoxLayout(jPanel_status, javax.swing.BoxLayout.X_AXIS));
        jPanel_status.setMaximumSize(new java.awt.Dimension(32767, 26));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jLabel_filecount.setText("0");
        jPanel1.add(jLabel_filecount);
        jLabel_filecount_label.setText(GUIutils.getBundleString("main.status.filecount"));
        jPanel1.add(jLabel_filecount_label);
        jPanel_status.add(jPanel1);
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        jLabel_status_label.setText(GUIutils.getBundleString("main.status.statustext"));
        jPanel2.add(jLabel_status_label);
        jLabel_status.setText(GUIutils.getBundleString("main.status.ready"));
        jPanel2.add(jLabel_status);
        jPanel_status.add(jPanel2);
        jPanel_main.add(jPanel_status);
        getContentPane().add(jPanel_main);
        jMenu_File.setMnemonic(GUIutils.getMnemonicChar("main.menu.file"));
        jMenu_File.setText(GUIutils.getBundleString("main.menu.file"));
        jMenuItem_sendfile.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/up.png")));
        jMenuItem_sendfile.setMnemonic(GUIutils.getMnemonicChar("main.menu.file.sendfile"));
        this.jMenuItem_sendfile.setMnemonic(java.awt.event.KeyEvent.VK_T);
        jMenuItem_sendfile.setText(GUIutils.getBundleString("main.menu.file.sendfile"));
        jMenuItem_sendfile.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jMenuItem_sendfile.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_sendfile(evt);
            }
        });
        jMenu_File.add(jMenuItem_sendfile);
        jMenuItem_sendmsg.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/message.png")));
        jMenuItem_sendmsg.setMnemonic(GUIutils.getMnemonicChar("main.menu.file.sendmessage"));
        jMenuItem_sendmsg.setText(GUIutils.getBundleString("main.menu.file.sendmessage"));
        jMenuItem_sendmsg.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_sendmsg(evt);
            }
        });
        jMenu_File.add(jMenuItem_sendmsg);
        jMenuItem_refresh.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/reload.png")));
        jMenuItem_refresh.setMnemonic(GUIutils.getMnemonicChar("main.menu.file.refresh"));
        jMenuItem_refresh.setText(GUIutils.getBundleString("main.menu.file.refresh"));
        jMenuItem_refresh.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_refresh(evt);
            }
        });
        jMenu_File.add(jMenuItem_refresh);
        jMenuItem_save.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/save.png")));
        jMenuItem_save.setMnemonic(GUIutils.getMnemonicChar("main.menu.file.save"));
        jMenuItem_save.setText(GUIutils.getBundleString("main.menu.file.save"));
        jMenuItem_save.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_save(evt);
            }
        });
        jMenu_File.add(jMenuItem_save);
        jMenuItem_forward.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/forward.png")));
        jMenuItem_forward.setMnemonic(GUIutils.getMnemonicChar("main.menu.file.forward"));
        jMenuItem_forward.setText(GUIutils.getBundleString("main.menu.file.forward"));
        jMenuItem_forward.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_forward(evt);
            }
        });
        jMenu_File.add(jMenuItem_forward);
        jMenuItem_delete.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/delete.png")));
        jMenuItem_delete.setMnemonic(GUIutils.getMnemonicChar("main.menu.file.delete"));
        jMenuItem_delete.setText(GUIutils.getBundleString("main.menu.file.delete"));
        jMenuItem_delete.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_delete(evt);
            }
        });
        jMenu_File.add(jMenuItem_delete);
        jMenu_File.add(jSeparator1);
        jMenuItem_exit.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/exit.png")));
        jMenuItem_exit.setMnemonic(GUIutils.getMnemonicChar("main.menu.file.exit"));
        jMenuItem_exit.setText(GUIutils.getBundleString("main.menu.file.exit"));
        jMenuItem_exit.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_exit(evt);
            }
        });
        jMenu_File.add(jMenuItem_exit);
        jMenuBar.add(jMenu_File);
        jMenu_Settings.setMnemonic(GUIutils.getMnemonicChar("main.menu.settings"));
        jMenu_Settings.setText(GUIutils.getBundleString("main.menu.settings"));
        jMenuItem_options.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/properties.png")));
        jMenuItem_options.setMnemonic(GUIutils.getMnemonicChar("main.menu.settings.options"));
        jMenuItem_options.setText(GUIutils.getBundleString("main.menu.settings.options"));
        jMenuItem_options.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_options(evt);
            }
        });
        jMenu_Settings.add(jMenuItem_options);
        jMenuBar.add(jMenu_Settings);
        jMenu_Help.setMnemonic(GUIutils.getMnemonicChar("main.menu.help"));
        jMenu_Help.setText(GUIutils.getBundleString("main.menu.help"));
        jMenuItem_about.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/about.png")));
        jMenuItem_about.setMnemonic(GUIutils.getMnemonicChar("main.menu.help.about"));
        jMenuItem_about.setText(GUIutils.getBundleString("main.menu.help.about"));
        jMenuItem_about.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_about(evt);
            }
        });
        jMenu_Help.add(jMenuItem_about);
        jMenuBar.add(jMenu_Help);
        setJMenuBar(jMenuBar);
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width - 650) / 2, (screenSize.height - 400) / 2, 650, 400);
    }

    private void menu_sendmsg(java.awt.event.ActionEvent evt) {
        this.btn_sendmessage(evt);
    }

    private void menu_forward(java.awt.event.ActionEvent evt) {
        this.btn_forward(evt);
    }

    private void btn_sendmessage(java.awt.event.ActionEvent evt) {
        if (this.sendfileMessages == null) {
            this.sendfileMessages = new SendfileMessages();
        }
        this.sendfileMessages.setVisible(true);
    }

    private void btn_forward(java.awt.event.ActionEvent evt) {
        File[] f = this.getEntriesFromTable();
        if (f.length <= 0) {
            return;
        }
        synchronized (SendfileForward.__SENDFILEFORWARDINIT) {
            if (!sendfileForward.isDisposed()) {
                sendfileForward.setFiles(this.getEntriesFromTable());
                sendfileForward = new SendfileForward();
            } else {
                new SendfileForward().setFiles(this.getEntriesFromTable());
                sendfileForward = new SendfileForward();
            }
        }
    }

    private void menu_exit(java.awt.event.ActionEvent evt) {
        this.btn_exit(evt);
    }

    private void btn_delete(java.awt.event.ActionEvent evt) {
        StringBuffer argBuff = new StringBuffer();
        File[] fArray = this.getEntriesFromTable();
        if (fArray.length > 0 && !GUIutils.messageBox(GUIutils.getBundleString("main.messagebox.message.delete"), GUIutils.getBundleString("main.messagebox.title.delete"), GUIutils.MESSAGEBOX_YESNO)) {
            return;
        }
        for (int i = 0; i < fArray.length; i++) {
            argBuff.setLength(0);
            argBuff.append("-n " + new Config().getLocalUser() + " ");
            argBuff.append("-do \"" + new Config().getSpoolFileDirectory() + "\" ");
            argBuff.append("-F " + fArray[i]);
            this.jLabel_status.setText(GUIutils.getBundleString("main.status.deleting"));
            Receive.main(new TxtUtil().createArguments(argBuff.toString()));
            this.jLabel_status.setText(GUIutils.getBundleString("main.status.ready"));
        }
        this.receiveList();
    }

    private void menu_delete(java.awt.event.ActionEvent evt) {
        this.btn_delete(evt);
    }

    private void menu_save(java.awt.event.ActionEvent evt) {
        this.btn_save(evt);
    }

    private void menu_refresh(java.awt.event.ActionEvent evt) {
        this.receiveList();
    }

    private void menu_sendfile(java.awt.event.ActionEvent evt) {
        this.btn_sendfile(evt);
    }

    private void menu_options(java.awt.event.ActionEvent evt) {
        this.btn_options(evt);
    }

    private void menu_about(java.awt.event.ActionEvent evt) {
        this.btn_about(evt);
    }

    private void btn_sendfile(java.awt.event.ActionEvent evt) {
        synchronized (SendfileSend.__SENDFILESENDINIT) {
            if (sendfileSend != null && !sendfileSend.isDisposed()) {
                sendfileSend.setVisible(true);
                sendfileSend = new SendfileSend();
            } else {
                new SendfileSend().setVisible(true);
                sendfileSend = new SendfileSend();
            }
        }
    }

    private void btn_about(java.awt.event.ActionEvent evt) {
        if (this.sendfileAbout == null) {
            this.sendfileAbout = new SendfileAbout();
        }
        sendfileAbout.setVisible(true);
    }

    private void btn_save(java.awt.event.ActionEvent evt) {
        int[] selectedRows = this.jTable1.getSelectedRows();
        if (selectedRows.length <= 0) {
            return;
        }
        File defaultDir;
        JFileChooser fc = null;
        if ((defaultDir = new File(Sysinfo.getUserHome() + EIGENE_DATEIEN)).exists()) {
            fc = new JFileChooser(defaultDir);
        } else {
            fc = new JFileChooser(Sysinfo.getUserHome());
        }
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(false);
        fc.setDialogTitle(GUIutils.getBundleString("main.filechooser.title"));
        if (fc.showDialog(this, "OK") == JFileChooser.APPROVE_OPTION) {
            File fSelected = fc.getSelectedFile();
            for (int i = 0; i < selectedRows.length; i++) {
                StringBuffer argBuff = new StringBuffer();
                argBuff.append("-Okn " + new Config().getLocalUser() + " ");
                argBuff.append("-o \"" + new Config().getSpoolFileDirectory() + "\" ");
                argBuff.append("-F " + this.jTable1.getValueAt(selectedRows[i], 0) + " ");
                argBuff.append("\"" + fSelected.getPath() + "\"");
                this.jLabel_status.setText(GUIutils.getBundleString("main.status.saving"));
                new SendfileReceive().startReceive(argBuff, (String) this.jTable1.getValueAt(selectedRows[i], 0), fSelected.getPath());
                this.jLabel_status.setText(GUIutils.getBundleString("main.status.ready"));
            }
        }
    }

    private void btn_contacts(java.awt.event.ActionEvent evt) {
        if (this.sendfileContacts == null) {
            this.sendfileContacts = new SendfileContacts();
        }
        sendfileContacts.setVisible(true);
    }

    private void btn_options(java.awt.event.ActionEvent evt) {
        if (this.sendfileOptions == null) {
            this.sendfileOptions = new SendfileOptions();
        }
        sendfileOptions.setVisible(true);
    }

    private void btn_exit(java.awt.event.ActionEvent evt) {
        this.closeWin();
    }

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {
        this.closeWin();
    }

    /**
     * call the receive client, get the list of spooled files and set the new defTableModel
     */
    private void receiveList() {
        StringBuffer argBuff = new StringBuffer();
        DefaultTableModel tempTableModel = new DefaultTableModel(new Object[][] { { null, null, null, null, null, null } }, new String[] { GUIutils.getBundleString("main.table.file"), GUIutils.getBundleString("main.table.size"), GUIutils.getBundleString("main.table.user"), GUIutils.getBundleString("main.table.date"), GUIutils.getBundleString("main.table.time"), GUIutils.getBundleString("main.table.comment") });
        argBuff.append("-ln " + new Config().getLocalUser() + " ");
        argBuff.append("-o \"" + new Config().getSpoolFileDirectory() + "\"");
        Receive.main(new TxtUtil().createArguments(argBuff.toString()), tempTableModel);
        if (!defTableModel.getDataVector().equals(tempTableModel.getDataVector())) {
            this.defTableModel = tempTableModel;
            this.jTable1.setModel(tempTableModel);
        }
        this.jLabel_filecount.setText(String.valueOf(this.defTableModel.getRowCount()));
    }

    /**
     * get all selected Filenames
     */
    private File[] getEntriesFromTable() {
        int rows[] = this.jTable1.getSelectedRows();
        File[] fArray = new File[rows.length];
        for (int i = 0; i < rows.length; i++) {
            fArray[i] = new File((String) this.jTable1.getModel().getValueAt(rows[i], 0));
        }
        return fArray;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new SendfileGUI().setVisible(true);
    }

    /**
     * method for closing the window (and Quit)
     */
    public void closeWin() {
        System.exit(0);
    }

    /**
     * SkinLF Implementieren
     */
    public void setSkinLF() {
        String skinFile = new Config().getSkinFile().getPath();
        try {
            LookAndFeelInfo[] intSkins = UIManager.getInstalledLookAndFeels();
            for (int i = 0; i < intSkins.length; i++) {
                if (skinFile.replace('-', '/').indexOf(intSkins[i].getName()) != -1) {
                    UIManager.setLookAndFeel(intSkins[i].getClassName().replace('-', '/'));
                    return;
                }
            }
        } catch (Exception e) {
            return;
        }
        try {
            Skin theSkinToUse = SkinLookAndFeel.loadThemePack(new Config().getSkinFile().getPath());
            SkinLookAndFeel.setSkin(theSkinToUse);
            SkinLookAndFeel.enable();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * using the super repaint but implements the changing of the Skin for SkinLF on repaint.
     */
    public void repaint() {
        this.setSkinLF();
        this.setIcons();
        super.repaint();
    }

    /**
     * set or update the images on all buttons and menuitems
     */
    public void setIcons() {
        jButton_sendfile.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/up.png")));
        jButton_about.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/about.png")));
        jButton_savefile.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/save.png")));
        jButton_bounce.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/forward.png")));
        jButton_delete.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/delete.png")));
        jButton_sendmsg.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/message.png")));
        jButton_contacts.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/contact.png")));
        jButton_options.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/properties.png")));
        jButton_exit.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/22x22/exit.png")));
        jMenuItem_sendfile.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/up.png")));
        jMenuItem_sendmsg.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/message.png")));
        jMenuItem_refresh.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/reload.png")));
        jMenuItem_save.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/save.png")));
        jMenuItem_forward.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/forward.png")));
        jMenuItem_delete.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/delete.png")));
        jMenuItem_exit.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/exit.png")));
        jMenuItem_options.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/properties.png")));
        jMenuItem_about.setIcon(new ImageIcon(new Config().getButtonPixmapResource("/16x16/help.png")));
    }

    private DefaultTableModel defTableModel = new DefaultTableModel(new Object[][] { { null, null, null, null, null, null } }, new String[] { GUIutils.getBundleString("main.table.file"), GUIutils.getBundleString("main.table.size"), GUIutils.getBundleString("main.table.user"), GUIutils.getBundleString("main.table.date"), GUIutils.getBundleString("main.table.time"), GUIutils.getBundleString("main.table.comment") });

    private javax.swing.JButton jButton_about;

    private javax.swing.JButton jButton_bounce;

    private javax.swing.JButton jButton_contacts;

    private javax.swing.JButton jButton_delete;

    private javax.swing.JButton jButton_exit;

    private javax.swing.JButton jButton_options;

    private javax.swing.JButton jButton_savefile;

    private javax.swing.JButton jButton_sendfile;

    private javax.swing.JButton jButton_sendmsg;

    private javax.swing.JLabel jLabel_filecount;

    private javax.swing.JLabel jLabel_filecount_label;

    private javax.swing.JLabel jLabel_status;

    private javax.swing.JLabel jLabel_status_label;

    private javax.swing.JMenuBar jMenuBar;

    private javax.swing.JMenuItem jMenuItem_about;

    private javax.swing.JMenuItem jMenuItem_delete;

    private javax.swing.JMenuItem jMenuItem_exit;

    private javax.swing.JMenuItem jMenuItem_forward;

    private javax.swing.JMenuItem jMenuItem_options;

    private javax.swing.JMenuItem jMenuItem_refresh;

    private javax.swing.JMenuItem jMenuItem_save;

    private javax.swing.JMenuItem jMenuItem_sendfile;

    private javax.swing.JMenuItem jMenuItem_sendmsg;

    private javax.swing.JMenu jMenu_File;

    private javax.swing.JMenu jMenu_Help;

    private javax.swing.JMenu jMenu_Settings;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JPanel jPanel_for_toolbar;

    private javax.swing.JPanel jPanel_main;

    private javax.swing.JPanel jPanel_status;

    private javax.swing.JScrollPane jScrollPane_table;

    private javax.swing.JSeparator jSeparator1;

    private javax.swing.JTable jTable1;

    private javax.swing.JToolBar jToolBar_main;
}
