package pivotmodel.provider;

import java.util.ArrayList;
import java.util.Collection;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import pivotmodel.util.PivotmodelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PivotmodelItemProviderAdapterFactory extends PivotmodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {

    /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public PivotmodelItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.Namespace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected NamespaceItemProvider namespaceItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.Namespace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createNamespaceAdapter() {
        if (namespaceItemProvider == null) {
            namespaceItemProvider = new NamespaceItemProvider(this);
        }
        return namespaceItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected TypeItemProvider typeItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createTypeAdapter() {
        if (typeItemProvider == null) {
            typeItemProvider = new TypeItemProvider(this);
        }
        return typeItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.PrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected PrimitiveTypeItemProvider primitiveTypeItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.PrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createPrimitiveTypeAdapter() {
        if (primitiveTypeItemProvider == null) {
            primitiveTypeItemProvider = new PrimitiveTypeItemProvider(this);
        }
        return primitiveTypeItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.Enumeration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected EnumerationItemProvider enumerationItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.Enumeration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createEnumerationAdapter() {
        if (enumerationItemProvider == null) {
            enumerationItemProvider = new EnumerationItemProvider(this);
        }
        return enumerationItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.EnumerationLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected EnumerationLiteralItemProvider enumerationLiteralItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.EnumerationLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createEnumerationLiteralAdapter() {
        if (enumerationLiteralItemProvider == null) {
            enumerationLiteralItemProvider = new EnumerationLiteralItemProvider(this);
        }
        return enumerationLiteralItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected PropertyItemProvider propertyItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createPropertyAdapter() {
        if (propertyItemProvider == null) {
            propertyItemProvider = new PropertyItemProvider(this);
        }
        return propertyItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected OperationItemProvider operationItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createOperationAdapter() {
        if (operationItemProvider == null) {
            operationItemProvider = new OperationItemProvider(this);
        }
        return operationItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected ParameterItemProvider parameterItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createParameterAdapter() {
        if (parameterItemProvider == null) {
            parameterItemProvider = new ParameterItemProvider(this);
        }
        return parameterItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.ParameterGenericType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected ParameterGenericTypeItemProvider parameterGenericTypeItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.ParameterGenericType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createParameterGenericTypeAdapter() {
        if (parameterGenericTypeItemProvider == null) {
            parameterGenericTypeItemProvider = new ParameterGenericTypeItemProvider(this);
        }
        return parameterGenericTypeItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.ComplexGenericType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected ComplexGenericTypeItemProvider complexGenericTypeItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.ComplexGenericType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createComplexGenericTypeAdapter() {
        if (complexGenericTypeItemProvider == null) {
            complexGenericTypeItemProvider = new ComplexGenericTypeItemProvider(this);
        }
        return complexGenericTypeItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.TypeParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected TypeParameterItemProvider typeParameterItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.TypeParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createTypeParameterAdapter() {
        if (typeParameterItemProvider == null) {
            typeParameterItemProvider = new TypeParameterItemProvider(this);
        }
        return typeParameterItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.TypeArgument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected TypeArgumentItemProvider typeArgumentItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.TypeArgument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createTypeArgumentAdapter() {
        if (typeArgumentItemProvider == null) {
            typeArgumentItemProvider = new TypeArgumentItemProvider(this);
        }
        return typeArgumentItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected ConstraintItemProvider constraintItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createConstraintAdapter() {
        if (constraintItemProvider == null) {
            constraintItemProvider = new ConstraintItemProvider(this);
        }
        return constraintItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected ExpressionItemProvider expressionItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createExpressionAdapter() {
        if (expressionItemProvider == null) {
            expressionItemProvider = new ExpressionItemProvider(this);
        }
        return expressionItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link pivotmodel.AssociationProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected AssociationPropertyItemProvider associationPropertyItemProvider;

    /**
	 * This creates an adapter for a {@link pivotmodel.AssociationProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createAssociationPropertyAdapter() {
        if (associationPropertyItemProvider == null) {
            associationPropertyItemProvider = new AssociationPropertyItemProvider(this);
        }
        return associationPropertyItemProvider;
    }

    /**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }
        return null;
    }

    /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);
        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }
}
