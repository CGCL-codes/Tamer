package com.skruk.elvis.admin.manage.resources.gui;

import com.skruk.elvis.admin.gui.*;
import com.skruk.elvis.admin.manage.resources.*;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;

/**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
 * use. If Jigloo is being used commercially (ie, by a
 * for-profit company or business) then you should purchase
 * a license - please visit www.cloudgarden.com for details.
 *
 * @author     skruk
 * @created    20 lipiec 2004
 */
public class ResourceInternalFrame extends javax.swing.JInternalFrame implements FocusListener {

    /**  Description of the Field */
    ResourceEntry entry = null;

    /**  Description of the Field */
    NewResourcePanel panel = null;

    /**  Description of the Field */
    FrameCloseListener listener = null;

    /**  Description of the Field */
    static com.skruk.elvis.admin.i18n.ResourceFormatter formater = null;

    /**  Description of the Field */
    static com.skruk.elvis.admin.i18n.ResourceFormatter formaterMain = null;

    /**Constructor for the ResourceInternalFrame object */
    public ResourceInternalFrame() {
        initGUI();
    }

    /**
	 * Creates new form ResourceInternalFrame
	 *
	 * @param  _entry     Description of the Parameter
	 * @param  _listener  Description of the Parameter
	 */
    public ResourceInternalFrame(ResourceEntry _entry, FrameCloseListener _listener) {
        this.listener = _listener;
        this.entry = _entry;
        this.addFocusListener(this);
        initComponents();
        xInitComponents();
    }

    /**  Description of the Method */
    protected void xInitComponents() {
        this.setBounds(20, 20, com.skruk.elvis.admin.JElvisAdmin.getDesktop().getWidth() - 40, com.skruk.elvis.admin.JElvisAdmin.getDesktop().getHeight() - 40);
        this.panel = new NewResourcePanel(this.entry);
        this.getContentPane().add(this.panel, java.awt.BorderLayout.CENTER);
    }

    /**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {
        jpButtonsPanel = new javax.swing.JPanel();
        jpButtons = new javax.swing.JPanel();
        jbAccept = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        setTitle(getFormater().getText("add_resource_frame_name"));
        setToolTipText(getFormater().getText("add_resource_frame_description"));
        setFrameIcon(getFormater().getIcon("add_resource_frame_icon", 16, ""));
        jpButtonsPanel.setLayout(new java.awt.BorderLayout());
        jbAccept.setFont(new java.awt.Font("Dialog", 0, 10));
        jbAccept.setIcon(getFormater().getIcon("manage_resources_instance_icon", getFormaterMain().getInt("action_icon_size"), "accept"));
        jbAccept.setText(getFormater().getText("manage_resources_label_accept_instance"));
        jbAccept.setToolTipText(getFormater().getText("manage_resources_description_accept_instance"));
        jbAccept.setActionCommand("accept");
        jbAccept.setMaximumSize(new java.awt.Dimension(110, 22));
        jbAccept.setMinimumSize(new java.awt.Dimension(110, 22));
        jbAccept.setPreferredSize(new java.awt.Dimension(110, 22));
        jbAccept.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });
        jpButtons.add(jbAccept);
        jbCancel.setFont(new java.awt.Font("Dialog", 0, 10));
        jbCancel.setIcon(getFormater().getIcon("manage_resources_instance_icon", getFormaterMain().getInt("action_icon_size"), "cancel"));
        jbCancel.setText(getFormater().getText("manage_resources_label_cancel_instance"));
        jbCancel.setToolTipText(getFormater().getText("manage_resources_description_cancel_instance"));
        jbCancel.setActionCommand("cancel");
        jbCancel.setMaximumSize(new java.awt.Dimension(110, 22));
        jbCancel.setMinimumSize(new java.awt.Dimension(110, 22));
        jbCancel.setPreferredSize(new java.awt.Dimension(110, 22));
        jbCancel.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });
        jpButtons.add(jbCancel);
        jpButtonsPanel.add(jpButtons, java.awt.BorderLayout.EAST);
        getContentPane().add(jpButtonsPanel, java.awt.BorderLayout.SOUTH);
        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width - dialogSize.width) / 2, (screenSize.height - dialogSize.height) / 2);
    }

    /**
	 *  Description of the Method
	 *
	 * @param  evt  Description of the Parameter
	 */
    private void buttonActionPerformed(java.awt.event.ActionEvent evt) {
        this.setVisible(false);
        this.dispose();
        this.listener.actionClosePerformed(this.entry, ("accept".equals(evt.getActionCommand())) ? FrameCloseListener.FCL_ACCEPT : FrameCloseListener.FCL_CANCEL);
    }

    /**
	 *  Gets the formater attribute of the ResourceInternalFrame class
	 *
	 * @return    The formater value
	 */
    protected static com.skruk.elvis.admin.i18n.ResourceFormatter getFormater() {
        synchronized (ResourceDescriptionPanel.class) {
            if (formater == null) {
                formater = com.skruk.elvis.admin.plugin.ResourcesPlugin.getInstance().getFormater();
            }
        }
        return formater;
    }

    /**
	 *  Gets the formaterMain attribute of the ResourceInternalFrame class
	 *
	 * @return    The formaterMain value
	 */
    protected static com.skruk.elvis.admin.i18n.ResourceFormatter getFormaterMain() {
        synchronized (ResourceDescriptionPanel.class) {
            if (formaterMain == null) {
                formaterMain = com.skruk.elvis.admin.JElvisAdmin.getFormater();
            }
        }
        return formaterMain;
    }

    /**
	 *Invoked when a component gains the keyboard focus.
	 *
	 * @param  e  Description of the Parameter
	 */
    public void focusGained(FocusEvent e) {
    }

    /**
	 *Invoked when a component loses the keyboard focus.
	 *
	 * @param  e  Description of the Parameter
	 */
    public void focusLost(FocusEvent e) {
        System.out.println("FOCUS LOST");
        this.grabFocus();
    }

    /**  Description of the Field */
    private JButton jbAccept;

    /**  Description of the Field */
    private JButton jbCancel;

    /**  Description of the Field */
    private JPanel jpButtons;

    /**  Description of the Field */
    private JPanel jpButtonsPanel;

    /**
	 * Initializes the GUI.
	 * Auto-generated code - any changes you make will disappear.
	 */
    public void initGUI() {
        try {
            preInitGUI();
            jpButtonsPanel = new JPanel();
            jpButtons = new JPanel();
            jbAccept = new JButton();
            jbCancel = new JButton();
            BorderLayout thisLayout = new BorderLayout();
            this.getContentPane().setLayout(thisLayout);
            thisLayout.setHgap(0);
            thisLayout.setVgap(0);
            this.setVisible(true);
            this.setPreferredSize(new java.awt.Dimension(100, 100));
            this.setBounds(new java.awt.Rectangle(0, 0, 100, 100));
            BorderLayout jpButtonsPanelLayout = new BorderLayout();
            jpButtonsPanel.setLayout(jpButtonsPanelLayout);
            jpButtonsPanelLayout.setHgap(0);
            jpButtonsPanelLayout.setVgap(0);
            this.getContentPane().add(jpButtonsPanel, BorderLayout.SOUTH);
            FlowLayout jpButtonsLayout = new FlowLayout();
            jpButtons.setLayout(jpButtonsLayout);
            jpButtonsLayout.setAlignment(FlowLayout.CENTER);
            jpButtonsLayout.setHgap(5);
            jpButtonsLayout.setVgap(5);
            jpButtonsPanel.add(jpButtons, BorderLayout.EAST);
            jbAccept.setActionCommand("accept");
            jbAccept.setFont(new java.awt.Font("Dialog", 0, 10));
            jbAccept.setPreferredSize(new java.awt.Dimension(110, 22));
            jbAccept.setMinimumSize(new java.awt.Dimension(110, 22));
            jbAccept.setMaximumSize(new java.awt.Dimension(110, 22));
            jpButtons.add(jbAccept);
            jbAccept.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent evt) {
                    buttonActionPerformed(evt);
                }
            });
            jbCancel.setActionCommand("cancel");
            jbCancel.setFont(new java.awt.Font("Dialog", 0, 10));
            jbCancel.setPreferredSize(new java.awt.Dimension(110, 22));
            jbCancel.setMinimumSize(new java.awt.Dimension(110, 22));
            jbCancel.setMaximumSize(new java.awt.Dimension(110, 22));
            jpButtons.add(jbCancel);
            jbCancel.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent evt) {
                    buttonActionPerformed(evt);
                }
            });
            postInitGUI();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /** Add your pre-init code in here */
    public void preInitGUI() {
    }

    /** Add your post-init code in here */
    public void postInitGUI() {
    }

    /**
	 * Auto-generated main method
	 *
	 * @param  args  The command line arguments
	 */
    public static void main(String[] args) {
        showGUI();
    }

    /**
	 * This static method creates a new instance of this class and shows
	 * it inside a new JFrame, (unless it is already a JFrame).
	 *
	 * It is a convenience method for showing the GUI, but it can be
	 * copied and used as a basis for your own code.	*
	 * It is auto-generated code - the body of this method will be
	 * re-generated after any changes are made to the GUI.
	 * However, if you delete this method it will not be re-created.
	 */
    public static void showGUI() {
        try {
            javax.swing.JFrame frame = new javax.swing.JFrame();
            ResourceInternalFrame inst = new ResourceInternalFrame();
            javax.swing.JDesktopPane jdp = new javax.swing.JDesktopPane();
            jdp.add(inst);
            jdp.setPreferredSize(inst.getPreferredSize());
            frame.setContentPane(jdp);
            frame.getContentPane().setSize(inst.getSize());
            frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            frame.pack();
            frame.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
