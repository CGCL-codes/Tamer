package gate.wiki.antlr;

import java.io.*;
import java.util.Vector;
import java.util.regex.Pattern;

public class LaTeXTarget extends NOPTarget {

    private static int tableColumnCount = 0;

    private static boolean firstRow = false;

    private boolean inTable = false;

    private String tableContents = "";

    public LaTeXTarget() {
        this(new BufferedWriter(new OutputStreamWriter(System.out)));
    }

    public LaTeXTarget(Writer out) {
        this.out = out;
    }

    public String getTargetLanguage() {
        return Tool.LATEX;
    }

    protected void write(String s) {
        try {
            if (inTable) {
                tableContents += s;
            } else {
                out.write(s);
            }
            String c = extractLastCommand(s);
            if (c != null) {
                lastCommand = c;
            }
        } catch (IOException ioe) {
            System.err.println("Problem writing output");
            ioe.printStackTrace(System.err);
        }
    }

    /** insert head.html if found */
    public void begin() {
        writeln("% AUTOGENERATED FILE: ALL EDITS WILL BE LOST!!!");
        writeln("\\documentclass[a4paper,12pt]{report}");
        writeln("\\usepackage{fancyvrb, graphicx}");
        writeln("\\usepackage[breaklinks=true,colorlinks=true, anchorcolor={green} ]{hyperref}");
        writeln("\\begin{document}");
    }

    /** insert tail.html if found */
    public void end() {
        writeln("\\bibliographystyle{apalike}");
        writeln("\\bibliography{../big.bib}");
        writeln("\\end{document}");
        try {
            out.flush();
        } catch (IOException ioe) {
            System.err.println("Problem writing LaTeX output");
            ioe.printStackTrace(System.err);
        }
    }

    protected String extractLastCommand(String text) {
        if (text == null) {
            return null;
        }
        int i = text.lastIndexOf("\\");
        if (i < 0) {
            return null;
        }
        int begin = i;
        i++;
        int end = 0;
        while (i < text.length() && text.charAt(i) != '}') {
            i++;
        }
        if (i >= text.length()) {
            return null;
        }
        end = i;
        return text.substring(begin, end);
    }

    public void text(String t) {
        write(t);
    }

    public void bold(String t) {
        write("{\\bf " + angleBracketsEscape(t) + "}");
    }

    public void italic(String t) {
        write("{\\em " + angleBracketsEscape(t) + "}");
    }

    public void tt(String t) {
        write("{\\tt " + angleBracketsEscape(t) + "}");
    }

    public void beginListItem(int level) {
        write("\\item{");
    }

    public void endListItem(int level) {
        writeln("}\n");
    }

    public void begin_ul(int level) {
        write("\\begin{itemize}\n");
    }

    public void end_ul(int level) {
        write("\\end{itemize}\n");
    }

    public void begin_ol(int level) {
        write("\\begin{enumerate}\n");
    }

    public void end_ol(int level) {
        write("\\end{enumerate}\n");
    }

    public void paragraph() {
        write("\n\n");
    }

    public void linebreak() {
        write("\\\\");
    }

    public void blankline() {
        write("\\\\ \n \\\\ \n");
    }

    public void code(String c) {
        write("\n\\begin{Verbatim}");
        write(c);
        write("\\end{Verbatim}\n\n");
    }

    public void verbatim(String rawOutput) {
        write(rawOutput);
    }

    public void blockquote(String q) {
        write("\\begin{quote}\n");
        write("" + angleBracketsEscape(q) + "");
        write("\n\\end{quote}\n\n");
    }

    public void link(String url, String title) {
        if (title == null) {
            title = url;
        }
        title = angleBracketsEscape(title);
        write("\\href{" + url + "}{" + title + "}");
    }

    public void anchor(String name) {
        write("\\hypertarget{" + name + "}{}");
    }

    public void title(String title) {
        writeln("\\title{" + title + "}\n");
        writeln("\\maketitle");
    }

    public void beginSection(String title, int level) {
        title = angleBracketsEscape(title);
        write("\\");
        if (level == 1) {
            writeln("chapter{" + title + "}");
        } else {
            for (int i = 2; i < level; ++i) {
                write("sub");
            }
            writeln("section{" + title + "}");
        }
    }

    public void begin_table() {
        tableColumnCount = 0;
        inTable = true;
        firstRow = true;
        tableContents = "";
    }

    public void end_table() {
        if (firstRow) {
            ++tableColumnCount;
            firstRow = false;
        }
        write("\\\\ \\hline \\end{tabular}");
        inTable = false;
        String colWidth = Float.toString(1.0F / tableColumnCount);
        String pre = "\n\n\\begin{tabular}{";
        for (int i = 0; i < tableColumnCount; ++i) {
            pre += "|p{" + colWidth + "\\textwidth}";
        }
        pre += "|} \n \\hline";
        tableContents = pre + tableContents;
        write(tableContents);
    }

    public void col() {
        if (firstRow) {
            ++tableColumnCount;
        }
        write("&");
    }

    public void row() {
        if (firstRow) {
            ++tableColumnCount;
            firstRow = false;
        }
        write("\\\\ \\hline");
    }

    protected String angleBracketsEscape(String q) {
        q = q.replaceAll("%", "\\\\%");
        q = q.replaceAll("#", "\\\\#");
        q = q.replaceAll("_", "\\\\_");
        return q;
    }

    public void hr() {
        write("\\hrule");
    }

    public String beginEM() {
        return ("{\\em ");
    }

    public String endEM() {
        return ("}");
    }

    public String beginTT() {
        return ("{\\tt ");
    }

    public String endTT() {
        return ("}");
    }

    public String beginBF() {
        return ("{\\b ");
    }

    public String endBF() {
        return ("}");
    }

    public void longdash() {
        write("---");
    }

    public void contents() {
        writeln("\\tableofcontents");
    }

    /** Former plugins were turned into methods */
    public void image(YAMContext context, Vector args) {
        super.image(context, args);
        String imageName = (String) args.elementAt(0);
        String width = "";
        String height = "";
        if (args.size() > 1) {
            width = (String) args.elementAt(1);
            if (args.size() > 2) {
                height = (String) args.elementAt(2);
            }
        }
        StringBuffer ret = new StringBuffer("%output(\\includegraphics");
        boolean hw = false;
        String heightwidth = "";
        if (width != "") {
            width = width.substring(0, (width.length() - 2)) + "." + width.substring(width.length() - 2);
            heightwidth += "width=" + width + "\\textwidth";
            hw = true;
        }
        if (height != "") {
            if (hw) {
                heightwidth += ", ";
            }
            hw = true;
            height = height.substring(0, (height.length() - 2)) + "." + height.substring(height.length() - 2);
            heightwidth += "height=" + height + "\\textheight";
        }
        if (hw) {
            ret.append("[" + heightwidth + "]");
        }
        ret.append("{" + imageName + "})");
        write(ret.toString());
    }

    public void cite(YAMContext context, Vector args) {
        super.cite(context, args);
        StringBuffer result = new StringBuffer("%output(~\\cite{");
        for (int i = 0; i < args.size(); i++) {
            result.append(args.get(i));
            if (i < (args.size() - 1)) result.append(", ");
        }
        result.append("})");
        write(result.toString());
    }

    public void box(YAMContext context, Vector args) {
        super.box(context, args);
        String tml = (String) args.elementAt(0);
        StringBuffer ret = new StringBuffer("%output(\\begin{tabular}{|p{2cm}|}\n \\hline \\\\ \n");
        ret.append(tml.toString());
        ret.append("\\\\ \\hline \n \\end{tabular})");
    }

    public void eps(YAMContext context, Vector args) {
        super.eps(context, args);
        super.eps(context, args);
        String imageName = (String) args.elementAt(0);
        String scalex = "1.0";
        String scaley = "1.0";
        if (args.size() > 1) {
            if (args.size() != 3) {
                System.err.println("Missing EPS arg(s); line " + context.getLine());
                return;
            }
            scalex = (String) args.elementAt(1);
            scaley = (String) args.elementAt(2);
        }
        write("\n[Image " + imageName + "]\n");
    }

    public void footnote(YAMContext context, Vector args) {
        super.footnote(context, args);
        String tml = (String) args.elementAt(0);
        String ret = "%output(\\footnote{" + (tml.toString()).replaceAll("_", "\\\\_") + "})";
        write(ret);
    }

    public void notes(YAMContext context, Vector args) {
        super.notes(context, args);
        String notes = (String) args.elementAt(0);
        String output = "% ";
        int i = 0, j = 0;
        for (i = 0; i < notes.length(); ++i) {
            if (notes.charAt(i) == '\n') {
                output += notes.subSequence(j, i + 1) + "% ";
                j = i + 1;
            }
        }
        i = notes.length();
        output += notes.subSequence(j, i);
        write(output);
    }

    public void syndiag(YAMContext context, Vector args) {
        super.syndiag(context, args);
        String grammarSpec = (String) args.elementAt(0);
        write("\n<<\n" + grammarSpec + ">>\n");
    }

    public void tree(YAMContext context, Vector args) {
        super.tree(context, args);
        String treeSpec = (String) args.elementAt(0);
        write(treeSpec);
    }
}
