package generadorui.process;

import generadorui.GeneradoruiApp;
import generadorui.GeneradoruiApp.ProcessTypes;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.SwingWorker;
import org.achup.generador.ApplicationManager;
import org.achup.generador.print.PrintListener;
import org.achup.generador.print.PrintManager;
import org.achup.generador.project.Project;
import org.jdesktop.application.Action;

/**
 *
 * @author Marco Bassaletti Olivos.
 */
public class ProcessDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 0L;

    Project project;

    GeneradoruiApp.ProcessTypes processType;

    ProcessWorker processWorker;

    DisplayWorker displayWorker;

    /** Creates new form ProcessDialog */
    public ProcessDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        try {
            GeneradoruiApp.getInstance().getContext().getSessionStorage().restore(this, ProcessDialog.class.getName() + ".xml");
        } catch (IOException ex) {
            Logger.getLogger(ProcessDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public Project getProject() {
        return project;
    }

    public void setProject(Project project) {
        this.project = project;
    }

    public void setProcessType(ProcessTypes processType) {
        this.processType = processType;
    }

    public JTextArea getTextArea() {
        return runTextArea;
    }

    public JButton getOKButton() {
        return cancelButton;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        scrollPane = new javax.swing.JScrollPane();
        runTextArea = new javax.swing.JTextArea();
        cancelButton = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(generadorui.GeneradoruiApp.class).getContext().getResourceMap(ProcessDialog.class);
        setTitle(resourceMap.getString("Form.title"));
        setName("Form");
        addComponentListener(new java.awt.event.ComponentAdapter() {

            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        scrollPane.setName("scrollPane");
        runTextArea.setColumns(20);
        runTextArea.setRows(8);
        runTextArea.setName("runTextArea");
        scrollPane.setViewportView(runTextArea);
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(generadorui.GeneradoruiApp.class).getContext().getActionMap(ProcessDialog.class, this);
        cancelButton.setAction(actionMap.get("cancelAction"));
        cancelButton.setText(resourceMap.getString("cancelButton.text"));
        cancelButton.setName("cancelButton");
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE).addComponent(cancelButton, javax.swing.GroupLayout.Alignment.TRAILING)).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(scrollPane).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cancelButton).addContainerGap()));
        pack();
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {
        this.setTitle("Process running...");
        processWorker = new ProcessWorker(this);
        processWorker.execute();
        displayWorker = new DisplayWorker();
        displayWorker.execute();
        cancelButton.setText("Cancel Process");
    }

    @Action
    public void cancelAction() {
        if (!processWorker.isDone()) {
            ApplicationManager.setStopCondition(true);
            try {
                if (processWorker.get() == false) {
                    JOptionPane.showMessageDialog(this, processWorker.getMessage(), "Operation cancelled.", JOptionPane.ERROR_MESSAGE);
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(ProcessDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                Logger.getLogger(ProcessDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            GeneradoruiApp.getInstance().getContext().getSessionStorage().save(this, ProcessDialog.class.getName() + ".xml");
        } catch (IOException ex) {
            Logger.getLogger(ProcessDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
    }

    private javax.swing.JButton cancelButton;

    private javax.swing.JTextArea runTextArea;

    private javax.swing.JScrollPane scrollPane;

    class DisplayWorker extends SwingWorker<Object, String> implements PrintListener {

        LinkedBlockingDeque<String> lines = new LinkedBlockingDeque<String>();

        public DisplayWorker() {
            PrintManager.addPrintListener(this);
        }

        @Override
        protected Object doInBackground() throws Exception {
            while (!processWorker.isDone()) {
                String line = lines.takeFirst();
                publish(line);
            }
            return null;
        }

        @Override
        protected void process(List<String> chunks) {
            for (String line : chunks) {
                runTextArea.append(line);
            }
        }

        @Override
        protected void done() {
            PrintManager.removePrintListener(this);
            setTitle("Process finished.");
            runTextArea.append(System.getProperty("line.separator") + "Done." + System.getProperty("line.separator"));
        }

        public void printLine(String line) {
            lines.addLast(line);
        }
    }
}
