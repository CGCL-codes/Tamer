package org.xteam.sled.parser;

import java_cup.runtime.*;
import java.io.*;
import org.xteam.parser.runtime.IErrorReporter;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 4/9/10 3:05 PM from the specification file
 * <tt>/home/llhours/workspace/org.xteam.sled/src/org/xteam/sled/parser/Sled.flex</tt>
 */
public class SledLexer implements java_cup.runtime.Scanner {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int NL = 6;

    public static final int YYINITIAL = 0;

    public static final int STR = 2;

    public static final int OPERAND = 4;

    /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
    private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2, 3, 3 };

    /** 
   * Translates characters to character classes
   */
    private static final String ZZ_CMAP_PACKED = "\10\0\2\10\1\7\1\0\1\10\23\0\1\10\1\46\1\64\1\6" + "\2\0\1\47\1\0\1\36\1\37\1\54\1\52\1\45\1\53\1\63" + "\1\55\1\4\11\1\1\44\1\51\1\61\1\57\1\62\1\0\1\56" + "\6\3\21\2\1\5\2\2\1\42\1\65\1\43\1\60\1\2\1\0" + "\1\11\1\14\1\17\1\23\1\21\1\32\1\33\1\20\1\15\1\2" + "\1\22\1\31\1\34\1\12\1\24\1\30\1\2\1\26\1\25\1\16" + "\1\27\1\2\1\35\1\5\1\13\1\2\1\40\1\50\1\41ﾂ\0";

    /** 
   * Translates characters to character classes
   */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /** 
   * Translates DFA states to action switch labels.
   */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\4\0\1\1\1\2\1\3\1\2\1\4\1\5\1\6" + "\17\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15" + "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" + "\1\26\1\27\1\30\1\31\1\32\1\33\1\3\1\34" + "\1\35\1\36\1\37\1\40\1\41\1\42\3\3\1\43" + "\1\44\1\17\1\45\1\42\1\0\3\3\1\46\1\47" + "\4\3\1\50\12\3\1\51\1\52\1\53\1\3\1\54" + "\1\55\2\3\1\2\1\56\1\3\1\57\13\3\1\60" + "\3\3\1\61\20\3\1\62\1\3\1\63\1\64\14\3" + "\1\65\6\3\1\66\5\3\1\67\2\3\1\70\1\3" + "\1\71\16\3\1\72\5\3\1\73\2\3\1\74\1\3" + "\1\75\1\3\1\76\4\3\1\77\1\3\1\100\1\101" + "\1\102\1\103";

    private static int[] zzUnpackAction() {
        int[] result = new int[201];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** 
   * Translates a state to a row index in the transition table
   */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\66\0\154\0\242\0\330\0Ď\0ń\0ź" + "\0ư\0\330\0Ǧ\0Ȝ\0ɒ\0ʈ\0ʾ\0˴" + "\0̪\0͠\0Ζ\0ό\0Ђ\0и\0Ѯ\0Ҥ" + "\0Ӛ\0Ԑ\0\330\0\330\0\330\0\330\0\330\0\330" + "\0\330\0\330\0Ն\0\330\0\330\0\330\0\330\0\330" + "\0\330\0\330\0\330\0\330\0\330\0ռ\0ֲ\0ר" + "\0\330\0؞\0\330\0ٔ\0\330\0\330\0ڊ\0ۀ" + "\0۶\0ܬ\0\330\0\330\0\330\0\330\0ݢ\0ޘ" + "\0ߎ\0ࠄ\0࠺\0ń\0ń\0ࡰ\0ࢦ\0ࣜ" + "\0ऒ\0ń\0ै\0ॾ\0঴\0৪\0ਠ\0੖" + "\0ઌ\0ૂ\0૸\0ମ\0\330\0\330\0\330\0୤" + "\0\330\0ń\0ச\0ௐ\0ޘ\0ń\0ఆ\0ń" + "\0఼\0౲\0ನ\0ೞ\0ഔ\0ൊ\0඀\0බ" + "\0෬\0ย\0๘\0ń\0ຎ\0ໄ\0໺\0ń" + "\0༰\0ས\0ྜ\0࿒\0ဈ\0ှ\0ၴ\0Ⴊ" + "\0რ\0ᄖ\0ᅌ\0ᆂ\0ᆸ\0ᇮ\0ሤ\0ቚ" + "\0ń\0ነ\0ń\0ń\0዆\0ዼ\0ጲ\0፨" + "\0᎞\0Ꮤ\0ᐊ\0ᑀ\0ᑶ\0ᒬ\0ᓢ\0ᔘ" + "\0ń\0ᕎ\0ᖄ\0ᖺ\0ᗰ\0ᘦ\0ᙜ\0ń" + "\0ᚒ\0ᛈ\0᛾\0᜴\0ᝪ\0ń\0ហ\0៖" + "\0ń\0᠌\0ń\0ᡂ\0ᡸ\0᢮\0ᣤ\0ᤚ" + "\0ᥐ\0ᦆ\0ᦼ\0᧲\0ᨨ\0ᩞ\0᪔\0᫊" + "\0ᬀ\0ń\0ᬶ\0᭬\0ᮢ\0ᯘ\0ᰎ\0ń" + "\0᱄\0ᱺ\0ń\0Ჰ\0ń\0᳦\0ń\0ᴜ" + "\0ᵒ\0ᶈ\0ᶾ\0ń\0ᷴ\0ń\0ń\0ń" + "\0ń";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[201];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /** 
   * The transition table of the DFA
   */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\5\1\6\2\7\1\10\1\7\1\11\1\12\1\13" + "\1\14\1\15\1\7\1\16\1\17\1\20\1\21\1\7" + "\1\22\2\7\1\23\1\24\1\25\1\26\1\27\1\7" + "\1\30\1\31\1\7\1\32\1\33\1\34\1\35\1\36" + "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46" + "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56" + "\1\57\1\60\1\61\1\5\64\62\1\63\1\64\2\65" + "\2\7\1\65\1\7\1\11\1\66\1\67\4\7\1\70" + "\6\7\1\71\10\7\1\72\2\67\1\73\1\65\2\67" + "\1\74\1\67\1\75\14\65\1\7\1\61\1\65\2\76" + "\2\7\1\76\1\7\1\11\1\66\1\13\4\7\1\70" + "\6\7\1\71\10\7\1\72\2\77\1\73\1\76\2\77" + "\1\74\1\77\12\76\1\55\2\76\1\7\1\61\1\76" + "\67\0\1\6\2\0\1\6\62\0\5\7\3\0\25\7" + "\25\0\1\7\3\0\1\6\2\0\1\6\1\100\60\0" + "\7\11\1\0\56\11\10\0\1\13\56\0\5\7\3\0" + "\1\7\1\101\23\7\25\0\1\7\3\0\5\7\3\0" + "\1\102\24\7\25\0\1\7\3\0\5\7\3\0\4\7" + "\1\103\20\7\25\0\1\7\3\0\5\7\3\0\14\7" + "\1\104\10\7\25\0\1\7\3\0\5\7\3\0\13\7" + "\1\105\11\7\25\0\1\7\3\0\5\7\3\0\7\7" + "\1\106\3\7\1\107\11\7\25\0\1\7\3\0\5\7" + "\3\0\17\7\1\110\5\7\25\0\1\7\3\0\5\7" + "\3\0\5\7\1\111\13\7\1\112\3\7\25\0\1\7" + "\3\0\5\7\3\0\4\7\1\113\12\7\1\114\5\7" + "\25\0\1\7\3\0\5\7\3\0\10\7\1\115\14\7" + "\25\0\1\7\3\0\5\7\3\0\1\7\1\116\23\7" + "\25\0\1\7\3\0\5\7\3\0\1\117\17\7\1\120" + "\4\7\25\0\1\7\3\0\5\7\3\0\4\7\1\121" + "\6\7\1\122\11\7\25\0\1\7\3\0\5\7\3\0" + "\16\7\1\123\6\7\25\0\1\7\3\0\5\7\3\0" + "\7\7\1\124\15\7\25\0\1\7\61\0\1\125\65\0" + "\1\126\65\0\1\127\7\0\5\7\3\0\25\7\25\0" + "\1\130\2\0\64\62\66\0\1\131\11\0\1\67\25\0" + "\2\67\2\0\2\67\1\0\1\67\21\0\5\7\3\0" + "\14\7\1\132\10\7\25\0\1\7\3\0\5\7\3\0" + "\5\7\1\133\17\7\25\0\1\7\3\0\5\7\3\0" + "\7\7\1\134\15\7\25\0\1\7\40\0\2\77\2\0" + "\2\77\1\0\1\77\21\0\1\135\1\0\2\135\4\0" + "\1\135\2\0\1\135\2\0\1\135\1\0\1\135\1\0" + "\1\135\6\0\1\135\34\0\5\7\3\0\2\7\1\136" + "\22\7\25\0\1\7\3\0\5\7\3\0\23\7\1\137" + "\1\7\25\0\1\7\3\0\5\7\3\0\5\7\1\140" + "\17\7\25\0\1\7\3\0\5\7\3\0\10\7\1\141" + "\14\7\25\0\1\7\3\0\5\7\3\0\1\7\1\142" + "\23\7\25\0\1\7\3\0\5\7\3\0\14\7\1\143" + "\10\7\25\0\1\7\3\0\5\7\3\0\7\7\1\144" + "\15\7\25\0\1\7\3\0\5\7\3\0\22\7\1\145" + "\2\7\25\0\1\7\3\0\5\7\3\0\1\146\24\7" + "\25\0\1\7\3\0\5\7\3\0\20\7\1\147\4\7" + "\25\0\1\7\3\0\5\7\3\0\6\7\1\150\16\7" + "\25\0\1\7\3\0\5\7\3\0\5\7\1\151\17\7" + "\25\0\1\7\3\0\5\7\3\0\1\152\24\7\25\0" + "\1\7\3\0\5\7\3\0\10\7\1\153\14\7\25\0" + "\1\7\3\0\5\7\3\0\15\7\1\154\7\7\25\0" + "\1\7\3\0\5\7\3\0\1\155\24\7\25\0\1\7" + "\3\0\5\7\3\0\4\7\1\156\3\7\1\157\14\7" + "\25\0\1\7\3\0\5\7\3\0\25\7\25\0\1\160" + "\3\0\5\7\3\0\7\7\1\161\15\7\25\0\1\7" + "\3\0\5\7\3\0\10\7\1\162\14\7\25\0\1\7" + "\3\0\5\7\3\0\10\7\1\163\14\7\25\0\1\7" + "\3\0\5\7\3\0\6\7\1\164\16\7\25\0\1\7" + "\3\0\5\7\3\0\14\7\1\165\10\7\25\0\1\7" + "\3\0\5\7\3\0\4\7\1\166\20\7\25\0\1\7" + "\3\0\5\7\3\0\10\7\1\167\14\7\25\0\1\7" + "\3\0\5\7\3\0\1\7\1\170\23\7\25\0\1\7" + "\3\0\5\7\3\0\15\7\1\171\7\7\25\0\1\7" + "\3\0\5\7\3\0\13\7\1\172\11\7\25\0\1\7" + "\3\0\5\7\3\0\7\7\1\173\15\7\25\0\1\7" + "\3\0\5\7\3\0\5\7\1\174\17\7\25\0\1\7" + "\3\0\5\7\3\0\6\7\1\175\16\7\25\0\1\7" + "\3\0\5\7\3\0\20\7\1\176\4\7\25\0\1\7" + "\3\0\5\7\3\0\15\7\1\177\7\7\25\0\1\7" + "\3\0\5\7\3\0\6\7\1\200\16\7\25\0\1\7" + "\3\0\5\7\3\0\1\7\1\201\23\7\25\0\1\7" + "\3\0\5\7\3\0\10\7\1\202\14\7\25\0\1\7" + "\3\0\5\7\3\0\1\7\1\203\23\7\25\0\1\7" + "\3\0\5\7\3\0\14\7\1\204\10\7\25\0\1\7" + "\3\0\5\7\3\0\11\7\1\205\13\7\25\0\1\7" + "\3\0\5\7\3\0\5\7\1\206\17\7\25\0\1\7" + "\3\0\5\7\3\0\20\7\1\207\4\7\25\0\1\7" + "\3\0\5\7\3\0\15\7\1\210\7\7\25\0\1\7" + "\3\0\5\7\3\0\4\7\1\211\20\7\25\0\1\7" + "\3\0\5\7\3\0\14\7\1\212\10\7\25\0\1\7" + "\3\0\5\7\3\0\6\7\1\213\16\7\25\0\1\7" + "\3\0\5\7\3\0\10\7\1\214\14\7\25\0\1\7" + "\3\0\5\7\3\0\10\7\1\215\14\7\25\0\1\7" + "\3\0\5\7\3\0\10\7\1\216\14\7\25\0\1\7" + "\3\0\5\7\3\0\12\7\1\217\12\7\25\0\1\7" + "\3\0\5\7\3\0\1\220\24\7\25\0\1\7\3\0" + "\5\7\3\0\7\7\1\221\15\7\25\0\1\7\3\0" + "\5\7\3\0\15\7\1\222\7\7\25\0\1\7\3\0" + "\5\7\3\0\10\7\1\223\14\7\25\0\1\7\3\0" + "\5\7\3\0\15\7\1\224\7\7\25\0\1\7\3\0" + "\5\7\3\0\13\7\1\225\11\7\25\0\1\7\3\0" + "\5\7\3\0\24\7\1\226\25\0\1\7\3\0\5\7" + "\3\0\21\7\1\227\3\7\25\0\1\7\3\0\5\7" + "\3\0\10\7\1\230\14\7\25\0\1\7\3\0\5\7" + "\3\0\1\231\24\7\25\0\1\7\3\0\5\7\3\0" + "\6\7\1\232\16\7\25\0\1\7\3\0\5\7\3\0" + "\15\7\1\233\7\7\25\0\1\7\3\0\5\7\3\0" + "\7\7\1\234\15\7\25\0\1\7\3\0\5\7\3\0" + "\4\7\1\235\7\7\1\236\10\7\25\0\1\7\3\0" + "\5\7\3\0\1\7\1\237\23\7\25\0\1\7\3\0" + "\5\7\3\0\24\7\1\240\25\0\1\7\3\0\5\7" + "\3\0\12\7\1\241\12\7\25\0\1\7\3\0\5\7" + "\3\0\16\7\1\242\6\7\25\0\1\7\3\0\5\7" + "\3\0\1\7\1\243\23\7\25\0\1\7\3\0\5\7" + "\3\0\4\7\1\244\20\7\25\0\1\7\3\0\5\7" + "\3\0\4\7\1\245\20\7\25\0\1\7\3\0\5\7" + "\3\0\5\7\1\246\17\7\25\0\1\7\3\0\5\7" + "\3\0\11\7\1\247\13\7\25\0\1\7\3\0\5\7" + "\3\0\1\7\1\250\23\7\25\0\1\7\3\0\5\7" + "\3\0\13\7\1\251\11\7\25\0\1\7\3\0\5\7" + "\3\0\1\7\1\252\23\7\25\0\1\7\3\0\5\7" + "\3\0\5\7\1\253\17\7\25\0\1\7\3\0\5\7" + "\3\0\4\7\1\254\20\7\25\0\1\7\3\0\5\7" + "\3\0\6\7\1\255\16\7\25\0\1\7\3\0\5\7" + "\3\0\14\7\1\256\10\7\25\0\1\7\3\0\5\7" + "\3\0\6\7\1\257\16\7\25\0\1\7\3\0\5\7" + "\3\0\1\260\24\7\25\0\1\7\3\0\5\7\3\0" + "\10\7\1\261\14\7\25\0\1\7\3\0\5\7\3\0" + "\14\7\1\262\10\7\25\0\1\7\3\0\5\7\3\0" + "\20\7\1\263\4\7\25\0\1\7\3\0\5\7\3\0" + "\21\7\1\264\3\7\25\0\1\7\3\0\5\7\3\0" + "\10\7\1\265\14\7\25\0\1\7\3\0\5\7\3\0" + "\14\7\1\266\10\7\25\0\1\7\3\0\5\7\3\0" + "\5\7\1\267\17\7\25\0\1\7\3\0\5\7\3\0" + "\10\7\1\270\14\7\25\0\1\7\3\0\5\7\3\0" + "\1\271\24\7\25\0\1\7\3\0\5\7\3\0\3\7" + "\1\272\21\7\25\0\1\7\3\0\5\7\3\0\12\7" + "\1\273\12\7\25\0\1\7\3\0\5\7\3\0\12\7" + "\1\274\12\7\25\0\1\7\3\0\5\7\3\0\13\7" + "\1\275\11\7\25\0\1\7\3\0\5\7\3\0\10\7" + "\1\276\14\7\25\0\1\7\3\0\5\7\3\0\10\7" + "\1\277\14\7\25\0\1\7\3\0\5\7\3\0\13\7" + "\1\300\11\7\25\0\1\7\3\0\5\7\3\0\1\7" + "\1\301\23\7\25\0\1\7\3\0\5\7\3\0\20\7" + "\1\302\4\7\25\0\1\7\3\0\5\7\3\0\10\7" + "\1\303\14\7\25\0\1\7\3\0\5\7\3\0\12\7" + "\1\304\12\7\25\0\1\7\3\0\5\7\3\0\15\7" + "\1\305\7\7\25\0\1\7\3\0\5\7\3\0\5\7" + "\1\306\17\7\25\0\1\7\3\0\5\7\3\0\10\7" + "\1\307\14\7\25\0\1\7\3\0\5\7\3\0\15\7" + "\1\310\7\7\25\0\1\7\3\0\5\7\3\0\14\7" + "\1\311\10\7\25\0\1\7\2\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[7722];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static final int ZZ_UNKNOWN_ERROR = 0;

    private static final int ZZ_NO_MATCH = 1;

    private static final int ZZ_PUSHBACK_2BIG = 2;

    private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };

    /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\4\0\1\11\4\1\1\11\20\1\10\11\1\1\12\11" + "\3\1\1\11\1\1\1\11\1\1\2\11\4\1\4\11" + "\1\1\1\0\24\1\3\11\1\1\1\11\160\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[201];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
      from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
    private int yycolumn;

    /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    private StringBuffer buffer = new StringBuffer();

    private int lastState = YYINITIAL;

    private int lastPosition;

    private IErrorReporter reporter;

    public SledLexer(Reader reader, IErrorReporter reporter) {
        this(reader);
        this.reporter = reporter;
    }

    public Symbol symbol(int kind) {
        return new Symbol(kind, yychar, yychar + yylength());
    }

    public Symbol symbol(int kind, Object value) {
        return new Symbol(kind, yychar, yychar + yylength(), value);
    }

    public Symbol symbol(int kind, Object value, int position, int length) {
        return new Symbol(kind, position, position + length, value);
    }

    public void startNewLine() {
        yybegin(NL);
    }

    public void startOperands() {
        if (yystate() == NL) {
            yybegin(OPERAND);
        }
    }

    private void badCharacter(String msg) {
        reporter.reportError(yychar, yylength(), msg);
    }

    /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
    public SledLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
    public SledLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;
        int j = 0;
        while (i < 140) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
    private boolean zzRefill() throws java.io.IOException {
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }
        if (zzCurrentPos >= zzBuffer.length) {
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }
        int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);
        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }
        return true;
    }

    /**
   * Closes the input stream.
   */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        zzEndRead = zzStartRead;
        if (zzReader != null) zzReader.close();
    }

    /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }

    /**
   * Returns the current lexical state.
   */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
   * Returns the text matched by the current regular expression.
   */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
   * Returns the length of the matched text region.
   */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }
        throw new Error(message);
    }

    /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
    public void yypushback(int number) {
        if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG);
        zzMarkedPos -= number;
    }

    /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;
        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;
        while (true) {
            zzMarkedPosL = zzMarkedPos;
            yychar += zzMarkedPosL - zzStartRead;
            zzAction = -1;
            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
            zzState = ZZ_LEXSTATE[zzLexicalState];
            zzForAction: {
                while (true) {
                    if (zzCurrentPosL < zzEndReadL) zzInput = zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;
                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }
                }
            }
            zzMarkedPos = zzMarkedPosL;
            switch(zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 26:
                    {
                        return symbol(ISledTokens.LT);
                    }
                case 68:
                    break;
                case 19:
                    {
                        return symbol(ISledTokens.PLUS);
                    }
                case 69:
                    break;
                case 57:
                    {
                        return symbol(ISledTokens.EPSILON);
                    }
                case 70:
                    break;
                case 46:
                    {
                        return symbol(ISledTokens.ANY);
                    }
                case 71:
                    break;
                case 45:
                    {
                        yybegin(YYINITIAL);
                        return symbol(ISledTokens.IS);
                    }
                case 72:
                    break;
                case 51:
                    {
                        yybegin(YYINITIAL);
                        return symbol(ISledTokens.WHEN);
                    }
                case 73:
                    break;
                case 1:
                    {
                        badCharacter("bad character \'" + yycharat(0) + "\'");
                    }
                case 74:
                    break;
                case 30:
                    {
                        yybegin(lastState);
                        return symbol(ISledTokens.STRING, buffer.toString(), lastPosition, buffer.length() + 2);
                    }
                case 75:
                    break;
                case 31:
                    {
                        buffer.append('\\');
                    }
                case 76:
                    break;
                case 63:
                    {
                        return symbol(ISledTokens.GUARANTEED);
                    }
                case 77:
                    break;
                case 33:
                    {
                        yybegin(YYINITIAL);
                        return symbol(ISledTokens.NEWLINE);
                    }
                case 78:
                    break;
                case 61:
                    {
                        return symbol(ISledTokens.FIELDINFO);
                    }
                case 79:
                    break;
                case 52:
                    {
                        return symbol(ISledTokens.NAMES);
                    }
                case 80:
                    break;
                case 13:
                    {
                        return symbol(ISledTokens.COLO);
                    }
                case 81:
                    break;
                case 60:
                    {
                        return symbol(ISledTokens.UNCHECKED);
                    }
                case 82:
                    break;
                case 24:
                    {
                        return symbol(ISledTokens.EQUALS);
                    }
                case 83:
                    break;
                case 14:
                    {
                        return symbol(ISledTokens.COMA);
                    }
                case 84:
                    break;
                case 47:
                    {
                        return symbol(ISledTokens.BIT);
                    }
                case 85:
                    break;
                case 9:
                    {
                        return symbol(ISledTokens.LBRC);
                    }
                case 86:
                    break;
                case 64:
                    {
                        return symbol(ISledTokens.SIGNIFICANT);
                    }
                case 87:
                    break;
                case 59:
                    {
                        return symbol(ISledTokens.OTHERWISE);
                    }
                case 88:
                    break;
                case 11:
                    {
                        return symbol(ISledTokens.LBRT);
                    }
                case 89:
                    break;
                case 18:
                    {
                        return symbol(ISledTokens.SEMI);
                    }
                case 90:
                    break;
                case 44:
                    {
                        buffer.append('\"');
                    }
                case 91:
                    break;
                case 25:
                    {
                        return symbol(ISledTokens.HAT);
                    }
                case 92:
                    break;
                case 10:
                    {
                        return symbol(ISledTokens.RBRC);
                    }
                case 93:
                    break;
                case 21:
                    {
                        return symbol(ISledTokens.TIMES);
                    }
                case 94:
                    break;
                case 53:
                    {
                        return symbol(ISledTokens.WHICH);
                    }
                case 95:
                    break;
                case 12:
                    {
                        return symbol(ISledTokens.RBRT);
                    }
                case 96:
                    break;
                case 4:
                    {
                    }
                case 97:
                    break;
                case 6:
                    {
                    }
                case 98:
                    break;
                case 5:
                    {
                    }
                case 99:
                    break;
                case 17:
                    {
                        return symbol(ISledTokens.OR);
                    }
                case 100:
                    break;
                case 16:
                    {
                        return symbol(ISledTokens.AND);
                    }
                case 101:
                    break;
                case 28:
                    {
                        buffer.setLength(0);
                        lastPosition = yychar;
                        lastState = yystate();
                        yybegin(STR);
                    }
                case 102:
                    break;
                case 15:
                    {
                        return symbol(ISledTokens.EXCL);
                    }
                case 103:
                    break;
                case 62:
                    {
                        yybegin(YYINITIAL);
                        return symbol(ISledTokens.OTHERWISE);
                    }
                case 104:
                    break;
                case 23:
                    {
                        return symbol(ISledTokens.AT);
                    }
                case 105:
                    break;
                case 22:
                    {
                        return symbol(ISledTokens.DIV);
                    }
                case 106:
                    break;
                case 29:
                    {
                        buffer.append(yytext());
                    }
                case 107:
                    break;
                case 41:
                    {
                        return symbol(ISledTokens.NE);
                    }
                case 108:
                    break;
                case 32:
                    {
                        badCharacter("bad character \'" + yycharat(0) + "\' in operand");
                    }
                case 109:
                    break;
                case 58:
                    {
                        return symbol(ISledTokens.PATTERNS);
                    }
                case 110:
                    break;
                case 67:
                    {
                        return symbol(ISledTokens.CONSTRUCTORS);
                    }
                case 111:
                    break;
                case 65:
                    {
                        return symbol(ISledTokens.RELOCATABLE);
                    }
                case 112:
                    break;
                case 49:
                    {
                        return symbol(ISledTokens.DOTS);
                    }
                case 113:
                    break;
                case 36:
                    {
                        yybegin(YYINITIAL);
                        return symbol(ISledTokens.COLO);
                    }
                case 114:
                    break;
                case 3:
                    {
                        return symbol(ISledTokens.IDENT, yytext());
                    }
                case 115:
                    break;
                case 37:
                    {
                        badCharacter("bad character \'" + yycharat(0) + "\' in opcode");
                    }
                case 116:
                    break;
                case 20:
                    {
                        return symbol(ISledTokens.MINUS);
                    }
                case 117:
                    break;
                case 43:
                    {
                        return symbol(ISledTokens.GE);
                    }
                case 118:
                    break;
                case 35:
                    {
                        yybegin(YYINITIAL);
                        return symbol(ISledTokens.LBRC);
                    }
                case 119:
                    break;
                case 50:
                    {
                        return symbol(ISledTokens.WHEN);
                    }
                case 120:
                    break;
                case 42:
                    {
                        return symbol(ISledTokens.LE);
                    }
                case 121:
                    break;
                case 56:
                    {
                        return symbol(ISledTokens.CHECKED);
                    }
                case 122:
                    break;
                case 7:
                    {
                        return symbol(ISledTokens.LPAR);
                    }
                case 123:
                    break;
                case 34:
                    {
                        return symbol(ISledTokens.NOISE, yytext());
                    }
                case 124:
                    break;
                case 66:
                    {
                        return symbol(ISledTokens.PLACEHOLDER);
                    }
                case 125:
                    break;
                case 55:
                    {
                        return symbol(ISledTokens.FIELDS);
                    }
                case 126:
                    break;
                case 2:
                    {
                        return symbol(ISledTokens.INT, Integer.decode(yytext()));
                    }
                case 127:
                    break;
                case 40:
                    {
                        return symbol(ISledTokens.OF);
                    }
                case 128:
                    break;
                case 8:
                    {
                        return symbol(ISledTokens.RPAR);
                    }
                case 129:
                    break;
                case 39:
                    {
                        return symbol(ISledTokens.TO);
                    }
                case 130:
                    break;
                case 38:
                    {
                        return symbol(ISledTokens.IS);
                    }
                case 131:
                    break;
                case 54:
                    {
                        return symbol(ISledTokens.SPARSE);
                    }
                case 132:
                    break;
                case 48:
                    {
                        return symbol(ISledTokens.FOR);
                    }
                case 133:
                    break;
                case 27:
                    {
                        return symbol(ISledTokens.GT);
                    }
                case 134:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        switch(zzLexicalState) {
                            case NL:
                                {
                                    yybegin(YYINITIAL);
                                    return symbol(ISledTokens.NEWLINE);
                                }
                            case 202:
                                break;
                            case OPERAND:
                                {
                                    yybegin(YYINITIAL);
                                    return symbol(ISledTokens.NEWLINE);
                                }
                            case 203:
                                break;
                            default:
                                {
                                    return new java_cup.runtime.Symbol(ISledTokens.EOF);
                                }
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }
}
