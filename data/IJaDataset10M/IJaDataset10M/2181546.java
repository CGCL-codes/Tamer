package jashi.languages;

import jashi.*;
import java.util.*;

public class Mysql extends LanguageData {

    public Mysql() {
        LangName = "MySQL";
        CommentSingle = new HashMap<Integer, String>();
        CommentSingle.put(1, "--");
        CommentSingle.put(2, "#");
        CommentMulti = new HashMap<String, String>();
        CommentMulti.put("/*", "*/");
        CaseKeywords = 1;
        Quotemarks = new ArrayList<String>();
        Quotemarks.add("\'");
        Quotemarks.add("\"");
        EscapeChar = '\\';
        Keywords = new HashMap<Integer, ArrayList<String>>();
        ArrayList<String> KeyStrList1 = new ArrayList<String>();
        KeyStrList1.add("ALTERDATABASE");
        KeyStrList1.add("ALTERTABLE");
        KeyStrList1.add("CREATEDATABASE");
        KeyStrList1.add("CREATEINDEX");
        KeyStrList1.add("CREATETABLE");
        KeyStrList1.add("DROPDATABASE");
        KeyStrList1.add("DROPINDEX");
        KeyStrList1.add("DROPTABLE");
        KeyStrList1.add("RENAMETABLE");
        KeyStrList1.add("DELETE");
        KeyStrList1.add("DO");
        KeyStrList1.add("HANDLER");
        KeyStrList1.add("INSERT");
        KeyStrList1.add("LOADDATAINFILE");
        KeyStrList1.add("REPLACE");
        KeyStrList1.add("SELECT");
        KeyStrList1.add("TRUNCATE");
        KeyStrList1.add("UPDATE");
        KeyStrList1.add("DESCRIBE");
        KeyStrList1.add("USE");
        KeyStrList1.add("STARTTRANSACTION");
        KeyStrList1.add("COMMIT");
        KeyStrList1.add("ROLLBACK");
        KeyStrList1.add("SAVEPOINT");
        KeyStrList1.add("ROLLBACKTOSAVEPOINT");
        KeyStrList1.add("LOCKTABLES");
        KeyStrList1.add("UNLOCK_TABLES");
        KeyStrList1.add("SETTRANACTIONS");
        KeyStrList1.add("SET");
        KeyStrList1.add("SHOW");
        KeyStrList1.add("CREATEPROCEDURE");
        KeyStrList1.add("CREATEFUNCTION");
        KeyStrList1.add("ALTERPROCEDURE");
        KeyStrList1.add("ALTERFUNCTION");
        KeyStrList1.add("DROPPROCEDURE");
        KeyStrList1.add("DROPFUNCTION");
        KeyStrList1.add("SHOWCREATEPROCEDURE");
        KeyStrList1.add("SHOWCREATEFUNCTION");
        KeyStrList1.add("SHOWPROCEDURESTATUS");
        KeyStrList1.add("SHOWFUNCTIONSTATUS");
        KeyStrList1.add("CALL");
        KeyStrList1.add("BEGIN");
        KeyStrList1.add("END");
        KeyStrList1.add("DECLARE");
        KeyStrList1.add("CREATEROUTINE");
        KeyStrList1.add("ALTERROUTINE");
        KeyStrList1.add("CREATE");
        KeyStrList1.add("ALTER");
        KeyStrList1.add("DROP");
        KeyStrList1.add("PRIMARYKEY");
        KeyStrList1.add("VALUES");
        KeyStrList1.add("INTO");
        KeyStrList1.add("FROM");
        KeyStrList1.add("ANALYZE");
        KeyStrList1.add("BDB");
        KeyStrList1.add("BERKELEYDB");
        KeyStrList1.add("BTREE");
        KeyStrList1.add("BY");
        KeyStrList1.add("CASCADE");
        KeyStrList1.add("CHECK");
        KeyStrList1.add("COLUMN");
        KeyStrList1.add("COLUMNS");
        KeyStrList1.add("CONSTRAINT");
        KeyStrList1.add("CROSS");
        KeyStrList1.add("DATABASES");
        KeyStrList1.add("DELAYED");
        KeyStrList1.add("DISTINCT");
        KeyStrList1.add("DISTINCTROW");
        KeyStrList1.add("ENCLOSED");
        KeyStrList1.add("ERRORS");
        KeyStrList1.add("ESCAPED");
        KeyStrList1.add("EXISTS");
        KeyStrList1.add("EXPLAIN");
        KeyStrList1.add("FALSE");
        KeyStrList1.add("FIELDS");
        KeyStrList1.add("FORCE");
        KeyStrList1.add("FOREIGN");
        KeyStrList1.add("FULLTEXT");
        KeyStrList1.add("GEOMETRY");
        KeyStrList1.add("GRANT");
        KeyStrList1.add("GROUP");
        KeyStrList1.add("HASH");
        KeyStrList1.add("HAVING");
        KeyStrList1.add("HELP");
        KeyStrList1.add("HIGH_PRIORITY");
        KeyStrList1.add("IGNORE");
        KeyStrList1.add("INNER");
        KeyStrList1.add("INNODB");
        KeyStrList1.add("INTERVAL");
        KeyStrList1.add("JOIN");
        KeyStrList1.add("KEYS");
        KeyStrList1.add("KILL");
        KeyStrList1.add("LINES");
        KeyStrList1.add("LOW_PRIORITY");
        KeyStrList1.add("MASTER_SERVER_ID");
        KeyStrList1.add("MATCH");
        KeyStrList1.add("MIDDLEINT");
        KeyStrList1.add("MRG_MYISAM");
        KeyStrList1.add("NATURAL");
        KeyStrList1.add("OPTIMIZE");
        KeyStrList1.add("OPTION");
        KeyStrList1.add("OPTIONALLY");
        KeyStrList1.add("ORDER");
        KeyStrList1.add("OUTER");
        KeyStrList1.add("OUTFILE");
        KeyStrList1.add("PRIVILEGES");
        KeyStrList1.add("PURGE");
        KeyStrList1.add("READ");
        KeyStrList1.add("REFERENCES");
        KeyStrList1.add("REQUIRE");
        KeyStrList1.add("RESTRICT");
        KeyStrList1.add("RETURNS");
        KeyStrList1.add("REVOKE");
        KeyStrList1.add("RLIKE");
        KeyStrList1.add("RTREE");
        KeyStrList1.add("SOME");
        KeyStrList1.add("SONAME");
        KeyStrList1.add("SPATIAL");
        KeyStrList1.add("SQL_BIG_RESULT");
        KeyStrList1.add("SQL_CALC_FOUND_ROWS");
        KeyStrList1.add("SQL_SMALL_RESULT");
        KeyStrList1.add("SSL");
        KeyStrList1.add("STARTING");
        KeyStrList1.add("STRAIGHT_JOIN");
        KeyStrList1.add("STRIPED");
        KeyStrList1.add("TERMINATED");
        KeyStrList1.add("TRUE");
        KeyStrList1.add("TYPES");
        KeyStrList1.add("UNION");
        KeyStrList1.add("USAGE");
        KeyStrList1.add("USER_RESOURCES");
        KeyStrList1.add("USING");
        KeyStrList1.add("VARCHARACTER");
        KeyStrList1.add("WARNINGS");
        KeyStrList1.add("WHERE");
        KeyStrList1.add("WRITE");
        KeyStrList1.add("CASE");
        KeyStrList1.add("WHEN");
        KeyStrList1.add("THEN");
        KeyStrList1.add("ELSE");
        KeyStrList1.add("END");
        KeyStrList1.add("UNHEX");
        KeyStrList1.add("BIN");
        KeyStrList1.add("BIT_LENGTH");
        KeyStrList1.add("CHAR_LENGTH");
        KeyStrList1.add("CHARACTER_LENGTH");
        KeyStrList1.add("COMPRESS");
        KeyStrList1.add("CONCAT");
        KeyStrList1.add("CONCAT_WS");
        KeyStrList1.add("CONV");
        KeyStrList1.add("ELT");
        KeyStrList1.add("EXPORT_SET");
        KeyStrList1.add("FIELD");
        KeyStrList1.add("FIND_IN_SET");
        KeyStrList1.add("FORMAT");
        KeyStrList1.add("HEX");
        KeyStrList1.add("INSERT");
        KeyStrList1.add("INSTR");
        KeyStrList1.add("LCASE");
        KeyStrList1.add("LEFT");
        KeyStrList1.add("LENGTH");
        KeyStrList1.add("LOAD_FILE");
        KeyStrList1.add("LOCATE");
        KeyStrList1.add("LOWER");
        KeyStrList1.add("LPAD");
        KeyStrList1.add("LTRIM");
        KeyStrList1.add("MAKE_SET");
        KeyStrList1.add("MID");
        KeyStrList1.add("OCT");
        KeyStrList1.add("OCTET_LENGTH");
        KeyStrList1.add("ORD");
        KeyStrList1.add("POSITION");
        KeyStrList1.add("QUOTE");
        KeyStrList1.add("REPEAT");
        KeyStrList1.add("REPLACE");
        KeyStrList1.add("REVERSE");
        KeyStrList1.add("RIGHT");
        KeyStrList1.add("RPAD");
        KeyStrList1.add("RTRIM");
        KeyStrList1.add("SOUNDEX");
        KeyStrList1.add("SPACE");
        KeyStrList1.add("SUBSTRING");
        KeyStrList1.add("SUBSTRING_INDEX");
        KeyStrList1.add("TRIM");
        KeyStrList1.add("UCASE");
        KeyStrList1.add("UPPER");
        KeyStrList1.add("UNCOMPRESS");
        KeyStrList1.add("UNCOMPRESSD_LENGTH");
        KeyStrList1.add("MD5");
        KeyStrList1.add("SHA1");
        KeyStrList1.add("ABS");
        KeyStrList1.add("ACOS");
        KeyStrList1.add("ASIN");
        KeyStrList1.add("ATAN");
        KeyStrList1.add("ATAN2");
        KeyStrList1.add("CEILING");
        KeyStrList1.add("CEIL");
        KeyStrList1.add("COS");
        KeyStrList1.add("COT");
        KeyStrList1.add("CRC32");
        KeyStrList1.add("DEGREES");
        KeyStrList1.add("EXP");
        KeyStrList1.add("FLOOR");
        KeyStrList1.add("LN");
        KeyStrList1.add("LOG");
        KeyStrList1.add("LOG2");
        KeyStrList1.add("LOG10");
        KeyStrList1.add("MOD");
        KeyStrList1.add("PI");
        KeyStrList1.add("POW");
        KeyStrList1.add("POWER");
        KeyStrList1.add("RADIANS");
        KeyStrList1.add("RAND");
        KeyStrList1.add("ROUND");
        KeyStrList1.add("SIGN");
        KeyStrList1.add("SIN");
        KeyStrList1.add("SQRT");
        KeyStrList1.add("TAN");
        KeyStrList1.add("TRUNCATE");
        KeyStrList1.add("ADDDATE");
        KeyStrList1.add("ADDTIME");
        KeyStrList1.add("CONVERT_TZ");
        KeyStrList1.add("CURDATE");
        KeyStrList1.add("CURRENT_DATE");
        KeyStrList1.add("CURTIME");
        KeyStrList1.add("CURRENT_TIME");
        KeyStrList1.add("CURRENT_TIMESTAMP");
        KeyStrList1.add("DATEDIFF");
        KeyStrList1.add("DATE_ADD");
        KeyStrList1.add("DATE_SUB");
        KeyStrList1.add("DATE_FORMAT");
        KeyStrList1.add("DAY");
        KeyStrList1.add("DAYNAME");
        KeyStrList1.add("DAYOFMONTH");
        KeyStrList1.add("DAYOFWEEK");
        KeyStrList1.add("DAYOFYEAR");
        KeyStrList1.add("EXTRACT");
        KeyStrList1.add("FROM_DAYS");
        KeyStrList1.add("FROM_UNIXTIME");
        KeyStrList1.add("GET_FORMAT");
        KeyStrList1.add("LAST_DAY");
        KeyStrList1.add("LOCALTIME");
        KeyStrList1.add("LOCALTIMESTAMP");
        KeyStrList1.add("MAKEDATE");
        KeyStrList1.add("MAKETIME");
        KeyStrList1.add("MICROSECOND");
        KeyStrList1.add("MONTHNAME");
        KeyStrList1.add("NOW");
        KeyStrList1.add("PERIOD_ADD");
        KeyStrList1.add("PERIOD_DIFF");
        KeyStrList1.add("QUARTER");
        KeyStrList1.add("SECOND");
        KeyStrList1.add("SEC_TO_TIME");
        KeyStrList1.add("STR_TO_DATE");
        KeyStrList1.add("SUBDATE");
        KeyStrList1.add("SUBTIME");
        KeyStrList1.add("SYSDATE");
        KeyStrList1.add("TIME");
        KeyStrList1.add("TIMEDIFF");
        KeyStrList1.add("TIMESTAMP");
        KeyStrList1.add("TIMESTAMPADD");
        KeyStrList1.add("TIMESTAMPDIFF");
        KeyStrList1.add("TIME_FORMAT");
        KeyStrList1.add("TIME_TO_SEC");
        KeyStrList1.add("TO_DAYS");
        KeyStrList1.add("UNIX_TIMESTAMP");
        KeyStrList1.add("UTC_DATE");
        KeyStrList1.add("UTC_TIME");
        KeyStrList1.add("UTC_TIMESTAMP");
        KeyStrList1.add("WEEKDAY");
        KeyStrList1.add("WEEKOFYEAR");
        KeyStrList1.add("YEARWEEK");
        Keywords.put(1, KeyStrList1);
        ArrayList<String> KeyStrList2 = new ArrayList<String>();
        KeyStrList2.add("INTEGER");
        KeyStrList2.add("SMALLINT");
        KeyStrList2.add("DECIMAL");
        KeyStrList2.add("NUMERIC");
        KeyStrList2.add("FLOAT");
        KeyStrList2.add("REAL");
        KeyStrList2.add("DOUBLEPRECISION");
        KeyStrList2.add("DOUBLE");
        KeyStrList2.add("INT");
        KeyStrList2.add("DEC");
        KeyStrList2.add("BIT");
        KeyStrList2.add("TINYINT");
        KeyStrList2.add("SMALLINT");
        KeyStrList2.add("MEDIUMINT");
        KeyStrList2.add("BIGINT");
        KeyStrList2.add("DATETIME");
        KeyStrList2.add("DATE");
        KeyStrList2.add("TIMESTAMP");
        KeyStrList2.add("TIME");
        KeyStrList2.add("YEAR");
        KeyStrList2.add("CHAR");
        KeyStrList2.add("VARCHAR");
        KeyStrList2.add("BINARY");
        KeyStrList2.add("CHARACTERVARYING");
        KeyStrList2.add("VARBINARY");
        KeyStrList2.add("TINYBLOB");
        KeyStrList2.add("TINYTEXT");
        KeyStrList2.add("BLOB");
        KeyStrList2.add("TEXT");
        KeyStrList2.add("MEDIUMBLOB");
        KeyStrList2.add("MEDIUMTEXT");
        KeyStrList2.add("LONGBLOB");
        KeyStrList2.add("LONGTEXT");
        KeyStrList2.add("ENUM");
        KeyStrList2.add("SET");
        KeyStrList2.add("SERIALDEFAULTVALUE");
        KeyStrList2.add("SERIAL");
        KeyStrList2.add("FIXED");
        Keywords.put(2, KeyStrList2);
        ArrayList<String> KeyStrList3 = new ArrayList<String>();
        KeyStrList3.add("ZEROFILL");
        KeyStrList3.add("NOTNULL");
        KeyStrList3.add("UNSIGNED");
        KeyStrList3.add("AUTO_INCREMENT");
        KeyStrList3.add("UNIQUE");
        KeyStrList3.add("NOT");
        KeyStrList3.add("NULL");
        KeyStrList3.add("CHARACTERSET");
        KeyStrList3.add("CHARSET");
        KeyStrList3.add("ASCII");
        KeyStrList3.add("UNICODE");
        KeyStrList3.add("NATIONAL");
        KeyStrList3.add("BOTH");
        KeyStrList3.add("LEADING");
        KeyStrList3.add("TRAILING");
        KeyStrList3.add("DEFAULT");
        Keywords.put(3, KeyStrList3);
        ArrayList<String> KeyStrList4 = new ArrayList<String>();
        KeyStrList4.add("MICROSECOND");
        KeyStrList4.add("SECOND");
        KeyStrList4.add("MINUTE");
        KeyStrList4.add("HOUR");
        KeyStrList4.add("DAY");
        KeyStrList4.add("WEEK");
        KeyStrList4.add("MONTH");
        KeyStrList4.add("QUARTER");
        KeyStrList4.add("YEAR");
        KeyStrList4.add("SECOND_MICROSECOND");
        KeyStrList4.add("MINUTE_MICROSECOND");
        KeyStrList4.add("MINUTE_SECOND");
        KeyStrList4.add("HOUR_MICROSECOND");
        KeyStrList4.add("HOUR_SECOND");
        KeyStrList4.add("HOUR_MINUTE");
        KeyStrList4.add("DAY_MICROSECOND");
        KeyStrList4.add("DAY_SECOND");
        KeyStrList4.add("DAY_MINUTE");
        KeyStrList4.add("DAY_HOUR");
        KeyStrList4.add("YEAR_MONTH");
        Keywords.put(4, KeyStrList4);
        ArrayList<String> KeyStrList5 = new ArrayList<String>();
        KeyStrList5.add("OR");
        KeyStrList5.add("XOR");
        KeyStrList5.add("AND");
        KeyStrList5.add("NOT");
        KeyStrList5.add("BETWEEN");
        KeyStrList5.add("IS");
        KeyStrList5.add("LIKE");
        KeyStrList5.add("REGEXP");
        KeyStrList5.add("IN");
        KeyStrList5.add("DIV");
        KeyStrList5.add("MOD");
        KeyStrList5.add("BINARY");
        KeyStrList5.add("COLLATE");
        KeyStrList5.add("LIMIT");
        KeyStrList5.add("OFFSET");
        Keywords.put(5, KeyStrList5);
        Symbols = new HashMap<Integer, ArrayList<String>>();
        ArrayList<String> SymStrList = new ArrayList<String>();
        SymStrList.add(":=");
        SymStrList.add("||");
        SymStrList.add("OR");
        SymStrList.add("XOR");
        SymStrList.add("&&");
        SymStrList.add("AND");
        SymStrList.add("NOT");
        SymStrList.add("BETWEEN");
        SymStrList.add("CASE");
        SymStrList.add("WHEN");
        SymStrList.add("THEN");
        SymStrList.add("ELSE");
        SymStrList.add("=");
        SymStrList.add("<=>");
        SymStrList.add(">=");
        SymStrList.add(">");
        SymStrList.add("<=");
        SymStrList.add("<");
        SymStrList.add("<>");
        SymStrList.add("!=");
        SymStrList.add("IS");
        SymStrList.add("LIKE");
        SymStrList.add("REGEXP");
        SymStrList.add("IN");
        SymStrList.add("|");
        SymStrList.add("&");
        SymStrList.add("<<");
        SymStrList.add(">>");
        SymStrList.add("-");
        SymStrList.add("+");
        SymStrList.add("*");
        SymStrList.add("/");
        SymStrList.add("DIV");
        SymStrList.add("%");
        SymStrList.add("MOD");
        SymStrList.add("^");
        SymStrList.add("~");
        SymStrList.add("!");
        SymStrList.add("BINARY");
        SymStrList.add("COLLATE");
        SymStrList.add("(");
        SymStrList.add(")");
        Symbols.put(Global.JASHI_STUBINDEX, SymStrList);
        CaseSensitive = new HashMap<Integer, Boolean>();
        CaseSensitive.put(Global.GESHI_COMMENTS, false);
        CaseSensitive.put(1, false);
        CaseSensitive.put(2, false);
        CaseSensitive.put(3, false);
        CaseSensitive.put(4, false);
        CaseSensitive.put(5, false);
        Styles.Keywords.put(1, "color:#993333;font-weight:bold;");
        Styles.Keywords.put(2, "color:#aa9933;font-weight:bold;");
        Styles.Keywords.put(3, "color:#aa3399;font-weight:bold;");
        Styles.Keywords.put(4, "color:#33aa99;font-weight:bold;");
        Styles.Keywords.put(5, "color:#993333;font-weight:bold;");
        Styles.Comments.put(Global.MULTI, "color:#808080;font-style:italic;");
        Styles.Comments.put(1, "color:#808080;font-style:italic;");
        Styles.Comments.put(2, "color:#808080;font-style:italic;");
        Styles.EscapeChar.put(0, "color:#000099;font-weight:bold;");
        Styles.Brackets.put(0, "color:#66cc66;");
        Styles.Strings.put(0, "color:#ff0000;");
        Styles.Numbers.put(0, "color:#cc66cc;");
        Styles.Symbols.put(0, "color:#66cc66;");
        OOLANG = false;
        ObjectSplitters = new HashMap<Integer, String>();
        Regexps = new HashMap<Integer, HashMap<Integer, String>>();
        StrictModeApplies = Global.GESHI_NEVER;
        ScriptDelimiters = new HashMap<Integer, HashMap<String, String>>();
        HighlightStrictBlock = new HashMap<Integer, Boolean>();
    }
}
