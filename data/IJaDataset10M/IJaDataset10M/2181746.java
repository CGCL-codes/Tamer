package org.oclc.da.ndiipp.struts.analysis.action;

import java.util.ArrayList;
import java.util.Collections;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.oclc.da.common.textformat.NDIIPPDate;
import org.oclc.da.exceptions.DAException;
import org.oclc.da.ndiipp.common.guid.GUIDGenerator;
import org.oclc.da.ndiipp.struts.analysis.form.EditAnalysisForm;
import org.oclc.da.ndiipp.struts.analysis.util.AnalysisBean;
import org.oclc.da.ndiipp.struts.analysis.util.AnalysisDataLayerFacade;
import org.oclc.da.ndiipp.struts.analysis.util.RunDataLayerFacade;
import org.oclc.da.ndiipp.struts.analysis.util.RunDefBean;
import org.oclc.da.ndiipp.struts.analysis.util.ShortAnalysisDefBean;
import org.oclc.da.ndiipp.struts.core.action.NDIIPPAction;
import org.oclc.da.ndiipp.struts.core.form.NDIIPPForm;
import org.oclc.da.ndiipp.struts.core.util.NDIIPPDataLayerFacade;
import org.oclc.da.ndiipp.struts.core.util.ScheduleBean;
import org.oclc.da.ndiipp.struts.core.util.TreeConst;
import org.oclc.da.ndiipp.struts.core.util.WebsiteListBean;
import org.oclc.da.ndiipp.struts.core.util.WebsiteListBeanComparator;
import org.oclc.da.ndiipp.struts.domain.util.DomainDataLayerFacade;
import org.oclc.da.ndiipp.struts.entity.util.EntityBean;
import org.oclc.da.ndiipp.struts.entity.util.EntityDataLayerFacade;
import org.oclc.da.ndiipp.struts.entity.util.ShortEntityBean;
import org.oclc.da.ndiipp.struts.system.util.SpiderSettingsBean;

/**
 * This action class responds to events from the EditAnalysis page
 * <P>
 * @author Joe Nelson
 */
public class EditAnalysisAction extends NDIIPPAction {

    /**
     * Add this new element (Entity or Associated Analysis) to the database
     * <P>
     * @param mapping The action mapping associated with the data form
     * @param session The users web session object
     * @param eaf The data form object
     * @param facade The relevant data layer facade
     * @return The action forward generated by the add
     */
    private ActionForward addElement(ActionMapping mapping, HttpSession session, EditAnalysisForm eaf, EntityDataLayerFacade facade) {
        ActionForward action = mapping.findForward("success");
        String newElementType = eaf.getNewElementType();
        if ("Entity".equals(newElementType)) {
            ArrayList add = new ArrayList();
            EntityBean newEntity = new EntityBean();
            newEntity.setKeyName(eaf.getNewEntity());
            eaf.setEntityName(eaf.getNewEntity());
            add.add(newEntity);
            try {
                facade.update(add, new ArrayList(), new ArrayList());
                AnalysisBean ab = fillAnalysisBean(session, eaf);
                session.setAttribute("analysis", ab);
                action = mapping.findForward("addData");
            } catch (DAException e) {
                action = mapping.findForward("error");
                session.setAttribute("error", e);
            }
        } else if ("Website".equals(newElementType)) {
            WebsiteListBean newWebsite = new WebsiteListBean();
            newWebsite.setName(eaf.getNewElement());
            newWebsite.setInAnalysis(true);
            try {
                if (!"".equals(eaf.getEntityGUID())) {
                    facade.addWebsite(eaf.getEntityGUID(), newWebsite);
                }
                eaf.addWebsite(newWebsite);
                AnalysisBean ab = fillAnalysisBean(session, eaf);
                session.setAttribute("analysis", ab);
            } catch (DAException e) {
                action = mapping.findForward("error");
                session.setAttribute("error", e);
            }
            action = mapping.findForward("addData");
        }
        return action;
    }

    /**
     * Delete this object from the database
     * <P>
     * @param mapping The action mapping associated with the data form
     * @param session The users web session object
     * @param eaf The data form object
     * @param facade The relevant data layer facade
     * @return The action forward generated by the delete
     */
    private ActionForward delete(ActionMapping mapping, HttpSession session, EditAnalysisForm eaf, AnalysisDataLayerFacade facade) {
        ActionForward action = mapping.findForward("success");
        ArrayList add = new ArrayList();
        ArrayList update = new ArrayList();
        ArrayList delete = new ArrayList();
        AnalysisBean newAnalysis = fillAnalysisBean(session, eaf);
        delete.add(newAnalysis);
        try {
            facade.update(add, update, delete);
        } catch (DAException dae) {
            action = mapping.findForward("error");
            session.setAttribute("error", dae);
        }
        session.removeAttribute(TreeConst.ANALYSIS_VIEW_OBJECT);
        session.removeAttribute(TreeConst.ANALYSIS_COMPARE_OBJECT);
        session.removeAttribute(TreeConst.ANALYSIS_SERIES_OBJECT);
        return action;
    }

    /**
     * (non-Javadoc)
     * @see org.apache.struts.action.Action#execute(
     *      org.apache.struts.action.ActionMapping,
     *      org.apache.struts.action.ActionForm,
     *      javax.servlet.http.HttpServletRequest,
     *      javax.servlet.http.HttpServletResponse)
     */
    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ServletException {
        HttpSession session = request.getSession();
        if (session == null) {
            return (mapping.findForward("noSession"));
        }
        EditAnalysisForm eaf = (EditAnalysisForm) form;
        String timeoutReached = request.getParameter("timeoutReached");
        if ((timeoutReached == null) || "".equals(timeoutReached)) {
            eaf.setTimeoutReached("false");
        } else {
            eaf.setTimeoutReached(timeoutReached);
        }
        ActionForward action = mapping.findForward("success");
        if ("".equals(eaf.getEntityName())) {
            eaf.setEntityGUID("");
        }
        if (eaf.getNewElementType().equals("setNewEntity")) {
            AnalysisBean ab = (AnalysisBean) session.getAttribute("analysis");
            if (ab != null) {
                ab.setEntityName(eaf.getEntityName());
                setEntityGuid(session, eaf);
                ab.setEntityGUID(eaf.getEntityGUID());
                session.setAttribute("analysis", ab);
            }
            eaf.setNewElementType("");
            return (mapping.findForward("addData"));
        }
        AnalysisDataLayerFacade facade = (AnalysisDataLayerFacade) session.getAttribute(NDIIPPDataLayerFacade.ANALYSIS_SERVER);
        if (facade == null) {
            facade = new AnalysisDataLayerFacade(session);
        }
        DomainDataLayerFacade domainFacade = (DomainDataLayerFacade) session.getAttribute(NDIIPPDataLayerFacade.DOMAIN_SERVER);
        if (domainFacade == null) {
            domainFacade = new DomainDataLayerFacade(session);
        }
        EntityDataLayerFacade entityFacade = (EntityDataLayerFacade) session.getAttribute(NDIIPPDataLayerFacade.ENTITY_SERVER);
        if (entityFacade == null) {
            entityFacade = new EntityDataLayerFacade(session);
        }
        RunDataLayerFacade runFacade = (RunDataLayerFacade) session.getAttribute(NDIIPPDataLayerFacade.RUN_SERVER);
        if (runFacade == null) {
            runFacade = new RunDataLayerFacade(session);
        }
        domainFacade.clearEditToken(session);
        try {
            if (request.getParameter("cancel") != null) {
                if (eaf.getSaveFlag().equals(NDIIPPForm.SAVE)) {
                    action = update(mapping, session, eaf, facade);
                }
                action = goBack(mapping, session);
            } else if (request.getParameter("delete") != null) {
                action = delete(mapping, session, eaf, facade);
                action = goBack(mapping, session);
            } else if (request.getParameter("save") != null) {
                action = update(mapping, session, eaf, facade);
                action = goBack(mapping, session);
            } else if (request.getParameter("addData") != null) {
                action = addElement(mapping, session, eaf, entityFacade);
            } else if (request.getParameter("makeBaseline") != null) {
                RunDefBean rdb = (RunDefBean) session.getAttribute(TreeConst.RUN_DEF);
                if (rdb == null) {
                    rdb = (RunDefBean) session.getAttribute(TreeConst.RUN_DEF_SAVED);
                    if (rdb == null) {
                        action = mapping.findForward("error");
                        session.setAttribute("ERROR_TEXT", "The run definition cannot be found for this analysis.");
                        return (action);
                    }
                }
                AnalysisBean ab = (AnalysisBean) session.getAttribute("analysis");
                if (ab != null) {
                    facade.makeBaseline(rdb, ab);
                } else {
                    action = mapping.findForward("error");
                    session.setAttribute("ERROR_TEXT", "The analysis definition cannot be found.");
                    return (action);
                }
                session.removeAttribute(TreeConst.ANALYSIS_VIEW_OBJECT);
                session.removeAttribute(TreeConst.ANALYSIS_COMPARE_OBJECT);
                session.removeAttribute(TreeConst.ANALYSIS_TREE_VIEW);
                session.removeAttribute(TreeConst.ANALYSIS_TREE_COMPARE);
                session.removeAttribute(TreeConst.ANALYSIS_SERIES_OBJECT);
                session.removeAttribute(TreeConst.ANALYSIS_TREE_SERIES);
                action = goBack(mapping, session);
            } else if (request.getParameter("deleteRun") != null) {
                try {
                    RunDefBean rdb = (RunDefBean) session.getAttribute(TreeConst.RUN_DEF);
                    if (rdb != null) {
                        ArrayList<RunDefBean> deleteList = new ArrayList<RunDefBean>();
                        deleteList.add(rdb);
                        runFacade.update(new ArrayList(), new ArrayList(), deleteList);
                    }
                } catch (DAException e) {
                    action = mapping.findForward("error");
                    session.setAttribute("error", e);
                }
                session.removeAttribute(TreeConst.ANALYSIS_VIEW_OBJECT);
                session.removeAttribute(TreeConst.ANALYSIS_COMPARE_OBJECT);
                session.removeAttribute(TreeConst.ANALYSIS_TREE_VIEW);
                session.removeAttribute(TreeConst.ANALYSIS_TREE_COMPARE);
                session.removeAttribute(TreeConst.ANALYSIS_SERIES_OBJECT);
                session.removeAttribute(TreeConst.ANALYSIS_TREE_SERIES);
                action = goBack(mapping, session);
            } else if (request.getParameter("deleteWebsite") != null) {
                action = mapping.findForward("addData");
                try {
                    ArrayList<WebsiteListBean> websites = eaf.getWebsites();
                    for (int ii = websites.size() - 1; ii >= 0; ii--) {
                        WebsiteListBean thisBean = websites.get(ii);
                        if (thisBean.getDelete().equals("on")) {
                            facade.deleteWebsite(thisBean, thisBean.isUsedElsewhere(), eaf.isPropogate());
                            websites.remove(ii);
                            AnalysisBean ab = (AnalysisBean) session.getAttribute("analysis");
                            ab.setWebsites(websites);
                        }
                    }
                } catch (DAException e) {
                    e.printStackTrace();
                    action = mapping.findForward("error");
                    session.setAttribute("error", e);
                } finally {
                }
            }
        } finally {
            eaf.reset(mapping, request);
            session.setAttribute(NDIIPPDataLayerFacade.DOMAIN_SERVER, domainFacade);
            session.setAttribute(NDIIPPDataLayerFacade.ENTITY_SERVER, entityFacade);
            session.setAttribute(NDIIPPDataLayerFacade.ANALYSIS_SERVER, facade);
            session.setAttribute(NDIIPPDataLayerFacade.RUN_SERVER, runFacade);
        }
        return (action);
    }

    /**
     * Fill the analysis bean from the data form.
     * <P>
     * @param session The user's web session
     * @param eaf The relevant data form
     * @return The filled analysis bean
     */
    private AnalysisBean fillAnalysisBean(HttpSession session, EditAnalysisForm eaf) {
        if (!"".equals(eaf.getAnalysisCreator())) {
            eaf.setEntityName(eaf.getAnalysisCreator());
            eaf.setEntityGUID("");
        }
        setEntityGuid(session, eaf);
        setSpiderGUID(session, eaf);
        ScheduleBean schedule = null;
        if (eaf.isActive()) {
            schedule = fillScheduleBean(eaf);
        } else {
            schedule = new ScheduleBean();
        }
        ArrayList<WebsiteListBean> websites = eaf.getWebsites();
        for (int ii = websites.size() - 1; ii >= 0; ii--) {
            if (!websites.get(ii).isInAnalysis()) {
                websites.remove(ii);
            }
        }
        Collections.sort(websites, new WebsiteListBeanComparator());
        if ("".equals(eaf.getGuid())) {
            GUIDGenerator generator = new GUIDGenerator();
            eaf.setGuid(generator.generate());
        }
        if ("".equals(eaf.getEntityName())) {
            eaf.setEntityGUID("");
            eaf.setEntityName("");
        }
        AnalysisBean newAnalysis = new AnalysisBean(eaf.isActive(), schedule, eaf.getChangePercent(), eaf.getChangeThreshold(), eaf.getDateLastRun(), eaf.getEntityName(), eaf.getEntityGUID(), eaf.getGuid(), eaf.getName(), eaf.getSpiderSettingsName(), eaf.getSpiderSettingsGUID(), eaf.getSortWebsite(), websites);
        return newAnalysis;
    }

    /**
     * Fill the schedule bean from the analysis form.
     * <P>
     * @param eaf The analysis form.
     * @return The filled schedule bean.
     */
    private ScheduleBean fillScheduleBean(EditAnalysisForm eaf) {
        ScheduleBean schedule = new ScheduleBean();
        NDIIPPDate ndate = new NDIIPPDate();
        schedule.setType(eaf.getScheduleType());
        if ("None".equals(eaf.getRecurrenceType())) {
            schedule.setNumRecurrences("");
            schedule.setEndDate(null);
        } else if ("Count".equals(eaf.getRecurrenceType())) {
            schedule.setNumRecurrences(eaf.getNumRecurrences());
            schedule.setEndDate(null);
        } else if ("Date".equals(eaf.getRecurrenceType())) {
            schedule.setNumRecurrences("");
            try {
                schedule.setEndDate(ndate.dateTime(eaf.getEndDate() + " 01:00:00"));
            } catch (DAException e) {
                schedule.setEndDate(null);
            }
        }
        schedule.setRecurrencePeriod(eaf.getRecurrencePeriod());
        try {
            if (NDIIPPForm.NOW.equals(eaf.getStartTime())) {
                schedule.setStartDate(null);
            } else {
                schedule.setStartDate(ndate.dateTime(eaf.getStartDate() + " " + eaf.getStartTime()));
            }
        } catch (DAException e) {
            schedule.setStartDate(null);
        }
        return schedule;
    }

    /**
     * Figure out what UI page to return to.
     * <P>
     * @param mapping The action mapping object to find the action forwards in
     * @param session The user's web session
     * @return The action forward used to direct the UI flow.
     */
    private ActionForward goBack(ActionMapping mapping, HttpSession session) {
        String alertFlag = (String) session.getAttribute("RETURN2ALERT");
        if (alertFlag == null) {
            alertFlag = NDIIPPForm.FALSE;
        }
        String entityFlag = (String) session.getAttribute("createAnalysis");
        if (entityFlag == null) {
            entityFlag = NDIIPPForm.FALSE;
        }
        String harvestFlag = (String) session.getAttribute("editAnalysis");
        if (harvestFlag == null) {
            harvestFlag = NDIIPPForm.FALSE;
        }
        String returnToEntity = (String) session.getAttribute("returnToEntity");
        if (returnToEntity == null) {
            returnToEntity = NDIIPPForm.FALSE;
        }
        String returnToSeries = (String) session.getAttribute("back2series");
        if (returnToSeries == null) {
            returnToSeries = NDIIPPForm.FALSE;
        }
        ActionForward action = mapping.findForward("success");
        if (NDIIPPForm.TRUE.equals(entityFlag) || NDIIPPForm.TRUE.equals(returnToEntity)) {
            session.removeAttribute("createAnalysis");
            session.removeAttribute("returnToEntity");
            action = mapping.findForward("back2Entity");
        } else if (NDIIPPForm.TRUE.equals(harvestFlag)) {
            session.removeAttribute("editAnalysis");
            action = mapping.findForward("back2Harvest");
        } else if (NDIIPPForm.TRUE.equals(alertFlag)) {
            session.removeAttribute("RETURN2ALERT");
            action = mapping.findForward("back2Alert");
        } else if (NDIIPPForm.TRUE.equals(returnToSeries)) {
            session.removeAttribute("back2series");
            action = mapping.findForward("back2Series");
        }
        session.removeAttribute("analysisEditing");
        return action;
    }

    /**
     * Set the selected entity guid based on the selected entity.
     * <P>
     * @param session The user's web session
     * @param eaf The analysis edit data form
     */
    private void setEntityGuid(HttpSession session, EditAnalysisForm eaf) {
        ArrayList allEntities = (ArrayList) session.getAttribute("entities");
        String entity = eaf.getEntityName();
        for (int ii = 0; ii < allEntities.size(); ii++) {
            ShortEntityBean eb = (ShortEntityBean) allEntities.get(ii);
            String thisEntity = eb.getKeyName();
            if (thisEntity.equals(entity)) {
                eaf.setEntityGUID(eb.getGuid());
                break;
            }
        }
    }

    /**
     * Set the selected spider guid based on the selected spider
     * <P>
     * @param session The user's web session
     * @param eaf The relevant data form
     */
    private void setSpiderGUID(HttpSession session, EditAnalysisForm eaf) {
        ArrayList<SpiderSettingsBean> allSpiders = (ArrayList) session.getAttribute("allSpiders");
        for (int ii = 0; ii < allSpiders.size(); ii++) {
            SpiderSettingsBean thisBean = allSpiders.get(ii);
            String thisSpider = thisBean.getName();
            if (thisSpider.equals(eaf.getSpiderSettingsName())) {
                eaf.setSpiderSettingsGUID(thisBean.getGuid());
                break;
            }
        }
    }

    /**
     * Update this entry point in the database
     * <P>
     * @param mapping The action mapping associated with the data form
     * @param session The users web session object
     * @param eaf The data form object
     * @param facade The relevant data layer facade
     * @return The action forward generated by the update
     */
    private ActionForward update(ActionMapping mapping, HttpSession session, EditAnalysisForm eaf, AnalysisDataLayerFacade facade) {
        ActionForward action = mapping.findForward("success");
        ArrayList<AnalysisBean> add = new ArrayList<AnalysisBean>();
        ArrayList<AnalysisBean> update = new ArrayList<AnalysisBean>();
        ArrayList<AnalysisBean> delete = new ArrayList<AnalysisBean>();
        AnalysisBean newAnalysis = fillAnalysisBean(session, eaf);
        String addingFlag = (String) session.getAttribute("adding");
        if (addingFlag == NDIIPPForm.TRUE) {
            add.add(newAnalysis);
        } else {
            update.add(newAnalysis);
        }
        try {
            facade.update(add, update, delete);
        } catch (DAException dae) {
            action = mapping.findForward("error");
            session.setAttribute("error", dae);
        }
        session.removeAttribute("adding");
        session.removeAttribute("analysis");
        EntityBean thisEntity = (EntityBean) session.getAttribute("entity");
        if (thisEntity != null) {
            ArrayList<ShortAnalysisDefBean> analysisList = thisEntity.getAnalysisDefs();
            for (int ii = 0; ii < analysisList.size(); ii++) {
                ShortAnalysisDefBean thisAnalysis = analysisList.get(ii);
                if (thisAnalysis.equals(newAnalysis)) {
                    return (action);
                }
            }
            ShortAnalysisDefBean ssb = new ShortAnalysisDefBean(newAnalysis.getGuid(), newAnalysis.getName());
            analysisList.add(ssb);
            thisEntity.setAnalysisDefs(analysisList);
            session.setAttribute("entity", thisEntity);
        }
        session.removeAttribute(TreeConst.ANALYSIS_VIEW_OBJECT);
        session.removeAttribute(TreeConst.ANALYSIS_COMPARE_OBJECT);
        session.removeAttribute(TreeConst.ANALYSIS_SERIES_OBJECT);
        return action;
    }
}
