package org.aladdinframework.security;

import java.io.Serializable;
import org.aladdinframework.contextplugin.api.ContextPlugin;
import org.aladdinframework.contextplugin.api.security.FidelityLevel;
import android.util.Log;

/**
 * PluginPrivacySettings describes the maximum FidelityLevel that a given AladdinApplication is allowed to receive from
 * a specific ContextPlugin within the Aladdin Framework. AladdinApplications maintain a List of PluginPrivacySettings,
 * which represents the mappings between all installed ContextPlugins and the associated maximum FidelityLevels that an
 * application is allowed to receive from each. During runtime, the FidelityLevel associated with SecuredEvents
 * (generated by ContextPluginRuntimes) are compared against the AladdinApplication's PluginSecurityPolicy for a given
 * ContextPlugin to determine whether or not ContextEvent data should be provisioned to the application.
 * 
 * @see ContextPlugin
 * @see FidelityLevel
 * @see PrivacyPolicy
 * @author Darren Carlson
 */
public class PluginPrivacySettings implements Serializable {

    private static final long serialVersionUID = -7345301506372721926L;

    private final String TAG = this.getClass().getSimpleName();

    private ContextPlugin plugin;

    private FidelityLevel overrideMaxLevel;

    private PrivacyPolicy privacyPolicy;

    /**
     * Creates a default PluginPrivacySettings
     */
    public PluginPrivacySettings() {
    }

    /**
     * Creates a PluginPrivacySettings using the plugin and privacyPolicy
     * 
     * @param plugin
     *            The ContextPlugin.
     * @param privacyPolicy
     *            The PrivacyPolicy
     */
    public PluginPrivacySettings(ContextPlugin plugin, PrivacyPolicy privacyPolicy) {
        this(plugin, privacyPolicy, null);
    }

    /**
     * Creates a PluginPrivacySettings with all available options
     * 
     * @param plugin
     *            The ContextPlugin
     * @param privacyPolicy
     *            The PrivacyPolicy
     * @param overrideMaxLevel
     *            An override for the PrivacyPolicy's default FidelityLevel for the incoming ContextPlugin
     */
    public PluginPrivacySettings(ContextPlugin plugin, PrivacyPolicy privacyPolicy, FidelityLevel overrideMaxLevel) {
        if (plugin == null) Log.e(TAG, "Null ContextPlugin!");
        if (privacyPolicy == null) Log.e(TAG, "Null PrivacyPolicy!");
        this.plugin = plugin;
        this.overrideMaxLevel = overrideMaxLevel;
        this.privacyPolicy = privacyPolicy;
    }

    /**
     * Returns the PrivacyPolicy
     */
    public PrivacyPolicy getPrivacyPolicy() {
        return privacyPolicy;
    }

    /**
     * Sets the new PrivacyPolicy, maintaining any previous FidelityLevel override value.
     */
    public void setPrivacyPolicy(PrivacyPolicy privacyPolicy) {
        if (privacyPolicy == null) Log.e(TAG, "Null PrivacyPolicy!");
        this.privacyPolicy = privacyPolicy;
    }

    /**
     * Returns the ContextPlugin
     */
    public ContextPlugin getPlugin() {
        return this.plugin;
    }

    /**
     * Returns the maximum FidelityLevel allowed for the ContextPlugin. If the PluginPrivacySettings is custom, the
     * overrideMaxLevel is returned. Otherwise, the maximum FidelityLevel associated with the privacyPolicy is returned.
     */
    public FidelityLevel getMaxFidelityLevel() {
        if (isCustom()) return overrideMaxLevel; else return privacyPolicy.getFidelityLevel(plugin);
    }

    /**
     * Overrides the FidelityLevel associated with the PrivacyPolicy. If overrideMaxLevel is null, this method behaves
     * like setDefaultMaxFidelityLevel().
     * 
     * @param overrideMaxLevel
     *            The new maximum FidelityLevel.
     */
    public void overrideMaxFidelityLevel(FidelityLevel overrideMaxLevel) {
        this.overrideMaxLevel = overrideMaxLevel;
    }

    /**
     * Sets the default FidelityLevel associated with the current PrivacyPolicy, clearing any overriden maximum
     * FidelityLevel settings.
     */
    public void setDefaultMaxFidelityLevel() {
        this.overrideMaxLevel = null;
    }

    /**
     * Returns true if the assigned FidelityLevel differs from default FidelityLevel; false otherwise
     */
    public boolean isCustom() {
        if (overrideMaxLevel != null) {
            if (!overrideMaxLevel.equals(privacyPolicy.getFidelityLevel(plugin))) return true;
        }
        return false;
    }

    @Override
    public int hashCode() {
        int result = 17;
        result = 31 * result + this.plugin.hashCode();
        return result;
    }

    @Override
    public boolean equals(Object candidate) {
        if (this == candidate) return true; else if (candidate instanceof PluginPrivacySettings) {
            PluginPrivacySettings test = (PluginPrivacySettings) candidate;
            return this.getPlugin().equals(test.getPlugin()) ? true : false;
        }
        return false;
    }
}
