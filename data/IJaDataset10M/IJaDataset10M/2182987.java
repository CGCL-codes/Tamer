package ejb.bprocess.administration;

import javax.ejb.*;

/**
 * Created Sep 25, 2003 11:12:14 AM
 * Code generated by the Sun ONE Studio EJB Builder
 * Written   suresh babu
 * @author Administrator
 */
public class PatronSessionBean implements javax.ejb.SessionBean {

    private javax.ejb.SessionContext context;

    private ejb.bprocess.util.Utility utility = null;

    private ejb.bprocess.util.HomeFactory homeFactory = null;

    private ejb.bprocess.util.NewGenXMLGenerator newGenXMLGenerator = null;

    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context = aContext;
        utility = ejb.bprocess.util.Utility.getInstance();
        homeFactory = ejb.bprocess.util.HomeFactory.getInstance();
        newGenXMLGenerator = ejb.bprocess.util.NewGenXMLGenerator.getInstance();
    }

    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {
    }

    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {
    }

    public java.lang.String getPatronCategory(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        Integer libraryId = new Integer(root.getChildText("LibraryId").toString());
        Object[] objLocal = new Object[0];
        Object[] objLocal1 = new Object[0];
        Object[] objLocal2 = new Object[0];
        Object[] objLocal3 = new Object[0];
        Object[] objLocal4 = new Object[0];
        try {
            objLocal = ((ejb.objectmodel.administration.LocalPatron_CategoryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Patron_Category")).findAll(libraryId).toArray();
            objLocal1 = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findAll(libraryId).toArray();
            objLocal2 = ((ejb.objectmodel.administration.LocalLibraryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Library")).findByLibraryName(libraryId).toArray();
            objLocal3 = ((ejb.objectmodel.administration.LocalOTHER_LIBRARYHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("OTHER_LIBRARY")).findByOthersLibraryName(libraryId).toArray();
            objLocal4 = ((ejb.objectmodel.administration.LocalCOURSEHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("COURSE")).findAll(libraryId).toArray();
        } catch (javax.ejb.FinderException ex) {
            ex.printStackTrace();
        }
        ejb.objectmodel.administration.LocalPatron_Category local = null;
        ejb.objectmodel.administration.LocalDEPT local1 = null;
        ejb.objectmodel.administration.LocalLibrary local2 = null;
        ejb.objectmodel.administration.LocalOTHER_LIBRARY local3 = null;
        ejb.objectmodel.administration.LocalCOURSE local4 = null;
        org.jdom.Element root1 = new org.jdom.Element("Response");
        for (int i = 0; i < objLocal.length; i++) {
            local = (ejb.objectmodel.administration.LocalPatron_Category) objLocal[i];
            org.jdom.Element patronCategoryName = new org.jdom.Element("PatronCategoryName");
            patronCategoryName.setText(local.getPatron_Category_Name());
            root1.addContent(patronCategoryName);
        }
        for (int j = 0; j < objLocal1.length; j++) {
            local1 = (ejb.objectmodel.administration.LocalDEPT) objLocal1[j];
            org.jdom.Element departmentName = new org.jdom.Element("DepartmentName");
            departmentName.setText(local1.getDept_Name());
            root1.addContent(departmentName);
        }
        for (int k = 0; k < objLocal2.length; k++) {
            local2 = (ejb.objectmodel.administration.LocalLibrary) objLocal2[k];
            org.jdom.Element libraryNetwork = new org.jdom.Element("LibraryNetwork");
            libraryNetwork.setText(local2.getLibrary_Name());
            root1.addContent(libraryNetwork);
        }
        for (int p = 0; p < objLocal3.length; p++) {
            local3 = (ejb.objectmodel.administration.LocalOTHER_LIBRARY) objLocal3[p];
            org.jdom.Element libraryOthers = new org.jdom.Element("LibraryOthers");
            libraryOthers.setText(local3.getLibrary_Name());
            root1.addContent(libraryOthers);
        }
        for (int l = 0; l < objLocal4.length; l++) {
            local4 = (ejb.objectmodel.administration.LocalCOURSE) objLocal4[l];
            org.jdom.Element courseName = new org.jdom.Element("CourseName");
            courseName.setText(local4.getCourse_Name());
            root1.addContent(courseName);
        }
        org.jdom.Document doc = new org.jdom.Document(root1);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String updateStaffOfLibraryDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root2 = new org.jdom.Element("Response");
        org.jdom.Element create = new org.jdom.Element("Create");
        Integer courseId = new Integer(0);
        Integer departmentId = new Integer(0);
        try {
            Integer libraryId = new Integer(root.getChildText("LibraryId").toString());
            String userType = root.getChildText("UserType");
            String userId = root.getChildText("UserId");
            String userFirst = root.getChildText("FirstName");
            String userMiddle = root.getChildText("MiddleName");
            String userLast = root.getChildText("LastName");
            String patronCategoryName = root.getChildText("PatronCategoryName");
            ejb.objectmodel.administration.LocalPatron_Category objLocal4 = null;
            objLocal4 = ((ejb.objectmodel.administration.LocalPatron_CategoryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Patron_Category")).findByPatronCategoryName(libraryId, patronCategoryName);
            Integer patronCategoryId = new Integer(objLocal4.getPatron_Category_Id().toString());
            String departmentName = root.getChildText("DepartmentName");
            ejb.objectmodel.administration.LocalDEPT localDept = null;
            Object[] objLocalDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByDeptName(libraryId, departmentName).toArray();
            for (int k = 0; k < objLocalDept.length; k++) {
                localDept = (ejb.objectmodel.administration.LocalDEPT) objLocalDept[0];
                departmentId = new Integer(localDept.getDept_Id().toString());
            }
            java.util.Hashtable htAddress1 = new java.util.Hashtable();
            htAddress1.put("Address1", root.getChildText("Address1"));
            htAddress1.put("Address2", root.getChildText("Address2"));
            htAddress1.put("City", root.getChildText("City"));
            htAddress1.put("State", root.getChildText("State"));
            htAddress1.put("Country", root.getChildText("Country"));
            htAddress1.put("Pin", root.getChildText("Pin"));
            htAddress1.put("Phone1", root.getChildText("Phone1"));
            htAddress1.put("Phone2", root.getChildText("Phone2"));
            htAddress1.put("Fax", root.getChildText("Fax"));
            htAddress1.put("EMail", root.getChildText("EMail"));
            java.util.Hashtable htAddress2 = new java.util.Hashtable();
            htAddress2.put("Paddress1", root.getChildText("Paddress1"));
            htAddress2.put("Paddress2", root.getChildText("Paddress2"));
            htAddress2.put("Pcity", root.getChildText("Pcity"));
            htAddress2.put("Pstate", root.getChildText("Pstate"));
            htAddress2.put("Pcountry", root.getChildText("Pcountry"));
            htAddress2.put("Ppin", root.getChildText("Ppin"));
            htAddress2.put("Pphone1", root.getChildText("Pphone1"));
            htAddress2.put("Pphone2", root.getChildText("Pphone2"));
            htAddress2.put("Pfax", root.getChildText("Pfax"));
            htAddress2.put("Pemail", root.getChildText("Pemail"));
            java.sql.Timestamp sysDate = ejb.bprocess.util.Utility.getInstance().getTimestamp();
            java.sql.Timestamp startDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("StartDate"));
            java.sql.Timestamp endDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("EndDate"));
            String email1 = root.getChildText("Email1");
            String instantMessage = root.getChildText("InstantMessage");
            String print = root.getChildText("Print");
            String courseName = root.getChildText("CourseName");
            if (!courseName.equals("")) {
                Object[] objCourse = new Object[0];
                objCourse = ((ejb.objectmodel.administration.LocalCOURSEHome) homeFactory.getInstance().getHome("COURSE")).findByCourseName(libraryId, courseName).toArray();
                ejb.objectmodel.administration.LocalCOURSE localCourse = null;
                for (int k = 0; k < objCourse.length; k++) {
                    localCourse = (ejb.objectmodel.administration.LocalCOURSE) objCourse[k];
                    courseId = localCourse.getCourse_Id();
                }
            } else {
                courseId = null;
            }
            String sendToAddress = root.getChildText("SendAddress");
            org.jdom.Element ele = root.getChild("PatronCustom").getChild("Root");
            org.jdom.output.XMLOutputter xmloutput = new org.jdom.output.XMLOutputter();
            xmloutput.setOmitDeclaration(true);
            xmloutput.setOmitEncoding(true);
            String patroncustom = xmloutput.outputString(ele);
            String status = "A";
            ejb.objectmodel.administration.LocalPatron localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getHome("Patron")).createStaffOfLibrary(libraryId, userId, patronCategoryId, userType, departmentId, userFirst, userMiddle, userLast, htAddress1, htAddress2, startDate, endDate, email1, instantMessage, print, sysDate, courseId, status, sendToAddress);
            localPatron.setCustom(patroncustom);
            create.setText("Y");
        } catch (javax.ejb.FinderException ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        } catch (javax.ejb.DuplicateKeyException ex) {
            context.setRollbackOnly();
            create.setText("D");
            ex.printStackTrace();
        } catch (javax.ejb.CreateException ex1) {
            context.setRollbackOnly();
            create.setText("N");
            ex1.printStackTrace();
        } catch (java.lang.Exception ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        }
        root2.addContent(create);
        org.jdom.Document doc = new org.jdom.Document(root2);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String updateApprovingAuthorityDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root2 = new org.jdom.Element("Response");
        org.jdom.Element create = new org.jdom.Element("Create");
        Integer courseId = new Integer(0);
        Integer departmentId = new Integer(0);
        try {
            Integer libraryId = new Integer(root.getChildText("LibraryId").toString());
            String userType = root.getChildText("UserType");
            if (userType.equals("Approving Authority")) {
                userType = "C";
            }
            String patronId = root.getChildText("PatronId");
            String patronFirst = root.getChildText("FirstName");
            String patronMiddle = root.getChildText("MiddleName");
            String patronLast = root.getChildText("LastName");
            String patronCategoryName = root.getChildText("PatronCategoryName");
            ejb.objectmodel.administration.LocalPatron_Category objLocal6 = null;
            ejb.objectmodel.administration.LocalDEPT localDept = null;
            objLocal6 = ((ejb.objectmodel.administration.LocalPatron_CategoryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Patron_Category")).findByPatronCategoryName(libraryId, patronCategoryName);
            Integer patronCategoryId = new Integer(objLocal6.getPatron_Category_Id().toString());
            String departmentName = root.getChildText("DepartmentName");
            Object[] objLocalDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByDeptName(libraryId, departmentName).toArray();
            for (int k = 0; k < objLocalDept.length; k++) {
                localDept = (ejb.objectmodel.administration.LocalDEPT) objLocalDept[0];
                departmentId = new Integer(localDept.getDept_Id().toString());
            }
            java.util.Hashtable htAddress1 = new java.util.Hashtable();
            htAddress1.put("Address1", root.getChildText("Address1"));
            htAddress1.put("Address2", root.getChildText("Address2"));
            htAddress1.put("City", root.getChildText("City"));
            htAddress1.put("State", root.getChildText("State"));
            htAddress1.put("Country", root.getChildText("Country"));
            htAddress1.put("Pin", root.getChildText("Pin"));
            htAddress1.put("Phone1", root.getChildText("Phone1"));
            htAddress1.put("Phone2", root.getChildText("Phone2"));
            htAddress1.put("Fax", root.getChildText("Fax"));
            htAddress1.put("EMail", root.getChildText("EMail"));
            java.util.Hashtable htAddress2 = new java.util.Hashtable();
            htAddress2.put("Paddress1", root.getChildText("Paddress1"));
            htAddress2.put("Paddress2", root.getChildText("Paddress2"));
            htAddress2.put("Pcity", root.getChildText("Pcity"));
            htAddress2.put("Pstate", root.getChildText("Pstate"));
            htAddress2.put("Pcountry", root.getChildText("Pcountry"));
            htAddress2.put("Ppin", root.getChildText("Ppin"));
            htAddress2.put("Pphone1", root.getChildText("Pphone1"));
            htAddress2.put("Pphone2", root.getChildText("Pphone2"));
            htAddress2.put("Pfax", root.getChildText("Pfax"));
            htAddress2.put("Pemail", root.getChildText("Pemail"));
            java.sql.Timestamp sysDate = ejb.bprocess.util.Utility.getInstance().getTimestamp();
            java.sql.Timestamp startDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("StartDate"));
            java.sql.Timestamp endDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("EndDate"));
            String email1 = root.getChildText("Email1");
            String instantMessage = root.getChildText("InstantMessage");
            String print = root.getChildText("Print");
            String courseName = root.getChildText("CourseName");
            if (!courseName.equals("")) {
                Object[] objCourse = new Object[0];
                objCourse = ((ejb.objectmodel.administration.LocalCOURSEHome) homeFactory.getInstance().getHome("COURSE")).findByCourseName(libraryId, courseName).toArray();
                ejb.objectmodel.administration.LocalCOURSE localCourse = null;
                for (int k = 0; k < objCourse.length; k++) {
                    localCourse = (ejb.objectmodel.administration.LocalCOURSE) objCourse[k];
                    courseId = localCourse.getCourse_Id();
                }
            } else {
                courseId = null;
            }
            String sendToAddress = root.getChildText("SendAddress");
            org.jdom.Element ele = root.getChild("PatronCustom").getChild("Root");
            org.jdom.output.XMLOutputter xmloutput = new org.jdom.output.XMLOutputter();
            xmloutput.setOmitDeclaration(true);
            xmloutput.setOmitEncoding(true);
            String patroncustom = xmloutput.outputString(ele);
            String status = "A";
            ejb.objectmodel.administration.LocalPatron localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getHome("Patron")).createApprovingAuthority(libraryId, patronId, patronCategoryId, userType, departmentId, patronFirst, patronMiddle, patronLast, htAddress1, htAddress2, startDate, endDate, email1, instantMessage, print, sysDate, courseId, status, sendToAddress);
            localPatron.setCustom(patroncustom);
            create.setText("Y");
        } catch (javax.ejb.FinderException ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        } catch (javax.ejb.DuplicateKeyException ex) {
            context.setRollbackOnly();
            create.setText("D");
            ex.printStackTrace();
        } catch (javax.ejb.CreateException ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        } catch (java.lang.Exception ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        }
        root2.addContent(create);
        org.jdom.Document doc = new org.jdom.Document(root2);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String updatePatronRegularDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root2 = new org.jdom.Element("Response");
        org.jdom.Element create = new org.jdom.Element("Create");
        Integer courseId = new Integer(0);
        Integer departmentId = new Integer(0);
        try {
            Integer libraryId = new Integer(root.getChildText("LibraryId").toString());
            String patronType = root.getChildText("PatronType");
            String approvingAuthority = root.getChildText("ApprovingAuthority");
            if (approvingAuthority.equals("Y")) {
                patronType = "C";
            } else {
                patronType = "B";
            }
            String patronId = root.getChildText("PatronId");
            String patronFirst = root.getChildText("FirstName");
            String patronMiddle = root.getChildText("MiddleName");
            String patronLast = root.getChildText("LastName");
            String patronCategoryName = root.getChildText("PatronCategoryName");
            ejb.objectmodel.administration.LocalPatron_Category objLocal6 = null;
            objLocal6 = ((ejb.objectmodel.administration.LocalPatron_CategoryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Patron_Category")).findByPatronCategoryName(libraryId, patronCategoryName);
            Integer patronCategoryId = new Integer(objLocal6.getPatron_Category_Id().toString());
            String departmentName = root.getChildText("DepartmentName");
            ejb.objectmodel.administration.LocalDEPT localDept = null;
            Object[] objLocalDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByDeptName(libraryId, departmentName).toArray();
            for (int k = 0; k < objLocalDept.length; k++) {
                localDept = (ejb.objectmodel.administration.LocalDEPT) objLocalDept[0];
                departmentId = new Integer(localDept.getDept_Id().toString());
            }
            java.util.Hashtable htAddress1 = new java.util.Hashtable();
            htAddress1.put("Address1", root.getChildText("Address1"));
            htAddress1.put("Address2", root.getChildText("Address2"));
            htAddress1.put("City", root.getChildText("City"));
            htAddress1.put("State", root.getChildText("State"));
            htAddress1.put("Country", root.getChildText("Country"));
            htAddress1.put("Pin", root.getChildText("Pin"));
            htAddress1.put("Phone1", root.getChildText("Phone1"));
            htAddress1.put("Phone2", root.getChildText("Phone2"));
            htAddress1.put("Fax", root.getChildText("Fax"));
            htAddress1.put("EMail", root.getChildText("EMail"));
            java.util.Hashtable htAddress2 = new java.util.Hashtable();
            htAddress2.put("Paddress1", root.getChildText("Paddress1"));
            htAddress2.put("Paddress2", root.getChildText("Paddress2"));
            htAddress2.put("Pcity", root.getChildText("Pcity"));
            htAddress2.put("Pstate", root.getChildText("Pstate"));
            htAddress2.put("Pcountry", root.getChildText("Pcountry"));
            htAddress2.put("Ppin", root.getChildText("Ppin"));
            htAddress2.put("Pphone1", root.getChildText("Pphone1"));
            htAddress2.put("Pphone2", root.getChildText("Pphone2"));
            htAddress2.put("Pfax", root.getChildText("Pfax"));
            htAddress2.put("Pemail", root.getChildText("Pemail"));
            java.sql.Timestamp sysDate = ejb.bprocess.util.Utility.getInstance().getTimestamp();
            java.sql.Timestamp startDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("StartDate"));
            java.sql.Timestamp endDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("EndDate"));
            String email1 = root.getChildText("Email1");
            String instantMessage = root.getChildText("InstantMessage");
            String print = root.getChildText("Print");
            String courseName = root.getChildText("CourseName");
            if (!courseName.equals("")) {
                Object[] objCourse = new Object[0];
                objCourse = ((ejb.objectmodel.administration.LocalCOURSEHome) homeFactory.getInstance().getHome("COURSE")).findByCourseName(libraryId, courseName).toArray();
                ejb.objectmodel.administration.LocalCOURSE localCourse = null;
                for (int k = 0; k < objCourse.length; k++) {
                    localCourse = (ejb.objectmodel.administration.LocalCOURSE) objCourse[k];
                    courseId = localCourse.getCourse_Id();
                }
            } else {
                courseId = null;
            }
            String sendToAddress = root.getChildText("SendAddress");
            String status = "";
            if (approvingAuthority.equals("Y")) {
                status = "C";
            } else {
                status = "A";
            }
            org.jdom.Element ele = root.getChild("PatronCustom").getChild("Root");
            org.jdom.output.XMLOutputter xmloutput = new org.jdom.output.XMLOutputter();
            xmloutput.setOmitDeclaration(true);
            xmloutput.setOmitEncoding(true);
            String patroncustom = xmloutput.outputString(ele);
            ejb.objectmodel.administration.LocalPatron localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getHome("Patron")).createPatronRegular(libraryId, patronId, patronCategoryId, patronType, departmentId, patronFirst, patronMiddle, patronLast, htAddress1, htAddress2, startDate, endDate, email1, instantMessage, print, sysDate, courseId, status, sendToAddress);
            localPatron.setCustom(patroncustom);
            create.setText("Y");
        } catch (javax.ejb.FinderException ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        } catch (javax.ejb.DuplicateKeyException ex) {
            context.setRollbackOnly();
            create.setText("D");
            ex.printStackTrace();
        } catch (javax.ejb.CreateException ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        } catch (java.lang.Exception ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        }
        root2.addContent(create);
        org.jdom.Document doc = new org.jdom.Document(root2);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String updatePatronLibraryNetworkDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root2 = new org.jdom.Element("Response");
        org.jdom.Element create = new org.jdom.Element("Create");
        Integer courseId = new Integer(0);
        Integer departmentId = new Integer(0);
        try {
            Integer libraryId = new Integer(root.getChildText("LibraryId").toString());
            String patronType = root.getChildText("PatronType");
            String libraryNetworkName = root.getChildText("LibraryNetwork");
            Integer libraryNetworkPatronId = new Integer(root.getChildText("LibraryNetworkId").toString());
            String patronId = root.getChildText("PatronId");
            String patronFirst = root.getChildText("FirstName");
            String patronMiddle = root.getChildText("MiddleName");
            String patronLast = root.getChildText("LastName");
            String patronCategoryName = root.getChildText("PatronCategoryName");
            ejb.objectmodel.administration.LocalPatron_Category objLocal6 = null;
            objLocal6 = ((ejb.objectmodel.administration.LocalPatron_CategoryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Patron_Category")).findByPatronCategoryName(libraryId, patronCategoryName);
            Integer patronCategoryId = new Integer(objLocal6.getPatron_Category_Id().toString());
            String departmentName = root.getChildText("DepartmentName");
            ejb.objectmodel.administration.LocalDEPT localDept = null;
            Object[] objLocalDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByDeptName(libraryId, departmentName).toArray();
            for (int k = 0; k < objLocalDept.length; k++) {
                localDept = (ejb.objectmodel.administration.LocalDEPT) objLocalDept[0];
                departmentId = new Integer(localDept.getDept_Id().toString());
            }
            java.util.Hashtable htAddress1 = new java.util.Hashtable();
            htAddress1.put("Address1", root.getChildText("Address1"));
            htAddress1.put("Address2", root.getChildText("Address2"));
            htAddress1.put("City", root.getChildText("City"));
            htAddress1.put("State", root.getChildText("State"));
            htAddress1.put("Country", root.getChildText("Country"));
            htAddress1.put("Pin", root.getChildText("Pin"));
            htAddress1.put("Phone1", root.getChildText("Phone1"));
            htAddress1.put("Phone2", root.getChildText("Phone2"));
            htAddress1.put("Fax", root.getChildText("Fax"));
            htAddress1.put("EMail", root.getChildText("EMail"));
            java.util.Hashtable htAddress2 = new java.util.Hashtable();
            htAddress2.put("Paddress1", root.getChildText("Paddress1"));
            htAddress2.put("Paddress2", root.getChildText("Paddress2"));
            htAddress2.put("Pcity", root.getChildText("Pcity"));
            htAddress2.put("Pstate", root.getChildText("Pstate"));
            htAddress2.put("Pcountry", root.getChildText("Pcountry"));
            htAddress2.put("Ppin", root.getChildText("Ppin"));
            htAddress2.put("Pphone1", root.getChildText("Pphone1"));
            htAddress2.put("Pphone2", root.getChildText("Pphone2"));
            htAddress2.put("Pfax", root.getChildText("Pfax"));
            htAddress2.put("Pemail", root.getChildText("Pemail"));
            java.sql.Timestamp sysDate = ejb.bprocess.util.Utility.getInstance().getTimestamp();
            java.sql.Timestamp startDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("StartDate"));
            java.sql.Timestamp endDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("EndDate"));
            String email1 = root.getChildText("Email1");
            String instantMessage = root.getChildText("InstantMessage");
            String print = root.getChildText("Print");
            String courseName = root.getChildText("CourseName");
            if (!courseName.equals("")) {
                Object[] objCourse = new Object[0];
                objCourse = ((ejb.objectmodel.administration.LocalCOURSEHome) homeFactory.getInstance().getHome("COURSE")).findByCourseName(libraryId, courseName).toArray();
                ejb.objectmodel.administration.LocalCOURSE localCourse = null;
                for (int k = 0; k < objCourse.length; k++) {
                    localCourse = (ejb.objectmodel.administration.LocalCOURSE) objCourse[k];
                    courseId = localCourse.getCourse_Id();
                }
            } else {
                courseId = null;
            }
            String sendToAddress = root.getChildText("SendAddress");
            String status = "A";
            org.jdom.Element ele = root.getChild("PatronCustom").getChild("Root");
            org.jdom.output.XMLOutputter xmloutput = new org.jdom.output.XMLOutputter();
            xmloutput.setOmitDeclaration(true);
            xmloutput.setOmitEncoding(true);
            String patroncustom = xmloutput.outputString(ele);
            ejb.objectmodel.administration.LocalPatron localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getHome("Patron")).createPatronLibraryNetwork(libraryId, patronId, patronCategoryId, libraryNetworkPatronId, patronType, departmentId, patronFirst, patronMiddle, patronLast, htAddress1, htAddress2, startDate, endDate, email1, instantMessage, print, sysDate, courseId, status, sendToAddress);
            localPatron.setCustom(patroncustom);
            create.setText("Y");
        } catch (javax.ejb.FinderException ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        } catch (javax.ejb.DuplicateKeyException ex) {
            context.setRollbackOnly();
            create.setText("D");
            ex.printStackTrace();
        } catch (javax.ejb.CreateException ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        } catch (java.lang.Exception ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        }
        root2.addContent(create);
        org.jdom.Document doc = new org.jdom.Document(root2);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String updatePatronOthersLibraryDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root2 = new org.jdom.Element("Response");
        org.jdom.Element create = new org.jdom.Element("Create");
        Integer courseId = new Integer(0);
        Integer departmentId = new Integer(0);
        try {
            Integer libraryId = new Integer(root.getChildText("LibraryId").toString());
            String patronType = root.getChildText("PatronType");
            String othersLibraryName = root.getChildText("OthersLibrary");
            Integer othersLibraryPatronId = new Integer(root.getChildText("OthersLibraryId").toString());
            String patronId = root.getChildText("PatronId");
            String patronFirst = root.getChildText("FirstName");
            String patronMiddle = root.getChildText("MiddleName");
            String patronLast = root.getChildText("LastName");
            String patronCategoryName = root.getChildText("PatronCategoryName");
            ejb.objectmodel.administration.LocalPatron_Category objLocal6 = null;
            objLocal6 = ((ejb.objectmodel.administration.LocalPatron_CategoryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Patron_Category")).findByPatronCategoryName(libraryId, patronCategoryName);
            Integer patronCategoryId = new Integer(objLocal6.getPatron_Category_Id().toString());
            String departmentName = root.getChildText("DepartmentName");
            ejb.objectmodel.administration.LocalDEPT localDept = null;
            Object[] objLocalDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByDeptName(libraryId, departmentName).toArray();
            for (int k = 0; k < objLocalDept.length; k++) {
                localDept = (ejb.objectmodel.administration.LocalDEPT) objLocalDept[0];
                departmentId = new Integer(localDept.getDept_Id().toString());
            }
            java.util.Hashtable htAddress1 = new java.util.Hashtable();
            htAddress1.put("Address1", root.getChildText("Address1"));
            htAddress1.put("Address2", root.getChildText("Address2"));
            htAddress1.put("City", root.getChildText("City"));
            htAddress1.put("State", root.getChildText("State"));
            htAddress1.put("Country", root.getChildText("Country"));
            htAddress1.put("Pin", root.getChildText("Pin"));
            htAddress1.put("Phone1", root.getChildText("Phone1"));
            htAddress1.put("Phone2", root.getChildText("Phone2"));
            htAddress1.put("Fax", root.getChildText("Fax"));
            htAddress1.put("EMail", root.getChildText("EMail"));
            java.util.Hashtable htAddress2 = new java.util.Hashtable();
            htAddress2.put("Paddress1", root.getChildText("Paddress1"));
            htAddress2.put("Paddress2", root.getChildText("Paddress2"));
            htAddress2.put("Pcity", root.getChildText("Pcity"));
            htAddress2.put("Pstate", root.getChildText("Pstate"));
            htAddress2.put("Pcountry", root.getChildText("Pcountry"));
            htAddress2.put("Ppin", root.getChildText("Ppin"));
            htAddress2.put("Pphone1", root.getChildText("Pphone1"));
            htAddress2.put("Pphone2", root.getChildText("Pphone2"));
            htAddress2.put("Pfax", root.getChildText("Pfax"));
            htAddress2.put("Pemail", root.getChildText("Pemail"));
            java.sql.Timestamp sysDate = ejb.bprocess.util.Utility.getInstance().getTimestamp();
            java.sql.Timestamp startDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("StartDate"));
            java.sql.Timestamp endDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("EndDate"));
            String email1 = root.getChildText("Email1");
            String instantMessage = root.getChildText("InstantMessage");
            String print = root.getChildText("Print");
            String courseName = root.getChildText("CourseName");
            if (!courseName.equals("")) {
                Object[] objCourse = new Object[0];
                objCourse = ((ejb.objectmodel.administration.LocalCOURSEHome) homeFactory.getInstance().getHome("COURSE")).findByCourseName(libraryId, courseName).toArray();
                ejb.objectmodel.administration.LocalCOURSE localCourse = null;
                for (int k = 0; k < objCourse.length; k++) {
                    localCourse = (ejb.objectmodel.administration.LocalCOURSE) objCourse[k];
                    courseId = localCourse.getCourse_Id();
                }
            } else {
                courseId = null;
            }
            String sendToAddress = root.getChildText("SendAddress");
            org.jdom.Element ele = root.getChild("PatronCustom").getChild("Root");
            org.jdom.output.XMLOutputter xmloutput = new org.jdom.output.XMLOutputter();
            xmloutput.setOmitDeclaration(true);
            xmloutput.setOmitEncoding(true);
            String patroncustom = xmloutput.outputString(ele);
            String status = "A";
            ejb.objectmodel.administration.LocalPatron localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getHome("Patron")).createPatronOthersLibrary(libraryId, patronId, patronCategoryId, othersLibraryPatronId, patronType, departmentId, patronFirst, patronMiddle, patronLast, htAddress1, htAddress2, startDate, endDate, email1, instantMessage, print, sysDate, courseId, status, sendToAddress);
            localPatron.setCustom(patroncustom);
            create.setText("Y");
        } catch (javax.ejb.FinderException ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        } catch (javax.ejb.DuplicateKeyException ex) {
            context.setRollbackOnly();
            create.setText("D");
            ex.printStackTrace();
        } catch (javax.ejb.CreateException ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        } catch (java.lang.Exception ex) {
            context.setRollbackOnly();
            create.setText("N");
            ex.printStackTrace();
        }
        root2.addContent(create);
        org.jdom.Document doc = new org.jdom.Document(root2);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String retrieveLibraryNameDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root1 = new org.jdom.Element("Response");
        String libraryName = root.getChildText("LibraryNetworked");
        Integer libraryNameId = new Integer(root.getChildText("LibraryNetworkId").toString());
        ejb.objectmodel.administration.LocalLibrary objLocal8 = null;
        try {
            objLocal8 = ((ejb.objectmodel.administration.LocalLibraryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Library")).findByPrimaryKey(libraryNameId);
        } catch (javax.ejb.FinderException ex) {
            ex.printStackTrace();
        }
        org.jdom.Element libraryNetworkAddress = new org.jdom.Element("LibraryNetworkAddress");
        org.jdom.Element libraryNetworkAddress1 = new org.jdom.Element("Address1");
        libraryNetworkAddress1.setText(objLocal8.getAddress1());
        libraryNetworkAddress.addContent(libraryNetworkAddress1);
        libraryNetworkAddress1 = new org.jdom.Element("Address2");
        libraryNetworkAddress1.setText(objLocal8.getAddress2());
        libraryNetworkAddress.addContent(libraryNetworkAddress1);
        libraryNetworkAddress1 = new org.jdom.Element("City");
        libraryNetworkAddress1.setText(objLocal8.getCity());
        libraryNetworkAddress.addContent(libraryNetworkAddress1);
        libraryNetworkAddress1 = new org.jdom.Element("State");
        libraryNetworkAddress1.setText(objLocal8.getState());
        libraryNetworkAddress.addContent(libraryNetworkAddress1);
        libraryNetworkAddress1 = new org.jdom.Element("Country");
        libraryNetworkAddress1.setText(objLocal8.getCountry());
        libraryNetworkAddress.addContent(libraryNetworkAddress1);
        libraryNetworkAddress1 = new org.jdom.Element("Pin");
        libraryNetworkAddress1.setText(objLocal8.getPin());
        libraryNetworkAddress.addContent(libraryNetworkAddress1);
        libraryNetworkAddress1 = new org.jdom.Element("Phone1");
        libraryNetworkAddress1.setText(objLocal8.getPhone_Number1());
        libraryNetworkAddress.addContent(libraryNetworkAddress1);
        libraryNetworkAddress1 = new org.jdom.Element("Phone2");
        libraryNetworkAddress1.setText(objLocal8.getPhone_Number2());
        libraryNetworkAddress.addContent(libraryNetworkAddress1);
        libraryNetworkAddress1 = new org.jdom.Element("Fax");
        libraryNetworkAddress1.setText(objLocal8.getFax());
        libraryNetworkAddress.addContent(libraryNetworkAddress1);
        libraryNetworkAddress1 = new org.jdom.Element("Email");
        libraryNetworkAddress1.setText(objLocal8.getEmail());
        libraryNetworkAddress.addContent(libraryNetworkAddress1);
        root1.addContent(libraryNetworkAddress);
        org.jdom.Document doc = new org.jdom.Document(root1);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String retrieveOtherLibraryNameDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root1 = new org.jdom.Element("Response");
        String libraryName = root.getChildText("LibraryOthersName");
        Integer libraryNameId = new Integer(root.getChildText("LibraryOthersId").toString());
        ejb.objectmodel.administration.LocalOTHER_LIBRARY objLocal9 = null;
        try {
            objLocal9 = ((ejb.objectmodel.administration.LocalOTHER_LIBRARYHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("OTHER_LIBRARY")).findByPrimaryKey(libraryNameId);
        } catch (javax.ejb.FinderException ex) {
            ex.printStackTrace();
        }
        org.jdom.Element libraryOthersAddress = new org.jdom.Element("LibraryOthersAddress");
        org.jdom.Element libraryOthersAddress1 = new org.jdom.Element("Address1");
        libraryOthersAddress1.setText(objLocal9.getAddress1());
        libraryOthersAddress.addContent(libraryOthersAddress1);
        libraryOthersAddress1 = new org.jdom.Element("Address2");
        libraryOthersAddress1.setText(objLocal9.getAddress2());
        libraryOthersAddress.addContent(libraryOthersAddress1);
        libraryOthersAddress1 = new org.jdom.Element("City");
        libraryOthersAddress1.setText(objLocal9.getCity());
        libraryOthersAddress.addContent(libraryOthersAddress1);
        libraryOthersAddress1 = new org.jdom.Element("State");
        libraryOthersAddress1.setText(objLocal9.getState());
        libraryOthersAddress.addContent(libraryOthersAddress1);
        libraryOthersAddress1 = new org.jdom.Element("Country");
        libraryOthersAddress1.setText(objLocal9.getCountry());
        libraryOthersAddress.addContent(libraryOthersAddress1);
        libraryOthersAddress1 = new org.jdom.Element("Pin");
        libraryOthersAddress1.setText(objLocal9.getPin());
        libraryOthersAddress.addContent(libraryOthersAddress1);
        libraryOthersAddress1 = new org.jdom.Element("Phone1");
        libraryOthersAddress1.setText(objLocal9.getPhone_Number1());
        libraryOthersAddress.addContent(libraryOthersAddress1);
        libraryOthersAddress1 = new org.jdom.Element("Phone2");
        libraryOthersAddress1.setText(objLocal9.getPhone_Number2());
        libraryOthersAddress.addContent(libraryOthersAddress1);
        libraryOthersAddress1 = new org.jdom.Element("Fax");
        libraryOthersAddress1.setText(objLocal9.getFax());
        libraryOthersAddress.addContent(libraryOthersAddress1);
        libraryOthersAddress1 = new org.jdom.Element("Email");
        libraryOthersAddress1.setText(objLocal9.getEmail());
        libraryOthersAddress.addContent(libraryOthersAddress1);
        root1.addContent(libraryOthersAddress);
        org.jdom.Document doc = new org.jdom.Document(root1);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String modifyStaffOfLibraryDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root2 = new org.jdom.Element("Response");
        org.jdom.Element success = new org.jdom.Element("Update");
        Integer courseId = new Integer(0);
        Integer departmentId = new Integer(0);
        try {
            Integer libraryId = new Integer(root.getChildText("LibraryId").toString());
            String userId = root.getChildText("UserId");
            String newPatronId = root.getChildText("NewPatronId");
            updatePatronId(libraryId, userId, newPatronId);
            ejb.objectmodel.administration.PatronKey patronKey = new ejb.objectmodel.administration.PatronKey();
            patronKey.library_Id = libraryId;
            patronKey.patron_Id = newPatronId;
            ejb.objectmodel.administration.LocalPatron localPatron = null;
            localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getHome("Patron")).findByPrimaryKey(patronKey);
            String userType = root.getChildText("UserType");
            localPatron.setPatron_Type(userType);
            localPatron.setFname(root.getChildText("FirstName"));
            localPatron.setMname(root.getChildText("MiddleName"));
            localPatron.setLname(root.getChildText("LastName"));
            String patronCategoryName = root.getChildText("PatronCategoryName");
            ejb.objectmodel.administration.LocalPatron_Category objLocal4 = null;
            objLocal4 = ((ejb.objectmodel.administration.LocalPatron_CategoryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Patron_Category")).findByPatronCategoryName(libraryId, patronCategoryName);
            Integer patronCategoryId = new Integer(objLocal4.getPatron_Category_Id().toString());
            localPatron.setPatron_Category_Id(patronCategoryId);
            String departmentName = root.getChildText("DepartmentName");
            ejb.objectmodel.administration.LocalDEPT localDept = null;
            Object[] objLocalDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByDeptName(libraryId, departmentName).toArray();
            for (int k = 0; k < objLocalDept.length; k++) {
                localDept = (ejb.objectmodel.administration.LocalDEPT) objLocalDept[0];
                departmentId = new Integer(localDept.getDept_Id().toString());
            }
            localPatron.setDept_Id(departmentId);
            localPatron.setAddress1(root.getChildText("Address1"));
            localPatron.setAddress2(root.getChildText("Address2"));
            localPatron.setCity(root.getChildText("City"));
            localPatron.setState(root.getChildText("State"));
            localPatron.setCountry(root.getChildText("Country"));
            localPatron.setPin(root.getChildText("Pin"));
            localPatron.setPhone1(root.getChildText("Phone1"));
            localPatron.setPhone2(root.getChildText("Phone2"));
            localPatron.setFax(root.getChildText("Fax"));
            localPatron.setEmail(root.getChildText("EMail"));
            localPatron.setPaddress1(root.getChildText("Paddress1"));
            localPatron.setPaddress2(root.getChildText("Paddress2"));
            localPatron.setPcity(root.getChildText("Pcity"));
            localPatron.setPstate(root.getChildText("Pstate"));
            localPatron.setPcountry(root.getChildText("Pcountry"));
            localPatron.setPpin(root.getChildText("Ppin"));
            localPatron.setPphone1(root.getChildText("Pphone1"));
            localPatron.setPphone2(root.getChildText("Pphone2"));
            localPatron.setPfax(root.getChildText("Pfax"));
            localPatron.setPemail(root.getChildText("Pemail"));
            java.sql.Timestamp sysDate = ejb.bprocess.util.Utility.getInstance().getTimestamp();
            localPatron.setEntry_Date(sysDate);
            java.sql.Timestamp startDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("StartDate"));
            localPatron.setMembership_Start_Date(startDate);
            java.sql.Timestamp endDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("EndDate"));
            localPatron.setMembership_Expiry_Date(endDate);
            localPatron.setComm_Email(root.getChildText("Email1"));
            localPatron.setComm_Instant_Msg(root.getChildText("InstantMessage"));
            localPatron.setComm_Print(root.getChildText("Print"));
            String courseName = root.getChildText("CourseName");
            if (!courseName.equals("")) {
                Object[] objCourse = new Object[0];
                objCourse = ((ejb.objectmodel.administration.LocalCOURSEHome) homeFactory.getInstance().getHome("COURSE")).findByCourseName(libraryId, courseName).toArray();
                ejb.objectmodel.administration.LocalCOURSE localCourse = null;
                for (int k = 0; k < objCourse.length; k++) {
                    localCourse = (ejb.objectmodel.administration.LocalCOURSE) objCourse[k];
                    courseId = localCourse.getCourse_Id();
                }
            } else {
                courseId = null;
            }
            localPatron.setCourse_Id(courseId);
            localPatron.setSend_To_Address(root.getChildText("SendAddress"));
            org.jdom.Element ele = root.getChild("PatronCustom").getChild("Root");
            org.jdom.output.XMLOutputter xmloutput = new org.jdom.output.XMLOutputter();
            xmloutput.setOmitDeclaration(true);
            xmloutput.setOmitEncoding(true);
            String patroncustom = xmloutput.outputString(ele);
            localPatron.setCustom(patroncustom);
            success.setText("Y");
        } catch (javax.ejb.FinderException ex) {
            context.setRollbackOnly();
            success.setText("N");
            ex.printStackTrace();
        } catch (java.lang.Exception ex) {
            context.setRollbackOnly();
            success.setText("N");
            ex.printStackTrace();
        }
        root2.addContent(success);
        org.jdom.Document doc = new org.jdom.Document(root2);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String modifyApprovingAuthorityDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root2 = new org.jdom.Element("Response");
        org.jdom.Element success = new org.jdom.Element("Update");
        Integer courseId = new Integer(0);
        Integer departmentId = new Integer(0);
        try {
            Integer libraryId = new Integer(root.getChildText("LibraryId").toString());
            String patronId = root.getChildText("PatronId");
            String newPatronId = root.getChildText("NewPatronId");
            updatePatronId(libraryId, patronId, newPatronId);
            ejb.objectmodel.administration.PatronKey patronKey = new ejb.objectmodel.administration.PatronKey();
            patronKey.library_Id = libraryId;
            patronKey.patron_Id = newPatronId;
            ejb.objectmodel.administration.LocalPatron localPatron = null;
            localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getHome("Patron")).findByPrimaryKey(patronKey);
            String userType = root.getChildText("UserType");
            if (userType.equals("Approving Authority")) {
                userType = "C";
            }
            localPatron.setPatron_Type(userType);
            localPatron.setFname(root.getChildText("FirstName"));
            localPatron.setMname(root.getChildText("MiddleName"));
            localPatron.setLname(root.getChildText("LastName"));
            String patronCategoryName = root.getChildText("PatronCategoryName");
            ejb.objectmodel.administration.LocalPatron_Category objLocal6 = null;
            objLocal6 = ((ejb.objectmodel.administration.LocalPatron_CategoryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Patron_Category")).findByPatronCategoryName(libraryId, patronCategoryName);
            Integer patronCategoryId = new Integer(objLocal6.getPatron_Category_Id().toString());
            localPatron.setPatron_Category_Id(patronCategoryId);
            String departmentName = root.getChildText("DepartmentName");
            ejb.objectmodel.administration.LocalDEPT localDept = null;
            Object[] objLocalDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByDeptName(libraryId, departmentName).toArray();
            for (int k = 0; k < objLocalDept.length; k++) {
                localDept = (ejb.objectmodel.administration.LocalDEPT) objLocalDept[0];
                departmentId = new Integer(localDept.getDept_Id().toString());
            }
            localPatron.setDept_Id(departmentId);
            localPatron.setAddress1(root.getChildText("Address1"));
            localPatron.setAddress2(root.getChildText("Address2"));
            localPatron.setCity(root.getChildText("City"));
            localPatron.setState(root.getChildText("State"));
            localPatron.setCountry(root.getChildText("Country"));
            localPatron.setPin(root.getChildText("Pin"));
            localPatron.setPhone1(root.getChildText("Phone1"));
            localPatron.setPhone2(root.getChildText("Phone2"));
            localPatron.setFax(root.getChildText("Fax"));
            localPatron.setEmail(root.getChildText("EMail"));
            localPatron.setPaddress1(root.getChildText("Paddress1"));
            localPatron.setPaddress2(root.getChildText("Paddress2"));
            localPatron.setPcity(root.getChildText("Pcity"));
            localPatron.setPstate(root.getChildText("Pstate"));
            localPatron.setPcountry(root.getChildText("Pcountry"));
            localPatron.setPpin(root.getChildText("Ppin"));
            localPatron.setPphone1(root.getChildText("Pphone1"));
            localPatron.setPphone2(root.getChildText("Pphone2"));
            localPatron.setPfax(root.getChildText("Pfax"));
            localPatron.setPemail(root.getChildText("Pemail"));
            java.sql.Timestamp sysDate = ejb.bprocess.util.Utility.getInstance().getTimestamp();
            localPatron.setEntry_Date(sysDate);
            java.sql.Timestamp startDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("StartDate"));
            localPatron.setMembership_Start_Date(startDate);
            java.sql.Timestamp endDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("EndDate"));
            localPatron.setMembership_Expiry_Date(endDate);
            localPatron.setComm_Email(root.getChildText("Email1"));
            localPatron.setComm_Instant_Msg(root.getChildText("InstantMessage"));
            localPatron.setComm_Print(root.getChildText("Print"));
            String courseName = root.getChildText("CourseName");
            if (!courseName.equals("")) {
                Object[] objCourse = new Object[0];
                objCourse = ((ejb.objectmodel.administration.LocalCOURSEHome) homeFactory.getInstance().getHome("COURSE")).findByCourseName(libraryId, courseName).toArray();
                ejb.objectmodel.administration.LocalCOURSE localCourse = null;
                for (int k = 0; k < objCourse.length; k++) {
                    localCourse = (ejb.objectmodel.administration.LocalCOURSE) objCourse[k];
                    courseId = localCourse.getCourse_Id();
                }
            } else {
                courseId = null;
            }
            localPatron.setCourse_Id(courseId);
            localPatron.setSend_To_Address(root.getChildText("SendAddress"));
            org.jdom.Element ele = root.getChild("PatronCustom").getChild("Root");
            org.jdom.output.XMLOutputter xmloutput = new org.jdom.output.XMLOutputter();
            xmloutput.setOmitDeclaration(true);
            xmloutput.setOmitEncoding(true);
            String patroncustom = xmloutput.outputString(ele);
            localPatron.setCustom(patroncustom);
            success.setText("Y");
        } catch (javax.ejb.FinderException ex) {
            context.setRollbackOnly();
            success.setText("N");
            ex.printStackTrace();
        } catch (java.lang.Exception ex) {
            context.setRollbackOnly();
            success.setText("N");
            ex.printStackTrace();
        }
        root2.addContent(success);
        org.jdom.Document doc = new org.jdom.Document(root2);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String modifyPatronRegularDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root2 = new org.jdom.Element("Response");
        org.jdom.Element success = new org.jdom.Element("Update");
        Integer courseId = new Integer(0);
        Integer departmentId = new Integer(0);
        try {
            Integer libraryId = new Integer(root.getChildText("LibraryId").toString());
            String patronId = root.getChildText("PatronId");
            String newPatronId = root.getChildText("NewPatronId");
            updatePatronId(libraryId, patronId, newPatronId);
            ejb.objectmodel.administration.PatronKey patronKey = new ejb.objectmodel.administration.PatronKey();
            patronKey.library_Id = libraryId;
            patronKey.patron_Id = newPatronId;
            ejb.objectmodel.administration.LocalPatron localPatron = null;
            localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getHome("Patron")).findByPrimaryKey(patronKey);
            String patronType = root.getChildText("PatronType");
            String approvingAuthority = root.getChildText("ApprovingAuthority");
            if (approvingAuthority.equals("Y")) {
                patronType = "C";
            } else {
                patronType = "B";
            }
            localPatron.setPatron_Type(patronType);
            localPatron.setFname(root.getChildText("FirstName"));
            localPatron.setMname(root.getChildText("MiddleName"));
            localPatron.setLname(root.getChildText("LastName"));
            String patronCategoryName = root.getChildText("PatronCategoryName");
            ejb.objectmodel.administration.LocalPatron_Category objLocal6 = null;
            objLocal6 = ((ejb.objectmodel.administration.LocalPatron_CategoryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Patron_Category")).findByPatronCategoryName(libraryId, patronCategoryName);
            Integer patronCategoryId = new Integer(objLocal6.getPatron_Category_Id().toString());
            localPatron.setPatron_Category_Id(patronCategoryId);
            String departmentName = root.getChildText("DepartmentName");
            ejb.objectmodel.administration.LocalDEPT localDept = null;
            Object[] objLocalDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByDeptName(libraryId, departmentName).toArray();
            for (int k = 0; k < objLocalDept.length; k++) {
                localDept = (ejb.objectmodel.administration.LocalDEPT) objLocalDept[0];
                departmentId = new Integer(localDept.getDept_Id().toString());
            }
            localPatron.setDept_Id(departmentId);
            localPatron.setAddress1(root.getChildText("Address1"));
            localPatron.setAddress2(root.getChildText("Address2"));
            localPatron.setCity(root.getChildText("City"));
            localPatron.setState(root.getChildText("State"));
            localPatron.setCountry(root.getChildText("Country"));
            localPatron.setPin(root.getChildText("Pin"));
            localPatron.setPhone1(root.getChildText("Phone1"));
            localPatron.setPhone2(root.getChildText("Phone2"));
            localPatron.setFax(root.getChildText("Fax"));
            localPatron.setEmail(root.getChildText("EMail"));
            localPatron.setPaddress1(root.getChildText("Paddress1"));
            localPatron.setPaddress2(root.getChildText("Paddress2"));
            localPatron.setPcity(root.getChildText("Pcity"));
            localPatron.setPstate(root.getChildText("Pstate"));
            localPatron.setPcountry(root.getChildText("Pcountry"));
            localPatron.setPpin(root.getChildText("Ppin"));
            localPatron.setPphone1(root.getChildText("Pphone1"));
            localPatron.setPphone2(root.getChildText("Pphone2"));
            localPatron.setPfax(root.getChildText("Pfax"));
            localPatron.setPemail(root.getChildText("Pemail"));
            java.sql.Timestamp sysDate = ejb.bprocess.util.Utility.getInstance().getTimestamp();
            localPatron.setEntry_Date(sysDate);
            java.sql.Timestamp startDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("StartDate"));
            localPatron.setMembership_Start_Date(startDate);
            java.sql.Timestamp endDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("EndDate"));
            localPatron.setMembership_Expiry_Date(endDate);
            localPatron.setComm_Email(root.getChildText("Email1"));
            localPatron.setComm_Instant_Msg(root.getChildText("InstantMessage"));
            localPatron.setComm_Print(root.getChildText("Print"));
            String courseName = root.getChildText("CourseName");
            if (!courseName.equals("")) {
                Object[] objCourse = new Object[0];
                objCourse = ((ejb.objectmodel.administration.LocalCOURSEHome) homeFactory.getInstance().getHome("COURSE")).findByCourseName(libraryId, courseName).toArray();
                ejb.objectmodel.administration.LocalCOURSE localCourse = null;
                for (int k = 0; k < objCourse.length; k++) {
                    localCourse = (ejb.objectmodel.administration.LocalCOURSE) objCourse[k];
                    courseId = localCourse.getCourse_Id();
                }
            } else {
                courseId = null;
            }
            localPatron.setCourse_Id(courseId);
            localPatron.setSend_To_Address(root.getChildText("SendAddress"));
            String status = "";
            if (approvingAuthority.equals("Y")) {
                status = "C";
            } else {
                status = "B";
            }
            localPatron.setPatron_Type(status);
            org.jdom.Element ele = root.getChild("PatronCustom").getChild("Root");
            org.jdom.output.XMLOutputter xmloutput = new org.jdom.output.XMLOutputter();
            xmloutput.setOmitDeclaration(true);
            xmloutput.setOmitEncoding(true);
            String patroncustom = xmloutput.outputString(ele);
            localPatron.setCustom(patroncustom);
            success.setText("Y");
        } catch (javax.ejb.FinderException ex) {
            context.setRollbackOnly();
            success.setText("N");
            ex.printStackTrace();
        } catch (java.lang.Exception ex) {
            context.setRollbackOnly();
            success.setText("N");
            ex.printStackTrace();
        }
        root2.addContent(success);
        org.jdom.Document doc = new org.jdom.Document(root2);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String modifyPatronLibraryNetworkDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root2 = new org.jdom.Element("Response");
        org.jdom.Element success = new org.jdom.Element("Update");
        Integer courseId = new Integer(0);
        Integer departmentId = new Integer(0);
        try {
            Integer libraryId = new Integer(root.getChildText("LibraryId").toString());
            String patronId = root.getChildText("PatronId");
            String newPatronId = root.getChildText("NewPatronId");
            updatePatronId(libraryId, patronId, newPatronId);
            ejb.objectmodel.administration.PatronKey patronKey = new ejb.objectmodel.administration.PatronKey();
            patronKey.library_Id = libraryId;
            patronKey.patron_Id = newPatronId;
            ejb.objectmodel.administration.LocalPatron localPatron = null;
            localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getHome("Patron")).findByPrimaryKey(patronKey);
            String patronType = root.getChildText("PatronType");
            localPatron.setPatron_Type(patronType);
            String libraryNetworkName = root.getChildText("LibraryNetwork");
            Integer libraryNetworkPatronId = new Integer(root.getChildText("LibraryNetworkId").toString());
            localPatron.setLibrary_Patron_Id(libraryNetworkPatronId);
            localPatron.setFname(root.getChildText("FirstName"));
            localPatron.setMname(root.getChildText("MiddleName"));
            localPatron.setLname(root.getChildText("LastName"));
            String patronCategoryName = root.getChildText("PatronCategoryName");
            ejb.objectmodel.administration.LocalPatron_Category objLocal6 = null;
            objLocal6 = ((ejb.objectmodel.administration.LocalPatron_CategoryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Patron_Category")).findByPatronCategoryName(libraryId, patronCategoryName);
            Integer patronCategoryId = new Integer(objLocal6.getPatron_Category_Id().toString());
            localPatron.setPatron_Category_Id(patronCategoryId);
            String departmentName = root.getChildText("DepartmentName");
            ejb.objectmodel.administration.LocalDEPT localDept = null;
            Object[] objLocalDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByDeptName(libraryId, departmentName).toArray();
            for (int k = 0; k < objLocalDept.length; k++) {
                localDept = (ejb.objectmodel.administration.LocalDEPT) objLocalDept[0];
                departmentId = new Integer(localDept.getDept_Id().toString());
            }
            localPatron.setDept_Id(departmentId);
            localPatron.setAddress1(root.getChildText("Address1"));
            localPatron.setAddress2(root.getChildText("Address2"));
            localPatron.setCity(root.getChildText("City"));
            localPatron.setState(root.getChildText("State"));
            localPatron.setCountry(root.getChildText("Country"));
            localPatron.setPin(root.getChildText("Pin"));
            localPatron.setPhone1(root.getChildText("Phone1"));
            localPatron.setPhone2(root.getChildText("Phone2"));
            localPatron.setFax(root.getChildText("Fax"));
            localPatron.setEmail(root.getChildText("EMail"));
            localPatron.setPaddress1(root.getChildText("Paddress1"));
            localPatron.setPaddress2(root.getChildText("Paddress2"));
            localPatron.setPcity(root.getChildText("Pcity"));
            localPatron.setPstate(root.getChildText("Pstate"));
            localPatron.setPcountry(root.getChildText("Pcountry"));
            localPatron.setPpin(root.getChildText("Ppin"));
            localPatron.setPphone1(root.getChildText("Pphone1"));
            localPatron.setPphone2(root.getChildText("Pphone2"));
            localPatron.setPfax(root.getChildText("Pfax"));
            localPatron.setPemail(root.getChildText("Pemail"));
            java.sql.Timestamp sysDate = ejb.bprocess.util.Utility.getInstance().getTimestamp();
            localPatron.setEntry_Date(sysDate);
            java.sql.Timestamp startDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("StartDate"));
            localPatron.setMembership_Start_Date(startDate);
            java.sql.Timestamp endDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("EndDate"));
            localPatron.setMembership_Expiry_Date(endDate);
            localPatron.setComm_Email(root.getChildText("Email1"));
            localPatron.setComm_Instant_Msg(root.getChildText("InstantMessage"));
            localPatron.setComm_Print(root.getChildText("Print"));
            String courseName = root.getChildText("CourseName");
            if (!courseName.equals("")) {
                Object[] objCourse = new Object[0];
                objCourse = ((ejb.objectmodel.administration.LocalCOURSEHome) homeFactory.getInstance().getHome("COURSE")).findByCourseName(libraryId, courseName).toArray();
                ejb.objectmodel.administration.LocalCOURSE localCourse = null;
                for (int k = 0; k < objCourse.length; k++) {
                    localCourse = (ejb.objectmodel.administration.LocalCOURSE) objCourse[k];
                    courseId = localCourse.getCourse_Id();
                }
            } else {
                courseId = null;
            }
            localPatron.setCourse_Id(courseId);
            localPatron.setSend_To_Address(root.getChildText("SendAddress"));
            org.jdom.Element ele = root.getChild("PatronCustom").getChild("Root");
            org.jdom.output.XMLOutputter xmloutput = new org.jdom.output.XMLOutputter();
            xmloutput.setOmitDeclaration(true);
            xmloutput.setOmitEncoding(true);
            String patroncustom = xmloutput.outputString(ele);
            localPatron.setCustom(patroncustom);
            success.setText("Y");
        } catch (javax.ejb.FinderException ex) {
            context.setRollbackOnly();
            success.setText("N");
            ex.printStackTrace();
        } catch (java.lang.Exception ex) {
            context.setRollbackOnly();
            success.setText("N");
            ex.printStackTrace();
        }
        root2.addContent(success);
        org.jdom.Document doc = new org.jdom.Document(root2);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    public java.lang.String modifyPatronOthersLibraryDataBase(java.lang.String xmlStr) {
        org.jdom.Element root = newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr);
        org.jdom.Element root2 = new org.jdom.Element("Response");
        org.jdom.Element success = new org.jdom.Element("Update");
        Integer courseId = new Integer(0);
        Integer departmentId = new Integer(0);
        try {
            Integer libraryId = new Integer(root.getChildText("LibraryId").toString());
            String patronId = root.getChildText("PatronId");
            String newPatronId = root.getChildText("NewPatronId");
            updatePatronId(libraryId, patronId, newPatronId);
            ejb.objectmodel.administration.PatronKey patronKey = new ejb.objectmodel.administration.PatronKey();
            patronKey.library_Id = libraryId;
            patronKey.patron_Id = newPatronId;
            ejb.objectmodel.administration.LocalPatron localPatron = null;
            localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getHome("Patron")).findByPrimaryKey(patronKey);
            String patronType = root.getChildText("PatronType");
            localPatron.setPatron_Type(patronType);
            String othersLibraryName = root.getChildText("OthersLibrary");
            Integer othersLibraryPatronId = new Integer(root.getChildText("OthersLibraryId").toString());
            localPatron.setOther_Library_Patron_Id(othersLibraryPatronId);
            localPatron.setFname(root.getChildText("FirstName"));
            localPatron.setMname(root.getChildText("MiddleName"));
            localPatron.setLname(root.getChildText("LastName"));
            String patronCategoryName = root.getChildText("PatronCategoryName");
            ejb.objectmodel.administration.LocalPatron_Category objLocal6 = null;
            objLocal6 = ((ejb.objectmodel.administration.LocalPatron_CategoryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Patron_Category")).findByPatronCategoryName(libraryId, patronCategoryName);
            Integer patronCategoryId = new Integer(objLocal6.getPatron_Category_Id().toString());
            localPatron.setPatron_Category_Id(patronCategoryId);
            String departmentName = root.getChildText("DepartmentName");
            ejb.objectmodel.administration.LocalDEPT localDept = null;
            Object[] objLocalDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByDeptName(libraryId, departmentName).toArray();
            for (int k = 0; k < objLocalDept.length; k++) {
                localDept = (ejb.objectmodel.administration.LocalDEPT) objLocalDept[0];
                departmentId = new Integer(localDept.getDept_Id().toString());
            }
            localPatron.setDept_Id(departmentId);
            localPatron.setAddress1(root.getChildText("Address1"));
            localPatron.setAddress2(root.getChildText("Address2"));
            localPatron.setCity(root.getChildText("City"));
            localPatron.setState(root.getChildText("State"));
            localPatron.setCountry(root.getChildText("Country"));
            localPatron.setPin(root.getChildText("Pin"));
            localPatron.setPhone1(root.getChildText("Phone1"));
            localPatron.setPhone2(root.getChildText("Phone2"));
            localPatron.setFax(root.getChildText("Fax"));
            localPatron.setEmail(root.getChildText("EMail"));
            localPatron.setPaddress1(root.getChildText("Paddress1"));
            localPatron.setPaddress2(root.getChildText("Paddress2"));
            localPatron.setPcity(root.getChildText("Pcity"));
            localPatron.setPstate(root.getChildText("Pstate"));
            localPatron.setPcountry(root.getChildText("Pcountry"));
            localPatron.setPpin(root.getChildText("Ppin"));
            localPatron.setPphone1(root.getChildText("Pphone1"));
            localPatron.setPphone2(root.getChildText("Pphone2"));
            localPatron.setPfax(root.getChildText("Pfax"));
            localPatron.setPemail(root.getChildText("Pemail"));
            java.sql.Timestamp sysDate = ejb.bprocess.util.Utility.getInstance().getTimestamp();
            localPatron.setEntry_Date(sysDate);
            java.sql.Timestamp startDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("StartDate"));
            localPatron.setMembership_Start_Date(startDate);
            java.sql.Timestamp endDate = ejb.bprocess.util.Utility.getInstance().getTimestamp(root.getChildText("EndDate"));
            localPatron.setMembership_Expiry_Date(endDate);
            localPatron.setComm_Email(root.getChildText("Email1"));
            localPatron.setComm_Instant_Msg(root.getChildText("InstantMessage"));
            localPatron.setComm_Print(root.getChildText("Print"));
            String courseName = root.getChildText("CourseName");
            if (!courseName.equals("")) {
                Object[] objCourse = new Object[0];
                objCourse = ((ejb.objectmodel.administration.LocalCOURSEHome) homeFactory.getInstance().getHome("COURSE")).findByCourseName(libraryId, courseName).toArray();
                ejb.objectmodel.administration.LocalCOURSE localCourse = null;
                for (int k = 0; k < objCourse.length; k++) {
                    localCourse = (ejb.objectmodel.administration.LocalCOURSE) objCourse[k];
                    courseId = localCourse.getCourse_Id();
                }
            } else {
                courseId = null;
            }
            localPatron.setCourse_Id(courseId);
            localPatron.setSend_To_Address(root.getChildText("SendAddress"));
            org.jdom.Element ele = root.getChild("PatronCustom").getChild("Root");
            org.jdom.output.XMLOutputter xmloutput = new org.jdom.output.XMLOutputter();
            xmloutput.setOmitDeclaration(true);
            xmloutput.setOmitEncoding(true);
            String patroncustom = xmloutput.outputString(ele);
            localPatron.setCustom(patroncustom);
            success.setText("Y");
        } catch (javax.ejb.FinderException ex) {
            context.setRollbackOnly();
            success.setText("N");
            ex.printStackTrace();
        } catch (java.lang.Exception ex) {
            context.setRollbackOnly();
            success.setText("N");
            ex.printStackTrace();
        }
        root2.addContent(success);
        org.jdom.Document doc = new org.jdom.Document(root2);
        org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
        out.setIndent(true);
        out.setNewlines(true);
        java.io.StringWriter sw = new java.io.StringWriter();
        try {
            out.output(doc, sw);
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
        }
        xmlStr = sw.toString();
        return xmlStr;
    }

    private void updatePatronId(java.lang.Integer libraryId, String patronId, String newPatronId) {
        java.sql.Connection con = null;
        java.sql.Statement stmt = null;
        try {
            con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
            stmt = con.createStatement();
            String sql = "UPDATE PATRON SET PATRON_ID = '" + newPatronId + "' WHERE LIBRARY_ID = '" + libraryId + "' AND PATRON_ID = '" + patronId + "'";
            int rows = stmt.executeUpdate(sql);
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace(System.out);
        } finally {
            try {
                stmt.close();
                con.close();
            } catch (java.sql.SQLException ex) {
                ex.printStackTrace();
            } catch (java.lang.NullPointerException ex) {
                ex.printStackTrace();
            }
        }
    }

    public java.lang.String validatePatronBarcode(java.lang.String xmlstr) {
        String retxml = "";
        java.sql.Connection con = null;
        try {
            java.util.Hashtable htx = ejb.bprocess.util.NewGenXMLGenerator.getInstance().parseXMLDocument(xmlstr);
            String barcode = htx.get("Barcode").toString();
            String libraryId = htx.get("LibraryId").toString();
            Integer library_Id = new Integer(libraryId);
            boolean flag = false;
            try {
                con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
                java.sql.Statement sta = con.createStatement();
                String query = "select count(*) from patron where library_Id = '" + library_Id + "' and patron_Id = '" + barcode + "' ";
                java.sql.ResultSet rs = sta.executeQuery(query);
                int count = 0;
                while (rs.next()) {
                    count = rs.getInt(1);
                }
                rs.close();
                sta.close();
                if (count > 0) {
                    flag = true;
                } else {
                    flag = false;
                }
            } catch (Exception exp) {
                exp.printStackTrace();
                flag = false;
            }
            java.util.Hashtable ht = new java.util.Hashtable();
            if (flag) {
                ht.put("AVAILABLE", "YES");
            } else {
                ht.put("AVAILABLE", "NO");
            }
            con.close();
            retxml = ejb.bprocess.util.NewGenXMLGenerator.getInstance().buildXMLDocument(ht);
        } catch (Exception exp) {
            exp.printStackTrace();
        }
        return retxml;
    }
}
