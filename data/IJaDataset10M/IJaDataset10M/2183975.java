package empusa.typesolver.solver;

import java.sql.Types;
import org.apache.log4j.Logger;
import dbengines.genericjdbc.domain.JdbcColumn;
import dbengines.genericjdbc.domain.JdbcTable;
import empusa.exception.AutoGeneratedKeyNotSupportedException;
import empusa.exception.IdentityAutoGeneratedKeyNotSupportedException;
import empusa.exception.UnrecognizedDataTypeException;
import empusa.model.config.AutoGeneratedKey;
import empusa.typesolver.CannotConvertException;
import empusa.typesolver.PropertyType;
import empusa.typesolver.TypeSolver;

public class OracleTypeSolver implements TypeSolver {

    private static Logger logger = Logger.getLogger(OracleTypeSolver.class);

    private static final PropertyType CLASS_BIGDECIMAL = new PropertyType("java.math.BigDecimal", "java.math.BigDecimal", "java.sql.Types.DECIMAL");

    private static final PropertyType PRIM_DOUBLE = new PropertyType("double", "double", "java.sql.Types.DECIMAL");

    private static final PropertyType CLASS_DOUBLE = new PropertyType("java.lang.Double", "java.lang.Double", "java.sql.Types.DECIMAL");

    private static final PropertyType PRIM_LONG = new PropertyType("long", "long", "java.sql.Types.DECIMAL");

    private static final PropertyType CLASS_LONG = new PropertyType("java.lang.Long", "java.lang.Long", "java.sql.Types.DECIMAL");

    private static final PropertyType PRIM_INTEGER = new PropertyType("int", "int", "java.sql.Types.DECIMAL");

    private static final PropertyType CLASS_INTEGER = new PropertyType("java.lang.Integer", "java.lang.Integer", "java.sql.Types.DECIMAL");

    private static final PropertyType CLASS_STRING = new PropertyType("java.lang.String", "java.lang.String", "java.sql.Types.VARCHAR");

    private static final PropertyType CLASS_TIMESTAMP = new PropertyType("java.sql.Timestamp", "java.sql.Timestamp", "java.sql.Types.TIMESTAMP");

    private static final PropertyType BLOB = new PropertyType("byte[]", null, "BLOB");

    private static final PropertyType CLOB = new PropertyType("java.lang.String", null, "CLOB");

    public PropertyType resolveJavaType(final JdbcColumn c) throws UnrecognizedDataTypeException {
        logger.debug("c.getDataType()=" + c.getDataType());
        if (c.getDataType() == java.sql.Types.DECIMAL) {
            if ((c.getDecimalDigits() != null) && (c.getDecimalDigits().intValue() > 0)) {
                if (c.getColumnSize() == null) {
                    return CLASS_BIGDECIMAL;
                } else {
                    if (c.getColumnSize().intValue() > 12) {
                        return CLASS_BIGDECIMAL;
                    } else {
                        return chooseType(c, PRIM_DOUBLE, CLASS_DOUBLE);
                    }
                }
            } else {
                if (c.getColumnSize() == null) {
                    return CLASS_BIGDECIMAL;
                } else {
                    if (c.getColumnSize().intValue() <= 9) {
                        return chooseType(c, PRIM_INTEGER, CLASS_INTEGER);
                    } else if (c.getColumnSize().intValue() <= 18) {
                        return chooseType(c, PRIM_LONG, CLASS_LONG);
                    } else {
                        return CLASS_BIGDECIMAL;
                    }
                }
            }
        } else if (c.getDataType() == Types.FLOAT) {
            return CLASS_DOUBLE;
        } else if (c.getDataType() == Types.CHAR) {
            if (c.getColumnSize() == null) {
                return CLASS_STRING;
            } else {
                if (c.getColumnSize().intValue() > 1) {
                    return CLASS_STRING;
                } else {
                    return CLASS_STRING;
                }
            }
        } else if (c.getDataType() == Types.VARCHAR) {
            return CLASS_STRING;
        } else if (c.getDataType() == Types.LONGVARCHAR) {
            return CLASS_STRING;
        } else if (c.getDataType() == Types.DATE) {
            return CLASS_TIMESTAMP;
        } else if (c.getDataType() == Types.TIMESTAMP) {
            return CLASS_TIMESTAMP;
        } else if ((c.getDataType() == Types.BLOB)) {
            return BLOB;
        } else if ((c.getDataType() == Types.CLOB)) {
            return CLOB;
        } else if ((c.getDataType() == Types.LONGVARBINARY)) {
            return BLOB;
        } else if ((c.getDataType() == Types.OTHER) && (c.getTypeName().equals("TIMESTAMP(6)"))) {
            return CLASS_TIMESTAMP;
        } else if ((c.getDataType() == Types.OTHER) && (c.getTypeName().equals("FLOAT"))) {
            return chooseType(c, PRIM_DOUBLE, CLASS_DOUBLE);
        } else {
            logger.debug("Unrecognized DB type: " + c.getDataType() + ", " + c.getTypeName());
            throw new UnrecognizedDataTypeException(c);
        }
    }

    private PropertyType chooseType(final JdbcColumn c, final PropertyType primitiveType, final PropertyType objectType) {
        return objectType;
    }

    public boolean useParameterMap() {
        return false;
    }

    private static final String BIG_DECIMAL = "java.math.BigDecimal";

    private static final String LONG = "java.lang.Long";

    private static final String INTEGER = "java.lang.Integer";

    private static final String DOUBLE = "java.lang.Double";

    public String convertPropertyType(final String from, final String to, final String fromValue) throws CannotConvertException {
        if (from == null) {
            if (to == null) {
                return fromValue;
            } else {
                logger.error("Empusa cannot convert from '" + from + "' to '" + to + "'.");
                throw new CannotConvertException();
            }
        } else {
            if (from.equals(to)) {
                return fromValue;
            } else {
                try {
                    if (BIG_DECIMAL.equals(from)) {
                        return convertBigDecimalTo(to, fromValue);
                    }
                    if (LONG.equals(from)) {
                        return convertLongTo(to, fromValue);
                    }
                    if (INTEGER.equals(from)) {
                        return convertIntegerTo(to, fromValue);
                    }
                    if (DOUBLE.equals(from)) {
                        return convertDoubleTo(to, fromValue);
                    }
                    throw new CannotConvertException();
                } catch (CannotConvertException e) {
                    logger.error("Empusa cannot convert from '" + from + "' to '" + to + "'.");
                    throw new CannotConvertException();
                }
            }
        }
    }

    private String convertBigDecimalTo(final String to, final String value) throws CannotConvertException {
        if (BIG_DECIMAL.equals(to)) {
            return value;
        }
        if (LONG.equals(to)) {
            return "(" + value + " == null) ? null : new java.lang.Long(" + value + ".longValue())";
        }
        if (INTEGER.equals(to)) {
            return "(" + value + " == null) ? null : new java.lang.Integer(" + value + ".intValue())";
        }
        if (DOUBLE.equals(to)) {
            return "(" + value + " == null) ? null : new java.lang.Double(" + value + ".doubleValue())";
        }
        throw new CannotConvertException();
    }

    private String convertLongTo(final String to, final String value) throws CannotConvertException {
        if (BIG_DECIMAL.equals(to)) {
            return "(" + value + " == null) ? null : new java.math.BigDecimal(" + value + ".toString())";
        }
        if (LONG.equals(to)) {
            return value;
        }
        if (INTEGER.equals(to)) {
            return "(" + value + " == null) ? null : new java.lang.Integer(" + value + ".intValue())";
        }
        if (DOUBLE.equals(to)) {
            return "(" + value + " == null) ? null : new java.lang.Double(" + value + ".doubleValue())";
        }
        throw new CannotConvertException();
    }

    private String convertIntegerTo(final String to, final String value) throws CannotConvertException {
        if (BIG_DECIMAL.equals(to)) {
            return "(" + value + " == null) ? null : new java.math.BigDecimal(" + value + ".toString())";
        }
        if (LONG.equals(to)) {
            return "(" + value + " == null) ? null : new java.lang.Long(" + value + ".longValue())";
        }
        if (INTEGER.equals(to)) {
            return value;
        }
        if (DOUBLE.equals(to)) {
            return "(" + value + " == null) ? null : new java.lang.Double(" + value + ".doubleValue())";
        }
        throw new CannotConvertException();
    }

    private String convertDoubleTo(final String to, final String value) throws CannotConvertException {
        if (BIG_DECIMAL.equals(to)) {
            return "(" + value + " == null) ? null : new java.math.BigDecimal(" + value + ".toString())";
        }
        if (LONG.equals(to)) {
            return "(" + value + " == null) ? null : new java.lang.Long(" + value + ".longValue())";
        }
        if (INTEGER.equals(to)) {
            return "(" + value + " == null) ? null : new java.lang.Integer(" + value + ".intValue())";
        }
        if (DOUBLE.equals(to)) {
            return value;
        }
        throw new CannotConvertException();
    }

    public String getAutoGeneratedKeySentence(final JdbcTable t, final AutoGeneratedKey k) throws AutoGeneratedKeyNotSupportedException {
        if (k.isIdentity()) {
            throw new IdentityAutoGeneratedKeyNotSupportedException("Identity auto-generated key is not supported in Oracle DB. " + "Please specify the 'sequence-name' attribute for table '" + t.getTableName() + "'.");
        }
        return "select " + k.getSequenceName().trim() + ".nextval from dual";
    }
}
