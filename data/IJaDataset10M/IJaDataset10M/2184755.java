package org.neuroph.easyneurons.dialog;

import org.jdesktop.application.Action;
import org.neuroph.easyneurons.TrainingController;
import org.neuroph.nnet.learning.LMS;

/**
 * 
 * @author Zoran Sevarac <sevarac@gmail.com>
 */
public class HebbianTrainingDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;

    TrainingController controller;

    /** Creates new form LmsTrainingDialog */
    public HebbianTrainingDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public HebbianTrainingDialog(java.awt.Frame parent, boolean modal, TrainingController controller) {
        super(parent, modal);
        this.controller = controller;
        initComponents();
    }

    /**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        inputPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        limitIterationsCheckkBox = new javax.swing.JCheckBox();
        learningRateField = new javax.swing.JTextField();
        maxErrorField = new javax.swing.JTextField();
        maxIterationsField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        trainButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.neuroph.easyneurons.EasyNeuronsApplication.class).getContext().getResourceMap(HebbianTrainingDialog.class);
        setTitle(resourceMap.getString("Form.title"));
        setModal(true);
        setName("Form");
        getContentPane().setLayout(new java.awt.GridBagLayout());
        inputPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        inputPanel.setName("inputPanel");
        inputPanel.setLayout(new java.awt.GridBagLayout());
        jLabel1.setText(resourceMap.getString("jLabel1.text"));
        jLabel1.setName("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 0);
        inputPanel.add(jLabel1, gridBagConstraints);
        jLabel2.setText(resourceMap.getString("jLabel2.text"));
        jLabel2.setName("jLabel2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        inputPanel.add(jLabel2, gridBagConstraints);
        jLabel3.setText(resourceMap.getString("jLabel3.text"));
        jLabel3.setName("jLabel3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        inputPanel.add(jLabel3, gridBagConstraints);
        limitIterationsCheckkBox.setText(resourceMap.getString("limitIterationsCheckkBox.text"));
        limitIterationsCheckkBox.setName("limitIterationsCheckkBox");
        limitIterationsCheckkBox.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                limitIterationsCheckkBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 5);
        inputPanel.add(limitIterationsCheckkBox, gridBagConstraints);
        learningRateField.setColumns(8);
        learningRateField.setText(resourceMap.getString("learningRateField.text"));
        learningRateField.setName("learningRateField");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 80.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
        inputPanel.add(learningRateField, gridBagConstraints);
        maxErrorField.setColumns(8);
        maxErrorField.setText(resourceMap.getString("maxErrorField.text"));
        maxErrorField.setName("maxErrorField");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        inputPanel.add(maxErrorField, gridBagConstraints);
        maxIterationsField.setColumns(8);
        maxIterationsField.setEnabled(false);
        maxIterationsField.setName("maxIterationsField");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        inputPanel.add(maxIterationsField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(inputPanel, gridBagConstraints);
        buttonPanel.setName("buttonPanel");
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.neuroph.easyneurons.EasyNeuronsApplication.class).getContext().getActionMap(HebbianTrainingDialog.class, this);
        trainButton.setAction(actionMap.get("train"));
        trainButton.setText(resourceMap.getString("trainButton.text"));
        trainButton.setName("trainButton");
        buttonPanel.add(trainButton);
        closeButton.setAction(actionMap.get("close"));
        closeButton.setText(resourceMap.getString("closeButton.text"));
        closeButton.setName("closeButton");
        buttonPanel.add(closeButton);
        helpButton.setText(resourceMap.getString("helpButton.text"));
        helpButton.setEnabled(false);
        helpButton.setName("helpButton");
        buttonPanel.add(helpButton);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(buttonPanel, gridBagConstraints);
        pack();
    }

    private void limitIterationsCheckkBoxItemStateChanged(java.awt.event.ItemEvent evt) {
        if (this.maxIterationsField.isEnabled()) this.maxIterationsField.setEnabled(false); else this.maxIterationsField.setEnabled(true);
    }

    /**
	 * @param args
	 *            the command line arguments
	 */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                HebbianTrainingDialog dialog = new HebbianTrainingDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    @Action
    public void close() {
        this.dispose();
    }

    @Action
    public void train() {
        String learningRateStr = learningRateField.getText().toString();
        String maxErrorStr = maxErrorField.getText().toString();
        String maxIterationsStr = maxIterationsField.getText().toString();
        Double learningRate = new Double(learningRateStr);
        Double maxError = new Double(maxErrorStr);
        Integer maxIterations = new Integer(0);
        if (limitIterationsCheckkBox.isSelected()) maxIterations = new Integer(maxIterationsStr);
        controller.setLmsParams(learningRate, maxError, maxIterations);
        LMS lms = (LMS) this.controller.getNetwork().getLearningRule();
        SupervisedTrainingMonitor lmsTrainingMonitor = new SupervisedTrainingMonitor(null, true, this.controller);
        lmsTrainingMonitor.setLocationRelativeTo(this);
        lms.addObserver(lmsTrainingMonitor);
        controller.train();
        this.dispose();
        lmsTrainingMonitor.setVisible(true);
    }

    private javax.swing.JPanel buttonPanel;

    private javax.swing.JButton closeButton;

    private javax.swing.JButton helpButton;

    private javax.swing.JPanel inputPanel;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JTextField learningRateField;

    private javax.swing.JCheckBox limitIterationsCheckkBox;

    private javax.swing.JTextField maxErrorField;

    private javax.swing.JTextField maxIterationsField;

    private javax.swing.JButton trainButton;
}
