package org.openscience.cdkweb.om;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.torque.NoRowsException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.BasePeer;
import org.apache.torque.util.Criteria;
import org.openscience.cdkweb.om.map.DBBondDBAtomMapBuilder;
import com.workingdogs.village.DataSetException;
import com.workingdogs.village.QueryDataSet;
import com.workingdogs.village.Record;

/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Oct 19 16:55:57 CEST 2004]
 *
 */
public abstract class BaseDBBondDBAtomPeer extends BasePeer {

    /** the default database name for this class */
    public static final String DATABASE_NAME = "default";

    /** the table name for this class */
    public static final String TABLE_NAME = "BOND_ATOM";

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static MapBuilder getMapBuilder() throws TorqueException {
        return getMapBuilder(DBBondDBAtomMapBuilder.CLASS_NAME);
    }

    /** the column name for the BOND_ID field */
    public static final String BOND_ID;

    /** the column name for the ATOM_ID field */
    public static final String ATOM_ID;

    /** the column name for the ORDER_NUMBER field */
    public static final String ORDER_NUMBER;

    static {
        BOND_ID = "BOND_ATOM.BOND_ID";
        ATOM_ID = "BOND_ATOM.ATOM_ID";
        ORDER_NUMBER = "BOND_ATOM.ORDER_NUMBER";
        if (Torque.isInit()) {
            try {
                getMapBuilder(DBBondDBAtomMapBuilder.CLASS_NAME);
            } catch (Exception e) {
                log.error("Could not initialize Peer", e);
            }
        } else {
            Torque.registerMapBuilder(DBBondDBAtomMapBuilder.CLASS_NAME);
        }
    }

    /** number of columns for this peer */
    public static final int numColumns = 3;

    /** A class that can be returned by this peer. */
    protected static final String CLASSNAME_DEFAULT = "org.openscience.cdkweb.om.DBBondDBAtom";

    /** A class that can be returned by this peer. */
    protected static final Class CLASS_DEFAULT = initClass(CLASSNAME_DEFAULT);

    /**
     * Class object initialization method.
     *
     * @param className name of the class to initialize
     * @return the initialized class
     */
    private static Class initClass(String className) {
        Class c = null;
        try {
            c = Class.forName(className);
        } catch (Throwable t) {
            log.error("A FATAL ERROR has occurred which should not " + "have happened under any circumstance.  Please notify " + "the Torque developers <torque-dev@db.apache.org> " + "and give as many details as possible (including the error " + "stack trace).", t);
            if (t instanceof Error) {
                throw (Error) t.fillInStackTrace();
            }
        }
        return c;
    }

    /**
     * Get the list of objects for a ResultSet.  Please not that your
     * resultset MUST return columns in the right order.  You can use
     * getFieldNames() in BaseObject to get the correct sequence.
     *
     * @param results the ResultSet
     * @return the list of objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List resultSet2Objects(java.sql.ResultSet results) throws TorqueException {
        try {
            QueryDataSet qds = null;
            List rows = null;
            try {
                qds = new QueryDataSet(results);
                rows = getSelectResults(qds);
            } finally {
                if (qds != null) {
                    qds.close();
                }
            }
            return populateObjects(rows);
        } catch (SQLException e) {
            throw new TorqueException(e);
        } catch (DataSetException e) {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do inserts.
     *
     * @param criteria object used to create the INSERT statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria) throws TorqueException {
        return BaseDBBondDBAtomPeer.doInsert(criteria, (Connection) null);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object used to create the INSERT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria, Connection con) throws TorqueException {
        setDbName(criteria);
        if (con == null) {
            return BasePeer.doInsert(criteria);
        } else {
            return BasePeer.doInsert(criteria, con);
        }
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria) throws TorqueException {
        criteria.addSelectColumn(BOND_ID);
        criteria.addSelectColumn(ATOM_ID);
        criteria.addSelectColumn(ORDER_NUMBER);
    }

    /**
     * Create a new object of type cls from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static DBBondDBAtom row2Object(Record row, int offset, Class cls) throws TorqueException {
        try {
            DBBondDBAtom obj = (DBBondDBAtom) cls.newInstance();
            DBBondDBAtomPeer.populateObject(row, offset, obj);
            obj.setModified(false);
            obj.setNew(false);
            return obj;
        } catch (InstantiationException e) {
            throw new TorqueException(e);
        } catch (IllegalAccessException e) {
            throw new TorqueException(e);
        }
    }

    /**
     * Populates an object from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void populateObject(Record row, int offset, DBBondDBAtom obj) throws TorqueException {
        try {
            obj.setBondId(row.getValue(offset + 0).asInt());
            obj.setAtomId(row.getValue(offset + 1).asInt());
            obj.setOrderNumber(row.getValue(offset + 2).asInt());
        } catch (DataSetException e) {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do selects.
     *
     * @param criteria object used to create the SELECT statement.
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria) throws TorqueException {
        return populateObjects(doSelectVillageRecords(criteria));
    }

    /**
     * Method to do selects within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria, Connection con) throws TorqueException {
        return populateObjects(doSelectVillageRecords(criteria, con));
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method handles connections internally.  The Record objects
     * returned by this method should be considered readonly.  Do not
     * alter the data and call save(), your results may vary, but are
     * certainly likely to result in hard to track MT bugs.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria) throws TorqueException {
        return BaseDBBondDBAtomPeer.doSelectVillageRecords(criteria, (Connection) null);
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method should be used for transactions
     *
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria, Connection con) throws TorqueException {
        if (criteria.getSelectColumns().size() == 0) {
            addSelectColumns(criteria);
        }
        setDbName(criteria);
        if (con == null) {
            return BasePeer.doSelect(criteria);
        } else {
            return BasePeer.doSelect(criteria, con);
        }
    }

    /**
     * The returned List will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List populateObjects(List records) throws TorqueException {
        List results = new ArrayList(records.size());
        for (int i = 0; i < records.size(); i++) {
            Record row = (Record) records.get(i);
            results.add(DBBondDBAtomPeer.row2Object(row, 1, DBBondDBAtomPeer.getOMClass()));
        }
        return results;
    }

    /**
     * The class that the Peer will make instances of.
     * If the BO is abstract then you must implement this method
     * in the BO.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass() throws TorqueException {
        return CLASS_DEFAULT;
    }

    /**
     * Method to do updates.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria) throws TorqueException {
        BaseDBBondDBAtomPeer.doUpdate(criteria, (Connection) null);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria, Connection con) throws TorqueException {
        Criteria selectCriteria = new Criteria(DATABASE_NAME, 2);
        selectCriteria.put(BOND_ID, criteria.remove(BOND_ID));
        selectCriteria.put(ATOM_ID, criteria.remove(ATOM_ID));
        setDbName(criteria);
        if (con == null) {
            BasePeer.doUpdate(selectCriteria, criteria);
        } else {
            BasePeer.doUpdate(selectCriteria, criteria, con);
        }
    }

    /**
     * Method to do deletes.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Criteria criteria) throws TorqueException {
        DBBondDBAtomPeer.doDelete(criteria, (Connection) null);
    }

    /**
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doDelete(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Criteria criteria, Connection con) throws TorqueException {
        setDbName(criteria);
        if (con == null) {
            BasePeer.doDelete(criteria);
        } else {
            BasePeer.doDelete(criteria, con);
        }
    }

    /**
     * Method to do selects
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(DBBondDBAtom obj) throws TorqueException {
        return doSelect(buildCriteria(obj));
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(DBBondDBAtom obj) throws TorqueException {
        doInsert(buildCriteria(obj));
        obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * @param obj the data object to update in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(DBBondDBAtom obj) throws TorqueException {
        doUpdate(buildCriteria(obj));
        obj.setModified(false);
    }

    /**
     * @param obj the data object to delete in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(DBBondDBAtom obj) throws TorqueException {
        doDelete(buildCriteria(obj));
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(DBBondDBAtom) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(DBBondDBAtom obj, Connection con) throws TorqueException {
        doInsert(buildCriteria(obj), con);
        obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(DBBondDBAtom) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(DBBondDBAtom obj, Connection con) throws TorqueException {
        doUpdate(buildCriteria(obj), con);
        obj.setModified(false);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(DBBondDBAtom) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(DBBondDBAtom obj, Connection con) throws TorqueException {
        doDelete(buildCriteria(obj), con);
    }

    /**
     * Method to do deletes.
     *
     * @param pk ObjectKey that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk) throws TorqueException {
        BaseDBBondDBAtomPeer.doDelete(pk, (Connection) null);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.  It will take
     * care of the connection details internally.
     *
     * @param pk the primary key for the object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk, Connection con) throws TorqueException {
        doDelete(buildCriteria(pk), con);
    }

    /** Build a Criteria object from an ObjectKey */
    public static Criteria buildCriteria(ObjectKey pk) {
        Criteria criteria = new Criteria();
        SimpleKey[] keys = (SimpleKey[]) pk.getValue();
        criteria.add(BOND_ID, keys[0]);
        criteria.add(ATOM_ID, keys[1]);
        return criteria;
    }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria(DBBondDBAtom obj) {
        Criteria criteria = new Criteria(DATABASE_NAME);
        criteria.add(BOND_ID, obj.getBondId());
        criteria.add(ATOM_ID, obj.getAtomId());
        criteria.add(ORDER_NUMBER, obj.getOrderNumber());
        return criteria;
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static DBBondDBAtom retrieveByPK(ObjectKey pk) throws TorqueException, NoRowsException, TooManyRowsException {
        Connection db = null;
        DBBondDBAtom retVal = null;
        try {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(pk, db);
        } finally {
            Torque.closeConnection(db);
        }
        return (retVal);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static DBBondDBAtom retrieveByPK(ObjectKey pk, Connection con) throws TorqueException, NoRowsException, TooManyRowsException {
        Criteria criteria = buildCriteria(pk);
        List v = doSelect(criteria, con);
        if (v.size() == 0) {
            throw new NoRowsException("Failed to select a row.");
        } else if (v.size() > 1) {
            throw new TooManyRowsException("Failed to select only one row.");
        } else {
            return (DBBondDBAtom) v.get(0);
        }
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks) throws TorqueException {
        Connection db = null;
        List retVal = null;
        try {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPKs(pks, db);
        } finally {
            Torque.closeConnection(db);
        }
        return (retVal);
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks, Connection dbcon) throws TorqueException {
        List objs = null;
        if (pks == null || pks.size() == 0) {
            objs = new LinkedList();
        } else {
            Criteria criteria = new Criteria();
            Iterator iter = pks.iterator();
            while (iter.hasNext()) {
                ObjectKey pk = (ObjectKey) iter.next();
                SimpleKey[] keys = (SimpleKey[]) pk.getValue();
                Criteria.Criterion c0 = criteria.getNewCriterion(BOND_ID, keys[0], Criteria.EQUAL);
                Criteria.Criterion c1 = criteria.getNewCriterion(ATOM_ID, keys[1], Criteria.EQUAL);
                c0.and(c1);
                criteria.or(c0);
            }
            objs = doSelect(criteria, dbcon);
        }
        return objs;
    }

    /**
     * retrieve object using using pk values.
     *
       * @param bond_id int
       * @param atom_id int
       */
    public static DBBondDBAtom retrieveByPK(int bond_id, int atom_id) throws TorqueException {
        Connection db = null;
        DBBondDBAtom retVal = null;
        try {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(bond_id, atom_id, db);
        } finally {
            Torque.closeConnection(db);
        }
        return (retVal);
    }

    /**
     * retrieve object using using pk values.
     *
       * @param bond_id int
       * @param atom_id int
       * @param Connection con
     */
    public static DBBondDBAtom retrieveByPK(int bond_id, int atom_id, Connection con) throws TorqueException {
        Criteria criteria = new Criteria(5);
        criteria.add(BOND_ID, bond_id);
        criteria.add(ATOM_ID, atom_id);
        List v = doSelect(criteria, con);
        if (v.size() != 1) {
            throw new TorqueException("Failed to select one and only one row.");
        } else {
            return (DBBondDBAtom) v.get(0);
        }
    }

    /**
     * selects a collection of DBBondDBAtom objects pre-filled with their
     * DBBond objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DBBondDBAtomPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinDBBond(Criteria criteria) throws TorqueException {
        setDbName(criteria);
        DBBondDBAtomPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        DBBondPeer.addSelectColumns(criteria);
        criteria.addJoin(DBBondDBAtomPeer.BOND_ID, DBBondPeer.BOND_ID);
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();
        for (int i = 0; i < rows.size(); i++) {
            Record row = (Record) rows.get(i);
            Class omClass = DBBondDBAtomPeer.getOMClass();
            DBBondDBAtom obj1 = (DBBondDBAtom) DBBondDBAtomPeer.row2Object(row, 1, omClass);
            omClass = DBBondPeer.getOMClass();
            DBBond obj2 = (DBBond) DBBondPeer.row2Object(row, offset, omClass);
            boolean newObject = true;
            for (int j = 0; j < results.size(); j++) {
                DBBondDBAtom temp_obj1 = (DBBondDBAtom) results.get(j);
                DBBond temp_obj2 = (DBBond) temp_obj1.getDBBond();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey())) {
                    newObject = false;
                    temp_obj2.addDBBondDBAtom(obj1);
                    break;
                }
            }
            if (newObject) {
                obj2.initDBBondDBAtoms();
                obj2.addDBBondDBAtom(obj1);
            }
            results.add(obj1);
        }
        return results;
    }

    /**
     * selects a collection of DBBondDBAtom objects pre-filled with their
     * DBAtom objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DBBondDBAtomPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinDBAtom(Criteria criteria) throws TorqueException {
        setDbName(criteria);
        DBBondDBAtomPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        DBAtomPeer.addSelectColumns(criteria);
        criteria.addJoin(DBBondDBAtomPeer.ATOM_ID, DBAtomPeer.ATOM_ID);
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();
        for (int i = 0; i < rows.size(); i++) {
            Record row = (Record) rows.get(i);
            Class omClass = DBBondDBAtomPeer.getOMClass();
            DBBondDBAtom obj1 = (DBBondDBAtom) DBBondDBAtomPeer.row2Object(row, 1, omClass);
            omClass = DBAtomPeer.getOMClass();
            DBAtom obj2 = (DBAtom) DBAtomPeer.row2Object(row, offset, omClass);
            boolean newObject = true;
            for (int j = 0; j < results.size(); j++) {
                DBBondDBAtom temp_obj1 = (DBBondDBAtom) results.get(j);
                DBAtom temp_obj2 = (DBAtom) temp_obj1.getDBAtom();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey())) {
                    newObject = false;
                    temp_obj2.addDBBondDBAtom(obj1);
                    break;
                }
            }
            if (newObject) {
                obj2.initDBBondDBAtoms();
                obj2.addDBBondDBAtom(obj1);
            }
            results.add(obj1);
        }
        return results;
    }

    /**
     * Returns the TableMap related to this peer.  This method is not
     * needed for general use but a specific application could have a need.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static TableMap getTableMap() throws TorqueException {
        return Torque.getDatabaseMap(DATABASE_NAME).getTable(TABLE_NAME);
    }

    private static void setDbName(Criteria crit) {
        if (crit.getDbName() == Torque.getDefaultDB()) {
            crit.setDbName(DATABASE_NAME);
        }
    }
}
