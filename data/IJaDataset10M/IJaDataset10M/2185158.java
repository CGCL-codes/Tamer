package org.jmlspecs.ajmlrac;

import java.util.Iterator;
import java.util.List;
import org.jmlspecs.checker.JmlClassDeclaration;
import org.jmlspecs.checker.JmlSourceField;
import org.jmlspecs.checker.JmlTypeDeclaration;
import org.multijava.mjc.CBinaryField;
import org.multijava.mjc.JMethodDeclarationType;

/**
 * A class for generating assertion check methods for class-level
 * assertions such as invariants and history constraints.
 * There are two types of class-level assertions:
 * <em>instance</em> (<em>non-static</em>) <em>assertions</em> and
 * <em>class</em> (<em>static</em>) <em>assertions</em>.
 * As thus, two types of assertion check methods are generated. 
 * An instance assertion check method checks both the instance and class 
 * assertions while a class assertion check method checks only the class 
 * assertionss. 
 * The generated assertion check methods inherit assertions of its superclass
 * interfaces by dynamically invoking the corresponding assertion methods.
 *
 * <p>
 * The class implements a variant of the <em>Template Pattern</em>
 * [GoF95], prescribed in the class {@link AssertionMethod}.
 * </p>
 *
 * @see AssertionMethod
 *
 * @author Henrique Rebelo
 * @version $Revision: 1.0 $
 */
public class InvariantMethodAdviceAsPostconditionMethodCallSite extends AssertionMethod {

    /** Construct a new <code>InvariantLikeMethod</code> object. 
	 *
	 * @param isStatic the kind of assertion check method to generate;
	 *                 <tt>true</tt> for static and <tt>false</tt> for 
	 *                 non-static (instance) assertion check method.
	 * @param typeDecl the target type declaration whose assertion check
	 *                 methods are to be generated.
	 */
    public InvariantMethodAdviceAsPostconditionMethodCallSite(boolean isStatic, JmlTypeDeclaration typeDecl) {
        this.isStatic = isStatic;
        this.typeDecl = typeDecl;
        this.exceptionToThrow = "JMLInvariantError";
        this.hasInstInv = !this.combineInvariantsWithNonNull(INST_INV).equals("");
        this.hasPublicInstInv = !this.combineVisibilityInvariantsWithNonNull(INST_INV, ACC_PUBLIC).equals("");
        this.hasProtectedInstInv = !this.combineVisibilityInvariantsWithNonNull(INST_INV, ACC_PROTECTED).equals("");
        this.hasDefaultInstInv = !this.combineVisibilityInvariantsWithNonNull(INST_INV, 0L).equals("");
        this.hasPrivateInstInv = !this.combineVisibilityInvariantsWithNonNull(INST_INV, ACC_PRIVATE).equals("");
        this.hasStatInv = !this.combineInvariantsWithNonNull(STAT_INV).equals("");
        this.hasStatInv = !this.combineInvariantsWithNonNull(STAT_INV).equals("");
        this.hasPublicStatInv = !this.combineVisibilityInvariantsWithNonNull(STAT_INV, ACC_PUBLIC).equals("");
        this.hasProtectedStatInv = !this.combineVisibilityInvariantsWithNonNull(STAT_INV, ACC_PROTECTED).equals("");
        this.hasDefaultStatInv = !this.combineVisibilityInvariantsWithNonNull(STAT_INV, 0L).equals("");
        this.hasPrivateStatInv = !this.combineVisibilityInvariantsWithNonNull(STAT_INV, ACC_PRIVATE).equals("");
        this.publicInstInvPred = AspectUtil.changeThisOrSuperRefToAdviceRef(this.combineVisibilityInvariantsWithNonNull(INST_INV, ACC_PUBLIC), typeDecl);
        this.protectedInstInvPred = AspectUtil.changeThisOrSuperRefToAdviceRef(this.combineVisibilityInvariantsWithNonNull(INST_INV, ACC_PROTECTED), typeDecl);
        this.defaultInstInvPred = AspectUtil.changeThisOrSuperRefToAdviceRef(this.combineVisibilityInvariantsWithNonNull(INST_INV, 0L), typeDecl);
        this.privateInstInvPred = AspectUtil.changeThisOrSuperRefToAdviceRef(this.combineVisibilityInvariantsWithNonNull(INST_INV, ACC_PRIVATE), typeDecl);
        this.publicStatInvPred = this.combineVisibilityInvariantsWithNonNull(STAT_INV, ACC_PUBLIC);
        this.protectedStatInvPred = this.combineVisibilityInvariantsWithNonNull(STAT_INV, ACC_PROTECTED);
        this.defaultStatInvPred = this.combineVisibilityInvariantsWithNonNull(STAT_INV, 0L);
        this.privateStatInvPred = this.combineVisibilityInvariantsWithNonNull(STAT_INV, ACC_PRIVATE);
        this.javadocInst = "/** Generated by JML to check " + "non-static" + " invariants of \n" + ((this.typeDecl instanceof JmlClassDeclaration) ? " * class " : " * interface ") + this.typeDecl.ident() + ". */";
        this.javadocStat = "/** Generated by JML to check " + "static" + " invariants of \n" + ((this.typeDecl instanceof JmlClassDeclaration) ? " * class " : " * interface ") + this.typeDecl.ident() + ". */";
    }

    /** Generate and return a type-level assertion check method such
	 * as invariants and history constraints.  Append to the body
	 * (<code>stmt</code>): (1) code to check the inherited assertions
	 * if any, and (2) code to throw an appropriate exception to
	 * notify an assertion violation. 
	 * 
	 * @param stmt code to evaluate the assertions; the result is supposed
	 *             to be stored in the variable <code>VN_ASSERTION</code>. 
	 *             A <code>null</code> value means that no assertion is 
	 *             specified or the assertion is not executable.
	 */
    public JMethodDeclarationType generate(RacNode stmt) {
        return null;
    }

    public JMethodDeclarationType generate() {
        StringBuffer code = buildAfterAdvice();
        code.append("\n");
        return RacParser.parseMethod(code.toString(), null);
    }

    /** Builds and returns the method header of the assertion check
	 * method as a string.
	 * 
	 */
    protected StringBuffer buildAfterAdvice() {
        String classQualifiedName = this.typeDecl.getCClass().getJavaName();
        String packageQualifiedName = this.typeDecl.getCClass().getJavaName().replace(this.typeDecl.ident(), "");
        final StringBuffer code = new StringBuffer();
        final String HEADER = "@post <File \\\"" + this.typeDecl.ident() + ".java\\\">";
        String errorMsgForInstInv = "\"";
        String evalErrorMsgForInstInv = "\"\"";
        String errorMsgForPublicInstInv = "\"";
        String errorMsgForPublicStatInv = "\"";
        String errorMsgForProtectedInstInv = "\"";
        String errorMsgForProtectedStatInv = "\"";
        String errorMsgForDefaultInstInv = "\"";
        String errorMsgForDefaultStatInv = "\"";
        String errorMsgForPrivateInstInv = "\"";
        String errorMsgForPrivateStatInv = "\"";
        String evalErrorMsgForPublicInstInv = "\"";
        String evalErrorMsgForPublicStatInv = "\"";
        String evalErrorMsgForProtectedInstInv = "\"";
        String evalErrorMsgForProtectedStatInv = "\"";
        String evalErrorMsgForDefaultInstInv = "\"";
        String evalErrorMsgForDefaultStatInv = "\"";
        String evalErrorMsgForPrivateInstInv = "\"";
        String evalErrorMsgForPrivateStatInv = "\"";
        if (!this.getInvariantsTokenReference(false).equals("")) {
            errorMsgForInstInv = HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            errorMsgForInstInv += ", " + this.getInvariantsTokenReference(false);
            errorMsgForInstInv += this.getContextValuesForInvariant(false);
            errorMsgForInstInv += (!this.getContextValuesForDefaultInvariant(true).equals("") ? "+\"\\n" + this.getContextValuesForDefaultInvariant(false) + "\"" : "");
            errorMsgForPublicInstInv = HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            errorMsgForPublicInstInv += ", " + this.getVisibilityInvariantsTokenReference(false, ACC_PUBLIC);
            errorMsgForPublicInstInv += this.getVisibilityContextValuesForInvariant(false, ACC_PUBLIC);
            errorMsgForPublicInstInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PUBLIC).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PUBLIC) + "\"" : "");
            errorMsgForProtectedInstInv = HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            errorMsgForProtectedInstInv += ", " + this.getVisibilityInvariantsTokenReference(false, ACC_PROTECTED);
            errorMsgForProtectedInstInv += this.getVisibilityContextValuesForInvariant(false, ACC_PROTECTED);
            errorMsgForProtectedInstInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PROTECTED).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PROTECTED) + "\"" : "");
            errorMsgForDefaultInstInv = HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            errorMsgForDefaultInstInv += ", " + this.getVisibilityInvariantsTokenReference(false, 0L);
            errorMsgForDefaultInstInv += this.getVisibilityContextValuesForInvariant(false, 0L);
            errorMsgForDefaultInstInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, 0L).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, 0L) + "\"" : "");
            errorMsgForPrivateInstInv = HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            errorMsgForPrivateInstInv += ", " + this.getVisibilityInvariantsTokenReference(false, ACC_PRIVATE);
            errorMsgForPrivateInstInv += this.getVisibilityContextValuesForInvariant(false, ACC_PRIVATE);
            errorMsgForPrivateInstInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PRIVATE).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PRIVATE) + "\"" : "");
            evalErrorMsgForInstInv = SPEC_EVAL_ERROR_MSG + HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            evalErrorMsgForInstInv += ", " + this.getInvariantsTokenReference(false);
            evalErrorMsgForInstInv += this.getContextValuesForInvariant(false);
            evalErrorMsgForInstInv += (!this.getContextValuesForDefaultInvariant(true).equals("") ? "+\"\\n" + this.getContextValuesForDefaultInvariant(false) : "+\"");
            evalErrorMsgForPublicInstInv = SPEC_EVAL_ERROR_MSG + HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            evalErrorMsgForPublicInstInv += ", " + this.getVisibilityInvariantsTokenReference(false, ACC_PUBLIC);
            evalErrorMsgForPublicInstInv += this.getVisibilityContextValuesForInvariant(false, ACC_PUBLIC);
            evalErrorMsgForPublicInstInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PUBLIC).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PUBLIC) : "+\"");
            evalErrorMsgForProtectedInstInv = SPEC_EVAL_ERROR_MSG + HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            evalErrorMsgForProtectedInstInv += ", " + this.getVisibilityInvariantsTokenReference(false, ACC_PROTECTED);
            evalErrorMsgForProtectedInstInv += this.getVisibilityContextValuesForInvariant(false, ACC_PROTECTED);
            evalErrorMsgForProtectedInstInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PROTECTED).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PROTECTED) : "+\"");
            evalErrorMsgForDefaultInstInv = SPEC_EVAL_ERROR_MSG + HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            evalErrorMsgForDefaultInstInv += ", " + this.getVisibilityInvariantsTokenReference(false, 0L);
            evalErrorMsgForDefaultInstInv += this.getVisibilityContextValuesForInvariant(false, 0L);
            evalErrorMsgForDefaultInstInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, 0L).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, 0L) : "+\"");
            evalErrorMsgForPrivateInstInv = SPEC_EVAL_ERROR_MSG + HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            evalErrorMsgForPrivateInstInv += ", " + this.getVisibilityInvariantsTokenReference(false, ACC_PRIVATE);
            evalErrorMsgForPrivateInstInv += this.getVisibilityContextValuesForInvariant(false, ACC_PRIVATE);
            evalErrorMsgForPrivateInstInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PRIVATE).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PRIVATE) : "+\"");
        } else {
            if (!this.getContextValuesForDefaultInvariant(false).equals("")) {
                errorMsgForPublicInstInv = HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                errorMsgForPublicInstInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PUBLIC) + "\"";
                errorMsgForProtectedInstInv = HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                errorMsgForProtectedInstInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PROTECTED) + "\"";
                errorMsgForDefaultInstInv = HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                errorMsgForDefaultInstInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, 0L) + "\"";
                errorMsgForPrivateInstInv = HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                errorMsgForPrivateInstInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PRIVATE) + "\"";
                evalErrorMsgForPublicInstInv = SPEC_EVAL_ERROR_MSG + HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                evalErrorMsgForPublicInstInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PUBLIC);
                evalErrorMsgForProtectedInstInv = SPEC_EVAL_ERROR_MSG + HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                evalErrorMsgForProtectedInstInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PROTECTED);
                evalErrorMsgForDefaultInstInv = SPEC_EVAL_ERROR_MSG + HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                evalErrorMsgForDefaultInstInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, 0L);
                evalErrorMsgForPrivateInstInv = SPEC_EVAL_ERROR_MSG + HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                evalErrorMsgForPrivateInstInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(false, ACC_PRIVATE);
            }
        }
        if (!this.getInvariantsTokenReference(true).equals("")) {
            errorMsgForPublicStatInv = HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            errorMsgForPublicStatInv += ", " + this.getVisibilityInvariantsTokenReference(true, ACC_PUBLIC);
            errorMsgForPublicStatInv += this.getVisibilityContextValuesForInvariant(true, ACC_PUBLIC);
            errorMsgForPublicStatInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PUBLIC).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PUBLIC) + "\"" : "");
            errorMsgForProtectedStatInv = HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            errorMsgForProtectedStatInv += ", " + this.getVisibilityInvariantsTokenReference(true, ACC_PROTECTED);
            errorMsgForProtectedStatInv += this.getVisibilityContextValuesForInvariant(true, ACC_PROTECTED);
            errorMsgForProtectedStatInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PROTECTED).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PROTECTED) + "\"" : "");
            errorMsgForDefaultStatInv = HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            errorMsgForDefaultStatInv += ", " + this.getVisibilityInvariantsTokenReference(true, 0L);
            errorMsgForDefaultStatInv += this.getVisibilityContextValuesForInvariant(true, 0L);
            errorMsgForDefaultStatInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, 0L).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, 0L) + "\"" : "");
            errorMsgForPrivateStatInv = HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            errorMsgForPrivateStatInv += ", " + this.getVisibilityInvariantsTokenReference(true, ACC_PRIVATE);
            errorMsgForPrivateStatInv += this.getVisibilityContextValuesForInvariant(true, ACC_PRIVATE);
            errorMsgForPrivateStatInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PRIVATE).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PRIVATE) + "\"" : "");
            evalErrorMsgForPublicStatInv = SPEC_EVAL_ERROR_MSG + HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            evalErrorMsgForPublicStatInv += ", " + this.getVisibilityInvariantsTokenReference(true, ACC_PUBLIC);
            evalErrorMsgForPublicStatInv += this.getVisibilityContextValuesForInvariant(true, ACC_PUBLIC);
            evalErrorMsgForPublicStatInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PUBLIC).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PUBLIC) : "+\"");
            evalErrorMsgForProtectedStatInv = SPEC_EVAL_ERROR_MSG + HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            evalErrorMsgForProtectedStatInv += ", " + this.getVisibilityInvariantsTokenReference(true, ACC_PROTECTED);
            evalErrorMsgForProtectedStatInv += this.getVisibilityContextValuesForInvariant(true, ACC_PROTECTED);
            evalErrorMsgForProtectedStatInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PROTECTED).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PROTECTED) : "+\"");
            evalErrorMsgForDefaultStatInv = SPEC_EVAL_ERROR_MSG + HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            evalErrorMsgForDefaultStatInv += ", " + this.getVisibilityInvariantsTokenReference(true, 0L);
            evalErrorMsgForDefaultStatInv += this.getVisibilityContextValuesForInvariant(true, 0L);
            evalErrorMsgForDefaultStatInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, 0L).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, 0L) : "+\"");
            evalErrorMsgForPrivateStatInv = SPEC_EVAL_ERROR_MSG + HEADER + SPEC_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
            evalErrorMsgForPrivateStatInv += ", " + this.getVisibilityInvariantsTokenReference(true, ACC_PRIVATE);
            evalErrorMsgForPrivateStatInv += this.getVisibilityContextValuesForInvariant(true, ACC_PRIVATE);
            evalErrorMsgForPrivateStatInv += (!this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PRIVATE).equals("") ? "+\"\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PRIVATE) : "+\"");
        } else {
            if (!this.getContextValuesForDefaultInvariant(true).equals("")) {
                errorMsgForPublicStatInv = HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                errorMsgForPublicStatInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PUBLIC) + "\"";
                errorMsgForProtectedStatInv = HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                errorMsgForProtectedStatInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PROTECTED) + "\"";
                errorMsgForDefaultStatInv = HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                errorMsgForDefaultStatInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, 0L) + "\"";
                errorMsgForPrivateStatInv = HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                errorMsgForPrivateStatInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PRIVATE) + "\"";
                evalErrorMsgForPublicStatInv = SPEC_EVAL_ERROR_MSG + HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                evalErrorMsgForPublicStatInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PUBLIC);
                evalErrorMsgForProtectedStatInv = SPEC_EVAL_ERROR_MSG + HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                evalErrorMsgForProtectedStatInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PROTECTED);
                evalErrorMsgForDefaultStatInv = SPEC_EVAL_ERROR_MSG + HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                evalErrorMsgForDefaultStatInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, 0L);
                evalErrorMsgForPrivateStatInv = SPEC_EVAL_ERROR_MSG + HEADER + CODE_ERROR_MSG + "File \\\"" + this.typeDecl.ident() + ".java\\\"";
                evalErrorMsgForPrivateStatInv += "\\n" + this.getVisibilityContextValuesForDefaultInvariant(true, ACC_PRIVATE);
            }
        }
        if ((this.hasInstInv) || (this.hasStatInv)) {
            boolean hasOther = false;
            if (this.hasPublicInstInv && this.hasPublicStatInv) {
                code.append("\n");
                code.append(this.javadocInst.replace("invariants", "public invariants"));
                code.append("\n");
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForPublicInstInv, evalErrorMsgForPublicInstInv, false, this.publicInstInvPred, ACC_PUBLIC);
                code.append("\n");
                code.append("\n");
                code.append(this.javadocStat.replace("invariants", "public invariants"));
                code.append("\n");
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForPublicStatInv, evalErrorMsgForPublicStatInv, true, this.publicStatInvPred, ACC_PUBLIC);
                code.append("\n");
                code.append("\n");
                hasOther = true;
            } else if (hasPublicInstInv) {
                code.append("\n");
                code.append(this.javadocInst.replace("invariants", "public invariants"));
                code.append("\n");
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForPublicInstInv, evalErrorMsgForPublicInstInv, false, this.publicInstInvPred, ACC_PUBLIC);
                code.append("\n");
                hasOther = true;
            } else if (hasPublicStatInv) {
                code.append("\n");
                code.append(this.javadocStat.replace("invariants", "public invariants"));
                code.append("\n");
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForPublicStatInv, evalErrorMsgForPublicStatInv, true, this.publicStatInvPred, ACC_PUBLIC);
                code.append("\n");
                hasOther = true;
            }
            if (this.hasProtectedInstInv && this.hasProtectedStatInv) {
                if (hasOther) {
                    code.append("\n");
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "protected invariants"));
                    code.append("\n");
                } else {
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "protected invariants"));
                    code.append("\n");
                }
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForProtectedInstInv, evalErrorMsgForProtectedInstInv, false, this.protectedInstInvPred, ACC_PROTECTED);
                code.append("\n");
                code.append("\n");
                code.append(this.javadocStat.replace("invariants", "protected invariants"));
                code.append("\n");
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForProtectedStatInv, evalErrorMsgForProtectedStatInv, true, this.protectedStatInvPred, ACC_PROTECTED);
                code.append("\n");
                hasOther = true;
            } else if (hasProtectedInstInv) {
                if (hasOther) {
                    code.append("\n");
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "protected invariants"));
                    code.append("\n");
                } else {
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "protected invariants"));
                    code.append("\n");
                }
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForProtectedInstInv, evalErrorMsgForProtectedInstInv, false, this.protectedInstInvPred, ACC_PROTECTED);
                code.append("\n");
                hasOther = true;
            } else if (hasProtectedStatInv) {
                if (hasOther) {
                    code.append("\n");
                    code.append("\n");
                    code.append(this.javadocStat.replace("invariants", "protected invariants"));
                    code.append("\n");
                } else {
                    code.append("\n");
                    code.append(this.javadocStat.replace("invariants", "protected invariants"));
                    code.append("\n");
                }
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForProtectedStatInv, evalErrorMsgForProtectedStatInv, true, this.protectedStatInvPred, ACC_PROTECTED);
                code.append("\n");
                hasOther = true;
            }
            if (this.hasDefaultInstInv && this.hasDefaultStatInv) {
                if (hasOther) {
                    code.append("\n");
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "default invariants"));
                    code.append("\n");
                } else {
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "default invariants"));
                    code.append("\n");
                }
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForDefaultInstInv, evalErrorMsgForDefaultInstInv, false, this.defaultInstInvPred, 0L);
                code.append("\n");
                code.append("\n");
                code.append(this.javadocStat.replace("invariants", "default invariants"));
                code.append("\n");
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForDefaultStatInv, evalErrorMsgForDefaultStatInv, true, this.defaultStatInvPred, 0L);
                code.append("\n");
                hasOther = true;
            } else if (hasDefaultInstInv) {
                if (hasOther) {
                    code.append("\n");
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "default invariants"));
                    code.append("\n");
                } else {
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "default invariants"));
                    code.append("\n");
                }
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForDefaultInstInv, evalErrorMsgForDefaultInstInv, false, this.defaultInstInvPred, 0L);
                code.append("\n");
                hasOther = true;
            } else if (hasDefaultStatInv) {
                if (hasOther) {
                    code.append("\n");
                    code.append("\n");
                    code.append(this.javadocStat.replace("invariants", "default invariants"));
                    code.append("\n");
                } else {
                    code.append("\n");
                    code.append(this.javadocStat.replace("invariants", "default invariants"));
                    code.append("\n");
                }
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForDefaultStatInv, evalErrorMsgForDefaultStatInv, true, this.defaultStatInvPred, 0L);
                code.append("\n");
                hasOther = true;
            }
            if (this.hasPrivateInstInv && this.hasPrivateStatInv) {
                if (hasOther) {
                    code.append("\n");
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "private invariants"));
                    code.append("\n");
                } else {
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "private invariants"));
                    code.append("\n");
                }
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForPrivateInstInv, evalErrorMsgForPrivateInstInv, false, this.privateInstInvPred, ACC_PRIVATE);
                code.append("\n");
                code.append("\n");
                code.append(this.javadocStat.replace("invariants", "private invariants"));
                code.append("\n");
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForPrivateStatInv, evalErrorMsgForPrivateStatInv, true, this.privateStatInvPred, 0L);
                code.append("\n");
                code.append("\n");
                hasOther = true;
            } else if (hasPrivateInstInv) {
                if (hasOther) {
                    code.append("\n");
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "private invariants"));
                    code.append("\n");
                } else {
                    code.append("\n");
                    code.append(this.javadocInst.replace("invariants", "private invariants"));
                    code.append("\n");
                }
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForPrivateInstInv, evalErrorMsgForPrivateInstInv, false, this.privateInstInvPred, ACC_PRIVATE);
                code.append("\n");
                hasOther = true;
            } else if (hasPrivateStatInv) {
                if (hasOther) {
                    code.append("\n");
                    code.append("\n");
                    code.append(this.javadocStat.replace("invariants", "private invariants"));
                    code.append("\n");
                } else {
                    code.append("\n");
                    code.append(this.javadocStat.replace("invariants", "private invariants"));
                    code.append("\n");
                }
                generateAfterReturningAdvice(classQualifiedName, packageQualifiedName, code, errorMsgForPrivateStatInv, evalErrorMsgForPrivateStatInv, true, this.privateStatInvPred, ACC_PRIVATE);
                code.append("\n");
                hasOther = true;
            }
        }
        return code;
    }

    private void generateAfterReturningAdvice(String classQualifiedName, String packageQualifiedName, final StringBuffer code, String errorMsg, String evalErrorMsg, boolean forStatic, String predClause, long visibility) {
        if (visibility == ACC_PUBLIC) {
            this.exceptionToThrow = "JMLPublicInvariantError";
        } else if (visibility == ACC_PROTECTED) {
            this.exceptionToThrow = "JMLProtectedInvariantError";
        } else if (visibility == 0L) {
            this.exceptionToThrow = "JMLDefaultInvariantError";
        } else if (visibility == ACC_PRIVATE) {
            this.exceptionToThrow = "JMLPrivateInvariantError";
        }
        if (forStatic) {
            code.append("after (").append(")").append(" returning (Object o)").append(" :");
        } else {
            code.append("after (").append(classQualifiedName).append(" ").append("object$rac");
            code.append(")").append(" returning (Object o)").append(" :");
        }
        code.append("\n");
        if (forStatic) {
            code.append("   call( * " + classQualifiedName + ".*(..))").append(" && ");
        } else {
            code.append("   call(!static * " + classQualifiedName + "+.*(..))").append(" && ");
        }
        code.append("\n");
        if (visibility == ACC_PROTECTED) {
            code.append("   within(" + packageQualifiedName + "*+)").append(" && ");
            code.append("\n");
        } else if (visibility == 0L) {
            code.append("   within(" + packageQualifiedName + "*)").append(" && ");
            code.append("\n");
        } else if (visibility == ACC_PRIVATE) {
            code.append("   within(" + classQualifiedName + ")").append(" && ");
            code.append("\n");
        }
        if (forStatic) {
            code.append("   if (thisJoinPointStaticPart.getSignature().getDeclaringType() == " + classQualifiedName + ".class)");
        } else {
            code.append("   target(object$rac)");
        }
        code.append(" {\n");
        code.append("     if (!(JMLChecker.hasAnyJMLError))");
        code.append(" {\n");
        code.append("       boolean rac$b = " + predClause + ";\n");
        code.append("       String invErrorMsg = \"" + errorMsg + ";\n");
        code.append("       String evalErrorMsg = " + evalErrorMsg + "\\nCaused by: \";\n");
        code.append("       JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, " + visibility + ");\n");
        code.append("\n").append("     }");
        code.append("\n").append("   ").append("}");
    }

    protected boolean canInherit() {
        return false;
    }

    private static boolean INST_INV = false;

    private static boolean STAT_INV = true;

    private boolean hasInstInv = false;

    private boolean hasStatInv = false;

    private boolean hasPublicInstInv = false;

    private boolean hasProtectedInstInv = false;

    private boolean hasDefaultInstInv = false;

    private boolean hasPrivateInstInv = false;

    private boolean hasPublicStatInv = false;

    private boolean hasProtectedStatInv = false;

    private boolean hasDefaultStatInv = false;

    private boolean hasPrivateStatInv = false;

    private String javadocStat;

    private String javadocInst;

    private String publicInstInvPred = "";

    private String protectedInstInvPred = "";

    private String defaultInstInvPred = "";

    private String privateInstInvPred = "";

    private String publicStatInvPred = "";

    private String protectedStatInvPred = "";

    private String defaultStatInvPred = "";

    private String privateStatInvPred = "";
}
