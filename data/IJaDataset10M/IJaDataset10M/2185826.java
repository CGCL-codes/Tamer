package com.tirsen.hanoi.ant;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.tools.ant.*;
import org.apache.tools.ant.types.*;
import org.apache.tools.ant.taskdefs.*;
import java.io.*;
import com.tirsen.hanoi.engine.ClassPathProcessDefinitionLoader;
import com.tirsen.hanoi.engine.ProcessDefinitionRepository;

/**
 * 
 * 
 * <!-- $Id: HanoiCompilerTask.java,v 1.1 2002/09/05 12:12:39 tirsen Exp $ -->
 * <!-- $Author: tirsen $ -->
 *
 * @author Jon Tirs&eacute;n (tirsen@users.sourceforge.net)
 * @version $Revision: 1.1 $
 */
public class HanoiCompilerTask extends MatchingTask {

    private static final Log logger = LogFactory.getLog(HanoiCompilerTask.class);

    private File srcdir;

    private File destdir;

    private boolean keepsources = true;

    private Reference classpathref;

    /**
     * What classpath should we use when compiling the generated files.
     */
    public void setClasspathref(Reference classpathref) {
        this.classpathref = classpathref;
    }

    /**
     * Where we shall fetch the workflow-definitions from.
     */
    public void setSrcdir(File srcdir) {
        this.srcdir = srcdir;
    }

    /**
     * Where the workflow-definitions and the generated files are going to end up.
     */
    public void setDestdir(File destdir) {
        this.destdir = destdir;
    }

    /**
     * Copy the .hanoi-files, generates a _HanoiProcessDefinitionLoader.java for each packages that loads the
     * definitions of its package, compiles it and removes it (unless keepsources is set to <code>true</code>).
     */
    public void execute() throws BuildException {
        DirectoryScanner directoryScanner = getDirectoryScanner(srcdir);
        String[] directories = directoryScanner.getIncludedDirectories();
        for (int i = 0; i < directories.length; i++) {
            String directoryName = directories[i];
            File directory = new File(srcdir, directoryName);
            log("scanning " + directory, Project.MSG_DEBUG);
            String[] hanoiFiles = directory.list(new FilenameFilter() {

                public boolean accept(File dir, String name) {
                    return name.endsWith(".hanoi");
                }
            });
            if (hanoiFiles != null && hanoiFiles.length != 0) {
                log("found hanoi files in " + directory, Project.MSG_DEBUG);
                try {
                    generateLoaderClass(directoryName, hanoiFiles);
                } catch (IOException e) {
                    throw new BuildException(e, getLocation());
                }
            }
        }
        Copy copy = (Copy) project.createTask("copy");
        copy.setTodir(destdir);
        FileSet fileSet = new FileSet();
        fileSet.setDir(srcdir);
        fileSet.setIncludes("**/*.hanoi");
        copy.addFileset(fileSet);
        copy.execute();
        Javac javac = (Javac) project.createTask("javac");
        javac.setSrcdir(new Path(project, destdir.getAbsolutePath()));
        javac.setDestdir(destdir);
        javac.setIncludes("**/" + ProcessDefinitionRepository.LOADER_CLASS_NAME + ".java");
        javac.setClasspathRef(classpathref);
        javac.execute();
        if (!keepsources) {
            for (int i = 0; i < directories.length; i++) {
                String directoryName = directories[i];
                File directory = new File(srcdir, directoryName);
                File file = new File(directory, ProcessDefinitionRepository.LOADER_CLASS_NAME + ".java");
                if (file.exists()) file.delete();
            }
        }
    }

    public void generateLoaderClass(String directoryName, String[] hanoiFiles) throws IOException {
        String packageName = directoryName.replace(File.separatorChar, '.');
        File directory = new File(destdir, directoryName);
        directory.mkdirs();
        File loaderClassFile = new File(directory, ProcessDefinitionRepository.LOADER_CLASS_NAME + ".java");
        log("generating " + loaderClassFile, Project.MSG_DEBUG);
        OutputStream output = null;
        try {
            output = new FileOutputStream(loaderClassFile);
            PrintWriter writer = new PrintWriter(output);
            writer.println("package " + packageName + ";");
            writer.println("/** Generated by the Hanoi Compiler. */");
            writer.println("public class _HanoiProcessDefinitionLoader extends " + "com.tirsen.hanoi.engine.ClassPathProcessDefinitionLoader");
            writer.println("{");
            writer.println("    public _HanoiProcessDefinitionLoader()");
            writer.println("    {");
            for (int i = 0; i < hanoiFiles.length; i++) {
                String file = hanoiFiles[i];
                String workflowName = file.substring(0, file.length() - 6);
                log("adding workflow " + workflowName, Project.MSG_DEBUG);
                writer.println("        addDefinition(\"" + workflowName + "\");");
            }
            writer.println("    }");
            writer.println("}");
            writer.flush();
        } finally {
            if (output != null) output.close();
        }
    }
}
