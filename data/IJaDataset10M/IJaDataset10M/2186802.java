package preprocessing.methods.Import.databasedata.facade;

import preprocessing.methods.Import.databasedata.database.Column;
import preprocessing.methods.Import.databasedata.database.DatabaseResultSet;
import preprocessing.methods.Import.databasedata.database.DatabaseType;
import preprocessing.methods.Import.databasedata.database.Table;
import preprocessing.methods.Import.databasedata.exceptions.FacadeException;
import preprocessing.methods.Import.databasedata.internalworkingstructure.Couple;
import java.util.Collection;
import preprocessing.methods.Import.databasedata.database.DatabaseInterface;

/**
 * Facade interface.
 *
 * @author Jiri Petnik
 */
public interface FacadeInterface {

    /**
     * Retrieves whether the modul is connect to database.
     *
     * @return true if so; false otherwise
     */
    public boolean isConnected();

    /**
     * Connect to database.
     *
     * @param databaseType database type
     * @param hostName host name
     * @param port port number
     * @param databaseName database name
     * @param schemaName database schema
     * @param userName database user name
     * @param password user's password
     * @return connected database
     * @throws FacadeException thrown whenever there is a problem with connection or driver
     */
    public DatabaseInterface connectToDatabase(DatabaseType databaseType, String hostName, int port, String databaseName, String schemaName, String userName, String password) throws FacadeException;

    /**
     * Disconnect database.
     *
     * @throws FacadeException thrown when there is a problem with connection
     */
    public void disconnectDatabase() throws FacadeException;

    /**
     * Refresh database connection.
     *
     * @return database which should be refreshed
     */
    public DatabaseInterface refreshDB();

    /**
     * Retrieves table form the connected database.
     *
     * @param tableName table name
     * @return Table object
     */
    public Table getTableDB(String tableName) throws FacadeException;

    /**
     * Retrieves all tables from connected database.
     *
     * @return all tables from database
     */
    public Collection<Table> getAllTablesDB();

    /**
     * Retrieves data from connected database.
     *
     * @param sql sql query
     * @param selfGenerated true when sql is generated by program; false otherwise
     * @return DatabaseResultSet with retrieved data
     * @throws FacadeException thrown when there is a problem with connection or with executing database query
     */
    public DatabaseResultSet executeQueryDB(String sql, boolean selfGenerated) throws FacadeException;

    /**
     * Adds new table into internal structure.
     * When there is only one join to use to connect table to internal structure, it is used and table is added to internal structure.
     * When there is more then one join, we have to choose which one to use. Table is not added to internal structure. We have to use public void addTableIWS(Table tab, Couple join) method.
     * @param tab new table
     * @return collection of joins which we can use to connect added table to internal structure;
     * null when sucessfull added
     * @throws FacadeException thrown when problem with internal structure
     */
    public Collection<Couple> addTableIWS(Table tab) throws FacadeException;

    /**
     * Adds new table with join into internal structure.
     *
     * @param tab new table
     * @param join join
     * @throws FacadeException thrown when problem with internal structure
     */
    public void addTableIWS(Table tab, Couple join) throws FacadeException;

    /**
     * Retrieves all tables from internal structure.
     *
     * @return all tables from database
     */
    public Collection<Table> getAllTablesIWS();

    /**
     *Retrieves all connectable tables.
     *
     * @return all connectable tables
     */
    public Collection<Table> getAllConnectableTablesIWS();

    /**
     * Selects column to be in generated sql query.
     *
     * @param col column
     * @throws FacadeException thrown when problem with internal structure
     */
    public void selectColumnIWS(Column col) throws FacadeException;

    /**
     * Retrieves all selected columns.
     *
     * @return all selected columns
     */
    public Collection<Column> getAllSelectedColumnsIWS();

    /**
     * Retrieves all joins which are used to connect all tables together.
     *
     * @return all joins
     */
    public Collection<Couple> getAllJoinsIWS();

    /**
     * Retieves whether is possible to generate sql query from internal structure.
     *
     * @return true if so; false otherwise
     */
    public boolean isPossibleToCreateSqlQueryIWS();

    /**
     * Retrieves sql query from internal structure.
     *
     * @param selfGenerated true when sql is generated by program (adds notes into sql query); false otherwise
     * @return sql query
     * @throws FacadeException thrown when there is a problem in the internal structure
     */
    public String createSqlQueryIWS(boolean selfGenerated) throws FacadeException;

    /**
     * Deselects column not to be in generated sql query.
     *
     * @param col column
     */
    public void deselectColumnIWS(Column col);

    /**
     * Marks given column as input attribute.
     *
     * @param c column
     */
    public void setInputAttributeIWS(Column c);

    /**
     * Marks given column as output attribute.
     *
     * @param c column
     */
    public void setOutputAttributeIWS(Column c);

    /**
     * Removes table from internal structure.
     *
     * @param tab table to be removed
     * @throws FacadeException thrown when it is not possible to remove table
     */
    public void removeTableIWS(Table tab) throws FacadeException;
}
