package com.vektorsoft.acapulco.generated;

import java.util.Map;
import java.util.HashMap;
import java.util.Collection;
import com.vektorsoft.acapulco.core.service.ApplicationService;

/**
  * This class is generated from source files. It will be called on module startup to register 
  * all listeners declared in a module.
  *
  *  DO NOT EDIT THIS FILE MANUALLY !!!! It will be overwritten at compile time.
  */
public class DeclaredExtensions {

    private Map<String, String> extensionMap;

    public DeclaredExtensions() {
        extensionMap = new HashMap<String, String>();
        extensionMap.put("com.vektorsoft.acapulco.tools.source.test.ExtensionPointAnnotatedTestClass", "com.vektorsoft.acapulco.tools.source.test.ExtensionAnnotatedTestClass");
    }

    public Class<?> getExtensionFor(Class<?> clazz) {
        String extensionName = extensionMap.get(clazz.getName());
        Class<?> cl = null;
        if (extensionName != null) {
            try {
                cl = Class.forName(extensionName);
                extensionMap.remove(extensionName);
            } catch (Exception ex) {
                System.err.println("Could not load class " + extensionName + ". Reason: " + ex.getMessage());
            }
        }
        return cl;
    }

    /**
     * Register remaining extensions that have no specified listener (ie. listeners are in another module).
     *
     * @param svc service
     */
    public void registerExtensions(ApplicationService svc) {
        try {
            Collection<String> values = extensionMap.values();
            for (String value : values) {
                svc.registerListener(Class.forName(value));
            }
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
}
