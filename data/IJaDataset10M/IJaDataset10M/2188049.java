package org.dmd.features.extgwt.generated.dmw;

import java.util.ArrayList;
import java.util.Iterator;
import org.dmd.dmc.*;
import org.dmd.dmc.types.StringName;
import org.dmd.dmg.generated.dmo.DmgDMSAG;
import org.dmd.dms.*;
import org.dmd.dms.generated.dmo.MetaDMSAG;
import org.dmd.dms.generated.dmw.StringIterableDMW;
import org.dmd.dms.generated.types.DmcTypeModifierMV;
import org.dmd.features.extgwt.extended.MvcConfig;
import org.dmd.features.extgwt.extended.MvcDefinition;
import org.dmd.features.extgwt.generated.dmo.ExtgwtDMSAG;
import org.dmd.features.extgwt.generated.dmo.MvcConfigDMO;
import org.dmd.features.extgwt.generated.dmw.MvcConfigIterableDMW;
import org.dmd.features.extgwt.generated.types.MvcConfigREF;

/**
 * The MvcConfig class is stored in a file with a .mvc suffix and used to
 * define the set of files that hold the definitions of MvcEvents,
 * MvcControllers and MvcViews. Based on the definition of these objects, we
 * can generate base classes for the com.extjs.gxt.ui.client.mvc.Controller
 * and com.extjs.gxt.ui.client.mvc.View that provide some common code
 * required by these classes.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:348)
 */
public abstract class MvcConfigDMW extends MvcDefinition implements DmcNamedObjectIF {

    public MvcConfigDMW() {
        super(new MvcConfigDMO(), org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcConfig);
    }

    public MvcConfigDMW(DmcTypeModifierMV mods) {
        super(new MvcConfigDMO(mods), org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcConfig);
    }

    public MvcConfig getModificationRecorder() {
        MvcConfig rc = new MvcConfig();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV());
        return (rc);
    }

    public MvcConfigDMW(MvcConfigDMO obj) {
        super(obj, org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcConfig);
    }

    public MvcConfigDMO getDMO() {
        return ((MvcConfigDMO) core);
    }

    protected MvcConfigDMW(MvcConfigDMO obj, ClassDefinition cd) {
        super(obj, cd);
    }

    public StringName getObjectName() {
        return (((MvcConfigDMO) core).getName());
    }

    public int hashCode() {
        return (getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute() {
        return (((MvcConfigDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj) {
        if (obj instanceof MvcConfigDMW) {
            return (getObjectName().equals(((MvcConfigDMW) obj).getObjectName()));
        }
        return (false);
    }

    public int getDependsOnMVCSize() {
        DmcAttribute<?> attr = core.get(ExtgwtDMSAG.__dependsOnMVC);
        if (attr == null) return (0);
        return (attr.getMVSize());
    }

    public boolean getDependsOnMVCIsEmpty() {
        DmcAttribute<?> attr = core.get(ExtgwtDMSAG.__dependsOnMVC);
        if (attr == null) return (true);
        return (false);
    }

    public boolean getDependsOnMVCHasValue() {
        DmcAttribute<?> attr = core.get(ExtgwtDMSAG.__dependsOnMVC);
        if (attr == null) return (false);
        return (true);
    }

    /**
     * @return An Iterator of MvcConfigDMO objects.
     */
    @SuppressWarnings("unchecked")
    public MvcConfigIterableDMW getDependsOnMVCIterable() {
        DmcAttribute attr = ((MvcConfigDMO) core).get(ExtgwtDMSAG.__dependsOnMVC);
        if (attr == null) return (MvcConfigIterableDMW.emptyList);
        return (new MvcConfigIterableDMW(attr.getMV()));
    }

    public DmcAttribute<?> addDependsOnMVC(MvcConfig value) {
        DmcAttribute<?> attr = ((MvcConfigDMO) core).addDependsOnMVC(((MvcConfigDMO) value.getDmcObject()));
        return (attr);
    }

    public void delDependsOnMVC(MvcConfig value) {
        ((MvcConfigDMO) core).delDependsOnMVC(value.getDMO());
    }

    public ArrayList<MvcConfig> getDependsOnMVCCopy() {
        DmcAttribute<?> attr = ((MvcConfigDMO) core).get(ExtgwtDMSAG.__dependsOnMVC);
        if (attr == null) return (new ArrayList<MvcConfig>());
        ArrayList<MvcConfig> rc = new ArrayList<MvcConfig>(attr.getMVSize());
        MvcConfigIterableDMW it = getDependsOnMVCIterable();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void remDependsOnMVC() {
        ((MvcConfigDMO) core).remDependsOnMVC();
    }

    public int getDependsOnSize() {
        DmcAttribute<?> attr = core.get(MetaDMSAG.__dependsOn);
        if (attr == null) return (0);
        return (attr.getMVSize());
    }

    public boolean getDependsOnIsEmpty() {
        DmcAttribute<?> attr = core.get(MetaDMSAG.__dependsOn);
        if (attr == null) return (true);
        return (false);
    }

    public boolean getDependsOnHasValue() {
        DmcAttribute<?> attr = core.get(MetaDMSAG.__dependsOn);
        if (attr == null) return (false);
        return (true);
    }

    public StringIterableDMW getDependsOnIterable() {
        DmcAttribute<?> attr = core.get(MetaDMSAG.__dependsOn);
        if (attr == null) return (StringIterableDMW.emptyList);
        return (new StringIterableDMW(((MvcConfigDMO) core).getDependsOn()));
    }

    public void addDependsOn(Object value) throws DmcValueException {
        ((MvcConfigDMO) core).addDependsOn(value);
    }

    public void addDependsOn(String value) {
        ((MvcConfigDMO) core).addDependsOn(value);
    }

    public boolean dependsOnContains(String value) {
        return (((MvcConfigDMO) core).dependsOnContains(value));
    }

    @SuppressWarnings("unchecked")
    public ArrayList<String> getDependsOnCopy() {
        DmcAttribute<?> attr = core.get(MetaDMSAG.__dependsOn);
        if (attr == null) return (new ArrayList<String>());
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while (it.hasNext()) {
            rc.add(it.next());
        }
        return (rc);
    }

    public void delDependsOn(Object value) throws DmcValueException {
        ((MvcConfigDMO) core).delDependsOn(value);
    }

    public void delDependsOn(String value) {
        ((MvcConfigDMO) core).delDependsOn(value);
    }

    public void remDependsOn() {
        ((MvcConfigDMO) core).remDependsOn();
    }

    public StringName getName() {
        return (((MvcConfigDMO) core).getName());
    }

    public void setName(Object value) throws DmcValueException {
        ((MvcConfigDMO) core).setName(value);
    }

    public void setName(StringName value) {
        ((MvcConfigDMO) core).setName(value);
    }

    public void remName() {
        ((MvcConfigDMO) core).remName();
    }

    public String getGenPackage() {
        return (((MvcConfigDMO) core).getGenPackage());
    }

    public void setGenPackage(Object value) throws DmcValueException {
        ((MvcConfigDMO) core).setGenPackage(value);
    }

    public void setGenPackage(String value) {
        ((MvcConfigDMO) core).setGenPackage(value);
    }

    public void remGenPackage() {
        ((MvcConfigDMO) core).remGenPackage();
    }
}
