package csa.jportal.ai.standardAI.hints;

import csa.jportal.card.*;
import csa.gui.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.event.*;
import java.util.*;

/**
 *
 * @author Malban
 */
public class AIHintsPanel extends javax.swing.JPanel {

    private int mClassSetting = 0;

    private int mSelectedRow = -1;

    private CSATablePanel csaPanel = null;

    private AICardHints mHints = null;

    private AIHintsData mSingleHint = null;

    private int mRow = -1;

    private int mCol = -1;

    private Card mCard = null;

    private ComboHintsData mComboHintsData = new ComboHintsData();

    /** Creates new form AIHintsPanel */
    public AIHintsPanel() {
        mClassSetting++;
        initComponents();
        jButtonConvert.setVisible(false);
        jComboBoxKey.removeAllItems();
        String[] keys = CardSituation.S.getSituationKeys();
        jComboBoxKey.addItem("");
        jComboBoxKey.addItem("All Situations");
        for (int i = 0; i < keys.length; i++) {
            jComboBoxKey.addItem(keys[i]);
        }
        mClassSetting--;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelTable = new javax.swing.JPanel();
        jPanelDummy = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanelOneHint = new javax.swing.JPanel();
        jButtonDeleteSelected = new javax.swing.JButton();
        jComboBoxName = new javax.swing.JComboBox();
        jTextFieldVarName = new javax.swing.JTextField();
        jComboBoxType = new javax.swing.JComboBox();
        jTextFieldValue = new javax.swing.JTextField();
        jTextFieldComment = new javax.swing.JTextField();
        jButtonAddHint = new javax.swing.JButton();
        jTextFieldVarNameNew = new javax.swing.JTextField();
        jComboBoxTypeNew = new javax.swing.JComboBox();
        jTextFieldValueNew = new javax.swing.JTextField();
        jTextFieldCommentNew = new javax.swing.JTextField();
        jButtonAddTemplate = new javax.swing.JButton();
        jTextFieldName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxKey = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jButtonConvert = new javax.swing.JButton();
        jPanel2.setName("jPanel2");
        jSplitPane1.setDividerLocation(225);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(1.0);
        jSplitPane1.setName("jSplitPane1");
        jPanelTable.setName("jPanelTable");
        jPanelDummy.setName("jPanelDummy");
        javax.swing.GroupLayout jPanelDummyLayout = new javax.swing.GroupLayout(jPanelDummy);
        jPanelDummy.setLayout(jPanelDummyLayout);
        jPanelDummyLayout.setHorizontalGroup(jPanelDummyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 731, Short.MAX_VALUE));
        jPanelDummyLayout.setVerticalGroup(jPanelDummyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 223, Short.MAX_VALUE));
        javax.swing.GroupLayout jPanelTableLayout = new javax.swing.GroupLayout(jPanelTable);
        jPanelTable.setLayout(jPanelTableLayout);
        jPanelTableLayout.setHorizontalGroup(jPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanelDummy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        jPanelTableLayout.setVerticalGroup(jPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanelDummy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        jSplitPane1.setTopComponent(jPanelTable);
        jPanel1.setName("jPanel1");
        jPanelOneHint.setMaximumSize(new java.awt.Dimension(32767, 121));
        jPanelOneHint.setMinimumSize(new java.awt.Dimension(100, 121));
        jPanelOneHint.setName("jPanelOneHint");
        jPanelOneHint.setPreferredSize(new java.awt.Dimension(664, 121));
        jButtonDeleteSelected.setText("Delete selected");
        jButtonDeleteSelected.setName("jButtonDeleteSelected");
        jButtonDeleteSelected.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteSelectedActionPerformed(evt);
            }
        });
        jComboBoxName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxName.setName("jComboBoxName");
        jComboBoxName.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNameActionPerformed(evt);
            }
        });
        jTextFieldVarName.setEditable(false);
        jTextFieldVarName.setName("jTextFieldVarName");
        jComboBoxType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Boolean", "Integer", "String" }));
        jComboBoxType.setEnabled(false);
        jComboBoxType.setName("jComboBoxType");
        jTextFieldValue.setName("jTextFieldValue");
        jTextFieldComment.setName("jTextFieldComment");
        jButtonAddHint.setText("Add");
        jButtonAddHint.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAddHint.setName("jButtonAddHint");
        jButtonAddHint.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddHintActionPerformed(evt);
            }
        });
        jTextFieldVarNameNew.setName("jTextFieldVarNameNew");
        jComboBoxTypeNew.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Boolean", "Integer", "String" }));
        jComboBoxTypeNew.setName("jComboBoxTypeNew");
        jTextFieldValueNew.setEnabled(false);
        jTextFieldValueNew.setName("jTextFieldValueNew");
        jTextFieldCommentNew.setName("jTextFieldCommentNew");
        jButtonAddTemplate.setText("Add");
        jButtonAddTemplate.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAddTemplate.setName("jButtonAddTemplate");
        jButtonAddTemplate.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddTemplateActionPerformed(evt);
            }
        });
        jTextFieldName.setName("jTextFieldName");
        jLabel1.setText("New Type");
        jLabel1.setName("jLabel1");
        jComboBoxKey.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxKey.setName("jComboBoxKey");
        jLabel2.setText("Situation");
        jLabel2.setName("jLabel2");
        jButtonConvert.setText("C");
        jButtonConvert.setToolTipText("Convert type 1 hints to type 2");
        jButtonConvert.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonConvert.setName("jButtonConvert");
        jButtonConvert.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConvertActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout jPanelOneHintLayout = new javax.swing.GroupLayout(jPanelOneHint);
        jPanelOneHint.setLayout(jPanelOneHintLayout);
        jPanelOneHintLayout.setHorizontalGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelOneHintLayout.createSequentialGroup().addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel1).addGroup(jPanelOneHintLayout.createSequentialGroup().addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelOneHintLayout.createSequentialGroup().addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jComboBoxName, 0, 231, Short.MAX_VALUE).addComponent(jTextFieldName, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)).addGroup(jPanelOneHintLayout.createSequentialGroup().addComponent(jButtonDeleteSelected).addGap(67, 67, 67))).addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jTextFieldVarName, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jTextFieldVarNameNew, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(jLabel2)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(jPanelOneHintLayout.createSequentialGroup().addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(jComboBoxTypeNew, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jComboBoxType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelOneHintLayout.createSequentialGroup().addComponent(jTextFieldValueNew, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jTextFieldCommentNew, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)).addGroup(jPanelOneHintLayout.createSequentialGroup().addComponent(jTextFieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jTextFieldComment, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)))).addComponent(jComboBoxKey, 0, 254, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jButtonAddHint, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jButtonAddTemplate)).addComponent(jButtonConvert)))).addContainerGap()));
        jPanelOneHintLayout.setVerticalGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelOneHintLayout.createSequentialGroup().addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButtonDeleteSelected).addComponent(jComboBoxKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel2).addComponent(jButtonConvert)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jComboBoxName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jTextFieldVarName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jButtonAddHint).addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jTextFieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jTextFieldComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jLabel1).addGap(1, 1, 1).addGroup(jPanelOneHintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jComboBoxTypeNew, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jTextFieldValueNew, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jTextFieldCommentNew, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jTextFieldVarNameNew, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jButtonAddTemplate).addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanelOneHint, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanelOneHint, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE));
        jSplitPane1.setRightComponent(jPanel1);
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE));
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE));
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
    }

    private void jButtonAddHintActionPerformed(java.awt.event.ActionEvent evt) {
        if (jComboBoxName.getSelectedIndex() == -1) return;
        if (jComboBoxType.getSelectedIndex() == -1) return;
        AIHintsData hint;
        if (cardMode) hint = AICardHints.buildNewHint(mCard); else hint = AICardHints.buildNewHint(mComboHintsData);
        hint.mHintName = (String) jComboBoxName.getSelectedItem();
        hint.mHintVarName = (String) jTextFieldVarName.getText();
        hint.mHintValue = (String) jTextFieldValue.getText();
        hint.mHintVarType = (String) jComboBoxType.getSelectedItem();
        hint.mHintComment = (String) jTextFieldComment.getText();
        hint.mSituation = (String) jComboBoxKey.getSelectedItem();
        if (hint.mSituation == null) hint.mSituation = "";
        if (hint.mSituation.trim().length() == 0) {
            hint.mSituation = "All Situations";
        }
        mHints.addHint(hint);
        CSATableModel model = csaPanel.getModel();
        model.updateModel(mHints.getTableModel());
        mHints.save();
        clearAll();
    }

    private void jButtonAddTemplateActionPerformed(java.awt.event.ActionEvent evt) {
        if (jTextFieldName.getText().trim().length() == 0) return;
        if (jComboBoxTypeNew.getSelectedIndex() == -1) return;
        AIHintsData hint = AICardHints.buildNewTemplate();
        hint.mHintName = (String) jTextFieldName.getText();
        hint.mHintVarName = (String) jTextFieldVarNameNew.getText();
        hint.mHintValue = "";
        hint.mHintVarType = (String) jComboBoxTypeNew.getSelectedItem();
        hint.mHintComment = (String) jTextFieldCommentNew.getText();
        AICardHints.addTemplate(hint);
        if (cardMode) setCard(mCard); else setCombo(mComboHintsData);
    }

    private void jComboBoxNameActionPerformed(java.awt.event.ActionEvent evt) {
        if (mClassSetting > 0) return;
        if (jComboBoxName.getSelectedIndex() == -1) return;
        AIHintsData t = AICardHints.getTemplate((String) jComboBoxName.getSelectedItem());
        if (t == null) return;
        jTextFieldVarName.setText(t.mHintVarName);
        jComboBoxType.setSelectedItem(t.mHintVarType);
        jTextFieldValue.setText(t.mHintValue);
        jTextFieldComment.setText(t.mHintComment);
    }

    private void jButtonDeleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {
        int[] rows = csaPanel.getTable().getSelectedRows();
        if (rows.length == 0) return;
        Vector<String> toDeleteIDs = new Vector<String>();
        for (int i = rows.length - 1; i >= 0; i--) {
            int sel = csaPanel.convertRowIndexToModel(rows[i]);
            AIHintsData hint = mHints.getHintByRow(sel);
            toDeleteIDs.addElement(hint.mName);
        }
        for (int i = 0; i < toDeleteIDs.size(); i++) {
            String id = toDeleteIDs.elementAt(i);
            mHints.removeTrueName(id);
        }
        csaPanel.deleteSelected();
        clearAll();
    }

    private void jButtonConvertActionPerformed(java.awt.event.ActionEvent evt) {
        AIHintsDataPool aIHintsDataPool = new AIHintsDataPool();
        Vector<AIHintsData> data = new Vector<AIHintsData>();
        HashMap<String, AIHintsData> loadedClassMap = aIHintsDataPool.getHashMap();
        Set entries = loadedClassMap.entrySet();
        Iterator it = entries.iterator();
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry) it.next();
            AIHintsData value = (AIHintsData) entry.getValue();
            value.mSituation = "All Situations";
            String target = getHintTarget(value);
            if (target.equals("")) {
            } else {
                if (target.equals("TAP")) {
                    value.mSituation = CardSituation.CARD_TAPPED_KEY;
                }
                if (target.equals("PLAYED")) {
                    value.mSituation = CardSituation.CARD_PLAYED_KEY;
                }
                if (target.equals("BLOCKER")) {
                    value.mSituation = CardSituation.CARD_CAN_BLOCK_KEY;
                }
                if (target.equals("BLOCKED")) {
                    value.mSituation = CardSituation.CARD_IS_BLOCKED_ACTIVATED_KEY;
                }
                if (target.equals("ATTACK")) {
                    value.mSituation = CardSituation.CARD_DECLARED_AS_ATTACKER_KEY;
                }
                if (target.equals("DAMAGE_OPPONENT")) {
                    value.mSituation = CardSituation.CARD_ATTACKER_NOT_BLOCKED_KEY;
                }
                if (target.equals("LIBRARY")) {
                    value.mSituation = CardSituation.CARD_PLAYED_KEY;
                }
            }
        }
        aIHintsDataPool.save();
    }

    private String getHintTarget(AIHintsData data) {
        String cardId = data.mClass;
        if (cardId.trim().toUpperCase().equals("TEMPLATE")) return "";
        if (cardId.trim().length() == 0) return "";
        AICardHints hints = new AICardHints(cardId);
        AIHint hint = hints.getHintbyVarname("HINT_TARGET");
        if (hint == null) return "";
        String s = hint.getString();
        if (s == null) s = "";
        return s;
    }

    public void saveHints() {
        mHints.save();
        clearAll();
    }

    private javax.swing.JButton jButtonAddHint;

    private javax.swing.JButton jButtonAddTemplate;

    private javax.swing.JButton jButtonConvert;

    private javax.swing.JButton jButtonDeleteSelected;

    private javax.swing.JComboBox jComboBoxKey;

    private javax.swing.JComboBox jComboBoxName;

    private javax.swing.JComboBox jComboBoxType;

    private javax.swing.JComboBox jComboBoxTypeNew;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JPanel jPanelDummy;

    private javax.swing.JPanel jPanelOneHint;

    private javax.swing.JPanel jPanelTable;

    private javax.swing.JSplitPane jSplitPane1;

    private javax.swing.JTextField jTextFieldComment;

    private javax.swing.JTextField jTextFieldCommentNew;

    private javax.swing.JTextField jTextFieldName;

    private javax.swing.JTextField jTextFieldValue;

    private javax.swing.JTextField jTextFieldValueNew;

    private javax.swing.JTextField jTextFieldVarName;

    private javax.swing.JTextField jTextFieldVarNameNew;

    boolean cardMode = true;

    public void setCombo(ComboHintsData combo) {
        mComboHintsData = combo;
        mHints = new AICardHints(mComboHintsData);
        cardMode = false;
        init();
    }

    public void setCard(Card card) {
        mCard = card;
        mHints = new AICardHints(mCard);
        init();
    }

    private void init() {
        mClassSetting++;
        CSATableModel t = CSATableModel.buildTableModel(mHints.getTableModel());
        csaPanel = new CSATablePanel(t);
        csaPanel.setTableStyleSwitchingEnabled(false);
        csaPanel.setXMLId("HintTable");
        csaPanel.setTablePopupEnabled(true);
        csaPanel.setDoubleClickAction(new DoubleClickAction() {

            public void doIt() {
                JTable table = (JTable) evt.getSource();
                mRow = table.convertRowIndexToModel(table.rowAtPoint(evt.getPoint()));
                mCol = table.convertColumnIndexToModel(table.columnAtPoint(evt.getPoint()));
                mCol = csaPanel.getModel().convertEnabledColToRealCol(mCol);
                tableDoubleClicked();
            }
        });
        jPanelTable.removeAll();
        javax.swing.GroupLayout jPanelTableLayout = new javax.swing.GroupLayout(jPanelTable);
        jPanelTable.setLayout(jPanelTableLayout);
        jPanelTableLayout.setHorizontalGroup(jPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(csaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        jPanelTableLayout.setVerticalGroup(jPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(csaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        clearAll();
        mClassSetting--;
    }

    private void updateList() {
        CSATableModel model = csaPanel.getModel();
        model.updateModel(mHints.getTableModel());
    }

    private void tableDoubleClicked() {
        if (mRow < 0) return;
        mSingleHint = mHints.getHintByRow(mRow);
        mSelectedRow = mRow;
        displayCurrentHint();
    }

    private void setAllFromCurrent() {
        mClassSetting++;
        jComboBoxName.removeAllItems();
        Vector<AIHintsData> types = AICardHints.getTemplates();
        for (int i = 0; i < types.size(); i++) {
            AIHintsData aIHintsData = types.elementAt(i);
            jComboBoxName.addItem(aIHintsData.mHintName);
        }
        jComboBoxName.setSelectedIndex(-1);
        mClassSetting--;
    }

    private void clearAll() {
        mClassSetting++;
        mSingleHint = null;
        jComboBoxName.removeAllItems();
        Vector<AIHintsData> types = AICardHints.getTemplates();
        for (int i = 0; i < types.size(); i++) {
            AIHintsData aIHintsData = types.elementAt(i);
            jComboBoxName.addItem(aIHintsData.mHintName);
        }
        jComboBoxKey.setSelectedIndex(-1);
        jComboBoxName.setSelectedIndex(-1);
        jComboBoxType.setSelectedItem(-1);
        jTextFieldVarName.setText("");
        jTextFieldValue.setText("");
        jTextFieldComment.setText("");
        jTextFieldName.setText("");
        jTextFieldVarNameNew.setText("");
        jComboBoxTypeNew.setSelectedItem(-1);
        jTextFieldCommentNew.setText("");
        mClassSetting--;
    }

    protected void displayCurrentHint() {
        mClassSetting++;
        jComboBoxName.removeAllItems();
        Vector<AIHintsData> types = AICardHints.getTemplates();
        for (int i = 0; i < types.size(); i++) {
            AIHintsData aIHintsData = types.elementAt(i);
            jComboBoxName.addItem(aIHintsData.mHintName);
        }
        jComboBoxName.setSelectedItem(mSingleHint.mHintName);
        jTextFieldVarName.setText(mSingleHint.mHintVarName);
        jComboBoxType.setSelectedItem(mSingleHint.mHintVarType);
        jTextFieldValue.setText(mSingleHint.mHintValue);
        jTextFieldComment.setText(mSingleHint.mHintComment);
        jComboBoxKey.setSelectedItem(mSingleHint.mSituation);
        mClassSetting--;
    }
}
