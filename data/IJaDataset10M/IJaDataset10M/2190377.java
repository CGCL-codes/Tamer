package alice.tucson.examples.Whiteboard;

import java.awt.*;
import java.io.BufferedInputStream;
import alice.tucson.api.*;
import alice.logictuple.*;
import java.util.*;

/**
 * 
 * @author aricci
 */
@SuppressWarnings("serial")
public class User extends javax.swing.JFrame {

    private TucsonContextSynch context;

    private TupleCentreId tid;

    private Vector points = new Vector();

    String tcName;

    private String name;

    private Point prevPoint = null;

    /** Creates new form User */
    public User(String name, String wbAddress) throws Exception {
        this.name = name;
        initComponents();
        setTitle(name + " whiteboard at " + wbAddress);
        setSize(400, 300);
        tcName = "user('" + name + "')";
        context = new TucsonContextSynch(Tucson.getContext(new AgentId(name)));
        tid = new TupleCentreId("whiteboard@'" + wbAddress + "'");
        try {
            context.setSpec(tid, alice.util.Tools.loadText(new BufferedInputStream(ClassLoader.getSystemResourceAsStream("alice/tucson/examples/Whiteboard/spec.rsp"))));
        } catch (Exception ex) {
            ex.printStackTrace();
            System.exit(-1);
        }
        context.out(tid, LogicTuple.parse("subscription(line(_,_,_,_)," + tcName + ")"));
        TupleCentreId myTC = new TupleCentreId(tcName + "@'" + wbAddress + "'");
        new Visualiser(this, myTC).start();
    }

    /**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    private void initComponents() {
        whiteboard = new javax.swing.JPanel();
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        whiteboard.setBackground(java.awt.Color.white);
        whiteboard.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                whiteboardMousePressed(evt);
            }
        });
        getContentPane().add(whiteboard, java.awt.BorderLayout.CENTER);
        pack();
    }

    private void whiteboardMousePressed(java.awt.event.MouseEvent evt) {
        try {
            Point newPoint = new Point(evt.getX(), evt.getY());
            if (prevPoint != null) {
                context.out(tid, new LogicTuple("line", new Value(prevPoint.getX()), new Value(prevPoint.getY()), new Value(newPoint.getX()), new Value(newPoint.getY())));
            }
            prevPoint = newPoint;
        } catch (Exception ex) {
        }
    }

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {
        try {
            context.inp(tid, LogicTuple.parse("subscription(line(_,_,_,_),'" + tcName + ")"));
        } catch (Exception ex) {
        }
        System.exit(0);
    }

    public void paint(Graphics g) {
        super.paint(g);
        Graphics gp = whiteboard.getGraphics();
        Iterator it = points.iterator();
        while (it.hasNext()) {
            Line l = (Line) it.next();
            int x0 = (int) l.p0.getX();
            int y0 = (int) l.p0.getY();
            int x1 = (int) l.p1.getX();
            int y1 = (int) l.p1.getY();
            gp.drawLine(x0, y0, x1, y1);
        }
    }

    public void newLine(Point p0, Point p1) {
        System.out.println(p0 + " " + p1);
        points.addElement(new Line(p0, p1));
        repaint();
    }

    /**
	 * @param args
	 *            the command line arguments
	 */
    public static void main(String args[]) throws Exception {
        new User("prova", "localhost").setVisible(true);
    }

    private javax.swing.JPanel whiteboard;

    class Line {

        public Point p0;

        public Point p1;

        public Line(Point p0, Point p1) {
            this.p0 = p0;
            this.p1 = p1;
        }
    }

    class Visualiser extends Thread {

        private TucsonContextSynch context;

        private TupleCentreId localTid;

        private User user;

        Visualiser(User user, TupleCentreId tid) throws Exception {
            context = new TucsonContextSynch(Tucson.getContext(new AgentId(user.tcName)));
            localTid = tid;
            this.user = user;
        }

        public void run() {
            while (true) {
                try {
                    LogicTuple t = context.in(localTid, new LogicTuple("line", new Var("X0"), new Var("Y0"), new Var("X1"), new Var("Y1")));
                    user.newLine(new Point(t.getArg(0).intValue(), t.getArg(1).intValue()), new Point(t.getArg(2).intValue(), t.getArg(3).intValue()));
                } catch (Exception ex) {
                }
            }
        }
    }
}
