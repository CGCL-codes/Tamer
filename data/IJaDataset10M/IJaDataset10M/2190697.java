package csa.jportal.ai.enhancedAI.enhancedSim;

import csa.gui.CSATableModel;
import csa.gui.CSATablePanel;
import csa.gui.DoubleClickAction;
import csa.jportal.JPortalView;
import csa.jportal.ai.enhancedAI.weighting.Weighting;
import csa.jportal.carddeck.CardDeck;
import csa.jportal.carddeck.CardDeckData;
import csa.jportal.gui.Windowable;
import csa.jportal.match.Match;
import csa.jportal.match.display.CardListPanel;
import csa.jportal.match.display.DisplayEvent;
import csa.jportal.match.display.DisplayEventListener;
import java.awt.Dimension;
import java.awt.event.ComponentEvent;
import java.io.File;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author malban
 */
public class BattleSimPanel extends javax.swing.JPanel implements Windowable, DisplayEventListener {

    /** Creates new form BattleSimPanel */
    int mClassSetting = 0;

    CombatSimConfig config = new CombatSimConfig();

    CombatSimNew combatSim = null;

    boolean mBattleDone = false;

    Vector<CardSimList> attackerList = null;

    Vector<CardSimList> blockerList = null;

    private CSATablePanel csaAttackerPanel = null;

    private CSATablePanel csaBlockerPanel = null;

    private CSATablePanel csaCombatFormationPanel = null;

    private CSATablePanel csaCombatResultPanel = null;

    int mRow = 0;

    int mCol = 0;

    CardDeck mAttackerDeck = null;

    CardDeck mBlockerDeck = null;

    boolean scaleSet = false;

    CardListPanel attackerPanel = new CardListPanel();

    CardListPanel blockerPanel = new CardListPanel();

    private JPortalView mParent = null;

    private javax.swing.JMenuItem mParentMenuItem = null;

    private int mProxyType = 0;

    public void closing() {
    }

    public void setParentWindow(JPortalView jpv) {
        mParent = jpv;
    }

    public void setMenuItem(javax.swing.JMenuItem item) {
        mParentMenuItem = item;
        mParentMenuItem.setText("AI Battle Sim");
    }

    public javax.swing.JMenuItem getMenuItem() {
        return mParentMenuItem;
    }

    public javax.swing.JPanel getPanel() {
        return this;
    }

    public BattleSimPanel() {
        initComponents();
        File path = new File(csa.Global.mBaseDir + File.separator + Match.getDebugMatchPoolBaseName(false));
        File files[];
        files = path.listFiles();
        if (files == null) return;
        Vector<String> matches = new Vector<String>();
        Arrays.sort(files);
        for (int i = 0, n = files.length; i < n; i++) {
            String aName = files[i].toString();
            if (!files[i].isDirectory()) {
                if (aName.indexOf("Deck.xml") != -1) {
                    aName = csa.util.UtilityString.replace(aName, "Deck.xml", "");
                    int nameStart = aName.lastIndexOf(File.separator);
                    aName = aName.substring(nameStart + 1);
                    matches.addElement(aName);
                }
            }
        }
        mClassSetting++;
        jComboBoxStateAttacker.removeAllItems();
        jComboBoxStateBlocker.removeAllItems();
        for (int i = 0; i < matches.size(); i++) {
            String string = matches.elementAt(i);
            jComboBoxStateAttacker.addItem(string);
            jComboBoxStateBlocker.addItem(string);
        }
        mClassSetting--;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jRadioButton1 = new javax.swing.JRadioButton();
        buttonGroupAttackerCost = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxStateBlocker = new javax.swing.JComboBox();
        jComboBoxBlockerDecks = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jPanelBlockerDisplay = new javax.swing.JPanel();
        jPanelBlockerDummy = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxStateAttacker = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxAttackerDecks = new javax.swing.JComboBox();
        jPanelAttackerDisplay = new javax.swing.JPanel();
        jPanelAttackerDummy = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelAt = new javax.swing.JPanel();
        jPanelAttackerTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanelBl = new javax.swing.JPanel();
        jPanelBlockerTab = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanelBattle = new javax.swing.JPanel();
        jPanelBattleTab = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButtonInitLists = new javax.swing.JButton();
        jComboBoxInt = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxMood = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaComment = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jComboBox5 = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jCheckBoxBlockDefOrder = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBoxFullBlockerlist = new javax.swing.JCheckBox();
        jCheckBoxUnblockableAttackers = new javax.swing.JCheckBox();
        jCheckBoxRemoveUnblockableBlockers = new javax.swing.JCheckBox();
        jButtonDoBattle = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextAreaText2 = new javax.swing.JTextArea();
        jTextFieldName2 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jTextFieldId2 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jRadioButton1.setText("jRadioButton1");
        jRadioButton1.setName("jRadioButton1");
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Definition"));
        jPanel3.setName("jPanel3");
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Blocker"));
        jPanel2.setName("jPanel2");
        jLabel3.setText("List");
        jLabel3.setName("jLabel3");
        jComboBoxStateBlocker.setName("jComboBoxStateBlocker");
        jComboBoxStateBlocker.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStateBlockerActionPerformed(evt);
            }
        });
        jComboBoxBlockerDecks.setName("jComboBoxBlockerDecks");
        jComboBoxBlockerDecks.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxBlockerDecksActionPerformed(evt);
            }
        });
        jLabel4.setText("Gamestate");
        jLabel4.setName("jLabel4");
        jPanelBlockerDisplay.setBorder(javax.swing.BorderFactory.createTitledBorder("Display"));
        jPanelBlockerDisplay.setName("jPanelBlockerDisplay");
        jPanelBlockerDummy.setName("jPanelBlockerDummy");
        javax.swing.GroupLayout jPanelBlockerDummyLayout = new javax.swing.GroupLayout(jPanelBlockerDummy);
        jPanelBlockerDummy.setLayout(jPanelBlockerDummyLayout);
        jPanelBlockerDummyLayout.setHorizontalGroup(jPanelBlockerDummyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 319, Short.MAX_VALUE));
        jPanelBlockerDummyLayout.setVerticalGroup(jPanelBlockerDummyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 128, Short.MAX_VALUE));
        javax.swing.GroupLayout jPanelBlockerDisplayLayout = new javax.swing.GroupLayout(jPanelBlockerDisplay);
        jPanelBlockerDisplay.setLayout(jPanelBlockerDisplayLayout);
        jPanelBlockerDisplayLayout.setHorizontalGroup(jPanelBlockerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanelBlockerDummy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        jPanelBlockerDisplayLayout.setVerticalGroup(jPanelBlockerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanelBlockerDummy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addComponent(jLabel4).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jComboBoxStateBlocker, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel3).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jComboBoxBlockerDecks, 0, 136, Short.MAX_VALUE)).addComponent(jPanelBlockerDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel4).addComponent(jComboBoxStateBlocker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel3).addComponent(jComboBoxBlockerDecks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanelBlockerDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Attacker"));
        jPanel1.setName("jPanel1");
        jLabel1.setText("Gamestate");
        jLabel1.setName("jLabel1");
        jComboBoxStateAttacker.setName("jComboBoxStateAttacker");
        jComboBoxStateAttacker.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStateAttackerActionPerformed(evt);
            }
        });
        jLabel2.setText("List");
        jLabel2.setName("jLabel2");
        jComboBoxAttackerDecks.setName("jComboBoxAttackerDecks");
        jComboBoxAttackerDecks.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAttackerDecksActionPerformed(evt);
            }
        });
        jPanelAttackerDisplay.setBorder(javax.swing.BorderFactory.createTitledBorder("Display"));
        jPanelAttackerDisplay.setName("jPanelAttackerDisplay");
        jPanelAttackerDummy.setName("jPanelAttackerDummy");
        javax.swing.GroupLayout jPanelAttackerDummyLayout = new javax.swing.GroupLayout(jPanelAttackerDummy);
        jPanelAttackerDummy.setLayout(jPanelAttackerDummyLayout);
        jPanelAttackerDummyLayout.setHorizontalGroup(jPanelAttackerDummyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 318, Short.MAX_VALUE));
        jPanelAttackerDummyLayout.setVerticalGroup(jPanelAttackerDummyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 129, Short.MAX_VALUE));
        javax.swing.GroupLayout jPanelAttackerDisplayLayout = new javax.swing.GroupLayout(jPanelAttackerDisplay);
        jPanelAttackerDisplay.setLayout(jPanelAttackerDisplayLayout);
        jPanelAttackerDisplayLayout.setHorizontalGroup(jPanelAttackerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanelAttackerDummy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        jPanelAttackerDisplayLayout.setVerticalGroup(jPanelAttackerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanelAttackerDummy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup().addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jComboBoxStateAttacker, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jComboBoxAttackerDecks, 0, 135, Short.MAX_VALUE)).addComponent(jPanelAttackerDisplay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(jComboBoxStateAttacker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel2).addComponent(jComboBoxAttackerDecks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanelAttackerDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel3Layout.createSequentialGroup().addContainerGap().addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(jPanel3Layout.createSequentialGroup().addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGap(1, 1, 1))).addGap(26, 26, 26)));
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel3Layout.createSequentialGroup().addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        jTabbedPane1.setName("jTabbedPane1");
        jPanelAt.setName("jPanelAt");
        jPanelAttackerTab.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelAttackerTab.setName("jPanelAttackerTab");
        jScrollPane1.setName("jScrollPane1");
        jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        jTable1.setName("jTable1");
        jScrollPane1.setViewportView(jTable1);
        javax.swing.GroupLayout jPanelAttackerTabLayout = new javax.swing.GroupLayout(jPanelAttackerTab);
        jPanelAttackerTab.setLayout(jPanelAttackerTabLayout);
        jPanelAttackerTabLayout.setHorizontalGroup(jPanelAttackerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelAttackerTabLayout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE).addContainerGap()));
        jPanelAttackerTabLayout.setVerticalGroup(jPanelAttackerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelAttackerTabLayout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)));
        javax.swing.GroupLayout jPanelAtLayout = new javax.swing.GroupLayout(jPanelAt);
        jPanelAt.setLayout(jPanelAtLayout);
        jPanelAtLayout.setHorizontalGroup(jPanelAtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAtLayout.createSequentialGroup().addContainerGap().addComponent(jPanelAttackerTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        jPanelAtLayout.setVerticalGroup(jPanelAtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAtLayout.createSequentialGroup().addContainerGap().addComponent(jPanelAttackerTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        jTabbedPane1.addTab("Attacker", jPanelAt);
        jPanelBl.setName("jPanelBl");
        jPanelBlockerTab.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelBlockerTab.setName("jPanelBlockerTab");
        jScrollPane3.setName("jScrollPane3");
        jTable2.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        jTable2.setName("jTable2");
        jScrollPane3.setViewportView(jTable2);
        javax.swing.GroupLayout jPanelBlockerTabLayout = new javax.swing.GroupLayout(jPanelBlockerTab);
        jPanelBlockerTab.setLayout(jPanelBlockerTabLayout);
        jPanelBlockerTabLayout.setHorizontalGroup(jPanelBlockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelBlockerTabLayout.createSequentialGroup().addContainerGap().addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE).addContainerGap()));
        jPanelBlockerTabLayout.setVerticalGroup(jPanelBlockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelBlockerTabLayout.createSequentialGroup().addContainerGap().addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)));
        javax.swing.GroupLayout jPanelBlLayout = new javax.swing.GroupLayout(jPanelBl);
        jPanelBl.setLayout(jPanelBlLayout);
        jPanelBlLayout.setHorizontalGroup(jPanelBlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBlLayout.createSequentialGroup().addContainerGap().addComponent(jPanelBlockerTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        jPanelBlLayout.setVerticalGroup(jPanelBlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBlLayout.createSequentialGroup().addContainerGap().addComponent(jPanelBlockerTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        jTabbedPane1.addTab("Blocker", jPanelBl);
        jPanelBattle.setName("jPanelBattle");
        jPanelBattleTab.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelBattleTab.setName("jPanelBattleTab");
        jScrollPane4.setName("jScrollPane4");
        jTable3.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        jTable3.setName("jTable3");
        jScrollPane4.setViewportView(jTable3);
        jLabel8.setText("Combat formations");
        jLabel8.setName("jLabel8");
        jLabel9.setText("Combat results");
        jLabel9.setName("jLabel9");
        jScrollPane5.setName("jScrollPane5");
        jTable4.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        jTable4.setName("jTable4");
        jScrollPane5.setViewportView(jTable4);
        javax.swing.GroupLayout jPanelBattleTabLayout = new javax.swing.GroupLayout(jPanelBattleTab);
        jPanelBattleTab.setLayout(jPanelBattleTabLayout);
        jPanelBattleTabLayout.setHorizontalGroup(jPanelBattleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelBattleTabLayout.createSequentialGroup().addContainerGap().addGroup(jPanelBattleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE).addComponent(jLabel8).addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE).addComponent(jLabel9)).addContainerGap()));
        jPanelBattleTabLayout.setVerticalGroup(jPanelBattleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBattleTabLayout.createSequentialGroup().addComponent(jLabel8).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel9).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(171, 171, 171)));
        javax.swing.GroupLayout jPanelBattleLayout = new javax.swing.GroupLayout(jPanelBattle);
        jPanelBattle.setLayout(jPanelBattleLayout);
        jPanelBattleLayout.setHorizontalGroup(jPanelBattleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBattleLayout.createSequentialGroup().addContainerGap().addComponent(jPanelBattleTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        jPanelBattleLayout.setVerticalGroup(jPanelBattleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBattleLayout.createSequentialGroup().addContainerGap().addComponent(jPanelBattleTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        jTabbedPane1.addTab("Battle Permutations", jPanelBattle);
        jButtonInitLists.setText("Init Lists");
        jButtonInitLists.setToolTipText("Builds NEW CombatSim - and generates Attacker Permutations!");
        jButtonInitLists.setName("jButtonInitLists");
        jButtonInitLists.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInitListsActionPerformed(evt);
            }
        });
        jComboBoxInt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBoxInt.setEnabled(false);
        jComboBoxInt.setName("jComboBoxInt");
        jLabel5.setText("Int");
        jLabel5.setName("jLabel5");
        jLabel6.setText("Mood");
        jLabel6.setName("jLabel6");
        jComboBoxMood.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBoxMood.setEnabled(false);
        jComboBoxMood.setName("jComboBoxMood");
        jScrollPane2.setName("jScrollPane2");
        jTextAreaComment.setColumns(20);
        jTextAreaComment.setFont(new java.awt.Font("Times New Roman", 0, 12));
        jTextAreaComment.setLineWrap(true);
        jTextAreaComment.setRows(5);
        jTextAreaComment.setWrapStyleWord(true);
        jTextAreaComment.setName("jTextAreaComment");
        jScrollPane2.setViewportView(jTextAreaComment);
        jLabel7.setText("Log / Info");
        jLabel7.setName("jLabel7");
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Blocker priority"));
        jPanel4.setName("jPanel4");
        jLabel11.setText("Least damage to player");
        jLabel11.setName("jLabel11");
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "1", "2", "3", "4", "5" }));
        jComboBox1.setName("jComboBox1");
        jLabel12.setText("Kill most attackers");
        jLabel12.setName("jLabel12");
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "1", "2", "3", "4", "5" }));
        jComboBox2.setName("jComboBox2");
        jLabel13.setText("Get least blockers killed");
        jLabel13.setName("jLabel13");
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "1", "2", "3", "4", "5" }));
        jComboBox3.setName("jComboBox3");
        jLabel14.setText("Kill attackers by cost");
        jLabel14.setName("jLabel14");
        jLabel15.setText("Kill attackers by power");
        jLabel15.setName("jLabel15");
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "1", "2", "3", "4", "5" }));
        jComboBox4.setName("jComboBox4");
        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "1", "2", "3", "4", "5" }));
        jComboBox5.setName("jComboBox5");
        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel4Layout.createSequentialGroup().addContainerGap().addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel13).addComponent(jLabel12).addComponent(jLabel11).addComponent(jLabel14).addComponent(jLabel15)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jComboBox5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(32, Short.MAX_VALUE)));
        jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel4Layout.createSequentialGroup().addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel11)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel12)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel13)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel14).addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel15).addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(21, Short.MAX_VALUE)));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Blocker Settings"));
        jPanel5.setName("jPanel5");
        jCheckBoxBlockDefOrder.setText("Blocker in defensive order");
        jCheckBoxBlockDefOrder.setToolTipText("Only accepts block lists with blocker defensive in descending order");
        jCheckBoxBlockDefOrder.setName("jCheckBoxBlockDefOrder");
        jCheckBox1.setText("Remove non effective Blockers (recursive)");
        jCheckBox1.setToolTipText("<html>Blockers that do not change the outcome of the battle.<BR>\n<LI> Attacker can not be killed by blocker list -> remove all but the first blocker\n<LI> Blocker(s) killed Attacker -> remove all subsequent blockers \n</html>");
        jCheckBox1.setName("jCheckBox1");
        jCheckBox2.setText("Remove double evaluation of same blockers");
        jCheckBox2.setToolTipText("<html>If more than once creature of the same kind is attacking, <br>\nremove all double evaulations, since they are effectivly the same.\n\n</html>");
        jCheckBox2.setName("jCheckBox2");
        jCheckBoxFullBlockerlist.setText("Only full blockerlist");
        jCheckBoxFullBlockerlist.setToolTipText("Only accepts block lists with blocker defensive in descending order");
        jCheckBoxFullBlockerlist.setName("jCheckBoxFullBlockerlist");
        jCheckBoxUnblockableAttackers.setText("Remove unblockable attackers");
        jCheckBoxUnblockableAttackers.setToolTipText("<html>If more than once creature of the same kind is attacking, <br>\nremove all double evaulations, since they are effectivly the same.\n\n</html>");
        jCheckBoxUnblockableAttackers.setName("jCheckBoxUnblockableAttackers");
        jCheckBoxRemoveUnblockableBlockers.setText("Remove unblockable blockers");
        jCheckBoxRemoveUnblockableBlockers.setToolTipText("<html>If more than once creature of the same kind is attacking, <br>\nremove all double evaulations, since they are effectivly the same.\n\n</html>");
        jCheckBoxRemoveUnblockableBlockers.setName("jCheckBoxRemoveUnblockableBlockers");
        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel5Layout.createSequentialGroup().addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jCheckBoxFullBlockerlist).addComponent(jCheckBoxBlockDefOrder).addComponent(jCheckBox1).addComponent(jCheckBox2).addComponent(jCheckBoxUnblockableAttackers).addComponent(jCheckBoxRemoveUnblockableBlockers)).addContainerGap()));
        jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel5Layout.createSequentialGroup().addComponent(jCheckBoxFullBlockerlist).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jCheckBoxBlockDefOrder).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jCheckBox1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jCheckBox2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jCheckBoxUnblockableAttackers).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jCheckBoxRemoveUnblockableBlockers).addContainerGap(25, Short.MAX_VALUE)));
        jButtonDoBattle.setText("Build combat formations");
        jButtonDoBattle.setToolTipText("Builds NEW CombatSim - and generates Attacker Permutations!");
        jButtonDoBattle.setName("jButtonDoBattle");
        jButtonDoBattle.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoBattleActionPerformed(evt);
            }
        });
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setName("jPanel6");
        jScrollPane6.setName("jScrollPane6");
        jTextAreaText2.setColumns(20);
        jTextAreaText2.setFont(new java.awt.Font("Tahoma", 0, 11));
        jTextAreaText2.setLineWrap(true);
        jTextAreaText2.setRows(3);
        jTextAreaText2.setWrapStyleWord(true);
        jTextAreaText2.setName("jTextAreaText2");
        jScrollPane6.setViewportView(jTextAreaText2);
        jTextFieldName2.setName("jTextFieldName2");
        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel30.setText("Name");
        jLabel30.setName("jLabel30");
        jTextFieldId2.setMinimumSize(new java.awt.Dimension(40, 20));
        jTextFieldId2.setName("jTextFieldId2");
        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel31.setText("Id");
        jLabel31.setName("jLabel31");
        jLabel32.setText("Text");
        jLabel32.setName("jLabel32");
        jLabel10.setMaximumSize(new java.awt.Dimension(200, 285));
        jLabel10.setMinimumSize(new java.awt.Dimension(200, 285));
        jLabel10.setName("jLabel10");
        jLabel10.setPreferredSize(new java.awt.Dimension(200, 285));
        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup().addContainerGap().addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE).addComponent(jLabel32, javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup().addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel30).addComponent(jLabel31)).addGap(4, 4, 4).addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jTextFieldId2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jTextFieldName2, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))).addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap()));
        jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addContainerGap().addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel31).addComponent(jTextFieldId2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel30).addComponent(jTextFieldName2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel32).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));
        jButton1.setText("Compute best block");
        jButton1.setName("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jButton1).addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel7).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jButtonInitLists).addComponent(jButtonDoBattle)).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel6).addComponent(jLabel5)).addGap(27, 27, 27).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jComboBoxInt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jComboBoxMood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(1, 1, 1)).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGap(10, 10, 10)))));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(layout.createSequentialGroup().addComponent(jButtonInitLists).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButtonDoBattle)).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel5).addComponent(jComboBoxInt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jComboBoxMood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel6)))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel7).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButton1).addGap(75, 75, 75)).addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE).addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap()));
    }

    private void jComboBoxStateAttackerActionPerformed(java.awt.event.ActionEvent evt) {
        mClassSetting++;
        if (jComboBoxStateAttacker.getSelectedItem() == null) return;
        String gameState = jComboBoxStateAttacker.getSelectedItem().toString();
        jComboBoxAttackerDecks.removeAllItems();
        jComboBoxAttackerDecks.addItem("");
        Vector<String> deckName = getDeckListForName(gameState);
        for (int i = 0; i < deckName.size(); i++) {
            String string = deckName.elementAt(i);
            jComboBoxAttackerDecks.addItem(string);
        }
        mClassSetting--;
    }

    private void jComboBoxStateBlockerActionPerformed(java.awt.event.ActionEvent evt) {
        if (jComboBoxStateBlocker.getSelectedItem() == null) return;
        mClassSetting++;
        String gameState = jComboBoxStateBlocker.getSelectedItem().toString();
        jComboBoxBlockerDecks.removeAllItems();
        jComboBoxBlockerDecks.addItem("");
        Vector<String> deckName = getDeckListForName(gameState);
        for (int i = 0; i < deckName.size(); i++) {
            String string = deckName.elementAt(i);
            jComboBoxBlockerDecks.addItem(string);
        }
        mClassSetting--;
    }

    private void jComboBoxAttackerDecksActionPerformed(java.awt.event.ActionEvent evt) {
        if (mClassSetting > 0) return;
        String gameState = jComboBoxStateAttacker.getSelectedItem().toString();
        CardDeck mCardDeck = new CardDeck(gameState, Match.getDebugMatchPoolBaseName(false));
        String key = jComboBoxAttackerDecks.getSelectedItem().toString();
        CardDeckData mDeckData = mCardDeck.getPool().get(key);
        mAttackerDeck = new CardDeck(mDeckData, Match.getDebugMatchPoolBaseName(false));
        setAttackerDeck();
    }

    private void jComboBoxBlockerDecksActionPerformed(java.awt.event.ActionEvent evt) {
        if (mClassSetting > 0) return;
        String gameState = jComboBoxStateBlocker.getSelectedItem().toString();
        CardDeck mCardDeck = new CardDeck(gameState, Match.getDebugMatchPoolBaseName(false));
        String key = jComboBoxBlockerDecks.getSelectedItem().toString();
        CardDeckData mDeckData = mCardDeck.getPool().get(key);
        mBlockerDeck = new CardDeck(mDeckData, Match.getDebugMatchPoolBaseName(false));
        setBlockerDeck();
    }

    void setConfig() {
        config = new CombatSimConfig();
        config.blockerDefOrder = jCheckBoxBlockDefOrder.isSelected();
        config.onlyFullBlockerList = jCheckBoxFullBlockerlist.isSelected();
        config.checkEffectiveBlocker = jCheckBox1.isSelected();
        config.removeUnblockAbleAttackers = jCheckBoxUnblockableAttackers.isSelected();
        config.removeUnblockableBlockers = jCheckBoxRemoveUnblockableBlockers.isSelected();
    }

    private void jButtonInitListsActionPerformed(java.awt.event.ActionEvent evt) {
        if ((mAttackerDeck == null) || (mBlockerDeck == null)) return;
        mBattleDone = false;
        setConfig();
        combatSim = new CombatSimNew(new CardSimList(mAttackerDeck.getCardList()), new CardSimList(mBlockerDeck.getCardList()), config);
        combatSim.buildLists();
        attackerList = combatSim.getCurrentAttackerPermutations();
        blockerList = combatSim.getCurrentBlockerPermutations();
        updateCombatStats(true);
    }

    private void jButtonDoBattleActionPerformed(java.awt.event.ActionEvent evt) {
        if (combatSim == null) return;
        if (mBattleDone) return;
        mBattleDone = true;
        combatSim.buildCombatFormations();
        String s = "Combat permutations: " + combatSim.getAllCombatFormations().size() + "\n";
        HashMap<String, String> checker = new HashMap<String, String>();
        Vector<CombatFormation> allSims = combatSim.getAllCombatFormations();
        for (int i = 0; i < allSims.size(); i++) {
            CombatFormation cf = allSims.elementAt(i);
            String ss = cf.toString();
            checker.put(ss, ss);
        }
        jTextAreaComment.append(s);
        s = "Combat permutations check: " + checker.size() + "\n";
        jTextAreaComment.append(s);
        updateCombatStats(false);
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        if ((mAttackerDeck == null) || (mBlockerDeck == null)) return;
        mBattleDone = false;
        setConfig();
        combatSim = new CombatSimNew(new CardSimList(mAttackerDeck.getCardList()), new CardSimList(mBlockerDeck.getCardList()), config);
        CombatFormation formation = combatSim.computeBestBlock(0, Weighting.DEFAULT, 0);
    }

    private javax.swing.ButtonGroup buttonGroupAttackerCost;

    private javax.swing.JButton jButton1;

    private javax.swing.JButton jButtonDoBattle;

    private javax.swing.JButton jButtonInitLists;

    private javax.swing.JCheckBox jCheckBox1;

    private javax.swing.JCheckBox jCheckBox2;

    private javax.swing.JCheckBox jCheckBoxBlockDefOrder;

    private javax.swing.JCheckBox jCheckBoxFullBlockerlist;

    private javax.swing.JCheckBox jCheckBoxRemoveUnblockableBlockers;

    private javax.swing.JCheckBox jCheckBoxUnblockableAttackers;

    private javax.swing.JComboBox jComboBox1;

    private javax.swing.JComboBox jComboBox2;

    private javax.swing.JComboBox jComboBox3;

    private javax.swing.JComboBox jComboBox4;

    private javax.swing.JComboBox jComboBox5;

    private javax.swing.JComboBox jComboBoxAttackerDecks;

    private javax.swing.JComboBox jComboBoxBlockerDecks;

    private javax.swing.JComboBox jComboBoxInt;

    private javax.swing.JComboBox jComboBoxMood;

    private javax.swing.JComboBox jComboBoxStateAttacker;

    private javax.swing.JComboBox jComboBoxStateBlocker;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel10;

    private javax.swing.JLabel jLabel11;

    private javax.swing.JLabel jLabel12;

    private javax.swing.JLabel jLabel13;

    private javax.swing.JLabel jLabel14;

    private javax.swing.JLabel jLabel15;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JLabel jLabel30;

    private javax.swing.JLabel jLabel31;

    private javax.swing.JLabel jLabel32;

    private javax.swing.JLabel jLabel4;

    private javax.swing.JLabel jLabel5;

    private javax.swing.JLabel jLabel6;

    private javax.swing.JLabel jLabel7;

    private javax.swing.JLabel jLabel8;

    private javax.swing.JLabel jLabel9;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JPanel jPanel3;

    private javax.swing.JPanel jPanel4;

    private javax.swing.JPanel jPanel5;

    private javax.swing.JPanel jPanel6;

    private javax.swing.JPanel jPanelAt;

    private javax.swing.JPanel jPanelAttackerDisplay;

    private javax.swing.JPanel jPanelAttackerDummy;

    private javax.swing.JPanel jPanelAttackerTab;

    private javax.swing.JPanel jPanelBattle;

    private javax.swing.JPanel jPanelBattleTab;

    private javax.swing.JPanel jPanelBl;

    private javax.swing.JPanel jPanelBlockerDisplay;

    private javax.swing.JPanel jPanelBlockerDummy;

    private javax.swing.JPanel jPanelBlockerTab;

    private javax.swing.JRadioButton jRadioButton1;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JScrollPane jScrollPane3;

    private javax.swing.JScrollPane jScrollPane4;

    private javax.swing.JScrollPane jScrollPane5;

    private javax.swing.JScrollPane jScrollPane6;

    private javax.swing.JTabbedPane jTabbedPane1;

    private javax.swing.JTable jTable1;

    private javax.swing.JTable jTable2;

    private javax.swing.JTable jTable3;

    private javax.swing.JTable jTable4;

    private javax.swing.JTextArea jTextAreaComment;

    private javax.swing.JTextArea jTextAreaText2;

    private javax.swing.JTextField jTextFieldId2;

    private javax.swing.JTextField jTextFieldName2;

    Vector<String> getDeckListForName(String name) {
        String klasse = name;
        CardDeck cardDeck = new CardDeck(name, Match.getDebugMatchPoolBaseName(false));
        Collection<CardDeckData> colC = cardDeck.getPool().getMapForKlasse(klasse).values();
        Iterator<CardDeckData> iterC = colC.iterator();
        Vector<String> names = new Vector<String>();
        while (iterC.hasNext()) {
            CardDeckData item = iterC.next();
            names.addElement(item.mName);
        }
        Collections.sort(names, new Comparator<String>() {

            public int compare(String s1, String s2) {
                return s1.compareTo(s2);
            }
        });
        return names;
    }

    private void setBlockerDeck() {
        jPanelBlockerDisplay.removeAll();
        blockerPanel = new CardListPanel();
        javax.swing.GroupLayout jPanelBlockerDisplayLayout = new javax.swing.GroupLayout(jPanelBlockerDisplay);
        jPanelBlockerDisplay.setLayout(jPanelBlockerDisplayLayout);
        jPanelBlockerDisplayLayout.setHorizontalGroup(jPanelBlockerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(blockerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        jPanelBlockerDisplayLayout.setVerticalGroup(jPanelBlockerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(blockerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        blockerPanel.setName("handDisplay");
        blockerPanel.setShowCards(true);
        blockerPanel.setOwnScale(true, 25);
        blockerPanel.setShowCardCardCount(false);
        blockerPanel.setSinglePackView(false);
        blockerPanel.setPreferredSize(new Dimension(100, 80));
        jPanelBlockerDisplay.addComponentListener(new java.awt.event.ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                if (scaleSet) {
                    blockerPanel.setMyPrefferedSize(jPanelBlockerDisplay.getWidth(), 80);
                    blockerPanel.scaleChanged();
                }
            }
        });
        blockerPanel.setHand(mBlockerDeck.getCardList());
        blockerPanel.setMyPrefferedSize(jPanelBlockerDisplay.getWidth(), 80);
        blockerPanel.scaleChanged();
        blockerPanel.addPlayerEventListener(this);
    }

    private void setAttackerDeck() {
        jPanelAttackerDisplay.removeAll();
        attackerPanel = new CardListPanel();
        javax.swing.GroupLayout jPanelAttackerDisplayLayout = new javax.swing.GroupLayout(jPanelAttackerDisplay);
        jPanelAttackerDisplay.setLayout(jPanelAttackerDisplayLayout);
        jPanelAttackerDisplayLayout.setHorizontalGroup(jPanelAttackerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(attackerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        jPanelAttackerDisplayLayout.setVerticalGroup(jPanelAttackerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(attackerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        attackerPanel.setName("handDisplay");
        attackerPanel.setShowCards(true);
        attackerPanel.setOwnScale(true, 25);
        attackerPanel.setShowCardCardCount(false);
        attackerPanel.setSinglePackView(false);
        attackerPanel.setPreferredSize(new Dimension(100, 80));
        jPanelAttackerDisplay.addComponentListener(new java.awt.event.ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                if (scaleSet) {
                    attackerPanel.setMyPrefferedSize(jPanelAttackerDisplay.getWidth(), 80);
                    attackerPanel.scaleChanged();
                }
            }
        });
        attackerPanel.setHand(mAttackerDeck.getCardList());
        attackerPanel.setMyPrefferedSize(jPanelAttackerDisplay.getWidth(), 80);
        attackerPanel.scaleChanged();
        attackerPanel.addPlayerEventListener(this);
    }

    private void updateCombatStats(boolean textUpdate) {
        if (combatSim == null) return;
        if (attackerList == null) return;
        if (blockerList == null) return;
        CSATableModel t = CSATableModel.buildTableModel(getAttackerTableModel());
        csaAttackerPanel = new CSATablePanel(t);
        csaAttackerPanel.setXMLId("AttackerSimTable");
        csaAttackerPanel.setTableStyleSwitchingEnabled(false);
        csaAttackerPanel.setTablePopupEnabled(true);
        csaAttackerPanel.setDoubleClickAction(new DoubleClickAction() {

            public void doIt() {
                JTable table = (JTable) evt.getSource();
                mRow = table.convertRowIndexToModel(table.rowAtPoint(evt.getPoint()));
                mCol = table.convertColumnIndexToModel(table.columnAtPoint(evt.getPoint()));
                mCol = csaAttackerPanel.getModel().convertEnabledColToRealCol(mCol);
                tableDoubleClicked();
            }
        });
        jPanelAttackerTab.removeAll();
        javax.swing.GroupLayout jPanelAttackerTabLayout = new javax.swing.GroupLayout(jPanelAttackerTab);
        jPanelAttackerTab.setLayout(jPanelAttackerTabLayout);
        jPanelAttackerTabLayout.setHorizontalGroup(jPanelAttackerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelAttackerTabLayout.createSequentialGroup().addContainerGap().addComponent(csaAttackerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE).addContainerGap()));
        jPanelAttackerTabLayout.setVerticalGroup(jPanelAttackerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelAttackerTabLayout.createSequentialGroup().addContainerGap().addComponent(csaAttackerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)));
        t = CSATableModel.buildTableModel(getBlockerTableModel());
        csaBlockerPanel = new CSATablePanel(t);
        csaBlockerPanel.setXMLId("BlockerSimTable");
        csaBlockerPanel.setTableStyleSwitchingEnabled(false);
        csaBlockerPanel.setTablePopupEnabled(true);
        csaBlockerPanel.setDoubleClickAction(new DoubleClickAction() {

            public void doIt() {
                JTable table = (JTable) evt.getSource();
                mRow = table.convertRowIndexToModel(table.rowAtPoint(evt.getPoint()));
                mCol = table.convertColumnIndexToModel(table.columnAtPoint(evt.getPoint()));
                mCol = csaBlockerPanel.getModel().convertEnabledColToRealCol(mCol);
                tableDoubleClicked();
            }
        });
        jPanelBlockerTab.removeAll();
        javax.swing.GroupLayout jPanelBlockerTabLayout = new javax.swing.GroupLayout(jPanelBlockerTab);
        jPanelBlockerTab.setLayout(jPanelBlockerTabLayout);
        jPanelBlockerTabLayout.setHorizontalGroup(jPanelBlockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelBlockerTabLayout.createSequentialGroup().addContainerGap().addComponent(csaBlockerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE).addContainerGap()));
        jPanelBlockerTabLayout.setVerticalGroup(jPanelBlockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelBlockerTabLayout.createSequentialGroup().addContainerGap().addComponent(csaBlockerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)));
        if (mBattleDone) {
            t = CSATableModel.buildTableModel(getCombatFormationTableModel());
            csaCombatFormationPanel = new CSATablePanel(t);
            csaCombatFormationPanel.setXMLId("CombatFormationTable");
            csaCombatFormationPanel.setTableStyleSwitchingEnabled(false);
            csaCombatFormationPanel.setTablePopupEnabled(true);
            csaCombatFormationPanel.setDoubleClickAction(new DoubleClickAction() {

                public void doIt() {
                    JTable table = (JTable) evt.getSource();
                    mRow = table.convertRowIndexToModel(table.rowAtPoint(evt.getPoint()));
                    mCol = table.convertColumnIndexToModel(table.columnAtPoint(evt.getPoint()));
                    mCol = csaCombatFormationPanel.getModel().convertEnabledColToRealCol(mCol);
                    tableDoubleClicked();
                }
            });
            jPanelBattleTab.removeAll();
            javax.swing.GroupLayout jPanelBattleTabLayout = new javax.swing.GroupLayout(jPanelBattleTab);
            jPanelBattleTab.setLayout(jPanelBattleTabLayout);
            jPanelBattleTabLayout.setHorizontalGroup(jPanelBattleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelBattleTabLayout.createSequentialGroup().addContainerGap().addGroup(jPanelBattleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(csaCombatFormationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE).addComponent(jLabel8).addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE).addComponent(jLabel9)).addContainerGap()));
            jPanelBattleTabLayout.setVerticalGroup(jPanelBattleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBattleTabLayout.createSequentialGroup().addComponent(jLabel8).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(csaCombatFormationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel9).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(37, 37, 37)));
        }
        if (textUpdate) {
            String s = "";
            s += "Attacker Permutations: " + attackerList.size() + "\n";
            s += "Blocker Permutations: " + blockerList.size() + "\n";
            if (combatSim.mRemovedAttackers.size() > 0) s += "Removed attackers: " + combatSim.mRemovedAttackers + "\n";
            if (combatSim.mRemovedBlockers.size() > 0) s += "Removed blockers: " + combatSim.mRemovedBlockers + "\n";
            s += "Unblockable permutations: " + config.getUnblockableCombinationSize() + "\n";
            jTextAreaComment.setText(s);
        }
    }

    private void tableDoubleClicked() {
    }

    public javax.swing.table.TableModel getAttackerTableModel() {
        if (combatSim == null) return null;
        if (attackerList == null) return null;
        AbstractTableModel model = new AbstractTableModel() {

            @Override
            public String getColumnName(int col) {
                return "" + col;
            }

            public int getRowCount() {
                if (attackerList == null) return 0;
                return attackerList.size();
            }

            public int getColumnCount() {
                if (mAttackerDeck == null) return 0;
                return mAttackerDeck.size();
            }

            public Object getValueAt(int row, int col) {
                CardSimList list = attackerList.elementAt(row);
                if (col >= list.size()) return "";
                return list.getCard(col).getName();
            }

            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }

            @Override
            public Class getColumnClass(int col) {
                return String.class;
            }
        };
        return model;
    }

    public javax.swing.table.TableModel getBlockerTableModel() {
        if (combatSim == null) return null;
        if (blockerList == null) return null;
        AbstractTableModel model = new AbstractTableModel() {

            @Override
            public String getColumnName(int col) {
                return "" + col;
            }

            public int getRowCount() {
                if (blockerList == null) return 0;
                return blockerList.size();
            }

            public int getColumnCount() {
                if (mBlockerDeck == null) return 0;
                return mBlockerDeck.size();
            }

            public Object getValueAt(int row, int col) {
                CardSimList list = blockerList.elementAt(row);
                if (col >= list.size()) return "";
                return list.getCard(col).getName();
            }

            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }

            @Override
            public Class getColumnClass(int col) {
                return String.class;
            }
        };
        return model;
    }

    public javax.swing.table.TableModel getCombatFormationTableModel() {
        if (combatSim == null) return null;
        if (blockerList == null) return null;
        if (!mBattleDone) return null;
        AbstractTableModel model = new AbstractTableModel() {

            @Override
            public String getColumnName(int col) {
                return "" + col;
            }

            public int getRowCount() {
                Vector<CombatFormation> allSims = combatSim.getAllCombatFormations();
                return allSims.size();
            }

            public int getColumnCount() {
                if (mAttackerDeck == null) return 0;
                return mAttackerDeck.size();
            }

            public Object getValueAt(int row, int col) {
                Vector<CombatFormation> allSims = combatSim.getAllCombatFormations();
                String rowS = allSims.elementAt(row).toString();
                String result = "";
                String r[] = rowS.split(":");
                if (col < r.length - 1) {
                    result = r[col + 1].trim();
                }
                return result;
            }

            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }

            @Override
            public Class getColumnClass(int col) {
                return String.class;
            }
        };
        return model;
    }

    public void displayEventOccurred(DisplayEvent e) {
        if (e.mMessageType == DisplayEvent.MOUSE_MIDDLERELEASED_CARD) {
            jTextFieldId2.setText(e.mCard.getId());
            jTextFieldName2.setText(e.mCard.getName());
            jTextAreaText2.setText(e.mCard.getText());
            jLabel10.setIcon(new ImageIcon(e.mCard.getImageTrueSize()));
        }
    }
}
