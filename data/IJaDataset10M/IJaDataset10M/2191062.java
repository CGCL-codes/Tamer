package net.sourceforge.ondex.server.plugins.filter;

import net.sourceforge.ondex.ONDEXPluginArguments;
import net.sourceforge.ondex.core.ONDEXGraph;
import net.sourceforge.ondex.wsapi.exceptions.*;
import net.sourceforge.ondex.wsapi.plugins.ZipFormat;
import org.apache.log4j.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import java.io.File;
import java.io.StringWriter;
import net.sourceforge.ondex.server.plugins.JobBase;
import net.sourceforge.ondex.wsapi.exceptions.WebserviceException;
import net.sourceforge.ondex.server.result.WSFilterResult;

/**
* AutoGenerated
* @author Christian Brenninkmeijer
*/
public class FilterUsingJobAuto extends JobBase {

    private static final Logger logger = Logger.getLogger(FilterUsingJobAuto.class);

    public FilterUsingJobAuto() throws CaughtException {
        super();
    }

    /**
     * Method to run Filter in conceptclass package.
     *
 	 *    Status: STABLE Tested March 2010 (Artem Lysenko) Works for the tutorial example - further testing necessary
 	 *    Authors: Jan Taubert, 
 	 *    Custodians: Jochen Weile, 
     * @param TargetConceptClass
 	 *            (REQUIRED! No Default!) [List]Target Concept Class to filter out.
     * @param cv_to_filter
 	 *            (Optional. No Default.) Filter the concepts of specified DataSource.
     * @param acc_file
 	 *            (Optional. No Default.) A file of accessions of type cv_to_filter; one per line.
     * @param Exclude
 	 *            (Optional. Defaults to :true) Exclude concepts and relations that meet the given crieria, else if false then exclusivly include?
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return The JobID. (Taverna users need a single XML Splitter
     * @throws WebserviceException
     */
    @WebResult(name = "jobId")
    @WebMethod(exclude = false)
    public String conceptclassFilter(@WebParam(name = "TargetConceptClass") java.lang.String[] TargetConceptClass, @WebParam(name = "cv_to_filter") java.lang.String cv_to_filter, @WebParam(name = "acc_file") java.lang.String acc_file, @WebParam(name = "Exclude") java.lang.Boolean Exclude, @WebParam(name = "graphId") Long graphId) throws WebserviceException {
        try {
            logger.info("filter conceptclass called");
            net.sourceforge.ondex.filter.conceptclass.Filter filter = new net.sourceforge.ondex.filter.conceptclass.Filter();
            logger.info(");Filter created " + filter);
            ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
            logger.info("found graph");
            ONDEXPluginArguments arguments = new ONDEXPluginArguments(filter.getArgumentDefinitions());
            createArguement(filter, arguments, "TargetConceptClass", TargetConceptClass);
            createArguement(filter, arguments, "cv_to_filter", cv_to_filter);
            createArguement(filter, arguments, "acc_file", acc_file);
            createArguement(filter, arguments, "Exclude", Exclude);
            logger.info("created arguements");
            FilterJob job = new FilterJob(graph, filter, arguments);
            return job.getJobId().toString();
        } catch (WebserviceException e) {
            throw e;
        } catch (Exception e) {
            throw new CaughtException(e, logger);
        }
    }

    /**
     * Method to run Filter in significance package.
     *
 	 *    Status: STABLE Tested September 2010 (Jan Taubert)
 	 *    Authors: Jan Taubert, Artem Lysenko, 
 	 *    Custodians: Jochen Weile, 
     * @param TargetAttributeName
 	 *            (REQUIRED! No Default!) Target AttributeName to filter for significance.
     * @param Significance
 	 *            (Optional. Defaults to :1.0) A significance value to filter relations with.
     * @param Inverse
 	 *            (Optional. Defaults to :false) If set to true only relation smaller than Significance will be kept.
     * @param AbsoluteValues
 	 *            (Optional. Defaults to :false) Absolute Attribute values when testing for significance
     * @param Remove_no_att
 	 *            (Optional. Defaults to :false) Remove elements without the attribute, if set to true.
     * @param ConceptMode
 	 *            (Optional. Defaults to :false) If true filters concepts, if false filters realtions
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return The JobID. (Taverna users need a single XML Splitter
     * @throws WebserviceException
     */
    @WebResult(name = "jobId")
    @WebMethod(exclude = false)
    public String significanceFilter(@WebParam(name = "TargetAttributeName") java.lang.String TargetAttributeName, @WebParam(name = "Significance") java.lang.Double Significance, @WebParam(name = "Inverse") java.lang.Boolean Inverse, @WebParam(name = "AbsoluteValues") java.lang.Boolean AbsoluteValues, @WebParam(name = "Remove_no_att") java.lang.Boolean Remove_no_att, @WebParam(name = "ConceptMode") java.lang.Boolean ConceptMode, @WebParam(name = "graphId") Long graphId) throws WebserviceException {
        try {
            logger.info("filter significance called");
            net.sourceforge.ondex.filter.significance.Filter filter = new net.sourceforge.ondex.filter.significance.Filter();
            logger.info(");Filter created " + filter);
            ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
            logger.info("found graph");
            ONDEXPluginArguments arguments = new ONDEXPluginArguments(filter.getArgumentDefinitions());
            createArguement(filter, arguments, "TargetAttributeName", TargetAttributeName);
            createArguement(filter, arguments, "Significance", Significance);
            createArguement(filter, arguments, "Inverse", Inverse);
            createArguement(filter, arguments, "AbsoluteValues", AbsoluteValues);
            createArguement(filter, arguments, "Remove_no_att", Remove_no_att);
            createArguement(filter, arguments, "ConceptMode", ConceptMode);
            logger.info("created arguements");
            FilterJob job = new FilterJob(graph, filter, arguments);
            return job.getJobId().toString();
        } catch (WebserviceException e) {
            throw e;
        } catch (Exception e) {
            throw new CaughtException(e, logger);
        }
    }

    /**
     * Method to run Filter in unconnected package.
     *
 	 *    Status: STABLE Tested March 2010 (Artem Lysenko)
 	 *    Authors: Jan Taubert, 
 	 *    Custodians: Jochen Weile, 
     * @param RemoveTagDependencies
 	 *            (Optional. Defaults to :false) Set true to remove tag dependencies, otherwise unconnected concepts will still remain in the graph.
     * @param ConceptClassRestriction
 	 *            (Optional. No Default.) [List]A Concept Class Restriction as an ordered pair representing from and to Concepts in an evaluated Relation. (add the reverse compliment if direction is not important)
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return The JobID. (Taverna users need a single XML Splitter
     * @throws WebserviceException
     */
    @WebResult(name = "jobId")
    @WebMethod(exclude = false)
    public String unconnectedFilter(@WebParam(name = "RemoveTagDependencies") java.lang.Boolean RemoveTagDependencies, @WebParam(name = "ConceptClassRestriction") java.lang.String[] ConceptClassRestriction, @WebParam(name = "graphId") Long graphId) throws WebserviceException {
        try {
            logger.info("filter unconnected called");
            net.sourceforge.ondex.filter.unconnected.Filter filter = new net.sourceforge.ondex.filter.unconnected.Filter();
            logger.info(");Filter created " + filter);
            ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
            logger.info("found graph");
            ONDEXPluginArguments arguments = new ONDEXPluginArguments(filter.getArgumentDefinitions());
            createArguement(filter, arguments, "RemoveTagDependencies", RemoveTagDependencies);
            createArguement(filter, arguments, "ConceptClassRestriction", ConceptClassRestriction);
            logger.info("created arguements");
            FilterJob job = new FilterJob(graph, filter, arguments);
            return job.getJobId().toString();
        } catch (WebserviceException e) {
            throw e;
        } catch (Exception e) {
            throw new CaughtException(e, logger);
        }
    }
}
