package core;

import actors.Enemy;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.UIManager;

/**
 *
 * @author Dirk
 */
public class MapEditor extends javax.swing.JFrame {

    public static final int ACTOR = 0, ENEMY = 1, OBJECT = 2, DELETE = 3;

    private String objectImageLocation = "undefined";

    private Image objectImage;

    private Image backgroundImage;

    private boolean isEditorMode = true;

    private boolean newImageIsLoaded = false;

    private FileSelector fileSelector;

    private Level level;

    private File imageFile;

    private File oldFile;

    /** Creates new form MapEditor */
    public MapEditor(Level level) {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (Exception ex) {
            System.out.println("GUI fail");
        }
        initComponents();
        setSize(370, 500);
        this.level = level;
        setAlwaysOnTop(true);
    }

    public boolean isEditorMode() {
        return isEditorMode;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jSeparator2 = new javax.swing.JSeparator();
        jScrollBar1 = new javax.swing.JScrollBar();
        objectTypeSelector = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        objectName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        objectWidth = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        objectHeight = new javax.swing.JTextField();
        presetBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        healthField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        objectImageSelectorButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jButton5 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(null);
        objectTypeSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Actor", "Enemy", "Object", "Delete" }));
        objectTypeSelector.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectTypeSelectorActionPerformed(evt);
            }
        });
        getContentPane().add(objectTypeSelector);
        objectTypeSelector.setBounds(10, 220, 110, 22);
        jButton1.setFont(new java.awt.Font("Calibri", 0, 12));
        jButton1.setText("Background image");
        getContentPane().add(jButton1);
        jButton1.setBounds(10, 80, 140, 30);
        jLabel2.setFont(new java.awt.Font("Calibri", 1, 12));
        jLabel2.setText("Objects");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 130, 110, 16);
        getContentPane().add(objectName);
        objectName.setBounds(10, 190, 110, 20);
        jLabel3.setFont(new java.awt.Font("Calibri", 0, 12));
        jLabel3.setText("Name");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 170, 50, 20);
        jLabel4.setFont(new java.awt.Font("Calibri", 0, 12));
        jLabel4.setText("Width");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 260, 40, 16);
        objectWidth.setText("64");
        getContentPane().add(objectWidth);
        objectWidth.setBounds(10, 280, 50, 20);
        jLabel5.setFont(new java.awt.Font("Calibri", 0, 12));
        jLabel5.setText("Height");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 310, 40, 16);
        objectHeight.setText("64");
        getContentPane().add(objectHeight);
        objectHeight.setBounds(10, 330, 50, 20);
        presetBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rock", "Tree", "Enemy1" }));
        presetBox.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetBoxActionPerformed(evt);
            }
        });
        getContentPane().add(presetBox);
        presetBox.setBounds(210, 130, 120, 22);
        jLabel6.setFont(new java.awt.Font("Calibri", 0, 12));
        jLabel6.setText("Preset");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(150, 140, 60, 10);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(10, 118, 330, 2);
        healthField.setText("120");
        getContentPane().add(healthField);
        healthField.setBounds(70, 280, 50, 20);
        jLabel7.setFont(new java.awt.Font("Calibri", 0, 12));
        jLabel7.setText("Health");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(70, 260, 60, 16);
        jTextField5.setText("5");
        getContentPane().add(jTextField5);
        jTextField5.setBounds(70, 330, 50, 20);
        jLabel8.setFont(new java.awt.Font("Calibri", 0, 12));
        jLabel8.setText("Attack");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(70, 310, 50, 16);
        jButton3.setText("Save");
        getContentPane().add(jButton3);
        jButton3.setBounds(150, 170, 180, 23);
        jLabel9.setFont(new java.awt.Font("Calibri", 1, 12));
        jLabel9.setText("General settings");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(10, 10, 90, 16);
        objectImageSelectorButton.setFont(new java.awt.Font("Calibri", 0, 12));
        objectImageSelectorButton.setText("Sprite");
        objectImageSelectorButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectImageSelectorButtonActionPerformed(evt);
            }
        });
        getContentPane().add(objectImageSelectorButton);
        objectImageSelectorButton.setBounds(150, 240, 180, 30);
        jButton4.setFont(new java.awt.Font("Calibri", 0, 12));
        jButton4.setText("Background music");
        getContentPane().add(jButton4);
        jButton4.setBounds(10, 40, 140, 30);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(10, 30, 330, 2);
        getContentPane().add(jSeparator4);
        jSeparator4.setBounds(10, 158, 330, 2);
        jButton5.setText("Remove");
        getContentPane().add(jButton5);
        jButton5.setBounds(150, 200, 180, 23);
        jCheckBox1.setText("Is ghost");
        getContentPane().add(jCheckBox1);
        jCheckBox1.setBounds(150, 280, 65, 23);
        jCheckBox2.setText("Has event");
        getContentPane().add(jCheckBox2);
        jCheckBox2.setBounds(150, 300, 75, 23);
        jButton2.setText("Event >>");
        getContentPane().add(jButton2);
        jButton2.setBounds(150, 330, 180, 23);
        jMenu1.setText("File");
        jMenuItem1.setText("New");
        jMenu1.add(jMenuItem1);
        jMenuItem3.setText("Open");
        jMenu1.add(jMenuItem3);
        jMenuItem2.setText("Save");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenuBar1.add(jMenu1);
        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);
        setJMenuBar(jMenuBar1);
        pack();
    }

    private void presetBoxActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void objectImageSelectorButtonActionPerformed(java.awt.event.ActionEvent evt) {
        fileSelector = new FileSelector(imageFile);
        fileSelector.setVisible(true);
        newImageIsLoaded = true;
    }

    private void objectTypeSelectorActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {
    }

    public Image getCurrentImage() {
        if (newImageIsLoaded) {
            try {
                imageFile = fileSelector.getFile();
                objectImage = ImageIO.read(imageFile);
                objectWidth.setText("" + objectImage.getWidth(rootPane));
                objectHeight.setText("" + objectImage.getHeight(rootPane));
                oldFile = imageFile;
                newImageIsLoaded = false;
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
        return objectImage;
    }

    public void addObject(int x, int y) {
        switch(objectTypeSelector.getSelectedIndex()) {
            case ACTOR:
                int hp = 100;
                break;
            case ENEMY:
                actors.Enemy enemy = new actors.Enemy(level, Integer.parseInt(healthField.getText()), x, y);
                enemy.setImage(objectImage, objectImageLocation);
                String imageLocation = fileSelector.getFile().getPath();
                int splitPoint = imageLocation.indexOf("_");
                String filetype = ".gif";
                if (imageLocation.indexOf(".png") > 0) {
                    filetype = ".png";
                }
                String objectImagePart = imageLocation.substring(0, splitPoint);
                for (int i = 0; i < enemy.movingLeft.length; i++) {
                    File imageFileLeft = new File(objectImagePart + "_left_" + (i + 1) + filetype);
                    File imageFileRight = new File(objectImagePart + "_right_" + (i + 1) + filetype);
                    System.out.println(imageFileRight.getAbsolutePath());
                    try {
                        enemy.movingLeft[i] = ImageIO.read(imageFileLeft);
                        enemy.movingRight[i] = ImageIO.read(imageFileRight);
                    } catch (IOException ex) {
                        System.out.println(ex.getMessage());
                    }
                    Enemy.leftSprites = 3;
                    Enemy.rightSprites = 3;
                }
                enemy.setName(objectName.getText());
                enemy.setSize(Integer.parseInt(objectWidth.getText()), Integer.parseInt(objectHeight.getText()));
                enemy.setLocation(x, y);
                enemy.setImage(objectImage, objectImageLocation);
                level.getEnemies().add(enemy);
                level.getEnemies().get(level.getObjects().size() - 1).setLocation(x, y);
                break;
            case OBJECT:
                actors.Object object = new actors.Object();
                object.setName(objectName.getText());
                object.setSize(Integer.parseInt(objectWidth.getText()), Integer.parseInt(objectHeight.getText()));
                object.setLocation(x, y);
                object.setImage(objectImage, objectImageLocation);
                level.getObjects().add(object);
                level.getObjects().get(level.getObjects().size() - 1).setLocation(x, y);
                System.out.println(objectImage.getHeight(rootPane));
                break;
            case DELETE:
                int deleteNumber = 0;
                for (int i = level.getObjects().size() - 1; i > 0; i--) {
                    if (x > level.getObject(i).posX && x < (level.getObject(i).posX + level.getObject(i).width) && y > level.getObject(i).posY && y < (level.getObject(i).posY + level.getObject(i).height + 20)) {
                        level.getObjects().remove(i);
                        break;
                    }
                    deleteNumber++;
                }
        }
    }

    private javax.swing.JTextField healthField;

    private javax.swing.JButton jButton1;

    private javax.swing.JButton jButton2;

    private javax.swing.JButton jButton3;

    private javax.swing.JButton jButton4;

    private javax.swing.JButton jButton5;

    private javax.swing.JCheckBox jCheckBox1;

    private javax.swing.JCheckBox jCheckBox2;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JLabel jLabel4;

    private javax.swing.JLabel jLabel5;

    private javax.swing.JLabel jLabel6;

    private javax.swing.JLabel jLabel7;

    private javax.swing.JLabel jLabel8;

    private javax.swing.JLabel jLabel9;

    private javax.swing.JMenu jMenu1;

    private javax.swing.JMenu jMenu2;

    private javax.swing.JMenuBar jMenuBar1;

    private javax.swing.JMenuItem jMenuItem1;

    private javax.swing.JMenuItem jMenuItem2;

    private javax.swing.JMenuItem jMenuItem3;

    private javax.swing.JScrollBar jScrollBar1;

    private javax.swing.JSeparator jSeparator1;

    private javax.swing.JSeparator jSeparator2;

    private javax.swing.JSeparator jSeparator3;

    private javax.swing.JSeparator jSeparator4;

    private javax.swing.JTextField jTextField5;

    private javax.swing.JTextField objectHeight;

    private javax.swing.JButton objectImageSelectorButton;

    private javax.swing.JTextField objectName;

    private javax.swing.JComboBox objectTypeSelector;

    private javax.swing.JTextField objectWidth;

    private javax.swing.JComboBox presetBox;
}
