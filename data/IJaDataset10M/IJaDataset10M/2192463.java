package org.dmd.dmp.shared.generated.dmo;

import java.io.Serializable;
import java.util.*;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcObject;
import org.dmd.dmc.DmcSliceInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.types.FullyQualifiedName;
import org.dmd.dmp.shared.generated.dmo.RequestDMO;
import org.dmd.dmp.shared.generated.enums.ScopeEnum;
import org.dmd.dmp.shared.generated.types.DmcTypeScopeEnumSV;
import org.dmd.dms.generated.dmo.MetaDMSAG;
import org.dmd.dms.generated.types.DmcTypeDmcObjectMV;
import org.dmd.dms.generated.types.DmcTypeDmcObjectSV;
import org.dmd.dms.generated.types.DmcTypeFullyQualifiedNameSV;
import org.dmd.dms.generated.types.DmcTypeModifierMV;
import org.dmd.dms.generated.types.DmcTypeStringSV;
import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The ActionRequest is used to trigger behaviour on one or more objects.
 * <P>
 * Generated from the dmp schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class ActionRequestDMO extends RequestDMO implements Serializable {

    public static final String constructionClassName = "ActionRequest";

    static Map<Integer, HashMap<String, DmcAttributeValidator>> _AvDmAp;

    static Map<String, DmcObjectValidator> _OvDmAp;

    static {
        _AvDmAp = new HashMap<Integer, HashMap<String, DmcAttributeValidator>>();
        _OvDmAp = new HashMap<String, DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(), MetaVCAG.__AttributeSetValidator);
    }

    public ActionRequestDMO() {
        super("ActionRequest");
    }

    protected ActionRequestDMO(String oc) {
        super(oc);
    }

    protected Map<Integer, HashMap<String, DmcAttributeValidator>> getAttributeValidators() {
        return (_AvDmAp);
    }

    protected Map<String, DmcObjectValidator> getObjectValidators() {
        return (_OvDmAp);
    }

    @Override
    public ActionRequestDMO getNew() {
        ActionRequestDMO rc = new ActionRequestDMO();
        return (rc);
    }

    @Override
    public ActionRequestDMO getSlice(DmcSliceInfo info) {
        ActionRequestDMO rc = new ActionRequestDMO();
        populateSlice(rc, info);
        return (rc);
    }

    public ActionRequestDMO(DmcTypeModifierMV mods) {
        super("ActionRequest");
        modrec(true);
        setModifier(mods);
    }

    public ActionRequestDMO getModificationRecorder() {
        ActionRequestDMO rc = new ActionRequestDMO();
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return (rc);
    }

    public ScopeEnum getScope() {
        DmcTypeScopeEnumSV attr = (DmcTypeScopeEnumSV) get(DmpDMSAG.__scope);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setScope(ScopeEnum value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__scope);
        if (attr == null) attr = new DmcTypeScopeEnumSV(DmpDMSAG.__scope);
        try {
            attr.set(value);
            set(DmpDMSAG.__scope, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setScope(Object value) throws DmcValueException {
        DmcTypeScopeEnumSV attr = (DmcTypeScopeEnumSV) get(DmpDMSAG.__scope);
        if (attr == null) attr = new DmcTypeScopeEnumSV(DmpDMSAG.__scope);
        attr.set(value);
        set(DmpDMSAG.__scope, attr);
    }

    public void remScope() {
        rem(DmpDMSAG.__scope);
    }

    /**
     * @return An Iterator of DmcObject objects.
     */
    @SuppressWarnings("unchecked")
    public Iterator<DmcObject> getObjectList() {
        DmcTypeDmcObjectMV attr = (DmcTypeDmcObjectMV) get(DmpDMSAG.__objectList);
        if (attr == null) return (((List<DmcObject>) Collections.EMPTY_LIST).iterator());
        return (attr.getMV());
    }

    public DmcObject getNthObjectList(int i) {
        DmcTypeDmcObjectMV attr = (DmcTypeDmcObjectMV) get(DmpDMSAG.__objectList);
        if (attr == null) return (null);
        return (attr.getMVnth(i));
    }

    public DmcAttribute<?> addObjectList(DmcObject value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__objectList);
        if (attr == null) attr = new DmcTypeDmcObjectMV(DmpDMSAG.__objectList);
        try {
            setLastValue(attr.add(value));
            add(DmpDMSAG.__objectList, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific add() method shouldn't throw exceptions!", ex));
        }
        return (attr);
    }

    public boolean objectListContains(DmcObject value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__objectList);
        if (attr == null) return (false);
        return (attr.contains(value));
    }

    public DmcAttribute<?> addObjectList(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmpDMSAG.__objectList);
        if (attr == null) attr = new DmcTypeDmcObjectMV(DmpDMSAG.__objectList);
        setLastValue(attr.add(value));
        add(DmpDMSAG.__objectList, attr);
        return (attr);
    }

    public int getObjectListSize() {
        DmcAttribute<?> attr = get(DmpDMSAG.__objectList);
        if (attr == null) {
            if (DmpDMSAG.__objectList.indexSize == 0) return (0); else return (DmpDMSAG.__objectList.indexSize);
        }
        return (attr.getMVSize());
    }

    public DmcAttribute<?> delObjectList(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmpDMSAG.__objectList);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeDmcObjectMV(DmpDMSAG.__objectList), value); else attr = del(DmpDMSAG.__objectList, value);
        return (attr);
    }

    public DmcAttribute<?> delObjectList(DmcObject value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__objectList);
        if ((attr == null) && (getModifier() != null)) delFromEmptyAttribute(new DmcTypeDmcObjectMV(DmpDMSAG.__objectList), value); else attr = del(DmpDMSAG.__objectList, value);
        return (attr);
    }

    public void remObjectList() {
        rem(DmpDMSAG.__objectList);
    }

    public DmcObject getActionTrigger() {
        DmcTypeDmcObjectSV attr = (DmcTypeDmcObjectSV) get(DmpDMSAG.__actionTrigger);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setActionTrigger(DmcObject value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__actionTrigger);
        if (attr == null) attr = new DmcTypeDmcObjectSV(DmpDMSAG.__actionTrigger);
        try {
            attr.set(value);
            set(DmpDMSAG.__actionTrigger, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setActionTrigger(Object value) throws DmcValueException {
        DmcTypeDmcObjectSV attr = (DmcTypeDmcObjectSV) get(DmpDMSAG.__actionTrigger);
        if (attr == null) attr = new DmcTypeDmcObjectSV(DmpDMSAG.__actionTrigger);
        attr.set(value);
        set(DmpDMSAG.__actionTrigger, attr);
    }

    public void remActionTrigger() {
        rem(DmpDMSAG.__actionTrigger);
    }

    public FullyQualifiedName getFQN() {
        DmcTypeFullyQualifiedNameSV attr = (DmcTypeFullyQualifiedNameSV) get(MetaDMSAG.__FQN);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setFQN(FullyQualifiedName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__FQN);
        if (attr == null) attr = new DmcTypeFullyQualifiedNameSV(MetaDMSAG.__FQN);
        try {
            attr.set(value);
            set(MetaDMSAG.__FQN, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setFQN(Object value) throws DmcValueException {
        DmcTypeFullyQualifiedNameSV attr = (DmcTypeFullyQualifiedNameSV) get(MetaDMSAG.__FQN);
        if (attr == null) attr = new DmcTypeFullyQualifiedNameSV(MetaDMSAG.__FQN);
        attr.set(value);
        set(MetaDMSAG.__FQN, attr);
    }

    public void remFQN() {
        rem(MetaDMSAG.__FQN);
    }

    public String getActionName() {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmpDMSAG.__actionName);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setActionName(String value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__actionName);
        if (attr == null) attr = new DmcTypeStringSV(DmpDMSAG.__actionName);
        try {
            attr.set(value);
            set(DmpDMSAG.__actionName, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setActionName(Object value) throws DmcValueException {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmpDMSAG.__actionName);
        if (attr == null) attr = new DmcTypeStringSV(DmpDMSAG.__actionName);
        attr.set(value);
        set(DmpDMSAG.__actionName, attr);
    }

    public void remActionName() {
        rem(DmpDMSAG.__actionName);
    }
}
