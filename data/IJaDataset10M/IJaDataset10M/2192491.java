package traitmap.om;

import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;
import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Aug 26 18:21:51 JST 2003]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Project
 */
public abstract class BaseProject extends BaseObject {

    /** The Peer class */
    private static final ProjectPeer peer = new ProjectPeer();

    /**
         * The value for the project_id field
         */
    private int project_id;

    /**
         * The value for the project_name field
         */
    private String project_name;

    /**
         * The value for the category_file_path field
         */
    private String category_file_path;

    /**
         * Get the ProjectId
         *
         * @return int
         */
    public int getProjectId() {
        return project_id;
    }

    /**
         * Set the value of ProjectId
         *
         * @param v new value
         */
    public void setProjectId(int v) throws TorqueException {
        if (this.project_id != v) {
            this.project_id = v;
            setModified(true);
        }
        if (collProjectUrls != null) {
            for (int i = 0; i < collProjectUrls.size(); i++) {
                ((ProjectUrl) collProjectUrls.get(i)).setProjectId(v);
            }
        }
        if (collUserInfos != null) {
            for (int i = 0; i < collUserInfos.size(); i++) {
                ((UserInfo) collUserInfos.get(i)).setProjectId(v);
            }
        }
    }

    /**
         * Get the ProjectName
         *
         * @return String
         */
    public String getProjectName() {
        return project_name;
    }

    /**
         * Set the value of ProjectName
         *
         * @param v new value
         */
    public void setProjectName(String v) {
        if (!ObjectUtils.equals(this.project_name, v)) {
            this.project_name = v;
            setModified(true);
        }
    }

    /**
         * Get the CategoryFilePath
         *
         * @return String
         */
    public String getCategoryFilePath() {
        return category_file_path;
    }

    /**
         * Set the value of CategoryFilePath
         *
         * @param v new value
         */
    public void setCategoryFilePath(String v) {
        if (!ObjectUtils.equals(this.category_file_path, v)) {
            this.category_file_path = v;
            setModified(true);
        }
    }

    /**
     * Collection to store aggregation of collProjectUrls
     */
    protected List collProjectUrls;

    /**
     * Temporary storage of collProjectUrls to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initProjectUrls() {
        if (collProjectUrls == null) {
            collProjectUrls = new ArrayList();
        }
    }

    /**
     * Method called to associate a ProjectUrl object to this object
     * through the ProjectUrl foreign key attribute
     *
     * @param l ProjectUrl
     * @throws TorqueException
     */
    public void addProjectUrl(ProjectUrl l) throws TorqueException {
        getProjectUrls().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collProjectUrls
     */
    private Criteria lastProjectUrlsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectUrls(new Criteria())
     *
     * @throws TorqueException
     */
    public List getProjectUrls() throws TorqueException {
        if (collProjectUrls == null) {
            collProjectUrls = getProjectUrls(new Criteria(10));
        }
        return collProjectUrls;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ProjectUrls from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getProjectUrls(Criteria criteria) throws TorqueException {
        if (collProjectUrls == null) {
            if (isNew()) {
                collProjectUrls = new ArrayList();
            } else {
                criteria.add(ProjectUrlPeer.PROJECT_ID, getProjectId());
                collProjectUrls = ProjectUrlPeer.doSelect(criteria);
            }
        } else {
            if (!isNew()) {
                criteria.add(ProjectUrlPeer.PROJECT_ID, getProjectId());
                if (!lastProjectUrlsCriteria.equals(criteria)) {
                    collProjectUrls = ProjectUrlPeer.doSelect(criteria);
                }
            }
        }
        lastProjectUrlsCriteria = criteria;
        return collProjectUrls;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectUrls(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectUrls(Connection con) throws TorqueException {
        if (collProjectUrls == null) {
            collProjectUrls = getProjectUrls(new Criteria(10), con);
        }
        return collProjectUrls;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ProjectUrls from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectUrls(Criteria criteria, Connection con) throws TorqueException {
        if (collProjectUrls == null) {
            if (isNew()) {
                collProjectUrls = new ArrayList();
            } else {
                criteria.add(ProjectUrlPeer.PROJECT_ID, getProjectId());
                collProjectUrls = ProjectUrlPeer.doSelect(criteria, con);
            }
        } else {
            if (!isNew()) {
                criteria.add(ProjectUrlPeer.PROJECT_ID, getProjectId());
                if (!lastProjectUrlsCriteria.equals(criteria)) {
                    collProjectUrls = ProjectUrlPeer.doSelect(criteria, con);
                }
            }
        }
        lastProjectUrlsCriteria = criteria;
        return collProjectUrls;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ProjectUrls from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getProjectUrlsJoinProject(Criteria criteria) throws TorqueException {
        if (collProjectUrls == null) {
            if (isNew()) {
                collProjectUrls = new ArrayList();
            } else {
                criteria.add(ProjectUrlPeer.PROJECT_ID, getProjectId());
                collProjectUrls = ProjectUrlPeer.doSelectJoinProject(criteria);
            }
        } else {
            boolean newCriteria = true;
            criteria.add(ProjectUrlPeer.PROJECT_ID, getProjectId());
            if (!lastProjectUrlsCriteria.equals(criteria)) {
                collProjectUrls = ProjectUrlPeer.doSelectJoinProject(criteria);
            }
        }
        lastProjectUrlsCriteria = criteria;
        return collProjectUrls;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ProjectUrls from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getProjectUrlsJoinAccessControlUrl(Criteria criteria) throws TorqueException {
        if (collProjectUrls == null) {
            if (isNew()) {
                collProjectUrls = new ArrayList();
            } else {
                criteria.add(ProjectUrlPeer.PROJECT_ID, getProjectId());
                collProjectUrls = ProjectUrlPeer.doSelectJoinAccessControlUrl(criteria);
            }
        } else {
            boolean newCriteria = true;
            criteria.add(ProjectUrlPeer.PROJECT_ID, getProjectId());
            if (!lastProjectUrlsCriteria.equals(criteria)) {
                collProjectUrls = ProjectUrlPeer.doSelectJoinAccessControlUrl(criteria);
            }
        }
        lastProjectUrlsCriteria = criteria;
        return collProjectUrls;
    }

    /**
     * Collection to store aggregation of collUserInfos
     */
    protected List collUserInfos;

    /**
     * Temporary storage of collUserInfos to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUserInfos() {
        if (collUserInfos == null) {
            collUserInfos = new ArrayList();
        }
    }

    /**
     * Method called to associate a UserInfo object to this object
     * through the UserInfo foreign key attribute
     *
     * @param l UserInfo
     * @throws TorqueException
     */
    public void addUserInfo(UserInfo l) throws TorqueException {
        getUserInfos().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collUserInfos
     */
    private Criteria lastUserInfosCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserInfos(new Criteria())
     *
     * @throws TorqueException
     */
    public List getUserInfos() throws TorqueException {
        if (collUserInfos == null) {
            collUserInfos = getUserInfos(new Criteria(10));
        }
        return collUserInfos;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related UserInfos from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getUserInfos(Criteria criteria) throws TorqueException {
        if (collUserInfos == null) {
            if (isNew()) {
                collUserInfos = new ArrayList();
            } else {
                criteria.add(UserInfoPeer.PROJECT_ID, getProjectId());
                collUserInfos = UserInfoPeer.doSelect(criteria);
            }
        } else {
            if (!isNew()) {
                criteria.add(UserInfoPeer.PROJECT_ID, getProjectId());
                if (!lastUserInfosCriteria.equals(criteria)) {
                    collUserInfos = UserInfoPeer.doSelect(criteria);
                }
            }
        }
        lastUserInfosCriteria = criteria;
        return collUserInfos;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserInfos(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUserInfos(Connection con) throws TorqueException {
        if (collUserInfos == null) {
            collUserInfos = getUserInfos(new Criteria(10), con);
        }
        return collUserInfos;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related UserInfos from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUserInfos(Criteria criteria, Connection con) throws TorqueException {
        if (collUserInfos == null) {
            if (isNew()) {
                collUserInfos = new ArrayList();
            } else {
                criteria.add(UserInfoPeer.PROJECT_ID, getProjectId());
                collUserInfos = UserInfoPeer.doSelect(criteria, con);
            }
        } else {
            if (!isNew()) {
                criteria.add(UserInfoPeer.PROJECT_ID, getProjectId());
                if (!lastUserInfosCriteria.equals(criteria)) {
                    collUserInfos = UserInfoPeer.doSelect(criteria, con);
                }
            }
        }
        lastUserInfosCriteria = criteria;
        return collUserInfos;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related UserInfos from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getUserInfosJoinProject(Criteria criteria) throws TorqueException {
        if (collUserInfos == null) {
            if (isNew()) {
                collUserInfos = new ArrayList();
            } else {
                criteria.add(UserInfoPeer.PROJECT_ID, getProjectId());
                collUserInfos = UserInfoPeer.doSelectJoinProject(criteria);
            }
        } else {
            boolean newCriteria = true;
            criteria.add(UserInfoPeer.PROJECT_ID, getProjectId());
            if (!lastUserInfosCriteria.equals(criteria)) {
                collUserInfos = UserInfoPeer.doSelectJoinProject(criteria);
            }
        }
        lastUserInfosCriteria = criteria;
        return collUserInfos;
    }

    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames() {
        if (fieldNames == null) {
            fieldNames = new ArrayList();
            fieldNames.add("ProjectId");
            fieldNames.add("ProjectName");
            fieldNames.add("CategoryFilePath");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name) {
        if (name.equals("ProjectId")) {
            return new Integer(getProjectId());
        }
        if (name.equals("ProjectName")) {
            return getProjectName();
        }
        if (name.equals("CategoryFilePath")) {
            return getCategoryFilePath();
        }
        return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name) {
        if (name.equals(ProjectPeer.PROJECT_ID)) {
            return new Integer(getProjectId());
        }
        if (name.equals(ProjectPeer.PROJECT_NAME)) {
            return getProjectName();
        }
        if (name.equals(ProjectPeer.CATEGORY_FILE_PATH)) {
            return getCategoryFilePath();
        }
        return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos) {
        if (pos == 0) {
            return new Integer(getProjectId());
        }
        if (pos == 1) {
            return getProjectName();
        }
        if (pos == 2) {
            return getCategoryFilePath();
        }
        return null;
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception {
        save(ProjectPeer.getMapBuilder().getDatabaseMap().getName());
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException {
        Connection con = null;
        try {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        } catch (TorqueException e) {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException {
        if (!alreadyInSave) {
            alreadyInSave = true;
            if (isModified()) {
                if (isNew()) {
                    ProjectPeer.doInsert((Project) this, con);
                    setNew(false);
                } else {
                    ProjectPeer.doUpdate((Project) this, con);
                }
            }
            if (collProjectUrls != null) {
                for (int i = 0; i < collProjectUrls.size(); i++) {
                    ((ProjectUrl) collProjectUrls.get(i)).save(con);
                }
            }
            if (collUserInfos != null) {
                for (int i = 0; i < collUserInfos.size(); i++) {
                    ((UserInfo) collUserInfos.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }

    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  project_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException {
        setProjectId(((NumberKey) key).intValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException {
        setProjectId(Integer.parseInt(key));
    }

    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey() {
        return SimpleKey.keyFor(getProjectId());
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Project copy() throws TorqueException {
        return copyInto(new Project());
    }

    protected Project copyInto(Project copyObj) throws TorqueException {
        copyObj.setProjectId(project_id);
        copyObj.setProjectName(project_name);
        copyObj.setCategoryFilePath(category_file_path);
        copyObj.setProjectId(0);
        List v = getProjectUrls();
        for (int i = 0; i < v.size(); i++) {
            ProjectUrl obj = (ProjectUrl) v.get(i);
            copyObj.addProjectUrl(obj.copy());
        }
        v = getUserInfos();
        for (int i = 0; i < v.size(); i++) {
            UserInfo obj = (UserInfo) v.get(i);
            copyObj.addUserInfo(obj.copy());
        }
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ProjectPeer getPeer() {
        return peer;
    }
}
