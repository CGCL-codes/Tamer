package nl.vu.cs.pato.gui;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Properties;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 * The main window of the Pato GUI.
 *
 * @version $Rev: 255 $
 * @author Maarten Menken
 */
public class MainWindow extends JFrame {

    private static final File LOGGING_PROPERTIES_FILE = new File("logging.properties");

    private static Logger myLogger = Logger.getLogger(MainWindow.class.getName());

    private static File defaultSettingsFile;

    private static File settingsFile;

    private static final long serialVersionUID = 1L;

    private AboutDialog aboutDialog;

    protected GraphFrame graphFrame;

    protected LogMessageHandler messageHandler;

    private KifConversionPanel kifConversionPanel;

    protected IslandCreationPanel islandCreationPanel;

    private MainWindowPanel ontologyConversionPanel;

    protected SimilarityMeasurementPanel similarityMeasurementPanel;

    static {
        try {
            URL fileUrl = MainWindow.class.getResource("defaults.properties");
            if (fileUrl != null) {
                defaultSettingsFile = new File(fileUrl.toURI());
            }
            fileUrl = MainWindow.class.getResource("settings.properties");
            if (fileUrl == null) {
                fileUrl = MainWindow.class.getResource(".");
                settingsFile = new File(new File(fileUrl.toURI()), "settings.properties");
            } else {
                settingsFile = new File(fileUrl.toURI());
            }
        } catch (URISyntaxException e) {
            e.printStackTrace(System.err);
        }
    }

    /**
     * Creates the main window of the Pato GUI.
     */
    public MainWindow() {
        initComponents();
        aboutDialog = new AboutDialog(this, true);
        graphFrame = new GraphFrame(this);
        Logger.getLogger(MainWindow.class.getName()).addHandler(messageHandler);
        if (settingsFile.exists()) {
            myLogger.info("Found a previous settings file. Loading the previous settings.");
            loadSettings(settingsFile);
        } else {
            myLogger.info("A previous settings file could not be found. You are probably running the Pato GUI for the first time. Loading the default settings.");
            loadSettings(defaultSettingsFile);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        mainTabbedPane = new javax.swing.JTabbedPane();
        messagePanel = new javax.swing.JPanel();
        messageScrollPane = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        graphMenuItem = new javax.swing.JCheckBoxMenuItem();
        settingsMenu = new javax.swing.JMenu();
        resetMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        getContentPane().setLayout(new java.awt.GridBagLayout());
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pato");
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        mainTabbedPane.setPreferredSize(new java.awt.Dimension(800, 600));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.6;
        getContentPane().add(mainTabbedPane, gridBagConstraints);
        messagePanel.setLayout(new java.awt.GridBagLayout());
        messagePanel.setBorder(new javax.swing.border.TitledBorder("Messages"));
        messagePanel.setPreferredSize(new java.awt.Dimension(800, 100));
        messageTextArea.setEditable(false);
        messageTextArea.setLineWrap(true);
        messageTextArea.setWrapStyleWord(true);
        messageHandler = new LogMessageHandler(messageTextArea);
        ontologyConversionPanel = new OntologyConversionPanel(this);
        kifConversionPanel = new KifConversionPanel(this);
        islandCreationPanel = new IslandCreationPanel(this);
        similarityMeasurementPanel = new SimilarityMeasurementPanel(this);
        mainTabbedPane.addTab("Ontology conversion", ontologyConversionPanel);
        mainTabbedPane.addTab("KIF conversion", kifConversionPanel);
        mainTabbedPane.addTab("Island creation", islandCreationPanel);
        mainTabbedPane.addTab("Similarity measurement", similarityMeasurementPanel);
        messageScrollPane.setViewportView(messageTextArea);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        messagePanel.add(messageScrollPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.4;
        getContentPane().add(messagePanel, gridBagConstraints);
        fileMenu.setText("File");
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);
        mainMenuBar.add(fileMenu);
        viewMenu.setText("View");
        graphMenuItem.setText("Graph");
        graphMenuItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(graphMenuItem);
        mainMenuBar.add(viewMenu);
        settingsMenu.setText("Settings");
        resetMenuItem.setText("Reset settings...");
        resetMenuItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(resetMenuItem);
        mainMenuBar.add(settingsMenu);
        helpMenu.setText("Help");
        aboutMenuItem.setText("About...");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);
        mainMenuBar.add(helpMenu);
        setJMenuBar(mainMenuBar);
        pack();
    }

    private void graphMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (graphMenuItem.isSelected()) {
            graphFrame.setVisible(true);
        } else {
            graphFrame.setVisible(false);
        }
    }

    private void resetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to reset all settings to their default values?", "Reset settings", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
            myLogger.info("Resetting all settings to their default values");
            loadSettings(defaultSettingsFile);
        }
    }

    private void storeSettings() throws FileNotFoundException, IOException {
        Properties properties = new Properties();
        properties.put("main window - selected tab", Integer.toString(mainTabbedPane.getSelectedIndex()));
        ontologyConversionPanel.storeSettings(properties);
        kifConversionPanel.storeSettings(properties);
        islandCreationPanel.storeSettings(properties);
        similarityMeasurementPanel.storeSettings(properties);
        properties.store(new FileOutputStream(MainWindow.settingsFile), null);
    }

    private void loadSettings(File settingsFile) {
        try {
            Properties properties = new Properties();
            properties.load(new FileInputStream(settingsFile));
            mainTabbedPane.setSelectedIndex(Integer.parseInt(properties.getProperty("main window - selected tab")));
            ontologyConversionPanel.loadSettings(properties);
            kifConversionPanel.loadSettings(properties);
            islandCreationPanel.loadSettings(properties);
            similarityMeasurementPanel.loadSettings(properties);
        } catch (IOException e) {
            e.printStackTrace(System.err);
            myLogger.severe(e.getMessage());
            myLogger.severe("An I/O error occurred while reading the settings file.");
            JOptionPane.showMessageDialog(this, "An I/O error occurred while reading the settings file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        try {
            storeSettings();
        } catch (IOException e) {
            e.printStackTrace(System.err);
            myLogger.severe(e.getMessage());
            myLogger.severe("An I/O error occurred while writing the settings file.");
            JOptionPane.showMessageDialog(this, "An I/O error occurred while writing the settings file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void aboutMenuItemActionPerformed(ActionEvent evt) {
        aboutDialog.setLocationRelativeTo(this);
        aboutDialog.setVisible(true);
    }

    private void exitMenuItemActionPerformed(ActionEvent evt) {
        this.dispose();
    }

    private static void setLookAndFeel() {
        if (System.getProperty("os.name").startsWith("Windows")) {
            try {
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            } catch (Exception e) {
                e.printStackTrace(System.err);
            }
        }
        JFrame.setDefaultLookAndFeelDecorated(true);
    }

    private static void createAndShowGui() {
        if (LOGGING_PROPERTIES_FILE.exists()) {
            try {
                LogManager.getLogManager().readConfiguration(new FileInputStream(LOGGING_PROPERTIES_FILE));
            } catch (IOException e) {
                e.printStackTrace(System.err);
                myLogger.severe(e.getMessage());
                myLogger.severe("An I/O error occurred while reading the logging configuration.");
                JOptionPane.showMessageDialog(null, "An I/O error occurred while reading the logging configuration.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
        setLookAndFeel();
        MainWindow mainWindow = new MainWindow();
        mainWindow.setVisible(true);
    }

    /**
     * Creates and shows the main window of the Pato GUI.
     *
     * @param args
     *            the command-line arguments
     */
    public static void main(String args[]) {
        EventQueue.invokeLater(new Runnable() {

            public void run() {
                createAndShowGui();
            }
        });
    }

    private javax.swing.JMenuItem aboutMenuItem;

    private javax.swing.JMenuItem exitMenuItem;

    private javax.swing.JMenu fileMenu;

    protected javax.swing.JCheckBoxMenuItem graphMenuItem;

    private javax.swing.JMenu helpMenu;

    private javax.swing.JMenuBar mainMenuBar;

    private javax.swing.JTabbedPane mainTabbedPane;

    private javax.swing.JPanel messagePanel;

    private javax.swing.JScrollPane messageScrollPane;

    private javax.swing.JTextArea messageTextArea;

    private javax.swing.JMenuItem resetMenuItem;

    private javax.swing.JMenu settingsMenu;

    private javax.swing.JMenu viewMenu;
}
