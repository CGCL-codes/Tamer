package org.pushingpixels.substance.internal.contrib.randelshofer.quaqua.colorchooser;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.plaf.*;
import org.pushingpixels.substance.internal.contrib.randelshofer.quaqua.*;

/**
 * QuaquaColorPreviewPanel.
 *
 * @author  Werner Randelshofer
 * @version 1.2 2005-12-18 Tweaked insets.
 * <br>1.1 2005-09-20 Added tooltip. This is not what the native 
 * NSColorPicker does, but it is very useful.
 * <br>1.0  30 March 2005  Created.
 */
public class QuaquaColorPreviewPanel extends JPanel implements UIResource {

    private static final Color previewBorderColor = new Color(0x949494);

    private static final Color previewBackgroundColor = new Color(0xffffff);

    /** Creates new form. */
    public QuaquaColorPreviewPanel() {
        initComponents();
        setBorder(new VisualMargin(3, 0, 3, 0));
        setToolTipText("on");
    }

    public void paintComponent(Graphics g) {
        Insets insets = getInsets();
        int x = insets.left;
        int y = insets.top;
        int w = getWidth() - insets.left - insets.right;
        int h = getHeight() - insets.top - insets.bottom;
        g.setColor(previewBackgroundColor);
        g.fillRect(x + 1, y + 1, w - 2, h - 2);
        g.setColor(previewBorderColor);
        g.drawRect(x, y, w - 1, h - 1);
        g.setColor(getForeground());
        g.fillRect(x + 2, y + 2, w - 4, h - 4);
    }

    public String getToolTipText(MouseEvent evt) {
        Color color = getForeground();
        return (color == null) ? null : color.getRed() + ", " + color.getGreen() + ", " + color.getBlue();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        setLayout(new java.awt.BorderLayout());
        setPreferredSize(new java.awt.Dimension(26, 26));
    }
}
