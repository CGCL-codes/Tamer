package ejb.bprocess.circulation;

import javax.ejb.*;

/**
 * Created Jul 11, 2003 2:37:55 PM
 * Code generated by the Sun ONE Studio EJB Builder
 * @author administrator
 */
public class MailDispatchToILLPatronBean implements javax.ejb.SessionBean {

    private javax.ejb.SessionContext context;

    private ejb.bprocess.util.Utility utility = null;

    private ejb.bprocess.util.HomeFactory homeFactory = null;

    private ejb.bprocess.util.NewGenXMLGenerator newGenXMLGenerator = null;

    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context = aContext;
        utility = ejb.bprocess.util.Utility.getInstance();
        homeFactory = ejb.bprocess.util.HomeFactory.getInstance();
        newGenXMLGenerator = ejb.bprocess.util.NewGenXMLGenerator.getInstance();
    }

    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {
    }

    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {
    }

    public java.lang.String updateDatabase(java.lang.String xmlStr) {
        java.util.Hashtable htReturn = new java.util.Hashtable();
        java.util.Hashtable ht = newGenXMLGenerator.parseXMLDocument(xmlStr);
        Integer libID = new Integer("" + ht.get("LibraryID"));
        Integer reqID = new Integer("" + ht.get("RequestID"));
        String status = "" + ht.get("Status");
        String entryID = "" + ht.get("EntryID");
        java.sql.Timestamp entryDate = utility.getTimestamp("" + ht.get("EntryDate"));
        String barcode = "";
        String matType = "";
        if (ht.get("Barcode") != null) {
            barcode = "" + ht.get("Barcode");
            matType = "" + ht.get("MaterialType");
        }
        String reason = "";
        if (ht.get("Reason") != null) {
            reason = "" + ht.get("Reason");
        }
        ejb.objectmodel.circulation.CIR_ILL_REQUESTKey key = new ejb.objectmodel.circulation.CIR_ILL_REQUESTKey();
        key.library_Id = libID;
        key.request_Id = reqID;
        ejb.objectmodel.circulation.LocalCIR_ILL_REQUEST local = null;
        try {
            local = ((ejb.objectmodel.circulation.LocalCIR_ILL_REQUESTHome) homeFactory.getHome("CIR_ILL_REQUEST")).findByPrimaryKey(key);
            if (local.getOther_Ill_Library_Id() != null) {
                if (barcode.length() > 0 && matType.length() > 0) {
                    ((ejb.objectmodel.cataloguing.LocalDocumentHome) homeFactory.getHome("Document")).create(barcode, libID, new Integer(utility.getMaterialTypeID(matType)), "B", "" + ht.get("EntryID"), entryDate, libID);
                }
                System.out.println("updating cir_ill_request serve_reject_date");
                local.setServe_Reject_Date(entryDate);
            }
            if (status.equals("F")) {
                if (barcode.length() > 0) {
                    local.setAccession_Number(barcode);
                    local.setDocument_Library_Id(libID);
                }
                local.setStatus("B");
            } else {
                if (reason.length() > 0) {
                    local.setReject_Reason(reason);
                    local.setServe_Reject_Date(entryDate);
                }
                local.setStatus("K");
            }
            local.setNotice1_Date(utility.getTimestamp("" + ht.get("EntryDate")));
            if (status.equals("F")) {
                String formtitle = "";
                String formLetter = "";
                String printsts = "";
                String emailsts = "";
                String instantmsgsts = "";
                String patronID = local.getPatron_Id();
                String strData = " " + "\n";
                javax.swing.text.GapContent gTitle = new javax.swing.text.GapContent(5);
                javax.swing.text.GapContent gAuthor = new javax.swing.text.GapContent(6);
                javax.swing.text.GapContent gPatron = new javax.swing.text.GapContent(16);
                javax.swing.text.GapContent gEdition = new javax.swing.text.GapContent(7);
                javax.swing.text.GapContent gISBN = new javax.swing.text.GapContent(4);
                javax.swing.text.GapContent gPublisher = new javax.swing.text.GapContent(9);
                String auth = "Title";
                gTitle.insertString(0, auth);
                auth = "Author";
                gAuthor.insertString(0, auth);
                auth = "Requester of ILL";
                gPatron.insertString(0, auth);
                auth = "Edition";
                gEdition.insertString(0, auth);
                auth = "ISBN";
                gISBN.insertString(0, auth);
                auth = "Publisher";
                gPublisher.insertString(0, auth);
                try {
                    strData += gTitle.getString(0, 5) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                try {
                    strData += gAuthor.getString(0, 6) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                try {
                    strData += gPatron.getString(0, 16) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                try {
                    strData += gEdition.getString(0, 7) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                try {
                    strData += gISBN.getString(0, 4) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                try {
                    strData += gPublisher.getString(0, 9) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                strData = strData;
                ejb.objectmodel.administration.LocalLibrary localLibrary = null;
                localLibrary = ((ejb.objectmodel.administration.LocalLibraryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Library")).findByPrimaryKey(libID);
                String libraryName = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getLibrary_Name());
                String laddress1 = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getAddress1());
                String laddress2 = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getAddress2());
                String lcity = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getCity());
                String lstate = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getState());
                String lcountry = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getCountry());
                String lpin = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getPin());
                ejb.objectmodel.administration.PatronKey patronKey = new ejb.objectmodel.administration.PatronKey();
                patronKey.library_Id = libID;
                patronKey.patron_Id = patronID;
                ejb.objectmodel.administration.LocalPatron localPatron = null;
                localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getInstance().getHome("Patron")).findByPrimaryKey(patronKey);
                String patronName = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getFname()) + " " + ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getMname()) + " " + ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getLname());
                String address1 = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getAddress1());
                String address2 = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getAddress2());
                String city = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getCity());
                String state = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getState());
                String country = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getCountry());
                String pin = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getPin());
                String email = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getEmail());
                String commPrint = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getComm_Print());
                String commEmail = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getComm_Email());
                String commInst = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getComm_Instant_Msg());
                Integer deptId = localPatron.getDept_Id();
                String deptName = "";
                ejb.objectmodel.administration.DEPTKey deptKey = new ejb.objectmodel.administration.DEPTKey();
                deptKey.dept_Id = deptId;
                deptKey.library_Id = libID;
                ejb.objectmodel.administration.LocalDEPT localDept = null;
                try {
                    localDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByPrimaryKey(deptKey);
                    deptName = ejb.bprocess.util.Utility.getInstance().getTestedString(localDept.getDept_Name());
                } catch (javax.ejb.FinderException ex) {
                    ex.printStackTrace();
                }
                String print = "";
                if (commPrint.equals("Y")) {
                    print = "N";
                } else if (commPrint.equals("N")) {
                    print = "A";
                }
                String emailid = "";
                if (commEmail.equals("Y")) {
                    emailid = "N";
                } else if (commEmail.equals("N")) {
                    emailid = "A";
                }
                String instant = "";
                if (commInst.equals("Y")) {
                    instant = "N";
                } else if (commInst.equals("N")) {
                    instant = "A";
                }
                java.util.Hashtable patronDetails = ejb.bprocess.util.Utility.getInstance().getPatronDetails(entryID, libID);
                String patronName1 = utility.getTestedString(patronDetails.get("PatronName").toString());
                ejb.objectmodel.administration.FORM_LETTER_FORMATKey formKey = new ejb.objectmodel.administration.FORM_LETTER_FORMATKey();
                formKey.library_Id = libID;
                formKey.format_Id = new Integer(5);
                ejb.objectmodel.administration.LocalFORM_LETTER_FORMAT localFormat = ((ejb.objectmodel.administration.LocalFORM_LETTER_FORMATHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("FORM_LETTER_FORMAT")).findByPrimaryKey(formKey);
                String format = utility.getTestedString(localFormat.getFormat());
                String maxNo = utility.getTestedString(localFormat.getMax_No());
                String noofprints = utility.getTestedString(localFormat.getPrint_Copies());
                if (noofprints.equals("") && noofprints.equals("0")) {
                    htReturn.put("PrintCopies", "0");
                } else {
                    htReturn.put("PrintCopies", noofprints.toString());
                }
                Integer refnumber = new Integer(0);
                if (!maxNo.equals("")) {
                    refnumber = localFormat.getMax_No();
                }
                formtitle = utility.getTestedString(localFormat.getTitle());
                String printstatus = utility.getTestedString(localFormat.getPrint_Status());
                if (printstatus.equals("A")) {
                    printsts = "B";
                } else if (printstatus.equals("B")) {
                    printsts = "C";
                }
                String emailstaus = utility.getTestedString(localFormat.getEmail_Status());
                if (emailstaus.equals("A")) {
                    emailsts = "B";
                } else if (emailstaus.equals("B")) {
                    emailsts = "C";
                }
                String instntmessagestatus = utility.getTestedString(localFormat.getInstant_Message_Status());
                if (instntmessagestatus.equals("A")) {
                    instantmsgsts = "B";
                } else if (instntmessagestatus.equals("B")) {
                    instantmsgsts = "C";
                }
                java.util.Vector vector = new java.util.Vector();
                vector.removeAllElements();
                gTitle = new javax.swing.text.GapContent(200);
                gAuthor = new javax.swing.text.GapContent(200);
                gPatron = new javax.swing.text.GapContent(200);
                gEdition = new javax.swing.text.GapContent(200);
                gISBN = new javax.swing.text.GapContent(100);
                gPublisher = new javax.swing.text.GapContent(200);
                strData = strData + "\n";
                int g = 1;
                java.util.Vector vecData = new java.util.Vector(1, 1);
                for (int j = 0; j < vector.size(); j += 6) {
                    gTitle.insertString(0, vector.elementAt(j).toString() + " ");
                    gAuthor.insertString(0, vector.elementAt(j + 1).toString() + " ");
                    gPatron.insertString(0, vector.elementAt(j + 2).toString() + " ");
                    gEdition.insertString(0, vector.elementAt(j + 3).toString() + " ");
                    gISBN.insertString(0, vector.elementAt(j + 4).toString() + " ");
                    gPublisher.insertString(0, vector.elementAt(j + 5).toString() + " ");
                    strData = strData + gTitle.getString(0, gTitle.length() - 1) + "\t" + gAuthor.getString(0, gAuthor.length() - 1) + "\t" + gPatron.getString(0, gPatron.length() - 1) + "\t" + gEdition.getString(0, gEdition.length() - 1) + "\t" + gISBN.getString(0, gISBN.length() - 1) + "\t" + gPublisher.getString(0, gPublisher.length() - 1);
                    String vectorData[] = new String[7];
                    vectorData[0] = new Integer(g).toString();
                    vectorData[1] = vector.elementAt(j).toString();
                    vectorData[2] = vector.elementAt(j + 1).toString();
                    vectorData[3] = vector.elementAt(j + 2).toString();
                    vectorData[4] = vector.elementAt(j + 3).toString();
                    vectorData[5] = vector.elementAt(j + 4).toString();
                    vectorData[6] = vector.elementAt(j + 5).toString();
                    vecData.addElement(vectorData);
                    g++;
                }
                int formID = 5;
                String formletterno = ejb.bprocess.util.Utility.getInstance().getFormLetterNumber(libID.intValue(), formID);
                String date1 = utility.getFormattedDate(utility.getTimestamp());
                Object[] obj = { formletterno, date1, libraryName, laddress1, laddress2, lcity, lstate, lcountry, lpin, patronName, address1, address2, city, state, country, pin, strData, "\r\n" };
                formLetter = ejb.bprocess.util.Utility.getInstance().getFormContent(obj, format);
                java.util.Hashtable htparams = new java.util.Hashtable();
                for (int k = 0; k < obj.length; k++) {
                    htparams.put(String.valueOf(k), obj[k]);
                }
                java.util.Hashtable htMain = new java.util.Hashtable();
                htMain.put("DATA", vecData);
                String[] header = new String[7];
                header[0] = "#";
                header[1] = "Title";
                header[2] = "Author";
                header[3] = "Patron";
                header[4] = "Edition";
                header[5] = "ISBN";
                header[6] = "Publisher";
                htMain.put("HEADER", header);
                String[] columnSizes = new String[7];
                columnSizes[0] = "10";
                columnSizes[1] = "25";
                columnSizes[2] = "25";
                columnSizes[3] = "25";
                columnSizes[4] = "25";
                columnSizes[5] = "25";
                columnSizes[6] = "25";
                htMain.put("COLUMNSIZES", columnSizes);
                htparams.put(String.valueOf(16), htMain);
                String[] afp = ((ejb.bprocess.util.LocalFormLetterGeneratorHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("FormLetterGenerator")).create().generateFormLetter(new Integer(5), libID, htparams);
                int admFormId = utility.getFormID(libID.intValue());
                ejb.objectmodel.administration.LocalADM_FORM_LETTER ladmlet = ((ejb.objectmodel.administration.LocalADM_FORM_LETTERHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("ADM_FORM_LETTER")).createUsingAllFields(new Integer(admFormId), libID, new Integer(5), formletterno, formLetter, formtitle, patronID, libID, "A", "A", printsts, emailsts, instantmsgsts, utility.getTimestamp(), email, "A", new Integer(1), "B", "B", entryID, libID, utility.getTimestamp(), "B", null);
                ladmlet.setOo_path(afp[0]);
                ladmlet.setHtml_Content(afp[1]);
                htReturn.put("EMailDispatched", emailid);
                htReturn.put("PrintJobAdded", print);
                htReturn.put("MailRecipent", patronName);
                System.out.println("updating status of cir_reservation");
                htReturn.put("FormID", new Integer(admFormId).toString());
            } else {
                String formtitle = "";
                String formLetter = "";
                String printsts = "";
                String emailsts = "";
                String instantmsgsts = "";
                String patronID = local.getPatron_Id();
                String strData = " " + "\n";
                javax.swing.text.GapContent gTitle = new javax.swing.text.GapContent(5);
                javax.swing.text.GapContent gAuthor = new javax.swing.text.GapContent(6);
                javax.swing.text.GapContent gPatron = new javax.swing.text.GapContent(10);
                javax.swing.text.GapContent gEdition = new javax.swing.text.GapContent(7);
                javax.swing.text.GapContent gISBN = new javax.swing.text.GapContent(4);
                javax.swing.text.GapContent gPublisher = new javax.swing.text.GapContent(9);
                String auth = "Title";
                gTitle.insertString(0, auth);
                auth = "Author";
                gAuthor.insertString(0, auth);
                auth = "PatronName";
                gPatron.insertString(0, auth);
                auth = "Edition";
                gEdition.insertString(0, auth);
                auth = "ISBN";
                gISBN.insertString(0, auth);
                auth = "Publisher";
                gPublisher.insertString(0, auth);
                try {
                    strData += gTitle.getString(0, 5) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                try {
                    strData += gAuthor.getString(0, 6) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                try {
                    strData += gPatron.getString(0, 10) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                try {
                    strData += gEdition.getString(0, 7) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                try {
                    strData += gISBN.getString(0, 4) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                try {
                    strData += gPublisher.getString(0, 9) + "\t";
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                strData = strData;
                ejb.objectmodel.administration.LocalLibrary localLibrary = null;
                localLibrary = ((ejb.objectmodel.administration.LocalLibraryHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Library")).findByPrimaryKey(libID);
                String libraryName = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getLibrary_Name());
                String laddress1 = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getAddress1());
                String laddress2 = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getAddress2());
                String lcity = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getCity());
                String lstate = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getState());
                String lcountry = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getCountry());
                String lpin = ejb.bprocess.util.Utility.getInstance().getTestedString(localLibrary.getPin());
                ejb.objectmodel.administration.PatronKey patronKey = new ejb.objectmodel.administration.PatronKey();
                patronKey.library_Id = libID;
                patronKey.patron_Id = patronID;
                ejb.objectmodel.administration.LocalPatron localPatron = null;
                localPatron = ((ejb.objectmodel.administration.LocalPatronHome) homeFactory.getInstance().getHome("Patron")).findByPrimaryKey(patronKey);
                String patronName = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getFname()) + " " + ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getMname()) + " " + ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getLname());
                String address1 = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getAddress1());
                String address2 = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getAddress2());
                String city = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getCity());
                String state = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getState());
                String country = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getCountry());
                String pin = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getPin());
                String email = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getEmail());
                String commPrint = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getComm_Print());
                String commEmail = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getComm_Email());
                String commInst = ejb.bprocess.util.Utility.getInstance().getTestedString(localPatron.getComm_Instant_Msg());
                Integer deptId = localPatron.getDept_Id();
                String deptName = "";
                ejb.objectmodel.administration.DEPTKey deptKey = new ejb.objectmodel.administration.DEPTKey();
                deptKey.dept_Id = deptId;
                deptKey.library_Id = libID;
                ejb.objectmodel.administration.LocalDEPT localDept = null;
                try {
                    localDept = ((ejb.objectmodel.administration.LocalDEPTHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("DEPT")).findByPrimaryKey(deptKey);
                    deptName = ejb.bprocess.util.Utility.getInstance().getTestedString(localDept.getDept_Name());
                } catch (javax.ejb.FinderException ex) {
                    ex.printStackTrace();
                }
                String print = "";
                if (commPrint.equals("Y")) {
                    print = "N";
                } else if (commPrint.equals("N")) {
                    print = "A";
                }
                String emailid = "";
                if (commEmail.equals("Y")) {
                    emailid = "N";
                } else if (commEmail.equals("N")) {
                    emailid = "A";
                }
                String instant = "";
                if (commInst.equals("Y")) {
                    instant = "N";
                } else if (commInst.equals("N")) {
                    instant = "A";
                }
                java.util.Hashtable patronDetails = ejb.bprocess.util.Utility.getInstance().getPatronDetails(entryID, libID);
                String patronName1 = utility.getTestedString(patronDetails.get("PatronName").toString());
                ejb.objectmodel.administration.FORM_LETTER_FORMATKey formKey = new ejb.objectmodel.administration.FORM_LETTER_FORMATKey();
                formKey.library_Id = libID;
                formKey.format_Id = new Integer(9);
                ejb.objectmodel.administration.LocalFORM_LETTER_FORMAT localFormat = ((ejb.objectmodel.administration.LocalFORM_LETTER_FORMATHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("FORM_LETTER_FORMAT")).findByPrimaryKey(formKey);
                String format = utility.getTestedString(localFormat.getFormat());
                String maxNo = utility.getTestedString(localFormat.getMax_No());
                String noofprints = utility.getTestedString(localFormat.getPrint_Copies());
                if (noofprints.equals("") && noofprints.equals("0")) {
                    htReturn.put("PrintCopies", "0");
                } else {
                    htReturn.put("PrintCopies", noofprints.toString());
                }
                Integer refnumber = new Integer(0);
                if (!maxNo.equals("")) {
                    refnumber = localFormat.getMax_No();
                }
                formtitle = utility.getTestedString(localFormat.getTitle());
                String printstatus = utility.getTestedString(localFormat.getPrint_Status());
                if (printstatus.equals("A")) {
                    printsts = "B";
                } else if (printstatus.equals("B")) {
                    printsts = "C";
                }
                String emailstaus = utility.getTestedString(localFormat.getEmail_Status());
                if (emailstaus.equals("A")) {
                    emailsts = "B";
                } else if (emailstaus.equals("B")) {
                    emailsts = "C";
                }
                String instntmessagestatus = utility.getTestedString(localFormat.getInstant_Message_Status());
                if (instntmessagestatus.equals("A")) {
                    instantmsgsts = "B";
                } else if (instntmessagestatus.equals("B")) {
                    instantmsgsts = "C";
                }
                java.util.Vector vector = new java.util.Vector();
                vector.removeAllElements();
                gTitle = new javax.swing.text.GapContent(200);
                gAuthor = new javax.swing.text.GapContent(200);
                gPatron = new javax.swing.text.GapContent(200);
                gEdition = new javax.swing.text.GapContent(200);
                gISBN = new javax.swing.text.GapContent(100);
                gPublisher = new javax.swing.text.GapContent(200);
                strData = strData + "\n";
                int g = 1;
                java.util.Vector vecData = new java.util.Vector(1, 1);
                for (int j = 0; j < vector.size(); j += 6) {
                    gTitle.insertString(0, vector.elementAt(j).toString() + " ");
                    gAuthor.insertString(0, vector.elementAt(j + 1).toString() + " ");
                    gPatron.insertString(0, vector.elementAt(j + 2).toString() + " ");
                    gEdition.insertString(0, vector.elementAt(j + 3).toString() + " ");
                    gISBN.insertString(0, vector.elementAt(j + 4).toString() + " ");
                    gPublisher.insertString(0, vector.elementAt(j + 5).toString() + " ");
                    strData = strData + gTitle.getString(0, gTitle.length() - 1) + "\t" + gAuthor.getString(0, gAuthor.length() - 1) + "\t" + gPatron.getString(0, gPatron.length() - 1) + "\t" + gEdition.getString(0, gEdition.length() - 1) + "\t" + gISBN.getString(0, gISBN.length() - 1) + "\t" + gPublisher.getString(0, gPublisher.length() - 1);
                    String vectorData[] = new String[7];
                    vectorData[0] = new Integer(g).toString();
                    vectorData[1] = vector.elementAt(j).toString();
                    vectorData[2] = vector.elementAt(j + 1).toString();
                    vectorData[3] = vector.elementAt(j + 2).toString();
                    vectorData[4] = vector.elementAt(j + 3).toString();
                    vectorData[5] = vector.elementAt(j + 4).toString();
                    vectorData[6] = vector.elementAt(j + 5).toString();
                    vecData.addElement(vectorData);
                    g++;
                }
                int formID = 9;
                String formletterno = ejb.bprocess.util.Utility.getInstance().getFormLetterNumber(libID.intValue(), formID);
                String date1 = utility.getFormattedDate(utility.getTimestamp());
                Object[] obj = { formletterno, date1, libraryName, laddress1, laddress2, lcity, lstate, lcountry, lpin, patronName, address1, address2, city, state, country, pin, strData, "\r\n" };
                formLetter = ejb.bprocess.util.Utility.getInstance().getFormContent(obj, format);
                java.util.Hashtable htparams = new java.util.Hashtable();
                for (int k = 0; k < obj.length; k++) {
                    htparams.put(String.valueOf(k), obj[k]);
                }
                java.util.Hashtable htMain = new java.util.Hashtable();
                htMain.put("DATA", vecData);
                String[] header = new String[7];
                header[0] = "#";
                header[1] = "Title";
                header[2] = "Author";
                header[3] = "Patron";
                header[4] = "Edition";
                header[5] = "ISBN";
                header[6] = "Publisher";
                htMain.put("HEADER", header);
                String[] columnSizes = new String[7];
                columnSizes[0] = "10";
                columnSizes[1] = "25";
                columnSizes[2] = "25";
                columnSizes[3] = "25";
                columnSizes[4] = "25";
                columnSizes[5] = "25";
                columnSizes[6] = "25";
                htMain.put("COLUMNSIZES", columnSizes);
                htparams.put(String.valueOf(16), htMain);
                String[] afp = ((ejb.bprocess.util.LocalFormLetterGeneratorHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("FormLetterGenerator")).create().generateFormLetter(new Integer(9), libID, htparams);
                int admFormId = utility.getFormID(libID.intValue());
                ejb.objectmodel.administration.LocalADM_FORM_LETTER ladmlet = ((ejb.objectmodel.administration.LocalADM_FORM_LETTERHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("ADM_FORM_LETTER")).createUsingAllFields(new Integer(admFormId), libID, new Integer(9), formletterno, formLetter, formtitle, patronID, libID, "A", "A", printsts, emailsts, instantmsgsts, utility.getTimestamp(), email, "A", new Integer(1), "B", "B", entryID, libID, utility.getTimestamp(), "B", null);
                ladmlet.setOo_path(afp[0]);
                htReturn.put("EMailDispatched", emailid);
                htReturn.put("PrintJobAdded", print);
                htReturn.put("MailRecipent", patronName);
                System.out.println("updating status of cir_reservation");
                htReturn.put("FormID", new Integer(admFormId).toString());
            }
            htReturn.put("Success", "Y");
        } catch (CreateException ex) {
            context.setRollbackOnly();
            System.out.println("CreateException");
            ex.printStackTrace(System.out);
            htReturn = new java.util.Hashtable();
            htReturn.put("Success", "N");
        } catch (FinderException ex) {
            context.setRollbackOnly();
            System.out.println("FinderException");
            ex.printStackTrace(System.out);
            htReturn = new java.util.Hashtable();
            htReturn.put("Success", "N");
        } catch (NullPointerException ex) {
            context.setRollbackOnly();
            System.out.println("NullPointerException");
            ex.printStackTrace(System.out);
            htReturn = new java.util.Hashtable();
            htReturn.put("Success", "N");
        } catch (NumberFormatException ex) {
            context.setRollbackOnly();
            System.out.println("NumberFormatException");
            ex.printStackTrace(System.out);
            htReturn = new java.util.Hashtable();
            htReturn.put("Success", "N");
        } catch (javax.ejb.EJBException ex) {
            context.setRollbackOnly();
            System.out.println("EJBException");
            ex.printStackTrace(System.out);
            htReturn = new java.util.Hashtable();
            htReturn.put("Success", "N");
        } catch (Exception ex) {
            context.setRollbackOnly();
            System.out.println("Exception");
            ex.printStackTrace(System.out);
            htReturn = new java.util.Hashtable();
            htReturn.put("Success", "N");
        } finally {
            System.out.println("in finally block");
            xmlStr = newGenXMLGenerator.buildXMLDocument(htReturn);
            return xmlStr;
        }
    }

    public java.lang.String getPendingILLRequests(java.lang.String xmlStr) {
        Integer libID = new Integer(newGenXMLGenerator.getRootElementFromXMLDocument(xmlStr).getChildText("LibraryID"));
        Object[] obj = new Object[0];
        try {
            obj = ((ejb.objectmodel.circulation.LocalCIR_ILL_REQUESTHome) homeFactory.getHome("CIR_ILL_REQUEST")).findNotice1EligibleRequests(libID).toArray();
        } catch (javax.ejb.FinderException ex) {
            System.out.println("no notice1 eligible ILL requests");
            ex.printStackTrace(System.out);
        }
        if (obj.length > 0) {
            java.util.Vector vPatron = new java.util.Vector();
            java.util.Vector vBarcode = new java.util.Vector();
            java.util.Vector vTitle = new java.util.Vector();
            java.util.Vector vAuthor = new java.util.Vector();
            java.util.Vector vVolume = new java.util.Vector();
            java.util.Vector vMatType = new java.util.Vector();
            java.util.Vector vILLLibrary = new java.util.Vector();
            java.util.Vector vNetwork = new java.util.Vector();
            java.util.Vector vPhotoCopy = new java.util.Vector();
            java.util.Vector vStatus = new java.util.Vector();
            java.util.Vector vReqID = new java.util.Vector();
            java.util.Vector vReason = new java.util.Vector();
            for (int i = 0; i < obj.length; i++) {
                ejb.objectmodel.circulation.LocalCIR_ILL_REQUEST local = (ejb.objectmodel.circulation.LocalCIR_ILL_REQUEST) obj[i];
                vPatron.addElement(utility.getPatronDetails(local.getPatron_Id(), libID).get("PatronName"));
                vMatType.addElement(utility.getMaterialTypeName(local.getMaterial_Type_Id()));
                vReqID.addElement(local.getRequest_Id());
                System.out.println("req id : " + local.getRequest_Id());
                vPhotoCopy.addElement(local.getPhoto_Copy());
                vStatus.addElement(local.getStatus());
                System.out.println("status : " + local.getStatus());
                if (local.getReject_Reason() != null) vReason.addElement(local.getReject_Reason()); else vReason.addElement("");
                if (local.getIll_Library_Id() != null) {
                    Integer volSerID = new Integer(0);
                    boolean serial = false;
                    if (local.getVolume_Id() != null) {
                        volSerID = local.getVolume_Id();
                    } else {
                        serial = true;
                        volSerID = local.getSerial_Id();
                    }
                    java.util.Hashtable ht = utility.getCatalogueRecord(volSerID, serial);
                    vTitle.addElement(ht.get("Title"));
                    vAuthor.addElement(ht.get("Author"));
                    vVolume.addElement(ht.get("VolumeDetails"));
                    vILLLibrary.addElement(utility.getLibraryDetails(local.getIll_Library_Id().intValue(), true).get("LibraryName"));
                    vNetwork.addElement("Y");
                    if (local.getPhoto_Copy().equals("N")) vBarcode.addElement(local.getAccession_Number()); else vBarcode.addElement("");
                } else {
                    vTitle.addElement(local.getTitle());
                    vAuthor.addElement(local.getAuthor());
                    if (utility.getTestedString("" + local.getSerial_Volume_Number()).length() > 0) {
                        vVolume.addElement(local.getSerial_Volume_Number() + " ( " + local.getSerial_Issue_Number() + " ) : " + local.getSerial_Issue_Year());
                    } else if (utility.getTestedString("" + local.getPart_Sub_Division()).length() > 0) {
                        vVolume.addElement(local.getVolume_Number() + " : " + local.getPart_Sub_Division());
                    } else if (utility.getTestedString("" + local.getVolume_Number()).length() > 0) {
                        vVolume.addElement(local.getVolume_Number());
                    } else {
                        vVolume.addElement("");
                    }
                    vILLLibrary.addElement(utility.getLibraryDetails(local.getOther_Ill_Library_Id().intValue(), false).get("LibraryName"));
                    vNetwork.addElement("N");
                    if (local.getPhoto_Copy().equals("N")) vBarcode.addElement(local.getAccession_Number()); else vBarcode.addElement("");
                }
            }
            xmlStr = newGenXMLGenerator.buildXMLDocument("ILLRequest", new String[] { "Patron", "Barcode", "Title", "Author", "Volume", "MaterialType", "ILLServingLibrary", "Network", "PhotoCopy", "Status", "RequestID", "Reason" }, new java.util.Vector[] { vPatron, vBarcode, vTitle, vAuthor, vVolume, vMatType, vILLLibrary, vNetwork, vPhotoCopy, vStatus, vReqID, vReason });
        } else {
            org.jdom.Element root1 = new org.jdom.Element("Response");
            org.jdom.Document doc = new org.jdom.Document(root1);
            xmlStr = (new org.jdom.output.XMLOutputter()).outputString(doc);
        }
        return xmlStr;
    }
}
