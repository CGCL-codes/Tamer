package edu.hawaii.ics.ami.element.model.module;

import edu.hawaii.ics.ami.event.model.LocationEvent;
import edu.hawaii.ics.ami.event.model.NumberEvent;
import java.awt.event.*;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import javax.swing.JComponent;

/**
 * Records mouse actions and sends them out to interested listeners
 *
 * @author   king
 * @since    July 1, 2003
 */
public class MouseSourceModule extends SourceModuleAdapter implements MouseListener, MouseMotionListener {

    /** serial id to be compatible with older versions */
    private static final long serialVersionUID = 0L;

    /** Mouse move event. */
    public static final String MOUSE_MOVE_EVENT = "Mouse Move";

    /** Mouse button event. */
    public static final String MOUSE_BUTTON_EVENT = "Mouse Button";

    /**
   * Returns the name of this object.
   *
   * @return   The name of this element.
   */
    public String getName() {
        return "Mouse";
    }

    /**
   * Opens a connection to the Oximeter. Uses the defined serial port.
   *
   * @exception IOException  Description of the Exception
   */
    public void open() throws IOException {
    }

    /**
   * Called when a mouse click occured. 
   * 
   * @param e  The mouse event that occured.
   */
    public void mouseClicked(MouseEvent e) {
    }

    /**
   * Called when a mouse enter event occured. 
   * 
   * @param e  The mouse event that occured.
   */
    public void mouseEntered(MouseEvent e) {
    }

    /**
   * Called when a mouse exit event occured. 
   * 
   * @param e  The mouse event that occured.
   */
    public void mouseExited(MouseEvent e) {
    }

    /**
   * Called when a mouse pressed event occured. 
   * 
   * @param e  The mouse event that occured.
   */
    public void mousePressed(MouseEvent e) {
        sendDataEventToListeners(new NumberEvent(this, MOUSE_BUTTON_EVENT, new Integer(1)));
    }

    /**
   * Called when a mouse release event occured. 
   * 
   * @param e  The mouse event that occured.
   */
    public void mouseReleased(MouseEvent e) {
        sendDataEventToListeners(new NumberEvent(this, MOUSE_BUTTON_EVENT, new Integer(0)));
    }

    /**
   * Called when a mouse dragged event occured. 
   * 
   * @param e  The mouse event that occured.
   */
    public void mouseDragged(MouseEvent e) {
        JComponent mousePanel = (JComponent) e.getSource();
        float x = ((float) e.getX()) / ((float) mousePanel.getWidth());
        float y = ((float) e.getY()) / ((float) mousePanel.getHeight());
        sendDataEventToListeners(new LocationEvent(this, MOUSE_MOVE_EVENT, new Float(x), new Float(y)));
    }

    /**
   * Called when a mouse moved event occured. 
   * 
   * @param e  The mouse event that occured.
   */
    public void mouseMoved(MouseEvent e) {
        JComponent mousePanel = (JComponent) e.getSource();
        float x = ((float) e.getX()) / ((float) mousePanel.getWidth());
        float y = ((float) e.getY()) / ((float) mousePanel.getHeight());
        sendDataEventToListeners(new LocationEvent(this, MOUSE_MOVE_EVENT, new Float(x), new Float(y)));
    }

    /**
   * Sends a mouse click. Wouldn't get recorded otherwise.
   */
    public void click() {
        sendDataEventToListeners(new NumberEvent(this, MOUSE_BUTTON_EVENT, new Integer(1)));
        try {
            Thread.sleep(1);
        } catch (InterruptedException e) {
            throw new IllegalThreadStateException(e.toString());
        }
        sendDataEventToListeners(new NumberEvent(this, MOUSE_BUTTON_EVENT, new Integer(0)));
    }

    /**
   * Closes the connection.
   *
   * @exception IOException  Description of the Exception
   */
    public void close() throws IOException {
    }

    /**
   * Status information of a device. true if the incomming data stream
   * is ok.
   *
   * @return   true, if the incomming data stream is ok. false otherwise.
   */
    public boolean status() {
        return true;
    }

    /**
   * Returns a list with errors occured.
   *
   * @return A list of strings with errors occured.
   */
    public List<String> errors() {
        return new ArrayList<String>();
    }

    /**
   * Returns a list of data event names, that get generated by this source module.
   *
   * @return A list of data event names (List of Strings), that get generated by this source
   *         module.
   */
    public List<String> events() {
        List<String> events = new ArrayList<String>();
        events.add(MOUSE_BUTTON_EVENT);
        events.add(MOUSE_MOVE_EVENT);
        return events;
    }
}
