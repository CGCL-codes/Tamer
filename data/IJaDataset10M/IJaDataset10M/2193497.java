package edu.xtec.jclic.shapers;

import edu.xtec.util.Options;
import java.awt.*;
import javax.swing.JPanel;
import edu.xtec.jclic.boxes.ActiveBoxGrid;
import edu.xtec.jclic.Constants;
import edu.xtec.util.Messages;
import java.util.Vector;
import edu.xtec.jclic.boxes.BoxBase;
import edu.xtec.jclic.edit.EditorPanel;

/**
 *
 * @author Francesc Busquets (fbusquets@xtec.net)
 * @version 1.0
 */
public class JigSawEditorPanel extends javax.swing.JPanel {

    Options options;

    JigSaw shaper;

    Image img;

    Rectangle previewArea;

    BoxBase previewBb;

    boolean modified;

    static final int MARGIN = 40;

    /** Creates new form JigSawEditor */
    public JigSawEditorPanel(Options options, JigSaw shaper, Dimension previewDim, Image img, BoxBase previewBb) {
        this.options = options;
        this.shaper = shaper;
        this.img = img;
        previewArea = new Rectangle(img == null ? previewDim : new Dimension(img.getWidth(this), img.getHeight(this)));
        this.previewBb = previewBb;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        javax.swing.JLabel toothWidthLb;
        javax.swing.JLabel toothHeightLb;
        java.awt.GridBagConstraints gridBagConstraints;
        controlPanel = new javax.swing.JPanel();
        toothHeightLb = new javax.swing.JLabel();
        toothHeightSlider = new javax.swing.JSlider();
        toothWidthLb = new javax.swing.JLabel();
        toothWidthSlider = new javax.swing.JSlider();
        randomChk = new javax.swing.JCheckBox();
        previewPanel = new PreviewPanel();
        setLayout(new java.awt.BorderLayout());
        controlPanel.setLayout(new java.awt.GridBagLayout());
        toothHeightLb.setText(options.getMsg("edit_act_toothHeightFactor"));
        toothHeightLb.setLabelFor(toothHeightSlider);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(toothHeightLb, gridBagConstraints);
        toothHeightSlider.setMinorTickSpacing(5);
        toothHeightSlider.setPaintLabels(true);
        toothHeightSlider.setPaintTicks(true);
        toothHeightSlider.setMajorTickSpacing(25);
        toothHeightSlider.setMaximum(50);
        toothHeightSlider.setValue((int) (shaper.toothHeightFactor * 50 / shaper.getBaseFactor() * 100));
        toothHeightSlider.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                toothHeightSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(toothHeightSlider, gridBagConstraints);
        toothWidthLb.setText(options.getMsg("edit_act_toothWidthFactor"));
        toothWidthLb.setLabelFor(toothWidthSlider);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(toothWidthLb, gridBagConstraints);
        toothWidthSlider.setMinorTickSpacing(5);
        toothWidthSlider.setPaintLabels(true);
        toothWidthSlider.setPaintTicks(true);
        toothWidthSlider.setMajorTickSpacing(25);
        toothWidthSlider.setValue((int) (shaper.baseWidthFactor * 100));
        toothWidthSlider.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                toothWidthSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(toothWidthSlider, gridBagConstraints);
        randomChk.setSelected(shaper.randomLines);
        randomChk.setText(options.getMsg("edit_act_toothRandom"));
        randomChk.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomChkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(randomChk, gridBagConstraints);
        add(controlPanel, java.awt.BorderLayout.NORTH);
        previewPanel.setBorder(new javax.swing.border.TitledBorder(options.getMsg("edit_act_preview")));
        previewPanel.setPreferredSize(new Dimension(previewArea.width + MARGIN, previewArea.height + MARGIN));
        add(previewPanel, java.awt.BorderLayout.CENTER);
    }

    private void toothHeightSliderStateChanged(javax.swing.event.ChangeEvent evt) {
        shaper.toothHeightFactor = ((double) toothHeightSlider.getValue() * shaper.getBaseFactor() / 50) / 100;
        ((PreviewPanel) previewPanel).updateView();
    }

    private void toothWidthSliderStateChanged(javax.swing.event.ChangeEvent evt) {
        shaper.baseWidthFactor = ((double) toothWidthSlider.getValue()) / 100;
        ((PreviewPanel) previewPanel).updateView();
    }

    private void randomChkActionPerformed(java.awt.event.ActionEvent evt) {
        shaper.randomLines = randomChk.isSelected();
        ((PreviewPanel) previewPanel).updateView();
    }

    private javax.swing.JCheckBox randomChk;

    private javax.swing.JSlider toothHeightSlider;

    private javax.swing.JPanel controlPanel;

    private javax.swing.JPanel previewPanel;

    private javax.swing.JSlider toothWidthSlider;

    class PreviewPanel extends JPanel {

        Vector shapes = new Vector();

        public void updateView() {
            shapes.removeAllElements();
            shaper.reset();
            for (int i = 0; i < shaper.getNumCells(); i++) {
                shapes.add(shaper.getShape(i, previewArea));
            }
            repaint();
        }

        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;
            RenderingHints rh = g2.getRenderingHints();
            g2.setRenderingHints(Constants.DEFAULT_RENDERING_HINTS);
            Color defaultBgColor = g2.getBackground();
            Color defaultColor = g2.getColor();
            g2.setColor(previewBb.backColor);
            g2.fill(previewArea);
            g2.setBackground(previewBb.backColor);
            g2.setColor(previewBb.borderColor);
            Stroke defaultStroke = g2.getStroke();
            g2.setStroke(previewBb.getBorder());
            if (img != null) g2.drawImage(img, previewArea.x, previewArea.y, this);
            for (int i = 0; i < shapes.size(); i++) g2.draw((Shape) shapes.get(i));
            g2.setStroke(defaultStroke);
            g2.setColor(defaultColor);
            g2.setBackground(defaultBgColor);
            g2.setRenderingHints(rh);
        }

        public void doLayout() {
            previewArea.x = (getBounds().width - previewArea.width) / 2;
            previewArea.y = (getBounds().height - previewArea.height) / 2;
            updateView();
        }
    }

    public static Shaper getShaper(Shaper initialShaper, Component parent, Options options, Dimension dim, Image img, BoxBase bb) {
        Messages msg = options.getMessages();
        if (initialShaper == null || !(initialShaper instanceof JigSaw)) return null;
        JigSaw sh = null;
        try {
            sh = (JigSaw) initialShaper.clone();
        } catch (CloneNotSupportedException ex) {
            msg.showErrorWarning(parent, "edit_act_shaper_err", ex);
            return null;
        }
        JigSawEditorPanel jse = new JigSawEditorPanel(options, sh, dim, img, bb);
        boolean b = msg.showInputDlg(parent, jse, "edit_act_shaper_properties");
        return b ? sh : null;
    }
}
