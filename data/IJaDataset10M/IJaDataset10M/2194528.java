package org.dbgen.view;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

/**
 * This class was generated by a SmartGuide.
 *
 */
public class ImportTableProgressFrame extends javax.swing.JFrame implements ActionListener {

    JProgressBar fieldProgressBar = null;

    JLabel fieldMessage = null;

    JButton fieldCloseButton = null;

    static java.util.ResourceBundle messages = java.util.ResourceBundle.getBundle("org/dbgen/view/LocalMessage");

    /**
   * ImportTableProgressFrame constructor comment.
   */
    public ImportTableProgressFrame() {
        super(messages.getString("IMPORT_TABLE_PROGRESS"));
        initialize();
    }

    /**
   * This method was created by a SmartGuide.
   * @param event java.awt.event.ActionEvent
   */
    public void actionPerformed(ActionEvent event) {
        dispose();
        return;
    }

    /**
   * Gets the closeButton property (javax.swing.JButton) value.
   * @return The closeButton property value.
   */
    public JButton getCloseButton() {
        if (fieldCloseButton == null) {
            try {
                fieldCloseButton = new JButton();
            } catch (Throwable exception) {
                System.err.println("Exception creating closeButton property.");
            }
        }
        ;
        return fieldCloseButton;
    }

    /**
   * Gets the message property (javax.swing.JLabel) value.
   * @return The message property value.
   */
    public JLabel getMessage() {
        if (fieldMessage == null) {
            try {
                fieldMessage = new JLabel();
            } catch (Throwable exception) {
                System.err.println("Exception creating message property.");
            }
        }
        ;
        return fieldMessage;
    }

    /**
   * Gets the progressBar property (javax.swing.JProgressBar) value.
   * @return The progressBar property value.
   */
    public JProgressBar getProgressBar() {
        if (fieldProgressBar == null) {
            try {
                fieldProgressBar = new JProgressBar();
            } catch (Throwable exception) {
                System.err.println("Exception creating progressBar property.");
            }
        }
        ;
        return fieldProgressBar;
    }

    /**
   * This method was created by a SmartGuide.
   */
    public void initialize() {
        JPanel panel = new JPanel(new GridLayout(2, 1));
        panel.add(getMessage());
        panel.add(getProgressBar());
        panel.setBorder(new EmptyBorder(15, 10, 15, 10));
        panel.setPreferredSize(new Dimension(400, 100));
        JButton closeButton = getCloseButton();
        closeButton.setText(messages.getString("OK"));
        closeButton.addActionListener(this);
        Container pane = getContentPane();
        pane.setLayout(new BorderLayout());
        pane.add(BorderLayout.CENTER, panel);
        pane.add(BorderLayout.SOUTH, closeButton);
        return;
    }

    /**
   * This method was created by a SmartGuide.
   * @param initMessage java.lang.String
   * @param min int
   * @param max int
   */
    public void setup(String initMessage, int min, int max) {
        getMessage().setText(initMessage);
        getProgressBar().setMinimum(min);
        getProgressBar().setMaximum(max);
        getMessage().repaint();
        getProgressBar().repaint();
        return;
    }

    /**
   * This method was created by a SmartGuide.
   * @param args java.lang.String[]
   */
    public static void test(String args[]) {
        ImportTableProgressFrame f = new ImportTableProgressFrame();
        f.pack();
        f.show();
        return;
    }

    /**
   * This method was created by a SmartGuide.
   * @param message java.lang.String
   * @param value int
   * @param enableCloseButton boolean
   */
    public void update(String message, int value, boolean enableCloseButton) {
        getMessage().setText(message);
        getProgressBar().setValue(value);
        getCloseButton().setEnabled(enableCloseButton);
        return;
    }
}
