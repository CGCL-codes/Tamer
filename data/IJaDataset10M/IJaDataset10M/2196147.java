package de.uni_muenster.cs.sev.lethal.grammars;

import java.util.Set;
import de.uni_muenster.cs.sev.lethal.states.State;
import de.uni_muenster.cs.sev.lethal.symbol.common.RankedSymbol;
import de.uni_muenster.cs.sev.lethal.treeautomata.common.FTA;

/**
 * Represents a regular tree grammar, consisting of a set of start symbols and a set of
 * {@link RTGRule regular tree grammar rules}. In particular, the rules have the form
 * A->t, where A is a special kind of state, called <em>non-terminal</em>, and t is a
 * <em>configuration tree</em>, that is a tree consisting of ranked symbols and states
 * where the states can only occur as leaves.<br>
 * In contrast to {@link FTA finite tree automata}, apart from the fact that the rules are
 * reversed, the tree on the right side of a rule is not flat, i.e. it can be arbitrarily deep.<br>
 * A rule A->t is applicable to a configuration tree s, if s has A as a leaf. Applying the rule
 * means to replace A by t. <br>
 * A run of a tree grammar consists of a sequence of configuration trees connected by 
 * rule applications, starting with a start symbol and ending with a full tree, i.e. a tree 
 * without any states. The language of a regular tree grammar is the set of all trees, which 
 * is the result of such a run. We also say that such trees are <em>generated</em> by the
 * regular tree grammar <br>
 * Every regular tree grammar G is equivalent to a {@link FTA finite tree automaton} A_G, that means a tree is
 * recognized by A_G if and only if it is generated by G. <br>
 * The conversion of a finite tree automaton into an equivalent regular tree grammar 
 * is done in {@link RTGOps}. 
 * 
 * @param <Q> type of the non-terminals used in this regular tree grammar
 * @param <F> type of the symbols used in this regular tree grammar
 * 
 * @author Martin, Sezar
 */
public interface RTG<F extends RankedSymbol, Q extends State> {

    /**
	 * Returns the start symbols of this regular tree grammar.
	 * @return the start symbols of this regular tree grammar
	 */
    Set<Q> getStartSymbols();

    /**
	 * Returns the rules of this regular tree grammar.
	 * @return the rules of this regular tree grammar
	 */
    Set<RTGRule<F, Q>> getGrammarRules();
}
