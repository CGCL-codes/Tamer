package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.*;

/**
 * A lexer for the C# programming language.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated CSharpTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */
public class CSharpTokenMaker extends AbstractJFlexTokenMaker implements TokenMaker {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** lexical states */
    public static final int VERBATIMSTRING = 3;

    public static final int DOCUMENTCOMMENT = 2;

    public static final int YYINITIAL = 0;

    public static final int DELIMITEDCOMMENT = 1;

    /** 
   * Translates characters to character classes
   */
    private static final String ZZ_CMAP_PACKED = "\11\0\1\2\1\1\1\0\2\14\22\0\1\2\1\44\1\40\1\15" + "\1\0\1\44\1\45\1\36\2\52\1\4\1\31\1\53\1\12\1\35" + "\1\3\1\27\11\11\1\43\1\53\1\50\1\47\1\51\1\43\1\13" + "\3\26\1\34\1\32\1\34\5\10\1\25\1\33\7\10\1\7\2\10" + "\1\30\2\10\1\52\1\5\1\52\1\44\1\10\1\0\1\22\1\41" + "\1\62\1\54\1\20\1\21\1\61\1\64\1\55\1\70\1\63\1\23" + "\1\65\1\56\1\57\1\66\1\10\1\17\1\24\1\16\1\6\1\37" + "\1\60\1\42\1\67\1\71\1\52\1\46\1\52\1\43ﾁ\0";

    /** 
   * Translates characters to character classes
   */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /** 
   * Translates DFA states to action switch labels.
   */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\2\0\2\1\1\2\1\3\1\4\2\5\2\6\1\7" + "\1\5\3\2\7\6\1\7\1\5\1\2\1\10\1\6" + "\1\11\1\6\5\5\1\12\11\6\1\1\1\13\2\1" + "\1\14\1\15\1\1\1\16\1\17\1\0\1\20\1\21" + "\5\6\1\22\1\7\1\22\1\23\1\7\1\0\1\24" + "\7\2\14\6\1\25\10\6\1\22\1\23\1\26\1\10" + "\1\27\2\6\2\11\1\30\4\6\2\25\21\6\1\31" + "\1\0\1\32\1\1\7\0\1\20\1\33\5\6\1\7" + "\1\23\1\0\7\2\1\34\1\2\17\6\1\25\10\6" + "\1\35\1\10\1\36\2\10\1\26\1\10\3\6\1\11" + "\1\37\3\11\7\6\1\40\20\6\10\0\1\6\1\40" + "\2\6\6\2\1\41\12\6\2\35\2\10\1\26\2\6" + "\2\11\16\6\6\0\3\2\10\6\1\35\2\10\1\26" + "\1\6\2\11\10\6\3\0\2\2\3\6\2\10\1\26" + "\1\11\5\6\2\0\1\2\3\6\1\0\1\6";

    private static int[] zzUnpackAction() {
        int[] result = new int[332];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** 
   * Translates a state to a row index in the transition table
   */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\72\0\164\0\256\0\350\0Ģ\0Ŝ\0Ɩ" + "\0ǐ\0Ȋ\0Ʉ\0ɾ\0ʸ\0˲\0Ģ\0̬" + "\0ͦ\0Π\0Ϛ\0Д\0ю\0҈\0ӂ\0Ӽ" + "\0Զ\0հ\0֪\0פ\0؞\0٘\0Ģ\0ڒ" + "\0ی\0܆\0݀\0Ģ\0Ģ\0ݺ\0޴\0߮" + "\0ࠨ\0ࡢ\0࢜\0ࣖ\0ऐ\0ॊ\0Ģ\0঄" + "\0া\0Ģ\0৸\0ਲ\0Ģ\0੬\0દ\0ૠ" + "\0Ģ\0ଚ\0୔\0எ\0ை\0ం\0఼\0౶" + "\0ರ\0఼\0೪\0հ\0Ģ\0ത\0൞\0඘" + "\0ි\0ฌ\0ๆ\0຀\0຺\0໴\0༮\0ཨ" + "\0ྡྷ\0࿜\0ဖ\0ၐ\0ႊ\0Ⴤ\0ჾ\0ᄸ" + "\0Ʉ\0ᅲ\0ᆬ\0ᇦ\0ሠ\0ቚ\0ኔ\0ዎ" + "\0ገ\0ፂ\0፼\0Ꮆ\0Ᏸ\0Ģ\0ᐪ\0ᑤ" + "\0ᒞ\0ᓘ\0Ģ\0ᔒ\0ᕌ\0ᖆ\0ᗀ\0ᗺ" + "\0ᘴ\0᙮\0ᚨ\0ᛢ\0᜜\0᝖\0ថ\0៊" + "\0᠄\0ᠾ\0ᡸ\0ᢲ\0ᣬ\0ᤦ\0ᥠ\0ᦚ" + "\0᧔\0ᨎ\0Ģ\0৸\0Ģ\0Ģ\0ᩈ\0᪂" + "\0᪼\0᫶\0ᬰ\0᭪\0ᮤ\0ᯞ\0Ģ\0ᰘ" + "\0᱒\0᲌\0᳆\0ᴀ\0఼\0ᴺ\0ᵴ\0ᶮ" + "\0ᷨ\0Ḣ\0Ṝ\0ẖ\0Ố\0Ἂ\0ὄ\0὾" + "\0Ᾰ\0ῲ\0‬\0⁦\0₠\0⃚\0℔\0ⅎ" + "\0ↈ\0⇂\0⇼\0∶\0≰\0⊪\0⋤\0⌞" + "\0⍘\0⎒\0⏌\0␆\0⑀\0⑺\0⒴\0⓮" + "\0┨\0╢\0Ģ\0▜\0◖\0☐\0♊\0⚄" + "\0⚾\0⛸\0✲\0Ģ\0❬\0➦\0⟠\0⠚" + "\0⡔\0⢎\0⣈\0⤂\0⤼\0⥶\0⦰\0⧪" + "\0⨤\0⩞\0⪘\0⫒\0⬌\0⭆\0⮀\0⮺" + "\0⯴\0Ⱞ\0ⱨ\0Ⲣ\0Ⳝ\0ⴖ\0ⵐ\0ⶊ" + "\0ⷄ\0ⷾ\0⸸\0⹲\0⺬\0⻦\0⼠\0⽚" + "\0Ʉ\0⾔\0⿎\0〈\0あ\0ぼ\0ザ\0ヰ" + "\0ㄪ\0Ʉ\0ㅤ\0㆞\0㇘\0㈒\0㉌\0㊆" + "\0㋀\0㋺\0㌴\0㍮\0㎨\0㏢\0㐜\0㑖" + "\0㒐\0㓊\0㔄\0㔾\0㕸\0㖲\0㗬\0㘦" + "\0㙠\0㚚\0㛔\0㜎\0㝈\0㞂\0㞼\0㟶" + "\0㠰\0㡪\0㢤\0㣞\0㤘\0㥒\0㦌\0㧆" + "\0㨀\0㨺\0㩴\0㪮\0㫨\0㬢\0㭜\0㮖" + "\0㯐\0㰊\0㱄\0㱾\0఼\0㲸\0㳲\0㴬" + "\0㵦\0㶠\0㷚\0㸔\0㹎\0㺈\0㻂\0㻼" + "\0㼶\0㽰\0㾪\0㿤\0䀞\0䁘\0䂒\0䃌" + "\0䄆\0䅀\0䅺\0䆴\0䇮\0䈨\0䉢\0䊜" + "\0䋖\0䌐\0䍊\0䎄\0䎾\0䏸\0䐲\0䑬" + "\0䒦\0䓠\0䔚\0䕔";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[332];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /** 
   * The transition table of the DFA
   */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\2\13" + "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23" + "\1\24\1\25\1\26\1\27\2\13\1\30\1\13\1\31" + "\3\13\1\32\1\33\1\34\1\35\1\36\1\13\1\37" + "\1\11\1\40\1\41\1\11\1\42\1\43\1\44\1\45" + "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\3\13" + "\1\55\3\13\1\56\1\57\2\56\1\60\65\56\1\61" + "\1\62\46\61\1\63\21\61\1\64\1\65\36\64\1\66" + "\31\64\1\5\4\0\5\5\1\0\1\5\1\0\14\5" + "\1\0\3\5\2\0\1\5\1\0\2\5\11\0\16\5" + "\74\0\1\7\12\0\1\67\57\0\1\70\1\71\42\0" + "\1\37\71\0\1\37\22\0\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\5\13\1\73\1\74\4\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\1\13" + "\1\75\1\76\13\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\77\4\0\1\77\2\100" + "\1\77\1\14\1\0\1\77\1\0\3\77\1\101\1\102" + "\1\77\1\103\1\77\1\103\1\77\1\14\1\77\1\0" + "\1\101\2\102\1\104\1\0\1\77\1\0\2\77\11\0" + "\1\102\10\77\1\102\4\77\12\0\1\37\34\0\1\37" + "\1\0\1\37\20\0\1\5\4\0\1\5\3\13\1\5" + "\1\0\1\5\1\0\1\5\11\13\1\5\1\13\1\0" + "\3\13\2\0\1\13\1\105\2\13\11\0\16\13\1\5" + "\1\0\1\67\2\0\1\5\1\106\3\5\1\0\1\5" + "\1\0\2\5\1\107\1\110\2\5\1\111\5\5\1\0" + "\3\5\2\0\1\5\1\0\2\5\11\0\1\112\1\113" + "\2\5\1\114\12\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\1\13\1\115\11\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\10\13\1\116\2\13\1\117" + "\2\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\2\13\1\120\10\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\5\13\1\121\5\13\1\0" + "\3\13\2\0\1\122\1\0\1\13\1\123\11\0\2\13" + "\1\124\13\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\4\13\1\125\1\126\5\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\1\13\1\127\1\13" + "\1\130\12\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\6\13\1\131\4\13\1\0\3\13\2\0" + "\1\13\1\0\1\132\1\13\11\0\16\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\3\13\1\133" + "\12\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\1\134\1\13\1\135\10\13\1\0\3\13\2\0" + "\1\13\1\0\1\136\1\13\11\0\1\13\1\137\2\13" + "\1\140\3\13\1\141\5\13\1\77\4\0\1\77\2\100" + "\1\77\1\14\1\0\1\77\1\0\3\77\1\101\1\102" + "\1\77\1\103\1\77\1\103\1\77\1\14\1\142\1\0" + "\1\101\2\102\1\104\1\0\1\77\1\0\1\77\1\142" + "\11\0\1\102\10\77\1\102\4\77\31\0\1\37\15\0" + "\1\37\33\0\1\143\15\0\1\143\42\0\1\144\1\0" + "\3\144\1\145\30\144\1\146\33\144\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\1\13\1\147\1\13" + "\1\150\12\13\1\35\1\151\3\35\1\152\32\35\1\153" + "\31\35\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\1\13\1\154\2\13\1\121\6\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\3\13\1\155\7\13" + "\1\156\2\13\45\0\1\37\1\0\1\37\70\0\2\37" + "\71\0\1\37\1\11\70\0\1\37\1\0\1\11\20\0" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\2\13\1\157\10\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\3\13\1\160\12\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\3\13\1\131\2\13" + "\1\131\4\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\2\13\1\161\6\13\1\162\4\13\1\5\4\0" + "\1\5\1\163\3\13\1\72\1\5\1\0\1\5\2\13" + "\1\164\1\13\1\165\6\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\1\166" + "\3\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\167\1\0\1\170\1\13\11\0\12\13\1\171" + "\3\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\10\13\1\172\5\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\3\13\1\173\12\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\4\13" + "\1\174\1\175\5\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\3\13\1\176\4\13\1\177\5\13\1\5" + "\4\0\1\5\1\200\3\13\1\72\1\5\1\0\1\5" + "\1\13\1\201\2\13\1\202\6\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\56\1\0\2\56" + "\1\0\65\56\3\0\1\203\66\0\1\61\1\0\46\61" + "\1\0\21\61\51\204\1\205\20\204\1\64\1\0\36\64" + "\1\0\31\64\40\0\1\206\33\0\1\67\3\0\1\207" + "\10\0\1\210\1\211\2\0\1\212\30\0\1\213\1\214" + "\2\0\1\215\11\0\3\216\1\217\66\216\6\0\5\72" + "\3\0\13\72\1\0\3\72\2\0\1\72\1\0\2\72" + "\11\0\16\72\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\3\13\1\220\12\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\1\13\1\221\6\13" + "\1\141\5\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\2\13\1\222\13\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\6\13\1\223\4\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\6\13" + "\1\224\7\13\1\77\4\0\5\77\1\0\1\77\1\0" + "\14\77\1\0\3\77\2\0\1\77\1\0\2\77\11\0" + "\17\77\4\0\5\77\1\0\1\77\1\0\6\77\1\225" + "\1\77\1\225\3\77\1\0\3\77\2\0\1\77\1\0" + "\2\77\11\0\17\77\4\0\4\77\1\226\1\227\1\77" + "\1\0\12\77\1\226\1\77\1\227\3\77\2\0\1\77" + "\1\0\2\77\11\0\17\77\4\0\1\77\2\225\2\77" + "\1\0\1\77\1\0\14\77\1\0\3\77\2\0\1\77" + "\1\0\2\77\11\0\16\77\1\5\4\0\5\5\1\0" + "\1\5\1\0\14\5\1\0\3\5\2\0\1\5\1\0" + "\2\5\11\0\2\5\1\230\14\5\4\0\5\5\1\0" + "\1\5\1\0\3\5\1\231\10\5\1\0\3\5\2\0" + "\1\5\1\0\2\5\11\0\17\5\4\0\5\5\1\0" + "\1\5\1\0\2\5\1\232\3\5\1\233\5\5\1\0" + "\3\5\2\0\1\5\1\0\2\5\11\0\2\5\1\234" + "\14\5\4\0\5\5\1\0\1\5\1\0\14\5\1\0" + "\3\5\2\0\1\5\1\0\2\5\11\0\1\5\1\235" + "\15\5\4\0\5\5\1\0\1\5\1\0\3\5\1\236" + "\10\5\1\0\3\5\2\0\1\5\1\0\2\5\11\0" + "\17\5\4\0\5\5\1\0\1\5\1\0\4\5\1\237" + "\7\5\1\0\3\5\2\0\1\5\1\0\2\5\11\0" + "\17\5\4\0\5\5\1\0\1\5\1\0\5\5\1\240" + "\6\5\1\0\3\5\2\0\1\5\1\0\2\5\11\0" + "\17\5\4\0\1\5\1\241\3\13\1\72\1\5\1\0" + "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\13\13\1\131\2\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\1\13\1\242\11\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\1\13\1\243" + "\14\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\12\13\1\244\3\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\1\245\2\13\1\131\1\246" + "\6\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\6\13\1\247\4\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\2\13\1\250\10\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\1\251" + "\12\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\12\13\1\252\3\13\1\5\4\0\1\5\1\253\3\13" + "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\5\13\1\254\5\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\3\13\1\255\12\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13" + "\1\0\1\13\1\256\11\0\2\13\1\257\13\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\1\13" + "\1\260\11\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\6\13\1\261\4\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\2\13\1\262\3\13" + "\1\263\7\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\1\13\1\264\2\13\1\265\6\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\4\13" + "\1\266\6\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\13\13\1\156\2\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\15\13\1\244\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\1\13" + "\1\267\14\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\3\13\1\270\12\13\1\77\4\0\4\77" + "\1\271\1\0\1\77\1\0\3\77\3\271\3\77\2\271" + "\1\77\1\0\1\271\1\77\1\271\2\0\1\77\1\0" + "\1\271\1\77\11\0\1\271\5\77\1\271\10\77\4\0" + "\4\77\1\143\1\0\1\77\1\0\3\77\1\101\1\102" + "\5\77\1\143\1\77\1\0\1\101\2\102\2\0\1\77" + "\1\0\2\77\11\0\1\102\10\77\1\102\4\77\1\272" + "\1\0\34\272\1\273\34\272\1\0\3\272\1\144\1\274" + "\1\275\6\272\2\144\1\272\2\144\4\272\1\144\6\272" + "\1\276\3\144\1\277\13\272\1\144\13\272\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\1\13\1\300" + "\11\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\5\13\1\301\5\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\1\13\1\302\14\13\5\151\1\303" + "\32\151\1\304\32\151\1\0\3\151\1\35\1\305\1\306" + "\6\151\2\35\1\151\2\35\4\151\1\35\6\151\4\35" + "\1\307\13\151\1\35\13\151\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\2\13\1\310\10\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\3\13" + "\1\311\12\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\1\312\12\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\3\13\1\313\1\13\1\314" + "\5\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\6\13\1\315\7\13\1\5\4\0\1\5\1\316\3\13" + "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\1\317\12\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\12\13" + "\1\252\3\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\5\13\1\320\5\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\4\13\1\131\11\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\11\13\1\321\4\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\1\131\12\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\2\13\1\322\10\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\14\13\1\323\1\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\2\13\1\324\10\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\1\13\1\325" + "\14\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\1\326\12\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\1\327\5\13\1\247\4\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\4\13" + "\1\330\6\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\2\13\1\331\13\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\2\13\1\332\1\13" + "\1\333\6\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0" + "\1\334\1\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\1\13\1\335\1\13\1\336" + "\12\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\1\13\1\337\11\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\56\0\1\340\33\0\1\341" + "\70\0\1\342\3\0\1\343\32\0\1\344\70\0\1\345" + "\34\0\1\346\72\0\1\237\72\0\1\347\47\0\1\216" + "\1\0\70\216\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\2\13\1\262\13\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\2\13\1\350\13\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\1\351\12\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\4\13\1\352\6\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\10\13\1\353\5\13" + "\1\77\4\0\4\77\1\226\1\0\1\77\1\0\4\77" + "\1\102\5\77\1\226\1\77\1\0\1\77\2\102\2\0" + "\1\77\1\0\2\77\11\0\1\102\10\77\1\102\4\77" + "\11\0\1\226\15\0\1\226\42\0\1\5\4\0\5\5" + "\1\0\1\5\1\0\14\5\1\0\3\5\2\0\1\5" + "\1\0\2\5\11\0\1\354\16\5\4\0\5\5\1\0" + "\1\5\1\0\14\5\1\0\3\5\2\0\1\5\1\0" + "\2\5\11\0\5\5\1\355\11\5\4\0\5\5\1\0" + "\1\5\1\0\2\5\1\356\11\5\1\0\3\5\2\0" + "\1\5\1\0\2\5\11\0\17\5\4\0\5\5\1\0" + "\1\5\1\0\7\5\1\357\4\5\1\0\3\5\2\0" + "\1\5\1\0\2\5\11\0\1\5\1\113\15\5\4\0" + "\5\5\1\0\1\5\1\0\14\5\1\0\3\5\2\0" + "\1\5\1\0\2\5\11\0\1\360\16\5\4\0\5\5" + "\1\0\1\5\1\0\14\5\1\0\3\5\2\0\1\5" + "\1\0\2\5\11\0\2\5\1\357\14\5\4\0\5\5" + "\1\0\1\5\1\0\4\5\1\111\7\5\1\0\3\5" + "\2\0\1\5\1\0\2\5\11\0\16\5\1\237\1\0" + "\70\237\1\5\4\0\5\5\1\0\1\5\1\0\2\5" + "\1\361\11\5\1\0\3\5\2\0\1\5\1\0\2\5" + "\11\0\17\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\2\13\1\362\10\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\3\13\1\164\12\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\6\13" + "\1\131\4\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\2\13\1\363\10\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\1\364\3\13\1\72\1\5\1\0\1\5\13\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\1\365" + "\15\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\2\13\1\131\10\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\2\13\1\166\13\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\2\13" + "\1\364\10\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\5\13\1\366\5\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\11\13\1\131\4\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\6\13\1\241\4\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\4\13\1\222\6\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\2\13\1\302" + "\10\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\4\13\1\367\6\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\2\13\1\370\10\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\1\371" + "\12\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\5\13\1\351\10\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\7\13\1\131\6\13\1\5" + "\4\0\1\5\1\372\3\13\1\72\1\5\1\0\1\5" + "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\1\13\1\221\14\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\1\373\12\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\6\13\1\374\7\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\5\13" + "\1\256\5\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\1\327\12\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\1\13\1\222\11\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\77" + "\4\0\1\77\2\375\1\77\1\271\1\0\1\77\1\0" + "\3\77\3\271\1\376\1\77\1\376\2\271\1\77\1\0" + "\1\271\1\77\1\271\2\0\1\77\1\0\1\271\1\77" + "\11\0\1\271\5\77\1\271\7\77\1\272\1\0\34\272" + "\1\146\34\272\1\0\7\272\1\377\6\272\3\377\3\272" + "\2\377\2\272\1\377\1\272\1\377\1\272\1\146\2\272" + "\1\377\12\272\1\377\5\272\1\377\10\272\1\0\7\272" + "\1Ā\6\272\3Ā\3\272\2Ā\2\272\1Ā\1\272" + "\1Ā\1\272\1\146\2\272\1Ā\12\272\1Ā\5\272" + "\1Ā\7\272\36\0\1\273\33\0\1\272\1\0\7\272" + "\1ā\6\272\3ā\3\272\2ā\2\272\1ā\1\272" + "\1ā\1\272\1\146\2\272\1ā\12\272\1ā\5\272" + "\1ā\7\272\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\1Ă\12\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\4\13\1ă\6\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\1\131" + "\15\13\1\151\1\0\75\151\1\303\3\151\1Ą\6\151" + "\3Ą\3\151\2Ą\2\151\1Ą\1\151\1Ą\3\151" + "\1\304\1Ą\12\151\1Ą\5\151\1Ą\14\151\1\303" + "\3\151\1ą\6\151\3ą\3\151\2ą\2\151\1ą" + "\1\151\1ą\3\151\1\304\1ą\12\151\1ą\5\151" + "\1ą\14\151\1\303\3\151\1\35\6\151\3\35\3\151" + "\2\35\2\151\1\35\1\151\1\35\3\151\1\304\1\35" + "\12\151\1\35\5\151\1\35\7\151\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\4\13\1\263\6\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\5\13\1\351\5\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\2\13\1\351\10\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\4\13\1Ć" + "\6\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\2\13\1ć\10\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\1\13\1Ĉ\14\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13" + "\1\0\3\13\2\0\1\13\1\0\1ĉ\1\13\11\0" + "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\2\13\1Ċ\10\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\5\13\1\131\5\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\2\13" + "\1ċ\10\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\1\13\1Č\11\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\2\13\1\372\10\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\1\13\1č\11\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\5\13\1\247\5\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\3\13\1\131" + "\12\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\6\13\1Ď\7\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\6\13\1\243\4\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\1ď" + "\5\13\1\166\4\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\6\13\1Đ\7\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\1\13\1\351" + "\11\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\5\13\1\373\5\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0" + "\1đ\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\1Ē\12\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\4\13" + "\1ē\6\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\54\0\1Ĕ\76\0\1ĕ\27\0\1Ė" + "\76\0\1ė\30\0\1\214\70\0\1Ę\73\0\1ė" + "\34\0\1\212\67\0\1ę\52\0\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\5\13\1\131\10\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\3\13\1\247\7\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\2\13\1\332\10\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0" + "\5\5\1\0\1\5\1\0\3\5\1\113\10\5\1\0" + "\3\5\2\0\1\5\1\0\2\5\11\0\17\5\4\0" + "\5\5\1\0\1\5\1\0\14\5\1\0\3\5\2\0" + "\1\5\1\0\2\5\11\0\1\5\1Ě\15\5\4\0" + "\5\5\1\0\1\5\1\0\14\5\1\0\3\5\2\0" + "\1\5\1\0\2\5\11\0\3\5\1ě\13\5\4\0" + "\5\5\1\0\1\5\1\0\3\5\1\237\10\5\1\0" + "\3\5\2\0\1\5\1\0\2\5\11\0\17\5\4\0" + "\5\5\1\0\1\5\1\0\2\5\1\107\11\5\1\0" + "\3\5\2\0\1\5\1\0\2\5\11\0\1\5\1\113" + "\15\5\4\0\5\5\1\0\1\5\1\0\14\5\1\0" + "\3\5\2\0\1\5\1\0\2\5\11\0\2\5\1Ĝ" + "\14\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\3\13\1ĝ\12\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\1\13\1Ğ\11\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\3\13\1ğ" + "\12\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\1\13\1Ġ\14\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\5\13\1ġ\5\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\4\13" + "\1\327\6\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\1\13\1Ģ\11\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\6\13\1\166\7\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\1\13\1ģ\14\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\7\13\1Ĥ\6\13\1\77\4\0" + "\5\77\1\0\1\77\1\0\6\77\1ĥ\1\77\1ĥ" + "\3\77\1\0\3\77\2\0\1\77\1\0\2\77\11\0" + "\17\77\4\0\1\77\2ĥ\2\77\1\0\1\77\1\0" + "\14\77\1\0\3\77\2\0\1\77\1\0\2\77\11\0" + "\16\77\1\272\1\0\7\272\1Ħ\6\272\3Ħ\3\272" + "\2Ħ\2\272\1Ħ\1\272\1Ħ\1\272\1\146\2\272" + "\1Ħ\12\272\1Ħ\5\272\1Ħ\10\272\1\0\7\272" + "\1ħ\6\272\3ħ\3\272\2ħ\2\272\1ħ\1\272" + "\1ħ\1\272\1\146\2\272\1ħ\12\272\1ħ\5\272" + "\1ħ\10\272\1\0\7\272\1Ĩ\6\272\3Ĩ\3\272" + "\2Ĩ\2\272\1Ĩ\1\272\1Ĩ\1\272\1\273\2\272" + "\1Ĩ\12\272\1Ĩ\5\272\1Ĩ\7\272\1\5\4\0" + "\1\5\1ĩ\3\13\1\72\1\5\1\0\1\5\13\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\1\172\12\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\5\151\1\303\3\151\1Ī\6\151\3Ī" + "\3\151\2Ī\2\151\1Ī\1\151\1Ī\3\151\1\304" + "\1Ī\12\151\1Ī\5\151\1Ī\14\151\1\303\3\151" + "\1ī\6\151\3ī\3\151\2ī\2\151\1ī\1\151" + "\1ī\3\151\1\304\1ī\12\151\1ī\5\151\1ī" + "\7\151\1\5\4\0\1\5\1Ĭ\3\13\1\72\1\5" + "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\5\13\1đ\10\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\11\13\1ĩ" + "\4\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\5\13\1\312\5\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\1\13\1ĭ\11\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\6\13" + "\1Į\4\13\1\0\3\13\2\0\1\13\1\0\2\13" + "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\1\13\1į\11\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\4\13\1İ\6\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\10\13\1\131\5\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\1\13\1ı\14\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\7\13\1\256" + "\6\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\4\13\1Ĳ\6\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\2\13\1ĳ\10\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\11\13" + "\1\243\4\13\20\0\1\214\126\0\1Ĵ\73\0\1ĵ" + "\32\0\1\237\70\0\1\210\35\0\1\214\72\0\1Ķ" + "\13\0\1\5\4\0\5\5\1\0\1\5\1\0\14\5" + "\1\0\3\5\2\0\1\5\1\0\2\5\11\0\3\5" + "\1ķ\13\5\4\0\5\5\1\0\1\5\1\0\2\5" + "\1\237\11\5\1\0\3\5\2\0\1\5\1\0\2\5" + "\11\0\17\5\4\0\5\5\1\0\1\5\1\0\14\5" + "\1\0\3\5\2\0\1\5\1\0\2\5\11\0\1\5" + "\1ĸ\15\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\3\13\1\131\7\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\2\13\1\131\13\13\1\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\2\13" + "\1ġ\13\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\6\13\1Ĺ\7\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\5\13\1ĺ\5\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\4\13\1\372\6\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\6\13\1\131\7\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\4\13\1Ļ" + "\6\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\16\13\1\272\1\0\7\272\1ļ\6\272\3ļ\3\272" + "\2ļ\2\272\1ļ\1\272\1ļ\1\272\1\146\2\272" + "\1ļ\12\272\1ļ\5\272\1ļ\10\272\1\0\7\272" + "\1Ľ\6\272\3Ľ\3\272\2Ľ\2\272\1Ľ\1\272" + "\1Ľ\1\272\1\146\2\272\1Ľ\12\272\1Ľ\5\272" + "\1Ľ\10\272\1\0\7\272\1ľ\6\272\3ľ\3\272" + "\2ľ\2\272\1ľ\1\272\1ľ\1\272\1\273\2\272" + "\1ľ\12\272\1ľ\5\272\1ľ\7\272\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\4\13\1\320" + "\6\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\16\13\5\151\1\303\3\151\1\307\6\151\3\307\3\151" + "\2\307\2\151\1\307\1\151\1\307\3\151\1\304\1\307" + "\12\151\1\307\5\151\1\307\14\151\1\303\3\151\1Ŀ" + "\6\151\3Ŀ\3\151\2Ŀ\2\151\1Ŀ\1\151\1Ŀ" + "\3\151\1\304\1Ŀ\12\151\1Ŀ\5\151\1Ŀ\7\151" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\5\13\1\166\5\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\3\13\1ŀ\7\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\2\13\1ĩ\13\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\12\13\1ŀ\3\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\1\13\1Ł\14\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\1ł\12\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0" + "\2\13\1Ń\13\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\1\247\12\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\6\13\1ń\7\13" + "\57\0\1Ņ\31\0\1\237\127\0\1ņ\14\0\1\5" + "\4\0\5\5\1\0\1\5\1\0\14\5\1\0\3\5" + "\2\0\1\5\1\0\2\5\11\0\2\5\1\237\14\5" + "\4\0\5\5\1\0\1\5\1\0\14\5\1\0\3\5" + "\2\0\1\5\1\0\2\5\11\0\2\5\1Ň\14\5" + "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\1\13" + "\1\166\14\13\1\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\13\13\1\131\2\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\5\13\1ň\5\13" + "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13" + "\1\272\1\0\7\272\1\144\6\272\3\144\3\272\2\144" + "\2\272\1\144\1\272\1\144\1\272\1\146\2\272\1\144" + "\12\272\1\144\5\272\1\144\10\272\1\0\7\272\1\274" + "\6\272\3\274\3\272\2\274\2\272\1\274\1\272\1\274" + "\1\272\1\146\2\272\1\274\12\272\1\274\5\272\1\274" + "\10\272\1\0\7\272\1\144\6\272\3\144\3\272\2\144" + "\2\272\1\144\1\272\1\144\1\272\1\273\2\272\1\144" + "\12\272\1\144\5\272\1\144\7\272\5\151\1\303\3\151" + "\1\305\6\151\3\305\3\151\2\305\2\151\1\305\1\151" + "\1\305\3\151\1\304\1\305\12\151\1\305\5\151\1\305" + "\7\151\1\5\4\0\1\5\4\13\1\72\1\5\1\0" + "\1\5\4\13\1ŉ\6\13\1\0\3\13\2\0\1\13" + "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13" + "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\1\247\15\13\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\3\13\1Ŋ" + "\12\13\1\5\4\0\1\5\1\247\3\13\1\72\1\5" + "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72" + "\1\5\1\0\1\5\1\256\12\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\56\0\1\237\71\0" + "\1ŋ\13\0\1\5\4\0\5\5\1\0\1\5\1\0" + "\14\5\1\0\3\5\2\0\1\5\1\0\2\5\11\0" + "\5\5\1\237\11\5\4\0\1\5\4\13\1\72\1\5" + "\1\0\1\5\5\13\1Ō\5\13\1\0\3\13\2\0" + "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5" + "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13" + "\2\0\1\13\1\0\2\13\11\0\6\13\1\247\7\13" + "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5" + "\1\13\1\131\11\13\1\0\3\13\2\0\1\13\1\0" + "\2\13\11\0\16\13\61\0\1\237\10\0\1\5\4\0" + "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0" + "\3\13\2\0\1\13\1\0\2\13\11\0\3\13\1ģ" + "\12\13";

    private static int[] zzUnpackTrans() {
        int[] result = new int[17806];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static final int ZZ_UNKNOWN_ERROR = 0;

    private static final int ZZ_NO_MATCH = 1;

    private static final int ZZ_PUSHBACK_2BIG = 2;

    private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };

    /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\3\1\1\11\10\1\1\11\17\1\1\11\4\1" + "\2\11\11\1\1\11\2\1\1\11\2\1\1\11\1\1" + "\1\0\1\1\1\11\12\1\1\0\1\11\40\1\1\11" + "\4\1\1\11\27\1\1\11\1\0\2\11\7\0\1\1" + "\1\11\7\1\1\0\43\1\1\11\10\1\1\11\33\1" + "\10\0\54\1\6\0\32\1\3\0\16\1\2\0\4\1" + "\1\0\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[332];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
    private char zzBuffer[];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
      from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
    public CSharpTokenMaker() {
        super();
    }

    /**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }

    /**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so);
    }

    /**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start, end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }

    /**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
    public String[] getLineCommentStartAndEnd() {
        return new String[] { "//", null };
    }

    /**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
        resetTokenList();
        this.offsetShift = -text.offset + startOffset;
        int state = Token.NULL;
        switch(initialTokenType) {
            case Token.LITERAL_STRING_DOUBLE_QUOTE:
                state = VERBATIMSTRING;
                start = text.offset;
                break;
            case Token.COMMENT_MULTILINE:
                state = DELIMITEDCOMMENT;
                start = text.offset;
                break;
            default:
                state = Token.NULL;
        }
        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new DefaultToken();
        }
    }

    /**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
    private boolean zzRefill() throws java.io.IOException {
        return zzCurrentPos >= s.offset + s.count;
    }

    /**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
    public final void yyreset(java.io.Reader reader) throws java.io.IOException {
        zzBuffer = s.array;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtEOF = false;
    }

    /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
    public CSharpTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
    public CSharpTokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;
        int j = 0;
        while (i < 158) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    /**
   * Closes the input stream.
   */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        zzEndRead = zzStartRead;
        if (zzReader != null) zzReader.close();
    }

    /**
   * Returns the current lexical state.
   */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
   * Returns the text matched by the current regular expression.
   */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
   * Returns the length of the matched text region.
   */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }
        throw new Error(message);
    }

    /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
    public void yypushback(int number) {
        if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG);
        zzMarkedPos -= number;
    }

    /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;
        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;
        while (true) {
            zzMarkedPosL = zzMarkedPos;
            zzAction = -1;
            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
            zzState = zzLexicalState;
            zzForAction: {
                while (true) {
                    if (zzCurrentPosL < zzEndReadL) zzInput = zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;
                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }
                }
            }
            zzMarkedPos = zzMarkedPosL;
            switch(zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 28:
                    {
                        addToken(Token.PREPROCESSOR);
                    }
                case 34:
                    break;
                case 3:
                    {
                        addNullToken();
                        return firstToken;
                    }
                case 35:
                    break;
                case 30:
                    {
                        addToken(Token.LITERAL_CHAR);
                    }
                case 36:
                    break;
                case 25:
                    {
                        yybegin(YYINITIAL);
                        addToken(start, zzStartRead + 1, Token.COMMENT_MULTILINE);
                    }
                case 37:
                    break;
                case 4:
                    {
                        addToken(Token.WHITESPACE);
                    }
                case 38:
                    break;
                case 29:
                    {
                        addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
                    }
                case 39:
                    break;
                case 22:
                    {
                        addToken(Token.ERROR_CHAR);
                    }
                case 40:
                    break;
                case 31:
                    {
                        addToken(Token.ERROR_STRING_DOUBLE);
                    }
                case 41:
                    break;
                case 19:
                    {
                        addToken(Token.LITERAL_NUMBER_FLOAT);
                    }
                case 42:
                    break;
                case 21:
                    {
                        addToken(Token.RESERVED_WORD);
                    }
                case 43:
                    break;
                case 10:
                    {
                        addToken(Token.SEPARATOR);
                    }
                case 44:
                    break;
                case 12:
                    {
                        addToken(start, zzStartRead - 1, Token.COMMENT_DOCUMENTATION);
                        addNullToken();
                        return firstToken;
                    }
                case 45:
                    break;
                case 6:
                    {
                        addToken(Token.IDENTIFIER);
                    }
                case 46:
                    break;
                case 13:
                    {
                        int temp = zzStartRead;
                        addToken(start, zzStartRead - 1, Token.COMMENT_DOCUMENTATION);
                        addToken(temp, zzEndRead, Token.PREPROCESSOR);
                        addNullToken();
                        return firstToken;
                    }
                case 47:
                    break;
                case 8:
                    {
                        addToken(Token.ERROR_CHAR);
                        addNullToken();
                        return firstToken;
                    }
                case 48:
                    break;
                case 9:
                    {
                        addToken(Token.ERROR_STRING_DOUBLE);
                        addNullToken();
                        return firstToken;
                    }
                case 49:
                    break;
                case 32:
                    {
                        addToken(Token.DATA_TYPE);
                    }
                case 50:
                    break;
                case 2:
                    {
                        addToken(Token.ERROR_IDENTIFIER);
                    }
                case 51:
                    break;
                case 23:
                    {
                        addToken(Token.ERROR_CHAR);
                    }
                case 52:
                    break;
                case 33:
                    {
                        addToken(Token.LITERAL_BOOLEAN);
                    }
                case 53:
                    break;
                case 20:
                    {
                        start = zzMarkedPos - 2;
                        yybegin(VERBATIMSTRING);
                    }
                case 54:
                    break;
                case 24:
                    {
                        addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                    }
                case 55:
                    break;
                case 14:
                    {
                        addToken(start, zzStartRead - 1, Token.LITERAL_STRING_DOUBLE_QUOTE);
                        return firstToken;
                    }
                case 56:
                    break;
                case 16:
                    {
                        addToken(Token.COMMENT_EOL);
                        addNullToken();
                        return firstToken;
                    }
                case 57:
                    break;
                case 18:
                    {
                        addToken(Token.ERROR_NUMBER_FORMAT);
                    }
                case 58:
                    break;
                case 27:
                    {
                        start = zzMarkedPos - 3;
                        yybegin(DOCUMENTCOMMENT);
                    }
                case 59:
                    break;
                case 17:
                    {
                        start = zzMarkedPos - 2;
                        yybegin(DELIMITEDCOMMENT);
                    }
                case 60:
                    break;
                case 7:
                    {
                        addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                    }
                case 61:
                    break;
                case 5:
                    {
                        addToken(Token.OPERATOR);
                    }
                case 62:
                    break;
                case 26:
                    {
                        int temp = zzStartRead;
                        addToken(start, zzStartRead - 1, Token.COMMENT_DOCUMENTATION);
                        addToken(temp, zzMarkedPos - 1, Token.PREPROCESSOR);
                        start = zzMarkedPos;
                    }
                case 63:
                    break;
                case 15:
                    {
                        yybegin(YYINITIAL);
                        addToken(start, zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
                    }
                case 64:
                    break;
                case 1:
                    {
                    }
                case 65:
                    break;
                case 11:
                    {
                        addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                        return firstToken;
                    }
                case 66:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch(zzLexicalState) {
                            case VERBATIMSTRING:
                                {
                                    addToken(start, zzStartRead - 1, Token.LITERAL_STRING_DOUBLE_QUOTE);
                                    return firstToken;
                                }
                            case 333:
                                break;
                            case DOCUMENTCOMMENT:
                                {
                                    addToken(start, zzStartRead - 1, Token.COMMENT_DOCUMENTATION);
                                    addNullToken();
                                    return firstToken;
                                }
                            case 334:
                                break;
                            case YYINITIAL:
                                {
                                    addNullToken();
                                    return firstToken;
                                }
                            case 335:
                                break;
                            case DELIMITEDCOMMENT:
                                {
                                    addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                                    return firstToken;
                                }
                            case 336:
                                break;
                            default:
                                return null;
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }
}
