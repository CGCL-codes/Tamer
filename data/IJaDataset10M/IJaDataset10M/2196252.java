package superabbrevs.lexer;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 06-08-27 12:10 from the specification file
 * <tt>superabbrevs/lexer/TemplateGenerator.lex</tt>
 */
public class TemplateGeneratorLexer {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int CODE = 1;

    public static final int CODE_OUTPUT_FIELD = 2;

    public static final int YYINITIAL = 0;

    /** 
   * Translates characters to character classes
   */
    private static final String ZZ_CMAP_PACKED = "\11\0\1\12\1\2\1\0\1\3\1\1\22\0\1\3\2\0\1\5" + "\6\0\1\10\4\0\1\7\14\0\1\4\1\6\1\11ÔøÅ\0";

    /** 
   * Translates characters to character classes
   */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /** 
   * Translates DFA states to action switch labels.
   */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\3\0\1\1\2\2\2\1\1\3\1\4\1\5\6\3" + "\2\0\1\6\1\7\1\10\1\11\1\12\1\13\1\14" + "\1\15\1\16\1\17\2\20\1\0\1\21";

    private static int[] zzUnpackAction() {
        int[] result = new int[33];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** 
   * Translates a state to a row index in the transition table
   */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\13\0\26\0\41\0\54\0\41\0\67\0\102" + "\0\41\0\41\0\41\0\115\0\130\0\143\0\156\0\171" + "\0\204\0\67\0\102\0\217\0\232\0\245\0\41\0\41" + "\0\41\0\260\0\41\0\41\0\41\0\273\0\41\0\245" + "\0\41";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[33];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /** 
   * The transition table of the DFA
   */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\4\1\5\1\6\1\7\1\10\5\4\1\7\1\11" + "\1\12\1\13\1\11\1\14\1\15\1\11\1\16\1\17" + "\1\11\1\12\1\11\1\12\1\13\1\11\1\20\1\21" + "\1\11\1\16\1\17\1\11\1\12\15\0\1\6\13\0" + "\1\22\1\23\5\0\1\22\5\0\1\24\12\0\1\25" + "\16\0\1\26\10\0\1\27\1\30\11\0\1\31\10\0" + "\1\32\16\0\1\33\7\0\1\34\12\0\1\35\5\0" + "\1\36\1\37\1\40\6\0\1\40\6\0\1\41\6\0" + "\1\37\10\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[198];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static final int ZZ_UNKNOWN_ERROR = 0;

    private static final int ZZ_NO_MATCH = 1;

    private static final int ZZ_PUSHBACK_2BIG = 2;

    private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };

    /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\3\0\1\11\1\1\1\11\2\1\3\11\6\1\2\0" + "\3\1\3\11\1\1\3\11\1\1\1\11\1\0\1\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[33];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the textposition at the last state to be included in yytext */
    private int zzPushbackPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
      from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
    private int yycolumn;

    /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    StringBuffer code = new StringBuffer();

    StringBuffer text = new StringBuffer();

    String whiteSpace = null;

    boolean end = false;

    boolean inLineComment = false;

    boolean inRangeComment = false;

    boolean endOfLine = false;

    private Token token(int type, Object value) {
        Token t = new Token(type);
        t.addValue(value);
        return t;
    }

    private Token token(int type, Object value1, Object value2) {
        Token t = new Token(type);
        t.addValue(value1);
        t.addValue(value2);
        return t;
    }

    /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
    public TemplateGeneratorLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
    public TemplateGeneratorLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;
        int j = 0;
        while (i < 38) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
    private boolean zzRefill() throws java.io.IOException {
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzPushbackPos -= zzStartRead;
            zzStartRead = 0;
        }
        if (zzCurrentPos >= zzBuffer.length) {
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }
        int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);
        if (numRead < 0) {
            return true;
        } else {
            zzEndRead += numRead;
            return false;
        }
    }

    /**
   * Closes the input stream.
   */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        zzEndRead = zzStartRead;
        if (zzReader != null) zzReader.close();
    }

    /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }

    /**
   * Returns the current lexical state.
   */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
   * Returns the text matched by the current regular expression.
   */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
   * Returns the length of the matched text region.
   */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }
        throw new Error(message);
    }

    /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
    public void yypushback(int number) {
        if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG);
        zzMarkedPos -= number;
    }

    /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
    public Token nextToken() throws java.io.IOException {
        int zzInput;
        int zzAction;
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;
        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;
        while (true) {
            zzMarkedPosL = zzMarkedPos;
            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
                switch(zzBufferL[zzCurrentPosL]) {
                    case '':
                    case '':
                    case '¬Ö':
                    case '‚Ä®':
                    case '‚Ä©':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) zzR = false; else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn++;
                }
            }
            if (zzR) {
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) zzPeek = zzBufferL[zzMarkedPosL] == '\n'; else if (zzAtEOF) zzPeek = false; else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) zzPeek = false; else zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;
            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
            zzState = zzLexicalState;
            zzForAction: {
                while (true) {
                    if (zzCurrentPosL < zzEndReadL) zzInput = zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;
                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }
                }
            }
            zzMarkedPos = zzMarkedPosL;
            switch(zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 11:
                    {
                        inRangeComment = false;
                    }
                case 18:
                    break;
                case 3:
                    {
                        if (!inRangeComment) {
                            code.append(yytext());
                        }
                    }
                case 19:
                    break;
                case 6:
                    {
                        endOfLine = false;
                        yybegin(CODE);
                        code.setLength(0);
                        if (text.length() != 0) {
                            Token t = token(Token.TEXT_FIELD, text.toString());
                            text.setLength(0);
                            return t;
                        } else {
                            text.setLength(0);
                        }
                    }
                case 20:
                    break;
                case 15:
                    {
                        if (!inLineComment && !inRangeComment) {
                            yybegin(CODE_OUTPUT_FIELD);
                            String temp = "<#=" + code.toString();
                            code.setLength(0);
                            endOfLine = false;
                            return token(Token.TEXT_FIELD, temp);
                        }
                    }
                case 21:
                    break;
                case 16:
                    {
                        endOfLine = true;
                        whiteSpace = null;
                        if (!inLineComment && !inRangeComment) {
                            yybegin(YYINITIAL);
                            return token(Token.CODE, code.toString());
                        }
                    }
                case 22:
                    break;
                case 12:
                    {
                        if (!inLineComment && !inRangeComment) {
                            yybegin(CODE);
                            String temp = "<#" + code.toString();
                            code.setLength(0);
                            endOfLine = false;
                            return token(Token.TEXT_FIELD, temp);
                        }
                    }
                case 23:
                    break;
                case 7:
                    {
                        if (!inLineComment && !inRangeComment) {
                            String temp = "<#" + code.toString();
                            code.setLength(0);
                            endOfLine = false;
                            return token(Token.TEXT_FIELD, temp);
                        }
                    }
                case 24:
                    break;
                case 14:
                    {
                        whiteSpace = yytext().substring(0, yytext().length() - 3);
                        text.append(whiteSpace);
                        yybegin(CODE_OUTPUT_FIELD);
                        code.setLength(0);
                        if (text.length() != 0) {
                            Token t = token(Token.TEXT_FIELD, text.toString());
                            text.setLength(0);
                            return t;
                        } else {
                            text.setLength(0);
                        }
                    }
                case 25:
                    break;
                case 10:
                    {
                        inRangeComment = true;
                    }
                case 26:
                    break;
                case 5:
                    {
                        if (!inRangeComment) {
                            inLineComment = false;
                            code.append("\n");
                        }
                    }
                case 27:
                    break;
                case 8:
                    {
                        endOfLine = false;
                        whiteSpace = null;
                        if (!inLineComment && !inRangeComment) {
                            yybegin(YYINITIAL);
                            return token(Token.CODE, code.toString());
                        }
                    }
                case 28:
                    break;
                case 1:
                    {
                        endOfLine = false;
                        text.append(yytext());
                    }
                case 29:
                    break;
                case 4:
                    {
                        code.append(yytext());
                    }
                case 30:
                    break;
                case 17:
                    {
                        if (!inLineComment && !inRangeComment) {
                            String temp = "<#=" + code.toString();
                            code.setLength(0);
                            endOfLine = false;
                            return token(Token.TEXT_FIELD, temp);
                        }
                    }
                case 31:
                    break;
                case 13:
                    {
                        if (!inLineComment && !inRangeComment) {
                            yybegin(YYINITIAL);
                            if (!endOfLine || whiteSpace.equals("")) {
                                whiteSpace = null;
                            }
                            endOfLine = false;
                            return token(Token.CODE_OUTPUT_FIELD, code.toString(), whiteSpace);
                        }
                    }
                case 32:
                    break;
                case 2:
                    {
                        endOfLine = true;
                        text.append(yytext());
                    }
                case 33:
                    break;
                case 9:
                    {
                        inLineComment = true;
                    }
                case 34:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        switch(zzLexicalState) {
                            case CODE:
                                {
                                    if (end || code.length() == 0) {
                                        return null;
                                    } else {
                                        end = true;
                                        return token(Token.TEXT_FIELD, code.toString());
                                    }
                                }
                            case 34:
                                break;
                            case CODE_OUTPUT_FIELD:
                                {
                                    if (end || code.length() == 0) {
                                        return null;
                                    } else {
                                        end = true;
                                        return token(Token.TEXT_FIELD, code.toString());
                                    }
                                }
                            case 35:
                                break;
                            case YYINITIAL:
                                {
                                    if (end || text.length() == 0) {
                                        return null;
                                    } else {
                                        end = true;
                                        return token(Token.TEXT_FIELD, text.toString());
                                    }
                                }
                            case 36:
                                break;
                            default:
                                return null;
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }
}
