package com.skruk.elvis.admin.ontology.gui;

import com.skruk.elvis.admin.gui.*;
import com.skruk.elvis.admin.i18n.ResourceFormatter;
import com.skruk.elvis.admin.ontology.*;
import com.skruk.elvis.admin.registry.*;

/**
 * @author     skruk
 * @created    29 pa≈∫dziernik 2003
 */
public class NewClassPanel extends WizardPanel {

    /**  Description of the Field */
    public static final int NCP_NEW_CLASS = 1;

    /**  Description of the Field */
    public static final int NCP_NEW_PROPERTY = 2;

    /**  Description of the Field */
    protected java.util.List fields;

    /**  Description of the Field */
    private String id = "";

    /**  Description of the Field */
    private String label = "";

    /**  Description of the Field */
    private String description = "";

    /**  Description of the Field */
    private java.util.ArrayList superClass = new java.util.ArrayList();

    /**  Description of the Field */
    static ResourceFormatter formater = null;

    /**  Description of the Field */
    private int type;

    /**
	 * Creates new form NewClassPanel
	 *
	 * @param  title  Description of the Parameter
	 * @param  _type  Description of the Parameter
	 */
    public NewClassPanel(String title, int _type) {
        this.type = _type;
        setTitle(title);
        fields = new java.util.ArrayList(java.util.Arrays.asList(new String[] { "id", "label", "description", "superClass" }));
        if (formater == null) {
            formater = com.skruk.elvis.admin.plugin.OntologyPlugin.getInstance().getFormater();
        }
        initComponents();
        xInitComponents();
    }

    /** */
    protected void xInitComponents() {
        int iModel;
        String label_0;
        switch(this.type) {
            case NCP_NEW_CLASS:
            default:
                iModel = ElvisRegistry.getInstance().getPropertyBoolean("ontology.treemodel.class") ? OntologyTreeModel.OTM_CLASS_INHERITANCE : OntologyTreeModel.OTM_CLASS_NAMESPACE;
                label_0 = "class_edit_label_superclass";
                break;
            case NCP_NEW_PROPERTY:
                iModel = ElvisRegistry.getInstance().getPropertyBoolean("ontology.treemodel.prop") ? OntologyTreeModel.OTM_PROPERTY_INHERITANCE : OntologyTreeModel.OTM_PROPERTY_NAMESPACE;
                label_0 = "prop_edit_label_superprop";
                break;
        }
        this.jtSuperClass.setModel(OntologyTreeModel.create(iModel));
        this.jlSuperClass1.setText(formater.getText(label_0 + "_text"));
        this.jlSuperClass1.setToolTipText(formater.getText(label_0 + "_description"));
    }

    /**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jtfId = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jtfDefinedBy = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jtfName = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jtfDescription = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtSuperClass = new com.skruk.elvis.admin.ontology.gui.OntologyExpandedTree();
        jPanel8 = new javax.swing.JPanel();
        jlId = new javax.swing.JLabel();
        jlDefinedBy = new javax.swing.JLabel();
        jlLabel = new javax.swing.JLabel();
        jlComment = new javax.swing.JLabel();
        jlSuperClass1 = new javax.swing.JLabel();
        jlHead = new javax.swing.JLabel();
        setLayout(new java.awt.BorderLayout());
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));
        jPanel3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(20, 1, 20, 10)));
        jPanel4.setLayout(new java.awt.BorderLayout());
        jPanel4.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 1, 2, 1)));
        jtfId.setMaximumSize(new java.awt.Dimension(500, 23));
        jtfId.setMinimumSize(new java.awt.Dimension(150, 23));
        jtfId.setPreferredSize(new java.awt.Dimension(150, 23));
        jtfId.setVerifyInputWhenFocusTarget(false);
        jtfId.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfIdFocusLost(evt);
            }
        });
        jPanel4.add(jtfId, java.awt.BorderLayout.CENTER);
        jPanel3.add(jPanel4);
        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel5.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 1, 2, 1)));
        jtfDefinedBy.setEditable(false);
        jtfDefinedBy.setText(OntologyStorage.NS_ELVISSCHEMA);
        jtfDefinedBy.setMaximumSize(new java.awt.Dimension(500, 23));
        jtfDefinedBy.setMinimumSize(new java.awt.Dimension(150, 23));
        jtfDefinedBy.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jtfDefinedBy, java.awt.BorderLayout.CENTER);
        jPanel3.add(jPanel5);
        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel6.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 1, 2, 1)));
        jtfName.setMaximumSize(new java.awt.Dimension(500, 23));
        jtfName.setMinimumSize(new java.awt.Dimension(150, 23));
        jtfName.setPreferredSize(new java.awt.Dimension(150, 23));
        jtfName.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfNameFocusLost(evt);
            }
        });
        jPanel6.add(jtfName, java.awt.BorderLayout.CENTER);
        jPanel3.add(jPanel6);
        jPanel7.setLayout(new java.awt.BorderLayout());
        jPanel7.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 1, 2, 1)));
        jtfDescription.setMaximumSize(new java.awt.Dimension(500, 23));
        jtfDescription.setMinimumSize(new java.awt.Dimension(150, 23));
        jtfDescription.setPreferredSize(new java.awt.Dimension(150, 23));
        jtfDescription.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfDescriptionFocusLost(evt);
            }
        });
        jPanel7.add(jtfDescription, java.awt.BorderLayout.CENTER);
        jPanel3.add(jPanel7);
        jtSuperClass.setCellRenderer(new CheckableResourceCellTreeRenderer());
        jtSuperClass.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jtSuperClassMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jtSuperClass);
        jPanel3.add(jScrollPane1);
        add(jPanel3, java.awt.BorderLayout.CENTER);
        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.Y_AXIS));
        jPanel8.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(20, 20, 20, 1)));
        jlId.setFont(new java.awt.Font("Dialog", 0, 10));
        jlId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlId.setText(formater.getText("class_edit_label_id_text"));
        jlId.setToolTipText(formater.getText("class_edit_label_id_description"));
        jlId.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 5, 2, 10)));
        jlId.setMaximumSize(new java.awt.Dimension(100, 27));
        jlId.setMinimumSize(new java.awt.Dimension(100, 27));
        jlId.setPreferredSize(new java.awt.Dimension(100, 27));
        jlId.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel8.add(jlId);
        jlDefinedBy.setFont(new java.awt.Font("Dialog", 0, 10));
        jlDefinedBy.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlDefinedBy.setText(formater.getText("class_edit_label_defined_by_text"));
        jlDefinedBy.setToolTipText(formater.getText("class_edit_label_defined_by_description"));
        jlDefinedBy.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 5, 2, 10)));
        jlDefinedBy.setMaximumSize(new java.awt.Dimension(100, 27));
        jlDefinedBy.setMinimumSize(new java.awt.Dimension(100, 27));
        jlDefinedBy.setPreferredSize(new java.awt.Dimension(100, 27));
        jlDefinedBy.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel8.add(jlDefinedBy);
        jlLabel.setFont(new java.awt.Font("Dialog", 0, 10));
        jlLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlLabel.setText(formater.getText("class_edit_label_label_text"));
        jlLabel.setToolTipText(formater.getText("class_edit_label_label_description"));
        jlLabel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 5, 2, 10)));
        jlLabel.setMaximumSize(new java.awt.Dimension(100, 27));
        jlLabel.setMinimumSize(new java.awt.Dimension(100, 27));
        jlLabel.setPreferredSize(new java.awt.Dimension(100, 27));
        jlLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel8.add(jlLabel);
        jlComment.setFont(new java.awt.Font("Dialog", 0, 10));
        jlComment.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlComment.setText(formater.getText("class_edit_label_description_text"));
        jlComment.setToolTipText(formater.getText("class_edit_label_description_description"));
        jlComment.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 5, 2, 10)));
        jlComment.setMaximumSize(new java.awt.Dimension(100, 27));
        jlComment.setMinimumSize(new java.awt.Dimension(100, 27));
        jlComment.setPreferredSize(new java.awt.Dimension(100, 27));
        jlComment.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel8.add(jlComment);
        jlSuperClass1.setFont(new java.awt.Font("Dialog", 0, 10));
        jlSuperClass1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlSuperClass1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 5, 2, 10)));
        jlSuperClass1.setMaximumSize(new java.awt.Dimension(100, 27));
        jlSuperClass1.setMinimumSize(new java.awt.Dimension(100, 27));
        jlSuperClass1.setPreferredSize(new java.awt.Dimension(100, 27));
        jlSuperClass1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel8.add(jlSuperClass1);
        add(jPanel8, java.awt.BorderLayout.WEST);
        jlHead.setFont(new java.awt.Font("SansSerif", 1, 18));
        jlHead.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlHead.setText(getTitle());
        jlHead.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(20, 1, 10, 1)));
        jlHead.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(jlHead, java.awt.BorderLayout.NORTH);
    }

    /**
	 *  Description of the Method
	 *
	 * @param  evt  Description of the Parameter
	 */
    private void jtSuperClassMouseReleased(java.awt.event.MouseEvent evt) {
        int x = evt.getX();
        int y = evt.getY();
        if (jtSuperClass.tryCheck(x, y, false)) {
            this.superClass.clear();
            updateSelected((ElvisResourceTreeNode) jtSuperClass.getModel().getRoot());
        }
    }

    /**
	 *  Description of the Method
	 *
	 * @param  ertn  Description of the Parameter
	 */
    private void updateSelected(ElvisResourceTreeNode ertn) {
        if (ertn.isChecked() || ertn.isLocked()) {
            this.superClass.add(ertn.getResource());
        } else {
            java.util.List list = ertn.getChildren();
            if (list != null) {
                java.util.Iterator it = list.iterator();
                while (it.hasNext()) {
                    this.updateSelected((ElvisResourceTreeNode) it.next());
                }
            }
        }
    }

    /**
	 *  Description of the Method
	 *
	 * @param  evt  Description of the Parameter
	 */
    private void jtfDescriptionFocusLost(java.awt.event.FocusEvent evt) {
        this.description = jtfDescription.getText();
    }

    /**
	 *  Description of the Method
	 *
	 * @param  evt  Description of the Parameter
	 */
    private void jtfNameFocusLost(java.awt.event.FocusEvent evt) {
        this.label = jtfName.getText();
    }

    /**
	 *  Description of the Method
	 *
	 * @param  evt  Description of the Parameter
	 */
    private void jtfIdFocusLost(java.awt.event.FocusEvent evt) {
        char[] ac = jtfId.getText().toCharArray();
        if (ac.length > 0 && Character.isLowerCase(ac[0])) {
            ac[0] = Character.toUpperCase(ac[0]);
            jtfId.setText(new String(ac));
        }
        this.id = jtfId.getText();
    }

    /**
	 *  Description of the Method
	 *
	 * @param  sb  Description of the Parameter
	 * @return     Description of the Return Value
	 */
    public boolean canProceed(StringBuffer sb) {
        if (this.description.trim().equals("") || this.id.trim().equals("") || this.label.trim().equals("") || this.superClass.size() == 0) {
            sb.append(formater.getText("NewClassPanel_error_fillall"));
            return false;
        }
        if (ElvisClass.contains(OntologyStorage.NS_ELVISSCHEMA + this.id)) {
            sb.append(formater.getText("NewClassPanel_error_idnotunique"));
            String[] as = this.id.split("[ ]");
            StringBuffer nid = new StringBuffer();
            for (int i = 0; i < as.length; i++) {
                char[] ac = as[i].toCharArray();
                if (Character.isLowerCase(ac[0])) {
                    ac[0] = Character.toUpperCase(ac[0]);
                    nid.append(new String(ac));
                } else {
                    nid.append(as[i]);
                }
            }
            if (ElvisClass.contains(OntologyStorage.NS_ELVISSCHEMA + nid)) {
                int i = 0;
                boolean b = true;
                while (b) {
                    i++;
                    b = ElvisClass.contains(OntologyStorage.NS_ELVISSCHEMA + this.id + "_" + i);
                }
                this.id = this.id + "_" + i;
                this.jtfId.setText(this.id);
            } else {
                this.id = nid.toString();
                this.jtfId.setText(this.id);
            }
            return false;
        }
        updateContext();
        return true;
    }

    /**
	 *  Description of the Method
	 *
	 * @param  sb  Description of the Parameter
	 * @return     Description of the Return Value
	 */
    public boolean canRetreat(StringBuffer sb) {
        return this.canProceed(sb);
    }

    /**
	 *  Description of the Method
	 *
	 * @param  sb  Description of the Parameter
	 * @return     Description of the Return Value
	 */
    public boolean canFinish(StringBuffer sb) {
        return false;
    }

    /**
	 * Getter for property description.
	 *
	 * @return    Value of property description.
	 */
    public java.lang.String getDescription() {
        return description;
    }

    /**
	 * Setter for property description.
	 *
	 * @param  description  New value of property description.
	 */
    public void setDescription(java.lang.String description) {
        this.description = description;
    }

    /**
	 * Getter for property label.
	 *
	 * @return    Value of property label.
	 */
    public java.lang.String getLabel() {
        return label;
    }

    /**
	 * Setter for property label.
	 *
	 * @param  label  New value of property label.
	 */
    public void setLabel(java.lang.String label) {
        this.label = label;
    }

    /**
	 * Getter for property superClass.
	 *
	 * @return    Value of property superClass.
	 */
    public java.util.ArrayList getSuperClass() {
        return superClass;
    }

    /**
	 * Setter for property superClass.
	 *
	 * @param  superClass  New value of property superClass.
	 */
    public void setSuperClass(java.util.ArrayList superClass) {
        this.superClass = superClass;
    }

    /**  Description of the Method */
    protected void updateContext() {
        if (this.type == NewClassPanel.NCP_NEW_CLASS) {
            context.addString("class_name", this.jtfName.getText());
            context.addObject("super_classes", this.superClass);
            context.addString("class_description", this.jtfDescription.getText());
            context.addString("class_id", this.jtfId.getText());
            context.addString("action", "new_class");
        } else if (this.type == NewClassPanel.NCP_NEW_PROPERTY) {
            context.addString("prop_name", this.jtfName.getText());
            context.addObject("super_props", this.superClass);
            context.addString("prop_description", this.jtfDescription.getText());
            context.addString("prop_id", this.jtfId.getText());
            context.addString("action", "new_prop");
        }
    }

    /**
	 *  Sets the context attribute of the NewClassPanel object
	 *
	 * @param  _context  The new context value
	 */
    public void setContext(WizardContext _context) {
        this.context = _context;
        this.context.addString("class_type", "new");
    }

    /**  Description of the Method */
    public void notifyEnter() {
    }

    private javax.swing.JPanel jPanel3;

    /**  Description of the Field */
    private javax.swing.JPanel jPanel4;

    /**  Description of the Field */
    private javax.swing.JPanel jPanel5;

    /**  Description of the Field */
    private javax.swing.JPanel jPanel6;

    /**  Description of the Field */
    private javax.swing.JPanel jPanel7;

    /**  Description of the Field */
    private javax.swing.JPanel jPanel8;

    /**  Description of the Field */
    private javax.swing.JScrollPane jScrollPane1;

    /**  Description of the Field */
    private javax.swing.JLabel jlComment;

    /**  Description of the Field */
    private javax.swing.JLabel jlDefinedBy;

    /**  Description of the Field */
    private javax.swing.JLabel jlHead;

    /**  Description of the Field */
    private javax.swing.JLabel jlId;

    /**  Description of the Field */
    private javax.swing.JLabel jlLabel;

    /**  Description of the Field */
    private javax.swing.JLabel jlSuperClass1;

    /**  Description of the Field */
    private com.skruk.elvis.admin.ontology.gui.OntologyExpandedTree jtSuperClass;

    /**  Description of the Field */
    private javax.swing.JTextField jtfDefinedBy;

    /**  Description of the Field */
    private javax.swing.JTextField jtfDescription;

    /**  Description of the Field */
    private javax.swing.JTextField jtfId;

    /**  Description of the Field */
    private javax.swing.JTextField jtfName;
}
