package medi.swing.panel;

import java.util.TreeSet;
import javatools.db.DbException;
import javatools.db.DbIterator;
import javatools.swing.MoreSwingUtilities;
import javatools.swing.menu.DynamicPopupMenu;
import javatools.util.Clippable;
import medi.db.util.MediLinker;
import medi.swing.filler.ExecutionDetailsFiller;
import medi.swing.util.MenuUtils;
import medi.swing.util.TableUtils;

/**
 * Displays a list of file types.
 * @author Antonio Petrelli
 * @version 0.3.1
 */
public class ExecutionPanel extends medi.swing.panel.MediPanel {

    /** Creates new form ExecutionPanel */
    public ExecutionPanel() {
    }

    /** Initializes the panel.
     */
    public synchronized void init() {
        initialized = true;
        initComponents();
        fileTypeModel.setTypes("", "FileType");
        panExecutionDetails = new ExecutionDetailsPanel();
        panExecutionDetails.setProvider(prv);
        panExecutionDetails.setVolumeMounter(vmount);
        panExecutionDetails.setSubPanelDispatcher(spdisp);
        panExecutionDetails.setWaitIcon(waitIcon);
        panExecutionDetails.setClipboard(cb);
        panExecutionDetails.init();
        sppExecutionView.setRightComponent(panExecutionDetails);
        initFileTypeTableSizes();
        initLists();
        filler = new ExecutionDetailsFiller(panExecutionDetails);
        butUpdateFileType.setEnabled(false);
        fillerID = spdisp.registerFiller(filler, mediBundle.getString("Loading_file_type_details"));
        initSelectionListeners();
    }

    /** Shows the list of file types.
     * @throws DbException If something goes wrong.
     */
    public void showFileTypes() throws DbException {
        DbIterator res;
        if (!isInitialized()) init();
        res = prv.getFileTypes(null).iterator();
        TableUtils.fillSortedTable(tabFileTypeList, res, fileTypeIndexes, 0);
        initFileTypeTableSizes();
    }

    /** Displays the list of file types.
     * @param pID Ignored, you can set it to null.
     */
    public void setID(Object pID) {
        ID = pID;
        try {
            showFileTypes();
        } catch (DbException e) {
            System.out.println(e.getMessage());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        pumFileType = new DynamicPopupMenu();
        mniCut = new javax.swing.JMenuItem();
        mniCopy = new javax.swing.JMenuItem();
        mniPaste = new javax.swing.JMenuItem();
        sepPlugin = new javax.swing.JSeparator();
        pumDelete = new javax.swing.JPopupMenu();
        mniDeletePreserving = new javax.swing.JMenuItem();
        mniDelete = new javax.swing.JMenuItem();
        sppExecutionView = new javax.swing.JSplitPane();
        panFileTypeList = new javax.swing.JPanel();
        scpFileTypeList = new javax.swing.JScrollPane();
        tabFileTypeList = new javax.swing.JTable();
        lblFileTypeList = new javax.swing.JLabel();
        panButExecution = new javax.swing.JPanel();
        panInButExecution = new javax.swing.JPanel();
        butAddFileType = new javax.swing.JButton();
        butDeleteFileType = new javax.swing.JButton();
        butUpdateFileType = new javax.swing.JButton();
        butDetailsFileType = new javax.swing.JButton();
        pumFileType.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {

            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }

            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }

            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                pumFileTypePopupMenuWillBecomeVisible(evt);
            }
        });
        mniCut.setText(mediBundle.getString("Cut"));
        mniCut.setEnabled(false);
        pumFileType.add(mniCut);
        mniCopy.setText(mediBundle.getString("Copy"));
        mniCopy.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCopyActionPerformed(evt);
            }
        });
        pumFileType.add(mniCopy);
        mniPaste.setText(mediBundle.getString("Paste"));
        mniPaste.setEnabled(false);
        pumFileType.add(mniPaste);
        pumFileType.add(sepPlugin);
        mniDeletePreserving.setText(mediBundle.getString("Preserve_contents"));
        mniDeletePreserving.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDeletePreservingActionPerformed(evt);
            }
        });
        pumDelete.add(mniDeletePreserving);
        mniDelete.setText(mediBundle.getString("Remove_contents"));
        mniDelete.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDeleteActionPerformed(evt);
            }
        });
        pumDelete.add(mniDelete);
        setLayout(new java.awt.BorderLayout());
        setMinimumSize(new java.awt.Dimension(0, 0));
        sppExecutionView.setDividerLocation(200);
        sppExecutionView.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        sppExecutionView.setMinimumSize(new java.awt.Dimension(0, 0));
        sppExecutionView.setOneTouchExpandable(true);
        panFileTypeList.setLayout(new java.awt.BorderLayout());
        panFileTypeList.setMinimumSize(new java.awt.Dimension(0, 20));
        tabFileTypeList.setModel(buildFileTypeModel());
        tabFileTypeList.setToolTipText(mediBundle.getString("List_of_file_types"));
        tabFileTypeList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabFileTypeList.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                tabFileTypeListKeyTyped(evt);
            }
        });
        tabFileTypeList.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabFileTypeListMousePressed(evt);
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabFileTypeListMouseReleased(evt);
            }
        });
        scpFileTypeList.setViewportView(tabFileTypeList);
        panFileTypeList.add(scpFileTypeList, java.awt.BorderLayout.CENTER);
        lblFileTypeList.setText(mediBundle.getString("File_types"));
        lblFileTypeList.setPreferredSize(new java.awt.Dimension(70, 20));
        panFileTypeList.add(lblFileTypeList, java.awt.BorderLayout.NORTH);
        panButExecution.setLayout(new java.awt.BorderLayout());
        panInButExecution.setLayout(new java.awt.GridBagLayout());
        butAddFileType.setText(mediBundle.getString("Add"));
        butAddFileType.setToolTipText(mediBundle.getString("Creates_a_new_empty_file_type"));
        butAddFileType.setMaximumSize(new java.awt.Dimension(85, 23));
        butAddFileType.setPreferredSize(new java.awt.Dimension(95, 23));
        butAddFileType.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAddFileTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panInButExecution.add(butAddFileType, gridBagConstraints);
        butDeleteFileType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/1rightarrow.png")));
        butDeleteFileType.setText(mediBundle.getString("Delete"));
        butDeleteFileType.setToolTipText(mediBundle.getString("Deletes_selected_file_type"));
        butDeleteFileType.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        butDeleteFileType.setMargin(new java.awt.Insets(2, 2, 2, 2));
        butDeleteFileType.setMaximumSize(new java.awt.Dimension(85, 23));
        butDeleteFileType.setPreferredSize(new java.awt.Dimension(85, 23));
        butDeleteFileType.setEnabled(false);
        butDeleteFileType.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDeleteFileTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panInButExecution.add(butDeleteFileType, gridBagConstraints);
        butUpdateFileType.setText(mediBundle.getString("Update"));
        butUpdateFileType.setToolTipText(mediBundle.getString("Updates_modifications"));
        butUpdateFileType.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUpdateFileTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panInButExecution.add(butUpdateFileType, gridBagConstraints);
        butDetailsFileType.setText(mediBundle.getString("Details"));
        butDetailsFileType.setToolTipText(mediBundle.getString("Details_about_selected_file_type"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panInButExecution.add(butDetailsFileType, gridBagConstraints);
        panButExecution.add(panInButExecution, java.awt.BorderLayout.NORTH);
        panFileTypeList.add(panButExecution, java.awt.BorderLayout.EAST);
        sppExecutionView.setLeftComponent(panFileTypeList);
        add(sppExecutionView, java.awt.BorderLayout.CENTER);
    }

    private void mniDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        processDelete();
    }

    private void mniDeletePreservingActionPerformed(java.awt.event.ActionEvent evt) {
        processDeletePreserving();
    }

    private void mniCopyActionPerformed(java.awt.event.ActionEvent evt) {
        cb.copy(selClips);
    }

    private void pumFileTypePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
        selClips = fileTypeSorter.getRowsAsClips(tabFileTypeList.getSelectedRows());
        if (selClips != null && selClips.length > 0) {
            mniCopy.setEnabled(true);
        } else {
            mniCopy.setEnabled(false);
        }
        MenuUtils.buildDynamicPopupMenu(selClips, pumFileType);
    }

    private void tabFileTypeListMouseReleased(java.awt.event.MouseEvent evt) {
        if (evt.isPopupTrigger()) pumFileType.show(evt.getComponent(), evt.getX(), evt.getY());
    }

    private void tabFileTypeListMousePressed(java.awt.event.MouseEvent evt) {
        if (evt.isPopupTrigger()) pumFileType.show(evt.getComponent(), evt.getX(), evt.getY());
    }

    private void tabFileTypeListKeyTyped(java.awt.event.KeyEvent evt) {
        fileTypeChanged.add(fileTypeSorter.getIndex(tabFileTypeList.getSelectedRow()));
        butUpdateFileType.setEnabled(true);
    }

    private void butUpdateFileTypeActionPerformed(java.awt.event.ActionEvent evt) {
        int i, numRows, result;
        Integer tempFTID;
        javax.swing.table.TableCellEditor tempEditor;
        tempEditor = tabFileTypeList.getCellEditor();
        if (tempEditor != null) tempEditor.stopCellEditing();
        result = javax.swing.JOptionPane.showConfirmDialog(null, mediBundle.getString("Are_you_sure_to_update_these_file_types?"), mediBundle.getString("Confirm_file_type_update"), javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
        if (result != javax.swing.JOptionPane.YES_OPTION) return;
        try {
            numRows = fileTypeSorter.getRowCount();
            for (i = 0; i < numRows; i++) {
                tempFTID = (Integer) fileTypeSorter.getIndex(i);
                if (fileTypeChanged.contains(tempFTID)) prv.updateFileType(tempFTID, (String) fileTypeSorter.getValueAt(i, 0), (String) fileTypeSorter.getValueAt(i, 1), (Integer) fileTypeSorter.getValueAt(i, 2));
            }
            fileTypeChanged.clear();
            butUpdateFileType.setEnabled(false);
        } catch (DbException e) {
            System.out.println(e.getMessage());
        }
    }

    private void butDeleteFileTypeActionPerformed(java.awt.event.ActionEvent evt) {
        pumDelete.show(butDeleteFileType, butDeleteFileType.getX() + butDeleteFileType.getWidth(), butDeleteFileType.getY() - butDeleteFileType.getHeight());
    }

    private void butAddFileTypeActionPerformed(java.awt.event.ActionEvent evt) {
        Integer newFileTypeID;
        Object[] tempVector;
        try {
            newFileTypeID = prv.createEmptyFileType();
            tempVector = new Object[3];
            tempVector[0] = "";
            tempVector[1] = "";
            tempVector[2] = "";
            fileTypeModel.addRow(tempVector, newFileTypeID);
        } catch (DbException e) {
            System.out.println(e.getMessage());
        }
    }

    private javax.swing.JButton butAddFileType;

    private javax.swing.JButton butDeleteFileType;

    private javax.swing.JButton butDetailsFileType;

    private javax.swing.JButton butUpdateFileType;

    private javax.swing.JLabel lblFileTypeList;

    private javax.swing.JMenuItem mniCopy;

    private javax.swing.JMenuItem mniCut;

    private javax.swing.JMenuItem mniDelete;

    private javax.swing.JMenuItem mniDeletePreserving;

    private javax.swing.JMenuItem mniPaste;

    private javax.swing.JPanel panButExecution;

    private javax.swing.JPanel panFileTypeList;

    private javax.swing.JPanel panInButExecution;

    private javax.swing.JPopupMenu pumDelete;

    private javax.swing.JPopupMenu pumFileType;

    private javax.swing.JScrollPane scpFileTypeList;

    private javax.swing.JSeparator sepPlugin;

    private javax.swing.JSplitPane sppExecutionView;

    private javax.swing.JTable tabFileTypeList;

    private medi.swing.table.MediTableModel fileTypeModel;

    private medi.swing.table.MediTableSorter fileTypeSorter;

    private ExecutionDetailsPanel panExecutionDetails;

    private Integer fillerID;

    private ExecutionDetailsFiller filler;

    private int[] fileTypeIndexes = { 1, 2, 3 };

    private int[] dataIndexes = { 2, 3, 4, 5, 6 };

    private TreeSet fileTypeChanged;

    private Clippable[] selClips;

    private Integer[] selIndexes;

    private void initLists() {
        fileTypeChanged = new TreeSet();
    }

    private void initSelectionListeners() {
        javax.swing.ListSelectionModel rowSM;
        rowSM = tabFileTypeList.getSelectionModel();
        rowSM.addListSelectionListener(new javax.swing.event.ListSelectionListener() {

            public void valueChanged(javax.swing.event.ListSelectionEvent e) {
                int[] selRows;
                Object[] tempObject;
                if (e.getValueIsAdjusting()) return;
                javax.swing.ListSelectionModel lsm = (javax.swing.ListSelectionModel) e.getSource();
                if (!lsm.isSelectionEmpty()) {
                    selRows = tabFileTypeList.getSelectedRows();
                    if (selRows != null && selRows.length > 0) {
                        selIndexes = buildIndexes(selRows);
                        spdisp.fill(fillerID, selIndexes);
                        butDeleteFileType.setEnabled(true);
                    } else {
                        selIndexes = null;
                        butDeleteFileType.setEnabled(false);
                    }
                } else {
                    selIndexes = null;
                    butDeleteFileType.setEnabled(false);
                }
            }
        });
    }

    private void initFileTypeTableSizes() {
        int[] sizes;
        sizes = new int[3];
        sizes[0] = 200;
        sizes[1] = 50;
        sizes[2] = 50;
        MoreSwingUtilities.resizeTable(tabFileTypeList, sizes);
    }

    private medi.swing.table.MediTableSorter buildFileTypeModel() {
        fileTypeModel = new medi.swing.table.MediTableModel(new Object[][] {}, new String[] { mediBundle.getString("Name"), mediBundle.getString("Extension"), mediBundle.getString("Class") }) {

            Class[] types = new Class[] { java.lang.String.class, java.lang.String.class, java.lang.Integer.class };

            boolean[] canEdit = new boolean[] { true, true, true };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        fileTypeSorter = new medi.swing.table.MediTableSorter(fileTypeModel);
        fileTypeSorter.addMouseListenerToHeaderInTable(tabFileTypeList);
        return fileTypeSorter;
    }

    private Integer[] buildIndexes(int[] selRows) {
        int i, numIndexes;
        Integer[] indexes;
        numIndexes = selRows.length;
        indexes = new Integer[numIndexes];
        for (i = 0; i < numIndexes; i++) {
            indexes[i] = (Integer) fileTypeSorter.getIndex(selRows[i]);
        }
        return indexes;
    }

    private void processDeletePreserving() {
        int i, numClips, result;
        String message;
        Object[] tempObject;
        try {
            if (selIndexes != null) {
                message = null;
                if (selIndexes.length == 1) message = mediBundle.getString("Are_you_sure_to_delete_the_selected_file_type?") + "\n" + mediBundle.getString("WarningPreserve"); else message = mediBundle.getString("Are_you_sure_to_delete_the_selected_items?") + "\n" + mediBundle.getString("WarningPreserve");
                result = javax.swing.JOptionPane.showConfirmDialog(null, message, mediBundle.getString("Confirm_file_type_deletion"), javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
                if (result != javax.swing.JOptionPane.YES_OPTION) return;
                numClips = selIndexes.length;
                for (i = 0; i < numClips; i++) if (selIndexes[i] != null) {
                    tempObject = new Object[1];
                    tempObject[0] = selIndexes[i];
                    MediLinker.deletePreserving("FileType", tempObject);
                }
                showFileTypes();
            }
        } catch (DbException e) {
            System.out.println(e.getMessage());
        }
    }

    private void processDelete() {
        int i, numClips, result;
        String message;
        Object[] tempObject;
        try {
            if (selIndexes != null) {
                message = null;
                if (selIndexes.length == 1) message = mediBundle.getString("Are_you_sure_to_delete_the_selected_file_type?") + "\n" + mediBundle.getString("WarningDeleteAll"); else message = mediBundle.getString("Are_you_sure_to_delete_the_selected_items?") + "\n" + mediBundle.getString("WarningDeleteAll");
                result = javax.swing.JOptionPane.showConfirmDialog(null, message, mediBundle.getString("Confirm_file_type_deletion"), javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
                if (result != javax.swing.JOptionPane.YES_OPTION) return;
                numClips = selIndexes.length;
                for (i = 0; i < numClips; i++) if (selIndexes[i] != null) {
                    tempObject = new Object[1];
                    tempObject[0] = selIndexes[i];
                    MediLinker.deleteAll("FileType", tempObject);
                }
                showFileTypes();
            }
        } catch (DbException e) {
            System.out.println(e.getMessage());
        }
    }
}
