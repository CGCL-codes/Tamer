package org.galab.frame;

import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import org.galab.saveableobject.*;
import org.galab.util.*;

public class GALab extends javax.swing.JFrame {

    /** Creates new form Test */
    public GALab(Launcher newLauncher, GARunner newRunner) {
        initComponents();
        pack();
        if (newLauncher != null) {
            launcher = newLauncher;
        }
        runner = newRunner;
        initMyComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        scrollPane = new javax.swing.JScrollPane();
        GAPanel = new javax.swing.JPanel();
        labPopulationSize = new javax.swing.JLabel();
        texPopulationSize = new javax.swing.JTextField();
        labNumEliteMembers = new javax.swing.JLabel();
        texNumEliteMembers = new javax.swing.JTextField();
        labNumParents = new javax.swing.JLabel();
        texNumParents = new javax.swing.JTextField();
        comParentSelectionMethod = new javax.swing.JComboBox();
        labParentSelectionMethod = new javax.swing.JLabel();
        labNumChildren = new javax.swing.JLabel();
        comChildSelectionMethod = new javax.swing.JComboBox();
        labChildSelectionMethod = new javax.swing.JLabel();
        texNumChildren = new javax.swing.JTextField();
        labOwnParent = new javax.swing.JLabel();
        radOwnParentAlways = new javax.swing.JRadioButton();
        radOwnParentPossible = new javax.swing.JRadioButton();
        radOwnParentNo = new javax.swing.JRadioButton();
        labRetestParents = new javax.swing.JLabel();
        radRetestParentsEveryUse = new javax.swing.JRadioButton();
        radRetestParentsEveryGeneration = new javax.swing.JRadioButton();
        radRetestParentsNever = new javax.swing.JRadioButton();
        texMutationChance = new javax.swing.JTextField();
        labMutationChance = new javax.swing.JLabel();
        labMutationRate = new javax.swing.JLabel();
        texMutationRate = new javax.swing.JTextField();
        texCrossoverRate = new javax.swing.JTextField();
        labCrossoverRate = new javax.swing.JLabel();
        texStepsPerTrial = new javax.swing.JTextField();
        labStepsPerTrial = new javax.swing.JLabel();
        labTrialsPerEvaluation = new javax.swing.JLabel();
        texTrialsPerEvaluation = new javax.swing.JTextField();
        texGenerationsPerRun = new javax.swing.JTextField();
        labGenerationsPerRun = new javax.swing.JLabel();
        labHeadPopulation = new javax.swing.JLabel();
        labHeadParents = new javax.swing.JLabel();
        labHeadMutation = new javax.swing.JLabel();
        labHeadTrials = new javax.swing.JLabel();
        labTitle = new javax.swing.JLabel();
        labOwnParent2 = new javax.swing.JLabel();
        labRetestParents2 = new javax.swing.JLabel();
        labMutationType = new javax.swing.JLabel();
        comMutationType = new javax.swing.JComboBox();
        labWrapType = new javax.swing.JLabel();
        comWrapType = new javax.swing.JComboBox();
        labStepsPerTrialLimit = new javax.swing.JLabel();
        texStepsPerTrialLimit = new javax.swing.JTextField();
        labResetupEvery = new javax.swing.JLabel();
        texResetupEvery = new javax.swing.JTextField();
        labResetupEveryLimit = new javax.swing.JLabel();
        texResetupEveryLimit = new javax.swing.JTextField();
        butOK = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menLoadGA = new javax.swing.JMenuItem();
        menSaveGA = new javax.swing.JMenuItem();
        menClearGA = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        menQuit = new javax.swing.JMenuItem();
        defaultsMenu = new javax.swing.JMenu();
        menStdGen = new javax.swing.JMenuItem();
        menEliteGen = new javax.swing.JMenuItem();
        menTounament = new javax.swing.JMenuItem();
        menMicrobial = new javax.swing.JMenuItem();
        getContentPane().setLayout(new java.awt.GridBagLayout());
        setTitle("GA - GA Lab");
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        scrollPane.setPreferredSize(new java.awt.Dimension(350, 500));
        scrollPane.setMinimumSize(new java.awt.Dimension(350, 500));
        GAPanel.setLayout(new java.awt.GridBagLayout());
        GAPanel.setPreferredSize(new java.awt.Dimension(300, 825));
        GAPanel.setName("");
        GAPanel.setMinimumSize(new java.awt.Dimension(300, 825));
        GAPanel.setMaximumSize(new java.awt.Dimension(300, 825));
        labPopulationSize.setText("Population size");
        labPopulationSize.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labPopulationSize.setFont(new java.awt.Font("Dialog", 0, 12));
        labPopulationSize.setPreferredSize(new java.awt.Dimension(150, 25));
        labPopulationSize.setMinimumSize(new java.awt.Dimension(150, 25));
        labPopulationSize.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labPopulationSize, gridBagConstraints);
        texPopulationSize.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texPopulationSize.setPreferredSize(new java.awt.Dimension(125, 25));
        texPopulationSize.setMaximumSize(new java.awt.Dimension(125, 25));
        texPopulationSize.setMinimumSize(new java.awt.Dimension(125, 25));
        texPopulationSize.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texPopulationSizeActionPerformed(evt);
            }
        });
        texPopulationSize.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                texPopulationSizeFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        GAPanel.add(texPopulationSize, gridBagConstraints);
        labNumEliteMembers.setText("No. elite members");
        labNumEliteMembers.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labNumEliteMembers.setFont(new java.awt.Font("Dialog", 0, 12));
        labNumEliteMembers.setPreferredSize(new java.awt.Dimension(150, 25));
        labNumEliteMembers.setMinimumSize(new java.awt.Dimension(150, 25));
        labNumEliteMembers.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labNumEliteMembers, gridBagConstraints);
        texNumEliteMembers.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texNumEliteMembers.setPreferredSize(new java.awt.Dimension(125, 25));
        texNumEliteMembers.setMaximumSize(new java.awt.Dimension(125, 25));
        texNumEliteMembers.setMinimumSize(new java.awt.Dimension(125, 25));
        texNumEliteMembers.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texNumEliteMembersActionPerformed(evt);
            }
        });
        texNumEliteMembers.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                texNumEliteMembersFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        GAPanel.add(texNumEliteMembers, gridBagConstraints);
        labNumParents.setText("Number of parents");
        labNumParents.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labNumParents.setFont(new java.awt.Font("Dialog", 0, 12));
        labNumParents.setPreferredSize(new java.awt.Dimension(150, 25));
        labNumParents.setMinimumSize(new java.awt.Dimension(150, 25));
        labNumParents.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 5);
        GAPanel.add(labNumParents, gridBagConstraints);
        texNumParents.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texNumParents.setPreferredSize(new java.awt.Dimension(125, 25));
        texNumParents.setMaximumSize(new java.awt.Dimension(125, 25));
        texNumParents.setMinimumSize(new java.awt.Dimension(125, 25));
        texNumParents.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texNumParentsActionPerformed(evt);
            }
        });
        texNumParents.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                texNumParentsFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        GAPanel.add(texNumParents, gridBagConstraints);
        comParentSelectionMethod.setFont(new java.awt.Font("Dialog", 0, 12));
        comParentSelectionMethod.setPreferredSize(new java.awt.Dimension(125, 25));
        comParentSelectionMethod.setMinimumSize(new java.awt.Dimension(125, 25));
        comParentSelectionMethod.setMaximumSize(new java.awt.Dimension(125, 25));
        comParentSelectionMethod.addItem("Rank Selection");
        comParentSelectionMethod.addItem("Tournament Selection");
        comParentSelectionMethod.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comParentSelectionMethodActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        GAPanel.add(comParentSelectionMethod, gridBagConstraints);
        labParentSelectionMethod.setText("Parent selection");
        labParentSelectionMethod.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labParentSelectionMethod.setFont(new java.awt.Font("Dialog", 0, 12));
        labParentSelectionMethod.setPreferredSize(new java.awt.Dimension(150, 25));
        labParentSelectionMethod.setMinimumSize(new java.awt.Dimension(150, 25));
        labParentSelectionMethod.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labParentSelectionMethod, gridBagConstraints);
        labNumChildren.setText("Children per generation");
        labNumChildren.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labNumChildren.setFont(new java.awt.Font("Dialog", 0, 12));
        labNumChildren.setPreferredSize(new java.awt.Dimension(150, 25));
        labNumChildren.setMinimumSize(new java.awt.Dimension(150, 25));
        labNumChildren.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labNumChildren, gridBagConstraints);
        comChildSelectionMethod.setFont(new java.awt.Font("Dialog", 0, 12));
        comChildSelectionMethod.setPreferredSize(new java.awt.Dimension(125, 25));
        comChildSelectionMethod.setMinimumSize(new java.awt.Dimension(125, 25));
        comChildSelectionMethod.setMaximumSize(new java.awt.Dimension(125, 25));
        comChildSelectionMethod.addItem("Rank Selection");
        comChildSelectionMethod.addItem("Tournament Selection");
        comChildSelectionMethod.addItem("Random Selection");
        comChildSelectionMethod.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comChildSelectionMethodActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        GAPanel.add(comChildSelectionMethod, gridBagConstraints);
        labChildSelectionMethod.setText("Child selection");
        labChildSelectionMethod.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labChildSelectionMethod.setFont(new java.awt.Font("Dialog", 0, 12));
        labChildSelectionMethod.setPreferredSize(new java.awt.Dimension(150, 25));
        labChildSelectionMethod.setMinimumSize(new java.awt.Dimension(150, 25));
        labChildSelectionMethod.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labChildSelectionMethod, gridBagConstraints);
        texNumChildren.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texNumChildren.setPreferredSize(new java.awt.Dimension(125, 25));
        texNumChildren.setMaximumSize(new java.awt.Dimension(125, 25));
        texNumChildren.setMinimumSize(new java.awt.Dimension(125, 25));
        texNumChildren.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texNumChildrenActionPerformed(evt);
            }
        });
        texNumChildren.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                texNumChildrenFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        GAPanel.add(texNumChildren, gridBagConstraints);
        labOwnParent.setText("Can a child be");
        labOwnParent.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labOwnParent.setFont(new java.awt.Font("Dialog", 0, 12));
        labOwnParent.setPreferredSize(new java.awt.Dimension(150, 25));
        labOwnParent.setMinimumSize(new java.awt.Dimension(150, 25));
        labOwnParent.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labOwnParent, gridBagConstraints);
        radOwnParentAlways.setFont(new java.awt.Font("Dialog", 0, 12));
        radOwnParentAlways.setText("Always");
        radOwnParentAlways.setPreferredSize(new java.awt.Dimension(125, 25));
        radOwnParentAlways.setMaximumSize(new java.awt.Dimension(125, 25));
        radOwnParentAlways.setMinimumSize(new java.awt.Dimension(125, 25));
        radOwnParentAlways.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radOwnParentAlwaysActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        GAPanel.add(radOwnParentAlways, gridBagConstraints);
        radOwnParentPossible.setFont(new java.awt.Font("Dialog", 0, 12));
        radOwnParentPossible.setText("Possible");
        radOwnParentPossible.setPreferredSize(new java.awt.Dimension(125, 25));
        radOwnParentPossible.setMaximumSize(new java.awt.Dimension(125, 25));
        radOwnParentPossible.setMinimumSize(new java.awt.Dimension(125, 25));
        radOwnParentPossible.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radOwnParentPossibleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        GAPanel.add(radOwnParentPossible, gridBagConstraints);
        radOwnParentNo.setFont(new java.awt.Font("Dialog", 0, 12));
        radOwnParentNo.setText("No");
        radOwnParentNo.setPreferredSize(new java.awt.Dimension(125, 25));
        radOwnParentNo.setMaximumSize(new java.awt.Dimension(125, 25));
        radOwnParentNo.setMinimumSize(new java.awt.Dimension(125, 25));
        radOwnParentNo.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radOwnParentNoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        GAPanel.add(radOwnParentNo, gridBagConstraints);
        labRetestParents.setText("How often to retest");
        labRetestParents.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labRetestParents.setFont(new java.awt.Font("Dialog", 0, 12));
        labRetestParents.setPreferredSize(new java.awt.Dimension(150, 25));
        labRetestParents.setMinimumSize(new java.awt.Dimension(150, 25));
        labRetestParents.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        GAPanel.add(labRetestParents, gridBagConstraints);
        radRetestParentsEveryUse.setFont(new java.awt.Font("Dialog", 0, 12));
        radRetestParentsEveryUse.setText("Every Use");
        radRetestParentsEveryUse.setPreferredSize(new java.awt.Dimension(125, 25));
        radRetestParentsEveryUse.setMaximumSize(new java.awt.Dimension(125, 25));
        radRetestParentsEveryUse.setMinimumSize(new java.awt.Dimension(125, 25));
        radRetestParentsEveryUse.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radRetestParentsEveryUseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        GAPanel.add(radRetestParentsEveryUse, gridBagConstraints);
        radRetestParentsEveryGeneration.setFont(new java.awt.Font("Dialog", 0, 12));
        radRetestParentsEveryGeneration.setText("Every Generation");
        radRetestParentsEveryGeneration.setPreferredSize(new java.awt.Dimension(125, 25));
        radRetestParentsEveryGeneration.setMaximumSize(new java.awt.Dimension(125, 25));
        radRetestParentsEveryGeneration.setMinimumSize(new java.awt.Dimension(125, 25));
        radRetestParentsEveryGeneration.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radRetestParentsEveryGenerationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        GAPanel.add(radRetestParentsEveryGeneration, gridBagConstraints);
        radRetestParentsNever.setFont(new java.awt.Font("Dialog", 0, 12));
        radRetestParentsNever.setText("Never");
        radRetestParentsNever.setPreferredSize(new java.awt.Dimension(125, 25));
        radRetestParentsNever.setMaximumSize(new java.awt.Dimension(125, 25));
        radRetestParentsNever.setMinimumSize(new java.awt.Dimension(125, 25));
        radRetestParentsNever.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radRetestParentsNeverActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        GAPanel.add(radRetestParentsNever, gridBagConstraints);
        texMutationChance.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texMutationChance.setPreferredSize(new java.awt.Dimension(125, 25));
        texMutationChance.setMaximumSize(new java.awt.Dimension(125, 25));
        texMutationChance.setMinimumSize(new java.awt.Dimension(125, 25));
        texMutationChance.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texMutationChanceActionPerformed(evt);
            }
        });
        texMutationChance.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                texMutationChanceFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 19;
        GAPanel.add(texMutationChance, gridBagConstraints);
        labMutationChance.setText("Chance of mutation");
        labMutationChance.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labMutationChance.setFont(new java.awt.Font("Dialog", 0, 12));
        labMutationChance.setPreferredSize(new java.awt.Dimension(150, 25));
        labMutationChance.setMinimumSize(new java.awt.Dimension(150, 25));
        labMutationChance.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        GAPanel.add(labMutationChance, gridBagConstraints);
        labMutationRate.setText("Mutation rate");
        labMutationRate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labMutationRate.setFont(new java.awt.Font("Dialog", 0, 12));
        labMutationRate.setPreferredSize(new java.awt.Dimension(150, 25));
        labMutationRate.setMinimumSize(new java.awt.Dimension(150, 25));
        labMutationRate.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labMutationRate, gridBagConstraints);
        texMutationRate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texMutationRate.setPreferredSize(new java.awt.Dimension(125, 25));
        texMutationRate.setMaximumSize(new java.awt.Dimension(125, 25));
        texMutationRate.setMinimumSize(new java.awt.Dimension(125, 25));
        texMutationRate.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texMutationRateActionPerformed(evt);
            }
        });
        texMutationRate.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                texMutationRateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 20;
        GAPanel.add(texMutationRate, gridBagConstraints);
        texCrossoverRate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texCrossoverRate.setPreferredSize(new java.awt.Dimension(125, 25));
        texCrossoverRate.setMaximumSize(new java.awt.Dimension(125, 25));
        texCrossoverRate.setMinimumSize(new java.awt.Dimension(125, 25));
        texCrossoverRate.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texCrossoverRateActionPerformed(evt);
            }
        });
        texCrossoverRate.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                texCrossoverRateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 21;
        GAPanel.add(texCrossoverRate, gridBagConstraints);
        labCrossoverRate.setText("Crossover rate");
        labCrossoverRate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labCrossoverRate.setFont(new java.awt.Font("Dialog", 0, 12));
        labCrossoverRate.setPreferredSize(new java.awt.Dimension(150, 25));
        labCrossoverRate.setMinimumSize(new java.awt.Dimension(150, 25));
        labCrossoverRate.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labCrossoverRate, gridBagConstraints);
        texStepsPerTrial.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texStepsPerTrial.setPreferredSize(new java.awt.Dimension(125, 25));
        texStepsPerTrial.setMaximumSize(new java.awt.Dimension(125, 25));
        texStepsPerTrial.setMinimumSize(new java.awt.Dimension(125, 25));
        texStepsPerTrial.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texStepsPerTrialActionPerformed(evt);
            }
        });
        texStepsPerTrial.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                texStepsPerTrialFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 26;
        GAPanel.add(texStepsPerTrial, gridBagConstraints);
        labStepsPerTrial.setText("Seconds per trial");
        labStepsPerTrial.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labStepsPerTrial.setFont(new java.awt.Font("Dialog", 0, 12));
        labStepsPerTrial.setPreferredSize(new java.awt.Dimension(150, 25));
        labStepsPerTrial.setMinimumSize(new java.awt.Dimension(150, 25));
        labStepsPerTrial.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labStepsPerTrial, gridBagConstraints);
        labTrialsPerEvaluation.setText("Trials per evaluation");
        labTrialsPerEvaluation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labTrialsPerEvaluation.setFont(new java.awt.Font("Dialog", 0, 12));
        labTrialsPerEvaluation.setPreferredSize(new java.awt.Dimension(150, 25));
        labTrialsPerEvaluation.setMinimumSize(new java.awt.Dimension(150, 25));
        labTrialsPerEvaluation.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 30;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labTrialsPerEvaluation, gridBagConstraints);
        texTrialsPerEvaluation.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texTrialsPerEvaluation.setPreferredSize(new java.awt.Dimension(125, 25));
        texTrialsPerEvaluation.setMaximumSize(new java.awt.Dimension(125, 25));
        texTrialsPerEvaluation.setMinimumSize(new java.awt.Dimension(125, 25));
        texTrialsPerEvaluation.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texTrialsPerEvaluationActionPerformed(evt);
            }
        });
        texTrialsPerEvaluation.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                texTrialsPerEvaluationFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 30;
        GAPanel.add(texTrialsPerEvaluation, gridBagConstraints);
        texGenerationsPerRun.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texGenerationsPerRun.setPreferredSize(new java.awt.Dimension(125, 25));
        texGenerationsPerRun.setMaximumSize(new java.awt.Dimension(125, 25));
        texGenerationsPerRun.setMinimumSize(new java.awt.Dimension(125, 25));
        texGenerationsPerRun.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texGenerationsPerRunActionPerformed(evt);
            }
        });
        texGenerationsPerRun.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                texGenerationsPerRunFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 31;
        GAPanel.add(texGenerationsPerRun, gridBagConstraints);
        labGenerationsPerRun.setText("Total generations");
        labGenerationsPerRun.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labGenerationsPerRun.setFont(new java.awt.Font("Dialog", 0, 12));
        labGenerationsPerRun.setPreferredSize(new java.awt.Dimension(150, 25));
        labGenerationsPerRun.setMinimumSize(new java.awt.Dimension(150, 25));
        labGenerationsPerRun.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 31;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labGenerationsPerRun, gridBagConstraints);
        labHeadPopulation.setText("Population");
        labHeadPopulation.setFont(new java.awt.Font("Arial", 0, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        GAPanel.add(labHeadPopulation, gridBagConstraints);
        labHeadParents.setText("Parents");
        labHeadParents.setFont(new java.awt.Font("Arial", 0, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 5, 0);
        GAPanel.add(labHeadParents, gridBagConstraints);
        labHeadMutation.setText("Mutation");
        labHeadMutation.setFont(new java.awt.Font("Arial", 0, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 5, 0);
        GAPanel.add(labHeadMutation, gridBagConstraints);
        labHeadTrials.setText("Trials");
        labHeadTrials.setFont(new java.awt.Font("Arial", 0, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 25;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 5, 0);
        GAPanel.add(labHeadTrials, gridBagConstraints);
        labTitle.setText("GA Lab");
        labTitle.setFont(new java.awt.Font("Dialog", 0, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        GAPanel.add(labTitle, gridBagConstraints);
        labOwnParent2.setText("its own parent?");
        labOwnParent2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labOwnParent2.setFont(new java.awt.Font("Dialog", 0, 12));
        labOwnParent2.setPreferredSize(new java.awt.Dimension(150, 25));
        labOwnParent2.setMinimumSize(new java.awt.Dimension(150, 25));
        labOwnParent2.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labOwnParent2, gridBagConstraints);
        labRetestParents2.setText("the parent genotypes?");
        labRetestParents2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labRetestParents2.setFont(new java.awt.Font("Dialog", 0, 12));
        labRetestParents2.setPreferredSize(new java.awt.Dimension(150, 25));
        labRetestParents2.setMinimumSize(new java.awt.Dimension(150, 25));
        labRetestParents2.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        GAPanel.add(labRetestParents2, gridBagConstraints);
        labMutationType.setText("Mutation Type");
        labMutationType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labMutationType.setFont(new java.awt.Font("Dialog", 0, 12));
        labMutationType.setPreferredSize(new java.awt.Dimension(150, 25));
        labMutationType.setMinimumSize(new java.awt.Dimension(150, 25));
        labMutationType.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labMutationType, gridBagConstraints);
        comMutationType.setFont(new java.awt.Font("Dialog", 0, 12));
        comMutationType.setPreferredSize(new java.awt.Dimension(125, 25));
        comMutationType.setMinimumSize(new java.awt.Dimension(125, 25));
        comMutationType.setMaximumSize(new java.awt.Dimension(125, 25));
        comMutationType.addItem("Uniform");
        comMutationType.addItem("Gaussian");
        comMutationType.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comMutTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 22;
        GAPanel.add(comMutationType, gridBagConstraints);
        labWrapType.setText("Wrap Type");
        labWrapType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labWrapType.setFont(new java.awt.Font("Dialog", 0, 12));
        labWrapType.setPreferredSize(new java.awt.Dimension(150, 25));
        labWrapType.setMinimumSize(new java.awt.Dimension(150, 25));
        labWrapType.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labWrapType, gridBagConstraints);
        comWrapType.setFont(new java.awt.Font("Dialog", 0, 12));
        comWrapType.setPreferredSize(new java.awt.Dimension(125, 25));
        comWrapType.setMinimumSize(new java.awt.Dimension(125, 25));
        comWrapType.setMaximumSize(new java.awt.Dimension(125, 25));
        comWrapType.addItem("Stick");
        comWrapType.addItem("Bounce");
        comWrapType.addItem("Wrap");
        comWrapType.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comWrapTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 23;
        GAPanel.add(comWrapType, gridBagConstraints);
        labStepsPerTrialLimit.setText("(between above and...)");
        labStepsPerTrialLimit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labStepsPerTrialLimit.setFont(new java.awt.Font("Dialog", 0, 12));
        labStepsPerTrialLimit.setPreferredSize(new java.awt.Dimension(150, 25));
        labStepsPerTrialLimit.setMinimumSize(new java.awt.Dimension(150, 25));
        labStepsPerTrialLimit.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labStepsPerTrialLimit, gridBagConstraints);
        texStepsPerTrialLimit.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texStepsPerTrialLimit.setPreferredSize(new java.awt.Dimension(125, 25));
        texStepsPerTrialLimit.setMaximumSize(new java.awt.Dimension(125, 25));
        texStepsPerTrialLimit.setMinimumSize(new java.awt.Dimension(125, 25));
        texStepsPerTrialLimit.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texStepsPerTrialLimitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 27;
        GAPanel.add(texStepsPerTrialLimit, gridBagConstraints);
        labResetupEvery.setText("Re-setup every");
        labResetupEvery.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labResetupEvery.setFont(new java.awt.Font("Dialog", 0, 12));
        labResetupEvery.setPreferredSize(new java.awt.Dimension(150, 25));
        labResetupEvery.setMinimumSize(new java.awt.Dimension(150, 25));
        labResetupEvery.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labResetupEvery, gridBagConstraints);
        texResetupEvery.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texResetupEvery.setPreferredSize(new java.awt.Dimension(125, 25));
        texResetupEvery.setMaximumSize(new java.awt.Dimension(125, 25));
        texResetupEvery.setMinimumSize(new java.awt.Dimension(125, 25));
        texResetupEvery.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texResetupEveryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 28;
        GAPanel.add(texResetupEvery, gridBagConstraints);
        labResetupEveryLimit.setText("(between above and...)");
        labResetupEveryLimit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labResetupEveryLimit.setFont(new java.awt.Font("Dialog", 0, 12));
        labResetupEveryLimit.setPreferredSize(new java.awt.Dimension(150, 25));
        labResetupEveryLimit.setMinimumSize(new java.awt.Dimension(150, 25));
        labResetupEveryLimit.setMaximumSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 29;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        GAPanel.add(labResetupEveryLimit, gridBagConstraints);
        texResetupEveryLimit.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texResetupEveryLimit.setPreferredSize(new java.awt.Dimension(125, 25));
        texResetupEveryLimit.setMaximumSize(new java.awt.Dimension(125, 25));
        texResetupEveryLimit.setMinimumSize(new java.awt.Dimension(125, 25));
        texResetupEveryLimit.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textResetupEveryLimitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 29;
        GAPanel.add(texResetupEveryLimit, gridBagConstraints);
        scrollPane.setViewportView(GAPanel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.9;
        getContentPane().add(scrollPane, gridBagConstraints);
        butOK.setFont(new java.awt.Font("Dialog", 0, 12));
        butOK.setText("OK");
        butOK.setPreferredSize(new java.awt.Dimension(100, 25));
        butOK.setMaximumSize(new java.awt.Dimension(100, 25));
        butOK.setMinimumSize(new java.awt.Dimension(100, 25));
        butOK.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butOKActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        getContentPane().add(butOK, gridBagConstraints);
        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Dialog", 0, 12));
        menLoadGA.setFont(new java.awt.Font("Dialog", 0, 12));
        menLoadGA.setText("Load GA");
        menLoadGA.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menLoadGAActionPerformed(evt);
            }
        });
        fileMenu.add(menLoadGA);
        menSaveGA.setFont(new java.awt.Font("Dialog", 0, 12));
        menSaveGA.setText("Save GA");
        menSaveGA.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menSaveGAActionPerformed(evt);
            }
        });
        fileMenu.add(menSaveGA);
        menClearGA.setFont(new java.awt.Font("Dialog", 0, 12));
        menClearGA.setText("Clear GA");
        menClearGA.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menClearGAActionPerformed(evt);
            }
        });
        fileMenu.add(menClearGA);
        fileMenu.add(jSeparator2);
        menQuit.setFont(new java.awt.Font("Dialog", 0, 12));
        menQuit.setText("Quit GA");
        menQuit.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menQuitActionPerformed(evt);
            }
        });
        fileMenu.add(menQuit);
        menuBar.add(fileMenu);
        defaultsMenu.setText("Defaults");
        defaultsMenu.setFont(new java.awt.Font("Dialog", 0, 12));
        menStdGen.setFont(new java.awt.Font("Dialog", 0, 12));
        menStdGen.setText("Standard generational");
        menStdGen.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menStdGenActionPerformed(evt);
            }
        });
        defaultsMenu.add(menStdGen);
        menEliteGen.setFont(new java.awt.Font("Dialog", 0, 12));
        menEliteGen.setText("Generational with 10% elite");
        menEliteGen.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menEliteGenActionPerformed(evt);
            }
        });
        defaultsMenu.add(menEliteGen);
        menTounament.setFont(new java.awt.Font("Dialog", 0, 12));
        menTounament.setText("Steady-state tournament selection");
        menTounament.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menTounamentActionPerformed(evt);
            }
        });
        defaultsMenu.add(menTounament);
        menMicrobial.setFont(new java.awt.Font("Dialog", 0, 12));
        menMicrobial.setText("Microbial");
        menMicrobial.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menMicrobialActionPerformed(evt);
            }
        });
        defaultsMenu.add(menMicrobial);
        menuBar.add(defaultsMenu);
        setJMenuBar(menuBar);
        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(400, 300));
        setLocation((screenSize.width - 400) / 2, (screenSize.height - 300) / 2);
    }

    private void textResetupEveryLimitActionPerformed(java.awt.event.ActionEvent evt) {
        sendResetupEveryLimit();
        receiveResetupEveryLimit();
    }

    private void texResetupEveryActionPerformed(java.awt.event.ActionEvent evt) {
        sendResetupEvery();
        receiveResetupEvery();
    }

    private void texStepsPerTrialLimitActionPerformed(java.awt.event.ActionEvent evt) {
        sendStepsPerTrialLimit();
        receiveStepsPerTrialLimit();
    }

    private void comWrapTypeActionPerformed(java.awt.event.ActionEvent evt) {
        sendWrapType();
        receiveWrapType();
    }

    private void comMutTypeActionPerformed(java.awt.event.ActionEvent evt) {
        sendMutationType();
        receiveMutationType();
    }

    private void menMicrobialActionPerformed(java.awt.event.ActionEvent evt) {
        texNumEliteMembers.setText("0");
        texNumParents.setText("2");
        comParentSelectionMethod.setSelectedItem("Rank Selection");
        texNumChildren.setText("1");
        comChildSelectionMethod.setSelectedItem("Random Selection");
        radSetButtons1(ALWAYS_OWN_PARENT);
        radSetButtons2(RETEST_PARENT_NEVER);
    }

    private void menTounamentActionPerformed(java.awt.event.ActionEvent evt) {
        texNumEliteMembers.setText("0");
        texNumParents.setText("2");
        comParentSelectionMethod.setSelectedItem("Tournament Selection");
        texNumChildren.setText("1");
        comChildSelectionMethod.setSelectedItem("Tournament Selection");
        radSetButtons1(POSSIBLY_OWN_PARENT);
        radSetButtons2(RETEST_PARENT_EVERY_GENERATION);
    }

    private void menEliteGenActionPerformed(java.awt.event.ActionEvent evt) {
        int popSize = runner.getPopulationSize();
        int numElite = popSize / 10;
        texNumEliteMembers.setText(String.valueOf(numElite));
        texNumParents.setText("2");
        comParentSelectionMethod.setSelectedItem("Rank Selection");
        texNumChildren.setText(String.valueOf(popSize - numElite));
        comChildSelectionMethod.setSelectedItem("Random Selection");
        radSetButtons1(NEVER_OWN_PARENT);
        radSetButtons2(RETEST_PARENT_NEVER);
    }

    private void menStdGenActionPerformed(java.awt.event.ActionEvent evt) {
        int popSize = runner.getPopulationSize();
        texNumEliteMembers.setText("0");
        texNumParents.setText("2");
        comParentSelectionMethod.setSelectedItem("Rank Selection");
        texNumChildren.setText(String.valueOf(popSize));
        comChildSelectionMethod.setSelectedItem("Random Selection");
        radSetButtons1(NEVER_OWN_PARENT);
        radSetButtons2(RETEST_PARENT_NEVER);
    }

    private void texGenerationsPerRunFocusLost(java.awt.event.FocusEvent evt) {
        sendGenerationsPerRun();
        receiveGenerationsPerRun();
    }

    private void texTrialsPerEvaluationFocusLost(java.awt.event.FocusEvent evt) {
        sendTrialsPerEvaluation();
        receiveTrialsPerEvaluation();
    }

    private void texStepsPerTrialFocusLost(java.awt.event.FocusEvent evt) {
        sendSecondsPerTrial();
        receiveSecondsPerTrial();
    }

    private void texCrossoverRateFocusLost(java.awt.event.FocusEvent evt) {
        sendCrossoverRate();
        receiveCrossoverRate();
    }

    private void texMutationRateFocusLost(java.awt.event.FocusEvent evt) {
        sendMutationRate();
        receiveMutationRate();
    }

    private void texMutationChanceFocusLost(java.awt.event.FocusEvent evt) {
        receiveMutationChance();
    }

    private void texGenerationsPerRunActionPerformed(java.awt.event.ActionEvent evt) {
        sendGenerationsPerRun();
        receiveGenerationsPerRun();
    }

    private void texTrialsPerEvaluationActionPerformed(java.awt.event.ActionEvent evt) {
        sendTrialsPerEvaluation();
        receiveTrialsPerEvaluation();
    }

    private void texStepsPerTrialActionPerformed(java.awt.event.ActionEvent evt) {
        sendSecondsPerTrial();
        receiveSecondsPerTrial();
    }

    private void texCrossoverRateActionPerformed(java.awt.event.ActionEvent evt) {
        sendCrossoverRate();
        receiveCrossoverRate();
    }

    private void texMutationRateActionPerformed(java.awt.event.ActionEvent evt) {
        sendMutationRate();
        receiveMutationRate();
    }

    private void texMutationChanceActionPerformed(java.awt.event.ActionEvent evt) {
        sendMutationChance();
        receiveMutationChance();
    }

    private void comChildSelectionMethodActionPerformed(java.awt.event.ActionEvent evt) {
        sendChildSelectionMethod();
        receiveChildSelectionMethod();
    }

    private void comParentSelectionMethodActionPerformed(java.awt.event.ActionEvent evt) {
        sendParentSelectionMethod();
        receiveParentSelectionMethod();
    }

    private void texNumChildrenFocusLost(java.awt.event.FocusEvent evt) {
        sendNumChildren();
        receiveNumChildren();
    }

    private void texNumChildrenActionPerformed(java.awt.event.ActionEvent evt) {
        sendNumChildren();
        receiveNumChildren();
    }

    private void texNumParentsFocusLost(java.awt.event.FocusEvent evt) {
        sendNumParents();
        receiveNumParents();
    }

    private void texNumParentsActionPerformed(java.awt.event.ActionEvent evt) {
        sendNumParents();
        receiveNumParents();
    }

    private void texNumEliteMembersFocusLost(java.awt.event.FocusEvent evt) {
        sendNumEliteMembers();
        receiveNumEliteMembers();
    }

    private void texNumEliteMembersActionPerformed(java.awt.event.ActionEvent evt) {
        sendNumEliteMembers();
        receiveNumEliteMembers();
    }

    private void texPopulationSizeActionPerformed(java.awt.event.ActionEvent evt) {
        sendPopulationSize();
        receivePopulationSize();
    }

    private void menClearGAActionPerformed(java.awt.event.ActionEvent evt) {
        clearGA();
    }

    private void menSaveGAActionPerformed(java.awt.event.ActionEvent evt) {
        saveGA();
    }

    private void menLoadGAActionPerformed(java.awt.event.ActionEvent evt) {
        loadGA();
    }

    private void menQuitActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    private void texPopulationSizeFocusLost(java.awt.event.FocusEvent evt) {
        sendPopulationSize();
        receivePopulationSize();
    }

    private void butOKActionPerformed(java.awt.event.ActionEvent evt) {
        ok();
    }

    private void radRetestParentsNeverActionPerformed(java.awt.event.ActionEvent evt) {
        radSetButtons2(RETEST_PARENT_NEVER);
        receiveRetestParent();
    }

    private void radRetestParentsEveryGenerationActionPerformed(java.awt.event.ActionEvent evt) {
        radSetButtons2(RETEST_PARENT_EVERY_GENERATION);
        receiveRetestParent();
    }

    private void radRetestParentsEveryUseActionPerformed(java.awt.event.ActionEvent evt) {
        radSetButtons2(RETEST_PARENT_EVERY_USE);
        receiveRetestParent();
    }

    private void radOwnParentNoActionPerformed(java.awt.event.ActionEvent evt) {
        radSetButtons1(NEVER_OWN_PARENT);
        receiveChildOwnParent();
    }

    private void radOwnParentPossibleActionPerformed(java.awt.event.ActionEvent evt) {
        radSetButtons1(POSSIBLY_OWN_PARENT);
        receiveChildOwnParent();
    }

    private void radOwnParentAlwaysActionPerformed(java.awt.event.ActionEvent evt) {
        radSetButtons1(ALWAYS_OWN_PARENT);
        receiveChildOwnParent();
    }

    private void radSetButtons1(int button) {
        if (button != NEVER_OWN_PARENT) radOwnParentNo.setSelected(false); else radOwnParentNo.setSelected(true);
        if (button != POSSIBLY_OWN_PARENT) radOwnParentPossible.setSelected(false); else radOwnParentPossible.setSelected(true);
        if (button != ALWAYS_OWN_PARENT) radOwnParentAlways.setSelected(false); else radOwnParentAlways.setSelected(true);
        sendChildOwnParent();
    }

    private void radSetButtons2(int button) {
        if (button != RETEST_PARENT_EVERY_USE) radRetestParentsEveryUse.setSelected(false); else radRetestParentsEveryUse.setSelected(true);
        if (button != RETEST_PARENT_EVERY_GENERATION) radRetestParentsEveryGeneration.setSelected(false); else radRetestParentsEveryGeneration.setSelected(true);
        if (button != RETEST_PARENT_NEVER) radRetestParentsNever.setSelected(false); else radRetestParentsNever.setSelected(true);
        sendRetestParent();
    }

    public int generalStringToInt(String comboBoxString) {
        String fieldName = comboBoxString.toUpperCase().replace(' ', '_');
        try {
            Class sve = SaveableObject.class;
            Field field = sve.getField(fieldName);
            return field.getInt(null);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }
        return 0;
    }

    private void initMyComponents() {
        getOptionsFromGA();
    }

    private void sendOptionsToGA() {
        sendPopulationSize();
        sendNumEliteMembers();
        sendNumParents();
        sendParentSelectionMethod();
        sendNumChildren();
        sendChildSelectionMethod();
        sendChildOwnParent();
        sendRetestParent();
        sendMutationChance();
        sendMutationRate();
        sendCrossoverRate();
        sendWrapType();
        sendMutationType();
        sendSecondsPerTrial();
        sendStepsPerTrialLimit();
        sendResetupEvery();
        sendResetupEveryLimit();
        sendTrialsPerEvaluation();
        sendGenerationsPerRun();
    }

    private void getOptionsFromGA() {
        receivePopulationSize();
        receiveNumEliteMembers();
        receiveNumParents();
        receiveParentSelectionMethod();
        receiveNumChildren();
        receiveChildSelectionMethod();
        receiveChildOwnParent();
        receiveRetestParent();
        receiveMutationChance();
        receiveMutationRate();
        receiveCrossoverRate();
        receiveWrapType();
        receiveMutationType();
        receiveSecondsPerTrial();
        receiveStepsPerTrialLimit();
        receiveResetupEvery();
        receiveResetupEveryLimit();
        receiveTrialsPerEvaluation();
        receiveGenerationsPerRun();
    }

    private void sendPopulationSize() {
        runner.setPopulationSize(Util.getBoundedInt(texPopulationSize, runner.getPopulationSize(), new Integer(1), null));
        sendNumEliteMembers();
        sendNumParents();
    }

    private void receivePopulationSize() {
        texPopulationSize.setText(String.valueOf(runner.getPopulationSize()));
    }

    private void sendNumEliteMembers() {
        runner.setNumEliteMembers(Util.getBoundedInt(texNumEliteMembers, runner.getNumEliteMembers(), new Integer(0), new Integer(runner.getPopulationSize() - 1)));
        sendNumChildren();
    }

    private void receiveNumEliteMembers() {
        texNumEliteMembers.setText(String.valueOf(runner.getNumEliteMembers()));
    }

    private void sendNumParents() {
        if (radOwnParentNo.isSelected()) {
            runner.setNumParents(Util.getBoundedInt(texNumParents, runner.getNumParents(), new Integer(1), new Integer(runner.getPopulationSize() - 1)));
        } else {
            runner.setNumParents(Util.getBoundedInt(texNumParents, runner.getNumParents(), new Integer(1), new Integer(runner.getPopulationSize())));
        }
    }

    private void receiveNumParents() {
        texNumParents.setText(String.valueOf(runner.getNumParents()));
    }

    private void sendParentSelectionMethod() {
        runner.setParentSelectionMethod(generalStringToInt((String) comParentSelectionMethod.getSelectedItem()));
    }

    private void receiveParentSelectionMethod() {
        comParentSelectionMethod.setSelectedIndex(runner.getParentSelectionMethod());
    }

    private void sendNumChildren() {
        runner.setNumChildren(Util.getBoundedInt(texNumChildren, runner.getNumChildren(), new Integer(1), new Integer(runner.getPopulationSize() - runner.getNumEliteMembers())));
    }

    private void receiveNumChildren() {
        texNumChildren.setText(String.valueOf(runner.getNumChildren()));
    }

    private void sendChildSelectionMethod() {
        runner.setChildSelectionMethod(generalStringToInt((String) comChildSelectionMethod.getSelectedItem()));
    }

    private void receiveChildSelectionMethod() {
        comChildSelectionMethod.setSelectedIndex(runner.getChildSelectionMethod());
    }

    private void sendChildOwnParent() {
        int cOP = 0;
        if (radOwnParentNo.isSelected()) cOP = NEVER_OWN_PARENT;
        if (radOwnParentPossible.isSelected()) cOP = POSSIBLY_OWN_PARENT;
        if (radOwnParentAlways.isSelected()) cOP = ALWAYS_OWN_PARENT;
        runner.setChildOwnParent(cOP);
    }

    private void receiveChildOwnParent() {
        radSetButtons1(runner.getChildOwnParent());
    }

    private void sendRetestParent() {
        int re = 0;
        if (radRetestParentsEveryUse.isSelected()) re = RETEST_PARENT_EVERY_USE;
        if (radRetestParentsEveryGeneration.isSelected()) re = RETEST_PARENT_EVERY_GENERATION;
        if (radRetestParentsNever.isSelected()) re = RETEST_PARENT_NEVER;
        runner.setRetestParent(re);
    }

    private void receiveRetestParent() {
        radSetButtons2(runner.getRetestParent());
    }

    private void sendMutationChance() {
        runner.setMutationChance(Util.getBoundedDouble(texMutationChance, runner.getMutationChance(), new Double(0.0), new Double(1.0)));
    }

    private void receiveMutationChance() {
        texMutationChance.setText(String.valueOf(runner.getMutationChance()));
    }

    private void sendMutationRate() {
        runner.setMutationRate(Util.getBoundedDouble(texMutationRate, runner.getMutationRate(), new Double(0.0), new Double(1.0)));
    }

    private void receiveMutationRate() {
        texMutationRate.setText(String.valueOf(runner.getMutationRate()));
    }

    private void sendCrossoverRate() {
        runner.setCrossoverRate(Util.getBoundedDouble(texCrossoverRate, runner.getCrossoverRate(), new Double(0.0), new Double(1.0)));
    }

    private void receiveCrossoverRate() {
        texCrossoverRate.setText(String.valueOf(runner.getCrossoverRate()));
    }

    private void sendWrapType() {
        runner.setWrapType(generalStringToInt((String) comWrapType.getSelectedItem()));
    }

    private void receiveWrapType() {
        comWrapType.setSelectedIndex(runner.getWrapType());
    }

    private void sendMutationType() {
        runner.setMutationType(generalStringToInt((String) comMutationType.getSelectedItem()));
    }

    private void receiveMutationType() {
        comMutationType.setSelectedIndex(runner.getMutationType());
    }

    private void sendSecondsPerTrial() {
        runner.setSecondsPerTrial(Util.getBoundedInt(texStepsPerTrial, runner.getSecondsPerTrial(), new Integer(1), null));
    }

    private void receiveSecondsPerTrial() {
        texStepsPerTrial.setText(String.valueOf(runner.getSecondsPerTrial()));
    }

    private void sendTrialsPerEvaluation() {
        runner.setTrialsPerEvaluation(Util.getBoundedInt(texTrialsPerEvaluation, runner.getTrialsPerEvaluation(), new Integer(1), null));
    }

    private void receiveTrialsPerEvaluation() {
        texTrialsPerEvaluation.setText(String.valueOf(runner.getTrialsPerEvaluation()));
    }

    private void sendGenerationsPerRun() {
        runner.setGenerationsPerRun(Util.getBoundedInt(texGenerationsPerRun, runner.getGenerationsPerRun(), new Integer(1), null));
    }

    private void receiveGenerationsPerRun() {
        texGenerationsPerRun.setText(String.valueOf(runner.getGenerationsPerRun()));
    }

    private void sendStepsPerTrialLimit() {
        if (texStepsPerTrialLimit.getText().equals("")) {
            runner.setStepsPerTrialLimit(new Integer(-1));
        } else {
            runner.setStepsPerTrialLimit(Util.getBoundedInt(texStepsPerTrialLimit, runner.getStepsPerTrialLimit(), new Integer(0), null));
        }
    }

    private void receiveStepsPerTrialLimit() {
        int i = runner.getStepsPerTrialLimit();
        if (i == -1) {
            texStepsPerTrialLimit.setText("");
        } else {
            texStepsPerTrialLimit.setText(String.valueOf(i));
        }
    }

    private void sendResetupEvery() {
        runner.setResetupEvery(Util.getBoundedInt(texResetupEvery, runner.getResetupEvery(), new Integer(0), null));
    }

    private void receiveResetupEvery() {
        texResetupEvery.setText(String.valueOf(runner.getResetupEvery()));
    }

    private void sendResetupEveryLimit() {
        if (texResetupEveryLimit.getText().equals("")) {
            runner.setResetupEveryLimit(new Integer(-1));
        } else {
            runner.setResetupEveryLimit(Util.getBoundedInt(texResetupEveryLimit, runner.getResetupEveryLimit(), new Integer(0), null));
        }
    }

    private void receiveResetupEveryLimit() {
        int i = runner.getResetupEveryLimit();
        if (i == -1) {
            texResetupEveryLimit.setText("");
        } else {
            texResetupEveryLimit.setText(String.valueOf(i));
        }
    }

    private void clearGA() {
        runner = new GARunner();
        getOptionsFromGA();
    }

    private void saveGA() {
        sendOptionsToGA();
        FileHandler.saveGA(this, runner);
    }

    private void loadGA() {
        FileHandler.loadGA(this, runner);
        getOptionsFromGA();
    }

    private void ok() {
        sendOptionsToGA();
        if (launcher != null) {
            launcher.launcherUpdate(this);
        } else {
            System.exit(0);
        }
        dispose();
    }

    private void exitForm(java.awt.event.WindowEvent evt) {
        ok();
    }

    public static void main(String[] args) {
        Util.processCommandLineArgs(args);
        new GALab(null, new GARunner()).show();
    }

    private javax.swing.JMenuBar menuBar;

    private javax.swing.JPanel GAPanel;

    private javax.swing.JLabel labResetupEvery;

    private javax.swing.JTextField texPopulationSize;

    private javax.swing.JTextField texNumEliteMembers;

    private javax.swing.JLabel labMutationType;

    private javax.swing.JTextField texResetupEvery;

    private javax.swing.JLabel labHeadMutation;

    private javax.swing.JRadioButton radOwnParentNo;

    private javax.swing.JLabel labMutationRate;

    private javax.swing.JLabel labTitle;

    private javax.swing.JComboBox comWrapType;

    private javax.swing.JLabel labHeadParents;

    private javax.swing.JButton butOK;

    private javax.swing.JTextField texCrossoverRate;

    private javax.swing.JTextField texStepsPerTrial;

    private javax.swing.JTextField texResetupEveryLimit;

    private javax.swing.JComboBox comParentSelectionMethod;

    private javax.swing.JMenuItem menStdGen;

    private javax.swing.JScrollPane scrollPane;

    private javax.swing.JLabel labOwnParent;

    private javax.swing.JMenuItem menLoadGA;

    private javax.swing.JComboBox comMutationType;

    private javax.swing.JRadioButton radRetestParentsEveryGeneration;

    private javax.swing.JMenuItem menTounament;

    private javax.swing.JLabel labResetupEveryLimit;

    private javax.swing.JTextField texStepsPerTrialLimit;

    private javax.swing.JLabel labStepsPerTrial;

    private javax.swing.JMenu defaultsMenu;

    private javax.swing.JLabel labPopulationSize;

    private javax.swing.JLabel labGenerationsPerRun;

    private javax.swing.JLabel labNumParents;

    private javax.swing.JLabel labStepsPerTrialLimit;

    private javax.swing.JLabel labParentSelectionMethod;

    private javax.swing.JLabel labNumEliteMembers;

    private javax.swing.JLabel labChildSelectionMethod;

    private javax.swing.JMenuItem menClearGA;

    private javax.swing.JRadioButton radOwnParentPossible;

    private javax.swing.JLabel labNumChildren;

    private javax.swing.JLabel labHeadPopulation;

    private javax.swing.JLabel labOwnParent2;

    private javax.swing.JSeparator jSeparator2;

    private javax.swing.JRadioButton radRetestParentsEveryUse;

    private javax.swing.JLabel labCrossoverRate;

    private javax.swing.JComboBox comChildSelectionMethod;

    private javax.swing.JLabel labRetestParents;

    private javax.swing.JLabel labTrialsPerEvaluation;

    private javax.swing.JMenuItem menEliteGen;

    private javax.swing.JLabel labMutationChance;

    private javax.swing.JTextField texMutationChance;

    private javax.swing.JMenu fileMenu;

    private javax.swing.JTextField texNumParents;

    private javax.swing.JLabel labHeadTrials;

    private javax.swing.JRadioButton radOwnParentAlways;

    private javax.swing.JLabel labWrapType;

    private javax.swing.JRadioButton radRetestParentsNever;

    private javax.swing.JMenuItem menQuit;

    private javax.swing.JTextField texMutationRate;

    private javax.swing.JMenuItem menSaveGA;

    private javax.swing.JTextField texTrialsPerEvaluation;

    private javax.swing.JMenuItem menMicrobial;

    private javax.swing.JLabel labRetestParents2;

    private javax.swing.JTextField texNumChildren;

    private javax.swing.JTextField texGenerationsPerRun;

    GARunner runner;

    public static final int NEVER_OWN_PARENT = 0;

    public static final int POSSIBLY_OWN_PARENT = 1;

    public static final int ALWAYS_OWN_PARENT = 2;

    public static final int RETEST_PARENT_EVERY_GENERATION = 0;

    public static final int RETEST_PARENT_EVERY_USE = 1;

    public static final int RETEST_PARENT_NEVER = 2;

    private Launcher launcher;
}
