package cescs.cescsmodel.provider;

import cescs.cescsmodel.util.CescsmodelAdapterFactory;
import java.util.ArrayList;
import java.util.Collection;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CescsmodelItemProviderAdapterFactory extends CescsmodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {

    /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public CescsmodelItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected LinkItemProvider linkItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createLinkAdapter() {
        if (linkItemProvider == null) {
            linkItemProvider = new LinkItemProvider(this);
        }
        return linkItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.NamedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected NamedElementItemProvider namedElementItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.NamedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createNamedElementAdapter() {
        if (namedElementItemProvider == null) {
            namedElementItemProvider = new NamedElementItemProvider(this);
        }
        return namedElementItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.ModelRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected ModelRootItemProvider modelRootItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.ModelRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createModelRootAdapter() {
        if (modelRootItemProvider == null) {
            modelRootItemProvider = new ModelRootItemProvider(this);
        }
        return modelRootItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected NodeItemProvider nodeItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createNodeAdapter() {
        if (nodeItemProvider == null) {
            nodeItemProvider = new NodeItemProvider(this);
        }
        return nodeItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.Product} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected ProductItemProvider productItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.Product}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createProductAdapter() {
        if (productItemProvider == null) {
            productItemProvider = new ProductItemProvider(this);
        }
        return productItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.BOMEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected BOMEntryItemProvider bomEntryItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.BOMEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createBOMEntryAdapter() {
        if (bomEntryItemProvider == null) {
            bomEntryItemProvider = new BOMEntryItemProvider(this);
        }
        return bomEntryItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.Period} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected PeriodItemProvider periodItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.Period}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createPeriodAdapter() {
        if (periodItemProvider == null) {
            periodItemProvider = new PeriodItemProvider(this);
        }
        return periodItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.TransportationMode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected TransportationModeItemProvider transportationModeItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.TransportationMode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createTransportationModeAdapter() {
        if (transportationModeItemProvider == null) {
            transportationModeItemProvider = new TransportationModeItemProvider(this);
        }
        return transportationModeItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.Engine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected EngineItemProvider engineItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.Engine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createEngineAdapter() {
        if (engineItemProvider == null) {
            engineItemProvider = new EngineItemProvider(this);
        }
        return engineItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected EventItemProvider eventItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createEventAdapter() {
        if (eventItemProvider == null) {
            eventItemProvider = new EventItemProvider(this);
        }
        return eventItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.SimulationResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected SimulationResultItemProvider simulationResultItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.SimulationResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createSimulationResultAdapter() {
        if (simulationResultItemProvider == null) {
            simulationResultItemProvider = new SimulationResultItemProvider(this);
        }
        return simulationResultItemProvider;
    }

    /**
	 * This keeps track of the one adapter used for all {@link cescs.cescsmodel.ResultEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    protected ResultEntryItemProvider resultEntryItemProvider;

    /**
	 * This creates an adapter for a {@link cescs.cescsmodel.ResultEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createResultEntryAdapter() {
        if (resultEntryItemProvider == null) {
            resultEntryItemProvider = new ResultEntryItemProvider(this);
        }
        return resultEntryItemProvider;
    }

    /**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }
        return null;
    }

    /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);
        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    public void dispose() {
        if (linkItemProvider != null) linkItemProvider.dispose();
        if (namedElementItemProvider != null) namedElementItemProvider.dispose();
        if (modelRootItemProvider != null) modelRootItemProvider.dispose();
        if (nodeItemProvider != null) nodeItemProvider.dispose();
        if (productItemProvider != null) productItemProvider.dispose();
        if (bomEntryItemProvider != null) bomEntryItemProvider.dispose();
        if (periodItemProvider != null) periodItemProvider.dispose();
        if (transportationModeItemProvider != null) transportationModeItemProvider.dispose();
        if (engineItemProvider != null) engineItemProvider.dispose();
        if (eventItemProvider != null) eventItemProvider.dispose();
        if (simulationResultItemProvider != null) simulationResultItemProvider.dispose();
        if (resultEntryItemProvider != null) resultEntryItemProvider.dispose();
    }
}
