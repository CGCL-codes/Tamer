package com.skruk.elvis.admin.gui;

/**
 * @author     skruk
 * @created    7 listopad 2003
 */
public class FinishPageWizardPanel extends WizardPanel implements Progressable {

    /**  Description of the Field */
    FinishPagePainter painter = null;

    /**  Description of the Field */
    boolean progressing = false;

    /**
	 * Creates new form FinishPageWizardPanel
	 *
	 * @param  title    Description of the Parameter
	 * @param  painter  Description of the Parameter
	 */
    public FinishPageWizardPanel(String title, FinishPagePainter painter) {
        setTitle(title);
        this.painter = painter;
        fields = new java.util.ArrayList();
        initComponents();
    }

    /**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {
        jlHead = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jspList = new javax.swing.JScrollPane();
        jtpInfo = new javax.swing.JTextPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jpbProgress = new javax.swing.JProgressBar();
        setLayout(new java.awt.BorderLayout());
        jlHead.setFont(new java.awt.Font("SansSerif", 1, 18));
        jlHead.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlHead.setText(getTitle());
        jlHead.setMaximumSize(new java.awt.Dimension(124, 60));
        jlHead.setMinimumSize(new java.awt.Dimension(124, 60));
        jlHead.setPreferredSize(new java.awt.Dimension(124, 60));
        jlHead.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(jlHead, java.awt.BorderLayout.NORTH);
        jPanel1.setMaximumSize(new java.awt.Dimension(25, 10));
        jPanel1.setMinimumSize(new java.awt.Dimension(25, 10));
        jPanel1.setPreferredSize(new java.awt.Dimension(25, 10));
        jPanel1.setOpaque(false);
        add(jPanel1, java.awt.BorderLayout.WEST);
        jPanel2.setMaximumSize(new java.awt.Dimension(25, 10));
        jPanel2.setMinimumSize(new java.awt.Dimension(25, 10));
        jPanel2.setPreferredSize(new java.awt.Dimension(25, 10));
        jPanel2.setOpaque(false);
        add(jPanel2, java.awt.BorderLayout.EAST);
        jspList.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jspList.setMinimumSize(new java.awt.Dimension(350, 200));
        jspList.setPreferredSize(new java.awt.Dimension(350, 200));
        jtpInfo.setBackground(java.awt.SystemColor.controlLtHighlight);
        jtpInfo.setEditable(false);
        jtpInfo.setFocusable(false);
        jtpInfo.setContentType("text/html; encoding=UTF-8");
        jspList.setViewportView(jtpInfo);
        add(jspList, java.awt.BorderLayout.CENTER);
        jPanel3.setLayout(new java.awt.BorderLayout());
        jPanel3.setMaximumSize(new java.awt.Dimension(25, 50));
        jPanel3.setMinimumSize(new java.awt.Dimension(25, 50));
        jPanel3.setPreferredSize(new java.awt.Dimension(25, 50));
        jPanel3.setOpaque(false);
        jPanel4.setLayout(new java.awt.BorderLayout());
        jPanel4.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(15, 25, 15, 25)));
        jPanel4.setMaximumSize(new java.awt.Dimension(25, 50));
        jPanel4.setMinimumSize(new java.awt.Dimension(25, 50));
        jPanel4.setPreferredSize(new java.awt.Dimension(25, 50));
        jPanel4.setOpaque(false);
        jpbProgress.setFont(new java.awt.Font("Monospaced", 0, 12));
        jpbProgress.setStringPainted(true);
        jPanel4.add(jpbProgress, java.awt.BorderLayout.CENTER);
        jPanel3.add(jPanel4, java.awt.BorderLayout.SOUTH);
        add(jPanel3, java.awt.BorderLayout.SOUTH);
    }

    /**  Description of the Method */
    protected void updateContext() {
    }

    /**  Description of the Method */
    public void notifyEnter() {
        this.jtpInfo.setText(painter.paintMe(context));
    }

    /**
	 *  Description of the Method
	 *
	 * @return    Description of the Return Value
	 */
    protected boolean finishProcess() {
        return true;
    }

    /**
	 *  Description of the Method
	 *
	 * @param  sb  Description of the Parameter
	 * @return     Description of the Return Value
	 */
    public boolean canProceed(StringBuffer sb) {
        return this.finishProcess();
    }

    /**
	 *  Description of the Method
	 *
	 * @param  sb  Description of the Parameter
	 * @return     Description of the Return Value
	 */
    public boolean canRetreat(StringBuffer sb) {
        return true;
    }

    /**
	 *  Description of the Method
	 *
	 * @param  sb  Description of the Parameter
	 * @return     Description of the Return Value
	 */
    public boolean canFinish(StringBuffer sb) {
        return this.finishProcess();
    }

    /**  Description of the Field */
    private javax.swing.JPanel jPanel1;

    /**  Description of the Field */
    private javax.swing.JPanel jPanel2;

    /**  Description of the Field */
    private javax.swing.JPanel jPanel3;

    /**  Description of the Field */
    private javax.swing.JPanel jPanel4;

    /**  Description of the Field */
    private javax.swing.JLabel jlHead;

    /**  Description of the Field */
    private javax.swing.JProgressBar jpbProgress;

    /**  Description of the Field */
    private javax.swing.JScrollPane jspList;

    /**  Description of the Field */
    private javax.swing.JTextPane jtpInfo;

    /**
	 *  Sets the max attribute of the FinishPageWizardPanel object
	 *
	 * @param  max  The new max value
	 */
    public void setMax(int max) {
        this.jpbProgress.setMaximum(max);
    }

    /**
	 *  Sets the string attribute of the FinishPageWizardPanel object
	 *
	 * @param  string  The new string value
	 */
    public void setString(String string) {
        this.jpbProgress.setString(string);
    }

    /**
	 *  Sets the value attribute of the FinishPageWizardPanel object
	 *
	 * @param  value  The new value value
	 */
    public void setValue(int value) {
        this.jpbProgress.setValue(value);
        this.setString((100 * this.jpbProgress.getValue() / this.jpbProgress.getMaximum()) + "%");
        try {
            Thread.sleep(10);
        } catch (Exception ex) {
        }
    }

    /**
	 *  Adds a feature to the Value attribute of the FinishPageWizardPanel object
	 *
	 * @param  _value  The feature to be added to the Value attribute
	 */
    public void addValue(int _value) {
        this.setValue(this.jpbProgress.getValue() + _value);
    }

    /**
	 *  Sets the stringPainted attribute of the FinishPageWizardPanel object
	 *
	 * @param  painted  The new stringPainted value
	 */
    public void setStringPainted(boolean painted) {
        this.jpbProgress.setStringPainted(painted);
    }

    /**
	 *  Sets the indeterminate attribute of the FinishPageWizardPanel object
	 *
	 * @param  inder  The new indeterminate value
	 */
    public void setIndeterminate(boolean inder) {
        this.jpbProgress.setIndeterminate(inder);
    }

    /**  Description of the Method */
    public synchronized void beginProgress() {
        while (this.progressing) {
            try {
                wait();
            } catch (Exception ex) {
            }
        }
        this.progressing = true;
    }

    /**  Description of the Method */
    public synchronized void endProgress() {
        this.progressing = false;
        notifyAll();
    }
}
