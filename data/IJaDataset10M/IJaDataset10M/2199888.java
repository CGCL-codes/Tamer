package org.gu.junyang.solver.sudoku.gui;

import org.gu.junyang.solver.sudoku.CellList;

public class BlockCellSetPanel extends javax.swing.JPanel {

    boolean showCandidates;

    private BoardPanel parent;

    private CellPanel[][] cellPanels;

    /** Creates new form BlockCellSetPanel */
    public BlockCellSetPanel() {
        initComponents();
        customInitComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setFocusable(false);
        setLayout(new java.awt.GridLayout(3, 3));
    }

    private void customInitComponents() {
        cellPanels = new CellPanel[3][3];
        for (int row = 0; row < 3; row++) for (int col = 0; col < 3; col++) {
            cellPanels[row][col] = new CellPanel();
            cellPanels[row][col].setParent(this);
            add(cellPanels[row][col]);
        }
    }

    public void setParent(BoardPanel parent) {
        this.parent = parent;
    }

    public void setBlockCellList(CellList blockCellList) {
        for (int row = 0; row < 3; row++) for (int col = 0; col < 3; col++) {
            cellPanels[row][col].setCell(blockCellList.get(row * 3 + col));
        }
    }

    public void setShowCandidates(boolean showCandidates) {
        for (int row = 0; row < 3; row++) for (int col = 0; col < 3; col++) {
            cellPanels[row][col].setShowCandidates(showCandidates);
        }
    }

    public void setEditable(boolean editable) {
        for (int row = 0; row < 3; row++) for (int col = 0; col < 3; col++) {
            cellPanels[row][col].setEditable(editable);
        }
    }

    public void setHighlight(int i, int j) {
        cellPanels[i][j].setHighlight(true);
    }

    public void setPatternHighlight(int i, int j) {
        cellPanels[i][j].setPatternHighlight(true);
    }

    public void setHighLight(boolean highlight) {
        for (int row = 0; row < 3; row++) for (int col = 0; col < 3; col++) cellPanels[row][col].setHighlight(highlight);
    }

    void takeFocus() {
        parent.takeFocus();
    }

    void boardChanged() {
        parent.boardChanged();
    }

    void reset(int row, int col) {
        parent.reset(row, col);
    }

    void setValue(int row, int col, int val) {
        parent.setValue(row, col, val);
    }

    public void setWarn(int i, int j) {
        cellPanels[i][j].setWarn(true);
    }

    public void resetHighlighting() {
        for (int row = 0; row < 3; row++) for (int col = 0; col < 3; col++) {
            cellPanels[row][col].resetHighlighting();
        }
    }
}
