package org.proteored.miapeapi.xml.pride.msi;

import java.math.BigInteger;
import java.util.List;
import org.proteored.miapeapi.cv.Accession;
import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ControlVocabularyTerm;
import org.proteored.miapeapi.cv.msi.PeptideModificationName;
import org.proteored.miapeapi.interfaces.msi.PeptideModification;
import org.proteored.miapeapi.xml.pride.autogenerated.CvParamType;
import org.proteored.miapeapi.xml.pride.autogenerated.Modification;
import org.proteored.miapeapi.xml.pride.autogenerated.ParamType;
import org.proteored.miapeapi.xml.pride.autogenerated.UserParamType;
import org.proteored.miapeapi.xml.util.CVUtils;

public class PeptideModificationImpl implements PeptideModification {

    private final Modification modificationItem;

    private final String sequence;

    private final ControlVocabularyManager cvManager;

    public PeptideModificationImpl(Modification modificationItem, String sequence, ControlVocabularyManager cvManager) {
        this.modificationItem = modificationItem;
        this.sequence = sequence;
        this.cvManager = cvManager;
    }

    @Override
    public String getName() {
        String modAccession = modificationItem.getModAccession();
        if (modAccession != null) {
            ControlVocabularyTerm cvTermByAccession = PeptideModificationName.getInstance(cvManager).getCVTermByAccession(new Accession(modAccession));
            String cvDescription = null;
            if (cvTermByAccession != null) cvDescription = cvTermByAccession.getPreferredName();
            if (cvDescription != null) {
                return cvDescription;
            }
            final ParamType additional = this.modificationItem.getAdditional();
            if (additional != null) {
                if (additional.getCvParamOrUserParam() != null) {
                    for (Object cvOrUserParam : additional.getCvParamOrUserParam()) {
                        if (cvOrUserParam instanceof UserParamType) {
                            UserParamType userParam = (UserParamType) cvOrUserParam;
                            if (userParam.getName() != null && userParam.getName().equalsIgnoreCase("unimod") && userParam.getValue() != null) {
                                String accession = userParam.getValue();
                                cvTermByAccession = PeptideModificationName.getInstance(cvManager).getCVTermByAccession(new Accession(accession));
                                cvDescription = null;
                                if (cvTermByAccession != null) cvDescription = cvTermByAccession.getPreferredName();
                                if (cvDescription != null) {
                                    return cvDescription;
                                }
                            }
                        }
                    }
                }
            }
            return modAccession;
        }
        return null;
    }

    @Override
    public int getPosition() {
        BigInteger modLocation = modificationItem.getModLocation();
        if (modLocation != null) return modLocation.intValue();
        return -1;
    }

    @Override
    public String getResidues() {
        int position = getPosition();
        if (position > -1 && sequence != null && sequence.length() >= position) return sequence.substring(position - 1, position);
        return null;
    }

    @Override
    public Double getMonoDelta() {
        List<String> modMonoDelta = modificationItem.getModMonoDelta();
        try {
            return Double.valueOf(modMonoDelta.get(0));
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public Double getAvgDelta() {
        List<String> modAvgDelta = modificationItem.getModAvgDelta();
        try {
            return Double.valueOf(modAvgDelta.get(0));
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public String getReplacementResidue() {
        return null;
    }

    @Override
    public Double getNeutralLoss() {
        ParamType additional = modificationItem.getAdditional();
        if (additional != null) {
            final List<Object> cvParamOrUserParam = additional.getCvParamOrUserParam();
            if (cvParamOrUserParam != null) {
                CvParamType param = (CvParamType) CVUtils.isThereThisCV(cvParamOrUserParam, PeptideModificationName.FRAGMENT_NEUTRAL_LOSS_ACCESSION.toString());
                if (param != null) {
                    try {
                        return Double.valueOf(param.getValue());
                    } catch (Exception e) {
                        return null;
                    }
                }
            }
        }
        return null;
    }

    @Override
    public String getModificationEvidence() {
        return null;
    }
}
