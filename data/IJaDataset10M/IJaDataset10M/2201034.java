package org.hironico.dbtool2.config;

import java.awt.Color;
import java.awt.Container;
import java.awt.Window;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.hironico.database.gui.config.DataServer;
import org.hironico.database.gui.config.HironicoGuiConfiguration;
import org.hironico.database.gui.config.JdbcDriver;
import org.hironico.gui.list.SortableListModel;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import org.jvnet.flamingo.ribbon.JRibbonFrame;

/**
 * Classe modélisant la GUI de setup des Dataservers dans la configuration du Db Tool.
 * @author hironico
 * @since 2.0.0
 */
public class DataServerSetupPanel extends javax.swing.JPanel {

    protected static Logger logger = Logger.getLogger("org.hironico.dbtool2.config");

    /**
     * Le data server en cours d'édition.
     */
    protected DataServer currentDataServer = null;

    /** Creates new form DataServerSetupPanel */
    public DataServerSetupPanel() {
        initComponents();
        HironicoGuiConfiguration config = HironicoGuiConfiguration.getInstance();
        showDrivers();
        txtExplain.setBackground(Color.white);
        txtExplain.setOpaque(true);
        listDataServerName.addHighlighter(HighlighterFactory.createSimpleStriping(config.getZebraOddBackground()));
        SortableListModel connectionListModel = new SortableListModel();
        for (DataServer ds : config.getDataServers()) {
            connectionListModel.add(ds.getDataServerName());
        }
        listDataServerName.setModel(connectionListModel);
        if (connectionListModel.getSize() > 0) {
            listDataServerName.setSelectedIndex(0);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        txtExplain = new javax.swing.JTextPane();
        lblDataServerName = new javax.swing.JLabel();
        scrollDataServerName = new javax.swing.JScrollPane();
        listDataServerName = new org.jdesktop.swingx.JXList();
        pnlDetails = new org.jdesktop.swingx.JXPanel();
        lblHostname = new javax.swing.JLabel();
        txtHostname = new javax.swing.JTextField();
        txtPortNumber = new javax.swing.JTextField();
        lblPortNumber = new javax.swing.JLabel();
        lblDriver = new javax.swing.JLabel();
        cmbDriver = new javax.swing.JComboBox();
        btnOpenDrivers = new javax.swing.JButton();
        lblChartset = new javax.swing.JLabel();
        txtChartsetName = new javax.swing.JTextField();
        pnlCommands = new org.jdesktop.swingx.JXPanel();
        btnRename = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        setLayout(new java.awt.GridBagLayout());
        txtExplain.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtExplain.setContentType("text/html");
        txtExplain.setEditable(false);
        txtExplain.setText("<html>\r\n  <head>\r\n\n  </head>\r\n  <body>\r\n<h2>Dataserver setup</h2>\n<p style=\"margin-top: 0\">\r\nThe dataserver defines the physical machine where to connect to.\nYou need to know about the name or the IP adress of the server,\nas well as the netword port number to use.<br>\n<b>Please note that certain servers requires to specify the character set to use.</b>\n</p>\r\n  </body>\r\n</html>\r\n");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(txtExplain, gridBagConstraints);
        lblDataServerName.setText("Dataserver name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(lblDataServerName, gridBagConstraints);
        listDataServerName.addListSelectionListener(new javax.swing.event.ListSelectionListener() {

            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listDataServerNameValueChanged(evt);
            }
        });
        scrollDataServerName.setViewportView(listDataServerName);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.75;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(scrollDataServerName, gridBagConstraints);
        pnlDetails.setMinimumSize(new java.awt.Dimension(200, 83));
        pnlDetails.setLayout(new java.awt.GridBagLayout());
        lblHostname.setText("Hostname / IP adress:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pnlDetails.add(lblHostname, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnlDetails.add(txtHostname, gridBagConstraints);
        txtPortNumber.setText("1234");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlDetails.add(txtPortNumber, gridBagConstraints);
        lblPortNumber.setText("Port number:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pnlDetails.add(lblPortNumber, gridBagConstraints);
        lblDriver.setText("JDBC driver:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pnlDetails.add(lblDriver, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlDetails.add(cmbDriver, gridBagConstraints);
        btnOpenDrivers.setText("...");
        btnOpenDrivers.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenDriversActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        pnlDetails.add(btnOpenDrivers, gridBagConstraints);
        lblChartset.setText("Charset name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pnlDetails.add(lblChartset, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlDetails.add(txtChartsetName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(pnlDetails, gridBagConstraints);
        pnlCommands.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        btnRename.setText("Rename");
        btnRename.setPreferredSize(new java.awt.Dimension(75, 23));
        btnRename.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenameActionPerformed(evt);
            }
        });
        pnlCommands.add(btnRename);
        btnNew.setText("New");
        btnNew.setPreferredSize(new java.awt.Dimension(75, 23));
        btnNew.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        pnlCommands.add(btnNew);
        btnRemove.setText("Delete");
        btnRemove.setPreferredSize(new java.awt.Dimension(75, 23));
        btnRemove.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        pnlCommands.add(btnRemove);
        btnClose.setText("Close");
        btnClose.setPreferredSize(new java.awt.Dimension(75, 23));
        btnClose.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        pnlCommands.add(btnClose);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(pnlCommands, gridBagConstraints);
    }

    /**
     * Se déclenche lorsque la sélection de la liste change. On sauvegarde d'abord le data server
     * en cours d'édition et ensuite on affiche le nouveau dataserver.
     * @param evt even qui a déclenché cette méthode.
     * @since 2.0.0
     */
    private void listDataServerNameValueChanged(javax.swing.event.ListSelectionEvent evt) {
        if (!evt.getValueIsAdjusting()) {
            saveDataServer();
            showDataServer();
        }
    }

    /**
     * Permet de fermer la fenétre parent s'il y en a une.
     * @param evt l'action event qui a déclenché cette méthode.
     * @since 2.0.0
     */
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {
        saveDataServer();
        Container parent = DataServerSetupPanel.this.getParent();
        if (parent == null) {
            return;
        }
        while (!(parent instanceof Window)) {
            parent = parent.getParent();
            if (parent == null) {
                return;
            }
        }
        if (parent instanceof JRibbonFrame) {
            return;
        }
        Window win = (Window) parent;
        win.setVisible(false);
        win.dispose();
    }

    /**
     * Permet de créer un nouveau dataserver definition et de la mettre dans la config.
     * @param evt ActionEvent qui a déclenché cette méthode.
     * @since 2.0.0
     */
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {
        if (cmbDriver.getItemCount() == 0) {
            JOptionPane.showMessageDialog(DataServerSetupPanel.this, "You must create at least one JDBC driver definition in the configuration\n" + "before adding a new dataserver.", "Need JDBC driver...", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String newDataServerName = JOptionPane.showInputDialog(DataServerSetupPanel.this, "Please enter the name of the new data server definition to create:", "New dataserver definition...", JOptionPane.QUESTION_MESSAGE);
        if (newDataServerName == null) {
            return;
        }
        HironicoGuiConfiguration config = HironicoGuiConfiguration.getInstance();
        if (config.findDataServerByName(newDataServerName) != null) {
            JOptionPane.showMessageDialog(DataServerSetupPanel.this, "The data server '" + newDataServerName + "' already exists.\n" + "You can update its configuration", "Dataserver already exists...", JOptionPane.ERROR_MESSAGE);
            listDataServerName.setSelectedValue(newDataServerName, true);
            return;
        }
        saveDataServer();
        DataServer newDataServer = new DataServer();
        newDataServer.setDataServerName(newDataServerName);
        newDataServer.setDriverName((String) cmbDriver.getSelectedItem());
        if (!config.addDataServer(newDataServer)) {
            JOptionPane.showMessageDialog(DataServerSetupPanel.this, "Could not add the new data server to the configruation.", "Ohoh...", JOptionPane.ERROR_MESSAGE);
            return;
        }
        SortableListModel model = (SortableListModel) listDataServerName.getModel();
        model.add(newDataServerName);
        listDataServerName.setSelectedValue(newDataServerName, true);
    }

    /**
     * Permet de retirer la définition actuellement sélectionnée de la configuration.
     * Il faut vérifier si aucune connection ne référence ce dataserver avant de la supprimer.
     * @param evt l'ActionEvent qui a déclenché cette méthode.
     * @since 2.0.0
     */
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {
        saveDataServer();
        String dataserverName = (String) listDataServerName.getSelectedValue();
        if (dataserverName == null) {
            return;
        }
        HironicoGuiConfiguration config = HironicoGuiConfiguration.getInstance();
        DataServer dataserver = config.findDataServerByName(dataserverName);
        if (dataserver == null) {
            logger.error("Cannot remove data server named = '" + dataserverName + "' cannot be found in the configuration.");
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(DataServerSetupPanel.this, "Are you sure you want to remove the data server named:\n" + "'" + dataserverName + "' from the configuration ?", "Please confirm...", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
        if (!config.removeDataServer(dataserver)) {
            JOptionPane.showMessageDialog(DataServerSetupPanel.this, "Cannot remove the data server named : '" + dataserverName + "'\n" + "from the configuration. there is a connection referencing it.", "Hey !!!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        currentDataServer = null;
        SortableListModel model = (SortableListModel) listDataServerName.getModel();
        model.removeElement(dataserverName);
        if (model.getSize() > 0) {
            listDataServerName.setSelectedIndex(0);
        }
    }

    /**
     * Permet de renommer un dataserver et de mettre à jour la connexion.
     * @param evt ActionEvent qui a déclenché cette méthode.
     * @since 2.0.0
     */
    private void btnRenameActionPerformed(java.awt.event.ActionEvent evt) {
        String currentDataServerName = (String) listDataServerName.getSelectedValue();
        if (currentDataServerName == null) {
            return;
        }
        String newName = JOptionPane.showInputDialog(DataServerSetupPanel.this, "Please enter the name of the new dataserver:", currentDataServerName);
        if (newName == null) {
            return;
        }
        HironicoGuiConfiguration config = HironicoGuiConfiguration.getInstance();
        if (config.findDataServerByName(newName) != null) {
            JOptionPane.showMessageDialog(DataServerSetupPanel.this, "There is already a data server definition with that name:\n" + "'" + newName + "'", "Hey !!!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        SortableListModel model = (SortableListModel) listDataServerName.getModel();
        model.removeElement(currentDataServerName);
        DataServer dataServer = config.findDataServerByName(currentDataServerName);
        config.removeDataServer(dataServer);
        dataServer.setDataServerName(newName);
        config.addDataServer(dataServer);
        model.add(newName);
        listDataServerName.setSelectedValue(newName, true);
    }

    /**
     * Permet d'ouvrir la fenétre de gestion des drivers JDBC.
     * @param evt ActionEvent qui a déclenché cette méthode.
     * @since 2.0.0
     */
    private void btnOpenDriversActionPerformed(java.awt.event.ActionEvent evt) {
        Container parent = getTopLevelAncestor();
        Window win = null;
        if (parent instanceof Window) {
            win = (Window) parent;
        }
        OpenDriverSetupDialogAction action = new OpenDriverSetupDialogAction(win, (String) cmbDriver.getSelectedItem());
        action.getDialog().addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosed(WindowEvent evt) {
                showDrivers();
            }
        });
        action.actionPerformed(evt);
    }

    /**
     * Méthode qui va sauvegarder le dataserver courant en édition dans la config.
     * @since 2.0.0
     */
    protected void saveDataServer() {
        if (currentDataServer == null) {
            logger.debug("Cannot save a null dataserver. Select one first.");
            return;
        }
        if (cmbDriver.getItemCount() == 0) {
            logger.error("Cannot save a dataserver without a driver name.");
            JOptionPane.showMessageDialog(DataServerSetupPanel.this, "You must first define a driver definition\n" + "before saving a data server.", "Ohoh...", JOptionPane.ERROR_MESSAGE);
            return;
        }
        currentDataServer.setCharset(txtChartsetName.getText());
        currentDataServer.setDriverName((String) cmbDriver.getSelectedItem());
        currentDataServer.setIpAddress(txtHostname.getText());
        try {
            currentDataServer.setPortNumber(Integer.parseInt(txtPortNumber.getText()));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(DataServerSetupPanel.this, "Enter a numeric value for the port number.\n" + "Defaulted to '1234'. Please correct this.", "Ohoh...", JOptionPane.ERROR_MESSAGE);
            logger.error("Cannot parse the port number text. Will use a formatted text input here some day !");
            txtPortNumber.setText("1234");
            currentDataServer.setPortNumber(1234);
        }
        HironicoGuiConfiguration.getInstance().addDataServer(currentDataServer);
        logger.debug("Current data server '" + currentDataServer.getDataServerName() + "' has been saved.");
    }

    /**
     * Méthode qui va prendre la sélection courante dans la liste des data servers et qui
     * va l'afficher. Cette méthode met à jour l'attribut currentDataServer.
     * @since 2.0.0
     */
    protected void showDataServer() {
        String dataserverName = (String) listDataServerName.getSelectedValue();
        if (dataserverName == null) {
            currentDataServer = null;
            txtChartsetName.setText("");
            txtHostname.setText("");
            txtPortNumber.setText("");
            if (cmbDriver.getItemCount() > 0) {
                cmbDriver.setSelectedIndex(0);
            }
            return;
        }
        currentDataServer = HironicoGuiConfiguration.getInstance().findDataServerByName(dataserverName);
        txtChartsetName.setText(currentDataServer.getCharset());
        txtHostname.setText(currentDataServer.getIpAddress());
        txtPortNumber.setText(Integer.toString(currentDataServer.getPortNumber()));
        cmbDriver.setSelectedItem(currentDataServer.getDriverName());
    }

    /**
     * Permet de mettre à jour la liste des drivers JDBC possibles pour le
     * dataserver en cours d'édition.
     * @since 2.0.0
     */
    public void showDrivers() {
        HironicoGuiConfiguration config = HironicoGuiConfiguration.getInstance();
        String selectedDriver = (String) cmbDriver.getSelectedItem();
        cmbDriver.removeAllItems();
        for (JdbcDriver driver : config.getJdbcDrivers()) {
            cmbDriver.addItem(driver.getDriverName());
        }
        if (selectedDriver != null) {
            cmbDriver.setSelectedItem(selectedDriver);
        }
    }

    /**
     * Permet de charger la liste des dataservers actuellement définis dans l'application.
     * @since 2.0.0
     */
    public void showDataServers() {
        HironicoGuiConfiguration config = HironicoGuiConfiguration.getInstance();
        SortableListModel connectionListModel = (SortableListModel) listDataServerName.getModel();
        connectionListModel.clear();
        for (DataServer ds : config.getDataServers()) {
            connectionListModel.add(ds.getDataServerName());
        }
    }

    /**
     * Permet de sélectionner un dataserver dans la GUI pour afficher directement
     * ses caractéristiques.
     * @param dataserverName le nom du dataserver à afficher.
     * @see ConnectionSetupPanel#btnBrowseDataServerActionPerformed(java.awt.event.ActionEvent) 
     * @since 2.0.0
     */
    public void setSelectedDataServer(String dataserverName) {
        listDataServerName.setSelectedValue(dataserverName, true);
    }

    private javax.swing.JButton btnClose;

    private javax.swing.JButton btnNew;

    private javax.swing.JButton btnOpenDrivers;

    private javax.swing.JButton btnRemove;

    private javax.swing.JButton btnRename;

    private javax.swing.JComboBox cmbDriver;

    private javax.swing.JLabel lblChartset;

    private javax.swing.JLabel lblDataServerName;

    private javax.swing.JLabel lblDriver;

    private javax.swing.JLabel lblHostname;

    private javax.swing.JLabel lblPortNumber;

    private org.jdesktop.swingx.JXList listDataServerName;

    private org.jdesktop.swingx.JXPanel pnlCommands;

    private org.jdesktop.swingx.JXPanel pnlDetails;

    private javax.swing.JScrollPane scrollDataServerName;

    private javax.swing.JTextField txtChartsetName;

    private javax.swing.JTextPane txtExplain;

    private javax.swing.JTextField txtHostname;

    private javax.swing.JTextField txtPortNumber;
}
