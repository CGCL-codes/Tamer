package za.co.data.framework.modler;

import org.jgraph.JGraph;
import org.jgraph.graph.AttributeMap;
import org.jgraph.graph.DefaultGraphCell;
import org.jgraph.graph.DefaultGraphModel;
import org.jgraph.graph.GraphConstants;
import za.co.data.framework.ClassUtils;
import za.co.data.framework.SiloInitializer;
import za.co.data.framework.ui.components.ModlerGraph;
import za.co.data.framework.ui.editors.InplaceEditor;
import za.co.data.util.ModlerTools;
import za.co.data.util.QueryTools;
import za.co.data.util.IOUtils;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import za.co.data.framework.ui.components.TreeSetupPanel;

/**
 * @author darryl
 * @todo fix classpath to include project output for hibernate.
 * @todo add/delete fields after creation of class.
 */
public class ModlerUI extends javax.swing.JFrame {

    public static String PROJECT_NAME = "silo";

    public static ModlerUI instance;

    public static Map<Class, DefaultGraphCell> CLASS_VERTEX_MAPPING;

    public static File dataSiloPref = new File(System.getProperty("user.home") + File.separator + ".silo.properties");

    public static Properties properties;

    private File layoutFile;

    private SiloInitializer silo;

    public static String getProperty(String string) {
        return properties.getProperty(string);
    }

    public static ModlerUI getInstance() {
        return instance;
    }

    public SiloInitializer getSilo() {
        return silo;
    }

    public File getLayoutFile() {
        return layoutFile;
    }

    public void setLayoutFile(File projectFile) {
        this.layoutFile = projectFile;
    }

    public File getDataSiloPref() {
        return dataSiloPref;
    }

    public void setDataSiloPref(File dataSiloPref) {
        ModlerUI.dataSiloPref = dataSiloPref;
    }

    public static void addCellsForClasses() {
        CLASS_VERTEX_MAPPING = ModlerTools.createCells(ClassUtils.getClassNames());
        graph.getGraphLayoutCache().insert(CLASS_VERTEX_MAPPING.values().toArray());
        graph.getGraphLayoutCache().insert(ModlerTools.mapCellRelations(CLASS_VERTEX_MAPPING).toArray());
    }

    public Properties getProperties() {
        return properties;
    }

    public void setProperties(Properties dataSiloProperties) {
        this.properties = dataSiloProperties;
    }

    public static JGraph getGraph() {
        return graph;
    }

    public static void setGraph(ModlerGraph graph) {
        ModlerUI.graph = graph;
    }

    /**
     * Creates new form ModlerTest
     */
    public ModlerUI() throws Throwable {
        setTitle("DataSiloModler");
        instance = this;
        try {
            loadProject();
            loadSiloProject();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void btnAddTable1ActionPerformed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    private void btnLoadActionPerformed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jScrollPane2 = new javax.swing.JScrollPane();
        modelToolBar = new javax.swing.JToolBar();
        btnAddTable1 = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        bntSave = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnAddTable = new javax.swing.JButton();
        btnDeleteTable = new javax.swing.JButton();
        btnApplyToDB = new javax.swing.JButton();
        mainTabPane = new javax.swing.JTabbedPane();
        scrGraph = new javax.swing.JScrollPane();
        graph = new za.co.data.framework.ui.components.ModlerGraph();
        pnlSiteLayout = new TreeSetupPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        mnuDatabaseConnection = new javax.swing.JMenuItem();
        mnuInsert = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        FormListener formListener = new FormListener();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("za/co/data/framework/modler/Bundle");
        setTitle(bundle.getString("ModlerUI.title"));
        setState(JFrame.MAXIMIZED_BOTH);
        modelToolBar.setRollover(true);
        btnAddTable1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/new.png")));
        btnAddTable1.setMnemonic('n');
        btnAddTable1.setText(bundle.getString("ModlerUI.btnAddTable1.text"));
        btnAddTable1.setFocusable(false);
        btnAddTable1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddTable1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddTable1.addActionListener(formListener);
        modelToolBar.add(btnAddTable1);
        btnLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/load.png")));
        btnLoad.setMnemonic('O');
        btnLoad.setText(bundle.getString("ModlerUI.btnLoad.text"));
        btnLoad.setFocusable(false);
        btnLoad.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLoad.setOpaque(false);
        btnLoad.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLoad.addActionListener(formListener);
        modelToolBar.add(btnLoad);
        bntSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png")));
        bntSave.setMnemonic('s');
        bntSave.setText(bundle.getString("ModlerUI.bntSave.text"));
        bntSave.setFocusable(false);
        bntSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bntSave.setMargin(new java.awt.Insets(2, 4, 3, 3));
        bntSave.setMaximumSize(new java.awt.Dimension(91, 47));
        bntSave.setMinimumSize(new java.awt.Dimension(91, 47));
        bntSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bntSave.addActionListener(formListener);
        modelToolBar.add(bntSave);
        modelToolBar.add(jSeparator1);
        btnAddTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/new.png")));
        btnAddTable.setMnemonic('n');
        btnAddTable.setText(bundle.getString("ModlerUI.btnAddTable.text"));
        btnAddTable.setFocusable(false);
        btnAddTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddTable.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddTable.addActionListener(formListener);
        modelToolBar.add(btnAddTable);
        btnDeleteTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png")));
        btnDeleteTable.setMnemonic('d');
        btnDeleteTable.setText(bundle.getString("ModlerUI.btnDeleteTable.text"));
        btnDeleteTable.setFocusable(false);
        btnDeleteTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeleteTable.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteTable.addActionListener(formListener);
        modelToolBar.add(btnDeleteTable);
        btnApplyToDB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/apply.png")));
        btnApplyToDB.setText(bundle.getString("ModlerUI.btnApplyToDB.text"));
        btnApplyToDB.setFocusable(false);
        btnApplyToDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnApplyToDB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnApplyToDB.addActionListener(formListener);
        modelToolBar.add(btnApplyToDB);
        mainTabPane.addChangeListener(formListener);
        scrGraph.setViewportView(graph);
        mainTabPane.addTab(bundle.getString("ModlerUI.scrGraph.TabConstraints.tabTitle"), scrGraph);
        javax.swing.GroupLayout pnlSiteLayoutLayout = new javax.swing.GroupLayout(pnlSiteLayout);
        pnlSiteLayout.setLayout(pnlSiteLayoutLayout);
        pnlSiteLayoutLayout.setHorizontalGroup(pnlSiteLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 1049, Short.MAX_VALUE));
        pnlSiteLayoutLayout.setVerticalGroup(pnlSiteLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 527, Short.MAX_VALUE));
        mainTabPane.addTab(bundle.getString("ModlerUI.pnlSiteLayout.TabConstraints.tabTitle"), new TreeSetupPanel());
        mnuFile.setMnemonic('f');
        mnuFile.setText(bundle.getString("ModlerUI.mnuFile.text"));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/new.png")));
        jMenuItem1.setText(bundle.getString("ModlerUI.jMenuItem1.text"));
        mnuFile.add(jMenuItem1);
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/load.png")));
        jMenuItem3.setText(bundle.getString("ModlerUI.jMenuItem3.text"));
        mnuFile.add(jMenuItem3);
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png")));
        jMenuItem2.setText(bundle.getString("ModlerUI.jMenuItem2.text"));
        jMenuItem2.addActionListener(formListener);
        mnuFile.add(jMenuItem2);
        jMenuItem4.setText(bundle.getString("ModlerUI.jMenuItem4.text"));
        jMenuItem4.addActionListener(formListener);
        mnuFile.add(jMenuItem4);
        jMenuBar1.add(mnuFile);
        mnuEdit.setMnemonic('e');
        mnuEdit.setText(bundle.getString("ModlerUI.mnuEdit.text"));
        mnuDatabaseConnection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/database.png")));
        mnuDatabaseConnection.setText(bundle.getString("ModlerUI.mnuDatabaseConnection.text"));
        mnuDatabaseConnection.addActionListener(formListener);
        mnuEdit.add(mnuDatabaseConnection);
        jMenuBar1.add(mnuEdit);
        mnuInsert.setMnemonic('i');
        mnuInsert.setText(bundle.getString("ModlerUI.mnuInsert.text"));
        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/table.png")));
        jMenu1.setText(bundle.getString("ModlerUI.jMenu1.text"));
        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/user.png")));
        jMenuItem5.setText(bundle.getString("ModlerUI.jMenuItem5.text"));
        jMenu1.add(jMenuItem5);
        mnuInsert.add(jMenu1);
        jMenuBar1.add(mnuInsert);
        setJMenuBar(jMenuBar1);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(modelToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 1054, Short.MAX_VALUE).addComponent(mainTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1054, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(modelToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(mainTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)));
        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width - dialogSize.width) / 2, (screenSize.height - dialogSize.height) / 2);
    }

    private class FormListener implements java.awt.event.ActionListener, javax.swing.event.ChangeListener {

        FormListener() {
        }

        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == btnAddTable1) {
                ModlerUI.this.btnAddTable1ActionPerformed(evt);
            } else if (evt.getSource() == btnLoad) {
                ModlerUI.this.btnLoadActionPerformed(evt);
            } else if (evt.getSource() == bntSave) {
                ModlerUI.this.bntSaveActionPerformed(evt);
            } else if (evt.getSource() == btnAddTable) {
                ModlerUI.this.btnAddTableActionPerformed(evt);
            } else if (evt.getSource() == btnDeleteTable) {
                ModlerUI.this.btnDeleteTableActionPerformed(evt);
            } else if (evt.getSource() == btnApplyToDB) {
                ModlerUI.this.btnApplyToDBActionPerformed(evt);
            } else if (evt.getSource() == jMenuItem2) {
                ModlerUI.this.jMenuItem2ActionPerformed(evt);
            } else if (evt.getSource() == jMenuItem4) {
                ModlerUI.this.jMenuItem4ActionPerformed(evt);
            } else if (evt.getSource() == mnuDatabaseConnection) {
                ModlerUI.this.mnuDatabaseConnectionActionPerformed(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == mainTabPane) {
                ModlerUI.this.mainTabPaneStateChanged(evt);
            }
        }
    }

    private void btnDeleteTableActionPerformed(java.awt.event.ActionEvent evt) {
        if (graph.getSelectionCell() != null) {
            DefaultGraphCell cell = (DefaultGraphCell) graph.getSelectionCell();
            String linkedTables = ModlerTools.getLinkedTableNames(cell, false);
            String tablesReferencedMessage = "Deleting " + cell.getUserObject() + " will affect the following tables : \n" + linkedTables;
            if (JOptionPane.showConfirmDialog(this, (linkedTables.length() == 0 ? "Are you sure you want to delete " + cell.getUserObject() + " ? " : tablesReferencedMessage), "Are you sure you want to delelte " + cell.getUserObject() + " ? ", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                ClassUtils.deleteTableDefinition((Class) cell.getAttributes().get("cell.class"), linkedTables.split("\n"));
                graph.getGraphLayoutCache().remove(ModlerTools.getConnectors(cell));
                graph.getGraphLayoutCache().remove(cell.getChildren().toArray());
                graph.getGraphLayoutCache().remove(new Object[] { cell });
            }
        }
    }

    private void mainTabPaneStateChanged(javax.swing.event.ChangeEvent evt) {
        switch(mainTabPane.getSelectedIndex()) {
            case 0:
                modelToolBar.setVisible(true);
                break;
            case 1:
                modelToolBar.setVisible(false);
                break;
            case 2:
                modelToolBar.setVisible(false);
                break;
            default:
                break;
        }
    }

    private void btnAddTableActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultGraphCell cell = new DefaultGraphCell("");
        AttributeMap attributes = cell.getAttributes();
        attributes.applyValue("cell.class", Object.class);
        GraphConstants.setBounds(attributes, new Rectangle2D.Double(100, 100, 100, 50));
        InplaceEditor editor = InplaceEditor.getInstance(cell);
        JDialog newTableDialog = new JDialog(this, true);
        newTableDialog.setContentPane(editor);
        newTableDialog.pack();
        Dimension wi = instance.getSize();
        Dimension sc = Toolkit.getDefaultToolkit().getScreenSize();
        newTableDialog.setLocation((sc.width - wi.width) / 2, (sc.height - wi.height) / 2);
        editor.setParentWindow(newTableDialog);
        newTableDialog.setVisible(true);
    }

    private void bntSaveActionPerformed(java.awt.event.ActionEvent evt) {
        ModlerTools.saveLayout(this);
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {
        bntSaveActionPerformed(evt);
    }

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    private void mnuDatabaseConnectionActionPerformed(java.awt.event.ActionEvent evt) {
        new DatabaseSettingsFrame().setVisible(true);
    }

    private void btnApplyToDBActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            QueryTools.createSessionFactory(properties.getProperty("silo.absoloute.path") + File.separator + "hibernate.cfg.xml");
            JOptionPane.showMessageDialog(this, "Model Applied Successfully", "Changes Applied", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(ModlerUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.toString());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                } catch (InstantiationException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (UnsupportedLookAndFeelException e) {
                    e.printStackTrace();
                }
                if (!dataSiloPref.exists()) {
                    ProjectSetupFrame setup = new ProjectSetupFrame();
                    setup.setSize(800, 600);
                    ModlerTools.centerOnScreen(setup, false);
                    setup.setVisible(true);
                    try {
                        ModlerUI mui = new ModlerUI();
                    } catch (Throwable ex) {
                        Logger.getLogger(ModlerUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    try {
                        ModlerUI mui = new ModlerUI();
                        mui.setState(MAXIMIZED_BOTH);
                    } catch (Throwable ex) {
                        Logger.getLogger(ModlerUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }

    private javax.swing.JButton bntSave;

    private javax.swing.JButton btnAddTable;

    private javax.swing.JButton btnAddTable1;

    private javax.swing.JButton btnApplyToDB;

    private javax.swing.JButton btnDeleteTable;

    private javax.swing.JButton btnLoad;

    public static za.co.data.framework.ui.components.ModlerGraph graph;

    private javax.swing.JMenu jMenu1;

    private javax.swing.JMenuBar jMenuBar1;

    private javax.swing.JMenuItem jMenuItem1;

    private javax.swing.JMenuItem jMenuItem2;

    private javax.swing.JMenuItem jMenuItem3;

    private javax.swing.JMenuItem jMenuItem4;

    private javax.swing.JMenuItem jMenuItem5;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JToolBar.Separator jSeparator1;

    private javax.swing.JTabbedPane mainTabPane;

    private javax.swing.JMenuItem mnuDatabaseConnection;

    private javax.swing.JMenu mnuEdit;

    private javax.swing.JMenu mnuFile;

    private javax.swing.JMenu mnuInsert;

    private javax.swing.JToolBar modelToolBar;

    private TreeSetupPanel pnlSiteLayout;

    private javax.swing.JScrollPane scrGraph;

    public void loadProject() throws IOException {
        properties = new Properties();
        properties.load(new FileInputStream(dataSiloPref));
        if (properties.getProperty("silo.model.package") == null) return;
        System.setProperty("silo.model.package", properties.getProperty("silo.model.package"));
        System.setProperty("silo.absoloute.path", properties.getProperty("silo.absoloute.path"));
        System.setProperty("silo.classes.output", properties.getProperty("silo.classes.output"));
        System.setProperty("silo.hibernate.hbm.output", properties.getProperty("silo.hibernate.hbm.output"));
        System.setProperty("silo.hibernate.hbm.output", properties.getProperty("silo.hibernate.hbm.output"));
        if (properties.getProperty("layout.file") != null) {
            System.setProperty("layout.file", properties.getProperty("layout.file"));
        }
    }

    public void saveProject() {
        IOUtils.saveProject();
    }

    private void loadSiloProject() throws Throwable {
        initComponents();
        try {
            silo = new SiloInitializer();
            for (String className : silo.getPersistentClasses()) {
                ClassUtils.cacheClass(className);
            }
        } catch (Exception e) {
        }
        graph.setModel(new DefaultGraphModel());
        graph.setPortsOnTop(true);
        graph.setAntiAliased(true);
        graph.setDoubleBuffered(true);
        graph.setAntiAliased(true);
        graph.setAutoscrolls(true);
        graph.setPortsOnTop(false);
        graph.setXorEnabled(false);
        try {
            addCellsForClasses();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            ModlerTools.loadLayout(this);
        } catch (Exception e) {
            e.printStackTrace();
        }
        setVisible(true);
    }
}
