package org.infoeng.ofbiz.afm.test;

import org.bouncycastle.jce.*;
import org.bouncycastle.jce.provider.*;
import org.bouncycastle.asn1.*;
import org.bouncycastle.asn1.misc.*;
import org.bouncycastle.asn1.x509.*;
import org.bouncycastle.x509.X509V3CertificateGenerator;
import org.bouncycastle.*;
import java.util.*;
import java.security.*;
import java.io.*;
import java.math.*;
import org.infoeng.ofbiz.ltans.afm.*;
import org.infoeng.ofbiz.ltans.util.*;
import java.security.cert.*;

public class AFMServicePKIGenerate {

    public static void main(String[] args) throws Exception {
        java.security.Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        Properties props = LtansUtils.getDefaultProperties();
        KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
        kpg.initialize(Integer.parseInt(props.getProperty("ltans.keystore.keyLength")));
        KeyPair kp = kpg.genKeyPair();
        PrivateKey caPrivKey = kp.getPrivate();
        PublicKey caPubKey = kp.getPublic();
        KeyPair kpTwo = kpg.genKeyPair();
        KeyPair kpThree = kpg.genKeyPair();
        PublicKey pubKey = kpTwo.getPublic();
        Hashtable attrs = new Hashtable();
        Vector order = new Vector();
        String passwd = props.getProperty("ltans.keystore.password");
        String caName = props.getProperty("ltans.keystore.caName");
        String caAlias = props.getProperty("ltans.keystore.caAlias");
        String caPass = props.getProperty("ltans.keystore.caPassword");
        String keyAlias = props.getProperty("ltans.keystore.afmServiceKeyAlias");
        String keyName = props.getProperty("ltans.keystore.afmServiceKeyName");
        String keyPassword = props.getProperty("ltans.keystore.afmServicePassword");
        String reqAlias = props.getProperty("ltans.keystore.requestorAlias");
        String reqName = props.getProperty("ltans.keystore.requestorName");
        String reqPassword = props.getProperty("ltans.keystore.requestorPassword");
        KeyStore keyStore = KeyStore.getInstance("JKS");
        keyStore.load(null, passwd.toCharArray());
        X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator();
        v3CertGen.reset();
        v3CertGen.setSerialNumber(BigInteger.valueOf(1));
        v3CertGen.setIssuerDN(new X509Principal(caName));
        v3CertGen.setNotBefore(new Date(System.currentTimeMillis() - 1000L * 60 * 60 * 24 * 30));
        v3CertGen.setNotAfter(new Date(System.currentTimeMillis() + (1000L * 60 * 60 * 24 * 30)));
        v3CertGen.setSubjectDN(new X509Principal(caName));
        v3CertGen.setPublicKey(caPubKey);
        v3CertGen.setSignatureAlgorithm("SHA256WithRSAEncryption");
        X509Certificate caCert = v3CertGen.generate(caPrivKey);
        X509Certificate[] certArray = new X509Certificate[1];
        certArray[0] = caCert;
        keyStore.setKeyEntry(caAlias, caPrivKey, caPass.toCharArray(), certArray);
        v3CertGen.reset();
        v3CertGen.setSerialNumber(BigInteger.valueOf(2));
        v3CertGen.setIssuerDN(new X509Principal(caName));
        v3CertGen.setNotBefore(new Date(System.currentTimeMillis() - 1000L * 60 * 60 * 24 * 30));
        v3CertGen.setNotAfter(new Date(System.currentTimeMillis() + (1000L * 60 * 60 * 24 * 30)));
        v3CertGen.setSubjectDN(new X509Principal(keyName));
        v3CertGen.setPublicKey(pubKey);
        v3CertGen.setSignatureAlgorithm("SHA256WithRSAEncryption");
        String afmBusinessEntityStr = "<></>";
        String afmTModelStr = "<></>";
        v3CertGen.addExtension(AFMObjectIdentifiers.id_afm_service_businessEntity, true, afmBusinessEntityStr.getBytes());
        v3CertGen.addExtension(AFMObjectIdentifiers.id_afm_service_tModel, true, afmTModelStr.getBytes());
        X509Certificate cert = v3CertGen.generate(caPrivKey);
        cert.checkValidity(new Date());
        cert.verify(caPubKey);
        X509Certificate[] certArrayTwo = new X509Certificate[2];
        certArrayTwo[0] = cert;
        certArrayTwo[1] = caCert;
        keyStore.setKeyEntry(keyAlias, kpTwo.getPrivate(), keyPassword.toCharArray(), certArrayTwo);
        v3CertGen.reset();
        v3CertGen.setSerialNumber(BigInteger.valueOf(3));
        v3CertGen.setIssuerDN(new X509Principal(caName));
        v3CertGen.setNotBefore(new Date(System.currentTimeMillis() - 1000L * 60 * 60 * 24 * 30));
        v3CertGen.setNotAfter(new Date(System.currentTimeMillis() + (1000L * 60 * 60 * 24 * 30)));
        v3CertGen.setSubjectDN(new X509Principal(reqName));
        v3CertGen.setPublicKey(kpThree.getPublic());
        v3CertGen.setSignatureAlgorithm("SHA256WithRSAEncryption");
        X509Certificate certNew = v3CertGen.generate(caPrivKey);
        cert.checkValidity(new Date());
        cert.verify(caPubKey);
        X509Certificate[] certArrayNew = new X509Certificate[2];
        certArrayNew[0] = certNew;
        certArrayNew[1] = caCert;
        keyStore.setKeyEntry(reqAlias, kpThree.getPrivate(), reqPassword.toCharArray(), certArrayNew);
        File f = File.createTempFile(args[1], ".jks", new File(args[0]));
        FileOutputStream fos = new FileOutputStream(f);
        keyStore.store(fos, passwd.toCharArray());
        System.out.println("Wrote keystore to " + f.getCanonicalPath() + ".");
    }
}
