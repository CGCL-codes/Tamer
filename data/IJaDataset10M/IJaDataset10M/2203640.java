package org.jmlspecs.checker;

import org.jmlspecs.util.classfile.*;
import org.multijava.mjc.*;
import org.multijava.util.compiler.TokenReference;
import org.multijava.util.compiler.JavaStyleComment;
import org.multijava.util.compiler.PositionedError;

/**
 * JmlRefiningStatement.java
 *
 * @author Steve Shaner and Gary T. Leavens
 * @version $Revision: 1.3 $
 */
public class JmlRefiningStatement extends JStatementWrapper {

    public JmlRefiningStatement(TokenReference where, JmlSpecStatement specstmt, boolean wasGencase, JStatement body, JavaStyleComment[] comments) {
        super(where, comments);
        this.wasGencase = wasGencase;
        this.specstmt = specstmt;
        this.body = body;
    }

    /** Returns whether the syntax was desugared from a general spec case. */
    public boolean wasGencase() {
        return wasGencase;
    }

    /** Returns the spec statement of this refining statement. */
    public JmlSpecStatement specStatement() {
        return specstmt;
    }

    /** Returns the body of this refining statement. */
    public JStatement body() {
        return body;
    }

    /** 
     * Returns the Java source code generated by jmlrac to execute
     * this refining statement at runtime. */
    public JStatement assertionCode() {
        return assertionCode;
    }

    /** 
     * Returns <code>true</code> if this refining statement has the Java
     * source code generated by jmlrac to execute it at runtime. */
    public boolean hasAssertionCode() {
        return assertionCode != null;
    }

    /** 
     * Sets the Java source code generated by jmlrac to execute
     * this refining statement at runtime. */
    public void setAssertionCode(JStatement code) {
        assertionCode = code;
    }

    public void typecheck(CFlowControlContextType context) throws PositionedError {
        try {
            enterSpecScope();
            specstmt.typecheck(context);
        } finally {
            exitSpecScope();
        }
        body.typecheck(context);
    }

    public void genCode(CodeSequence code) {
    }

    /**
     * Accepts the specified visitor.
     * @param p	the visitor
     */
    public void accept(MjcVisitor p) {
        if (p instanceof JmlVisitor) ((JmlVisitor) p).visitJmlRefiningStatement(this); else throw new UnsupportedOperationException(JmlNode.MJCVISIT_MESSAGE);
    }

    private boolean wasGencase;

    private JmlSpecStatement specstmt;

    private JStatement body;

    /** Java source code generated by jmlrac to execute this set
     * statement at runtime. */
    private JStatement assertionCode;
}
