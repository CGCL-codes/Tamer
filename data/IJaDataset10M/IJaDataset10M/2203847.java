package mail;

import java.lang.reflect.Constructor;
import mail.node.*;
import org.w3c.dom.*;
import java.util.Hashtable;

/**
 * 
 * @author Arne MÃ¼ller
 *
 */
public abstract class Mail {

    private static Hashtable<String, Class<? extends Mail>> mailTypes = new Hashtable<String, Class<? extends Mail>>();

    protected ID receiver;

    protected String id;

    /**
	 * creates a new Mail. A receiver has to be specified, because the mail is supposed to arrive is it?
	 * @param receiver
	 */
    public Mail(ID receiver) {
        this.receiver = receiver;
        if (receiver == null) throw new NullPointerException("receiver mustn't be null!");
        id = Double.toString((int) (Math.random() * 1000000));
    }

    /**
	 * returns the receiver of this mail, this method should never return null
	 * @return
	 */
    public ID getReceiver() {
        return (receiver);
    }

    /**
	 * returns the sender of this mail.
	 * The sender might not be public, so it is possible for this method to return null,
	 * if the sender wishes to stay hidden (e.g. by encryption)
	 * @return the sender, or null, if the sender is hidden
	 */
    public abstract ID getSender();

    public String getID() {
        return (id);
    }

    /**
	 * the hashcode only depends on the random-id-string generated by creation and the receiver
	 */
    public int hashCode() {
        return (id.hashCode() ^ receiver.hashCode());
    }

    /**
	 * two mails are equal, if and only if their ID and receiver matches
	 */
    public boolean equals(Object o) {
        if (o instanceof Mail) {
            Mail m = ((Mail) o);
            return (m.id.equals(id) && m.getReceiver().equals(getReceiver()));
        } else return (false);
    }

    /**
	 * builds an XML-Element out of this Mail
	 * @param d the document to place the element into
	 * @return the created XML-element
	 */
    public abstract Element buildContent(Document d) throws MailBuildException;

    public abstract void build(Element e) throws MailBuildException;

    /**
	 * builds a mail out of an XML-Element
	 * @param e the XML-Element
	 * @return the created Mail
	 */
    public static Mail buildMail(Element e) throws MailBuildException {
        ID receiver = new ID(e.getAttribute("receiver"));
        String id = e.getAttribute("id");
        String typ = e.getAttribute("class");
        try {
            Class<? extends Mail> cl = mailTypes.get(typ);
            Constructor<? extends Mail> con = cl.getDeclaredConstructor(ID.class);
            Mail neu = con.newInstance(receiver);
            neu.build(e);
            neu.id = id;
            return (neu);
        } catch (NullPointerException ex) {
            throw new MailBuildException("Mailtype not found: " + mailTypes, ex);
        } catch (Exception ex) {
            throw new MailBuildException(ex);
        }
    }

    protected static void registerPackage(Class<? extends Mail> c, String name) {
        mailTypes.put(name, c);
    }
}
