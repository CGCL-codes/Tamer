package com.qarks.util;

public class Log {

    private static ILog mRedirect = null;

    private Log() {
    }

    public static final void setRedirect(ILog redirectLog) {
        mRedirect = redirectLog;
    }

    public static final boolean isDebugMode(Object caller) {
        String className;
        if (caller instanceof Class) {
            Class callerClass = (Class) caller;
            className = callerClass.getName();
        } else {
            className = caller.getClass().getName();
        }
        String debugKey = className;
        String debugValue = System.getProperty(debugKey, RELEASE);
        return debugValue.equals(DEBUG);
    }

    public static final void logDebug(Object caller, Throwable throwable) {
        if (mRedirect != null) {
            mRedirect.logDebug(caller, throwable);
        } else {
            while (throwable instanceof LinkedException) {
                System.out.println(throwable);
                throwable = ((LinkedException) throwable).getLinkedException();
            }
            System.out.println(throwable);
        }
    }

    public static final void logDebug(Object caller, String message) {
        if (mRedirect != null) {
            mRedirect.logDebug(caller, message);
        } else {
            System.out.println("DEBUG: " + message);
        }
    }

    public static final void logMessage(Object caller, String message) {
        if (mRedirect != null) {
            mRedirect.logMessage(caller, message);
        } else {
            System.out.println("MESSAGE: " + message);
        }
    }

    public static final void logWarning(Object caller, String message) {
        if (mRedirect != null) {
            mRedirect.logWarning(caller, message);
        } else {
            System.out.println("WARNING: " + message);
        }
    }

    public static final void logError(Object caller, String message, Throwable throwable) {
        if (null == throwable) {
            throwable = new Throwable("Generated by Log to get a stack trace.");
        }
        if (mRedirect != null) {
            mRedirect.logError(caller, message, throwable);
        } else {
            System.err.println("ERROR: " + message + "\n-> EXCEPTION: ");
            throwable.printStackTrace();
        }
    }

    private static String DEBUG = "debug";

    private static String RELEASE = "release";
}
