package org.javacoding.upupa.model.entity;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import org.appfuse.model.BaseObject;
import org.appfuse.model.User;
import org.javacoding.upupa.model.catalog.BillLengthMethod;
import org.javacoding.upupa.model.catalog.ColourMark;
import org.javacoding.upupa.model.catalog.Moult;
import org.javacoding.upupa.model.catalog.RingingRecordType;
import org.javacoding.upupa.model.catalog.Sex;

@Entity
@Table(name = "ringingrecord")
public class RingingRecord extends BaseObject {

    /**Unique Serialisation class ID generated by http://random&#46;hd&#46;org/. */
    private static final long serialVersionUID = -7448022196862330111L;

    public static String dateFormat = "dd/MM/yyyy";

    private static final SimpleDateFormat formatter = new SimpleDateFormat(dateFormat);

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Column(name = "ringingDate", length = 10, nullable = false)
    private String ringingDate;

    @Column(name = "timeHour", length = 2, nullable = false)
    private Byte timeHour;

    @Column(name = "weighingDate", length = 10, nullable = false)
    private String weighingDate;

    @Column(name = "weighingHour", length = 2, nullable = false)
    private Byte weighingHour;

    @Column(name = "remarks", length = 50, nullable = true)
    private String remarks;

    @Column(name = "subspecies", length = 50, nullable = true)
    private String subspecies;

    @Column(name = "type", length = 12, nullable = false)
    @Enumerated(EnumType.STRING)
    private RingingRecordType type;

    @Column(name = "ringNumber", length = 15, nullable = false)
    private String ringNumber;

    @Column(name = "age", length = 2, nullable = false)
    private String age;

    @Column(name = "sex", length = 8, nullable = true)
    @Enumerated(EnumType.STRING)
    private Sex sex;

    @Column(name = "wingLength", length = 6, nullable = true)
    private BigDecimal wingLength;

    @Column(name = "fatScore", length = 1, nullable = true)
    private Character fatScore;

    @Column(name = "muscleScore", length = 1, nullable = true)
    private Character muscleScore;

    @Column(name = "moulting", length = 1, nullable = true)
    @Enumerated(EnumType.STRING)
    private Moult moulting;

    @Column(name = "colourMark", length = 1, nullable = true)
    @Enumerated(EnumType.STRING)
    private ColourMark colourMark;

    @Column(name = "broodPatch", columnDefinition = "tinyint(1)")
    private Boolean broodPatch;

    @Column(name = "weight", nullable = true)
    private BigDecimal weight;

    @Column(name = "netNumber", length = 2, nullable = true)
    private String netNumber;

    @Column(name = "cloaca", nullable = true)
    private Boolean cloaca;

    @Column(name = "billWidth", nullable = true)
    private BigDecimal billWidth;

    @Column(name = "billHeight", nullable = true)
    private BigDecimal billHeight;

    @Column(name = "tarsus", nullable = true)
    private BigDecimal tarsus;

    @Column(name = "thirdPrimary", nullable = true)
    private BigDecimal thirdPrimary;

    @Column(name = "tail", nullable = true)
    private BigDecimal tail;

    @Column(name = "hindClaw", nullable = true)
    private BigDecimal hindClaw;

    @Column(name = "billLength", length = 6, nullable = true)
    private BigDecimal billLength;

    @Column(name = "billLengthMethod", length = 10, nullable = true)
    @Enumerated(EnumType.STRING)
    private BillLengthMethod billLengthMethod;

    @Column(name = "moultCardId")
    private Long moultCardId;

    @Column(name = "ownerId")
    private Long ownerId;

    @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn(name = "siteId")
    private Site site;

    @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn(name = "euringId")
    private EURing euring;

    @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn(name = "ringerId")
    private User ringer;

    public RingingRecord() {
        super();
        ringingDate = formatter.format(new Date());
        type = RingingRecordType.NEW;
    }

    /**
     * Id of the ringing record
     * @return
     */
    public Long getId() {
        return this.id;
    }

    public String getRemarks() {
        return this.remarks;
    }

    public String getSubspecies() {
        return subspecies;
    }

    public void setSubspecies(String subspecies) {
        this.subspecies = subspecies;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    public String getRingingDate() {
        return ringingDate;
    }

    public Date getRingingDateAsDateObject() {
        try {
            return formatter.parse(getRingingDate());
        } catch (final ParseException e) {
            e.printStackTrace();
        }
        return null;
    }

    public Date getWeighingDateAsDateObject() {
        try {
            return formatter.parse(getWeighingDate());
        } catch (final ParseException e) {
            e.printStackTrace();
        }
        return null;
    }

    public void setRingingDate(String ringingDate) {
        if (ringingDate == null) {
            this.ringingDate = formatter.format(new Date());
        } else {
            this.ringingDate = ringingDate;
        }
    }

    public Byte getTimeHour() {
        return timeHour;
    }

    public void setTimeHour(Byte timeHour) {
        if (timeHour != null) {
            if ((timeHour < 0) || (timeHour > 23)) {
                throw new IllegalArgumentException("timeHour must be between 0 and 23 not.  Out of range: " + timeHour);
            }
            this.timeHour = timeHour;
        }
    }

    public String getWeighingDate() {
        return weighingDate;
    }

    public void setWeighingDate(String weighingDate) {
        if (weighingDate == null) {
            this.weighingDate = formatter.format(new Date());
        } else {
            this.weighingDate = weighingDate;
        }
    }

    public Byte getWeighingHour() {
        return weighingHour;
    }

    public void setWeighingHour(Byte weighingHour) {
        if (weighingHour != null) {
            if ((weighingHour < 0) || (weighingHour > 23)) {
                throw new IllegalArgumentException("weighingHour must be between 0 and 23 not.  Out of range: " + weighingHour);
            }
            this.weighingHour = weighingHour;
        }
    }

    public RingingRecordType getType() {
        return type;
    }

    public void setType(RingingRecordType type) {
        this.type = type;
    }

    public Site getSite() {
        return site;
    }

    public void setSite(Site site) {
        this.site = site;
    }

    public Moult getMoulting() {
        return moulting;
    }

    public void setMoulting(Moult moulting) {
        this.moulting = moulting;
    }

    public ColourMark getColourMark() {
        return colourMark;
    }

    public void setColourMark(final ColourMark colourMark) {
        this.colourMark = colourMark;
    }

    public Long getOwnerId() {
        return ownerId;
    }

    public void setOwnerId(Long ownerId) {
        this.ownerId = ownerId;
    }

    public String getRingNumber() {
        return ringNumber;
    }

    public void setRingNumber(final String ringNumber) {
        this.ringNumber = ringNumber != null ? ringNumber.toUpperCase() : null;
    }

    public String getAge() {
        return age;
    }

    public void setAge(String age) {
        this.age = age;
    }

    public Sex getSex() {
        return sex;
    }

    public void setSex(Sex sex) {
        this.sex = sex;
    }

    public BigDecimal getWingLength() {
        return wingLength;
    }

    public void setWingLength(BigDecimal wingLength) {
        this.wingLength = wingLength;
    }

    public Character getFatScore() {
        return fatScore;
    }

    public void setFatScore(Character fatScore) {
        this.fatScore = fatScore;
    }

    public Character getMuscleScore() {
        return muscleScore;
    }

    public void setMuscleScore(Character muscleScore) {
        this.muscleScore = muscleScore;
    }

    public Boolean getBroodPatch() {
        return broodPatch;
    }

    public void setBroodPatch(Boolean broodPatch) {
        this.broodPatch = broodPatch;
    }

    public BigDecimal getWeight() {
        return weight;
    }

    public void setWeight(BigDecimal weight) {
        this.weight = weight;
    }

    public String getNetNumber() {
        return netNumber;
    }

    public void setNetNumber(String netNumber) {
        this.netNumber = netNumber;
    }

    public Boolean getCloaca() {
        return cloaca;
    }

    public void setCloaca(Boolean cloaca) {
        this.cloaca = cloaca;
    }

    public BigDecimal getBillWidth() {
        return billWidth;
    }

    public void setBillWidth(BigDecimal billWidth) {
        this.billWidth = billWidth;
    }

    public BigDecimal getBillHeight() {
        return billHeight;
    }

    public void setBillHeight(BigDecimal billHeight) {
        this.billHeight = billHeight;
    }

    public BigDecimal getTarsus() {
        return tarsus;
    }

    public void setTarsus(BigDecimal tarsus) {
        this.tarsus = tarsus;
    }

    public BigDecimal getThirdPrimary() {
        return thirdPrimary;
    }

    public void setThirdPrimary(BigDecimal thirdPrimary) {
        this.thirdPrimary = thirdPrimary;
    }

    public BigDecimal getTail() {
        return tail;
    }

    public void setTail(BigDecimal tail) {
        this.tail = tail;
    }

    public BigDecimal getHindClaw() {
        return hindClaw;
    }

    public void setHindClaw(BigDecimal hindClaw) {
        this.hindClaw = hindClaw;
    }

    public BigDecimal getBillLength() {
        return billLength;
    }

    public void setBillLength(BigDecimal billLength) {
        this.billLength = billLength;
    }

    public BillLengthMethod getBillLengthMethod() {
        return billLengthMethod;
    }

    public void setBillLengthMethod(BillLengthMethod billLengthMethod) {
        this.billLengthMethod = billLengthMethod;
    }

    public Long getMoultCardId() {
        return moultCardId;
    }

    public void setMoultCardId(Long moultCardId) {
        this.moultCardId = moultCardId;
    }

    public EURing getEuring() {
        return euring;
    }

    public void setEuring(EURing euring) {
        this.euring = euring;
    }

    public User getRinger() {
        return ringer;
    }

    public void setRinger(User ringer) {
        this.ringer = ringer;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        final RingingRecord other = (RingingRecord) obj;
        if (remarks == null) {
            if (other.remarks != null) return false;
        } else if (!remarks.equals(other.remarks)) return false;
        if (subspecies == null) {
            if (other.subspecies != null) return false;
        } else if (!subspecies.equals(other.subspecies)) return false;
        if (ringingDate == null) {
            if (other.ringingDate != null) return false;
        } else if (!ringingDate.equals(other.ringingDate)) return false;
        if (other.timeHour != timeHour) return false;
        if (type == null) {
            if (other.type != null) return false;
        } else if (!type.equals(other.type)) return false;
        if (ringer == null) {
            if (other.ringer != null) return false;
        } else if (!ringer.equals(other.ringer)) return false;
        if (ringNumber == null) {
            if (other.ringNumber != null) return false;
        } else if (!ringNumber.equals(other.ringNumber)) return false;
        if (euring == null) {
            if (other.euring != null) return false;
        } else if (!euring.equals(other.euring)) return false;
        if (age == null) {
            if (other.age != null) return false;
        } else if (!age.equals(other.age)) return false;
        if (sex == null) {
            if (other.sex != null) return false;
        } else if (!sex.equals(other.sex)) return false;
        if (wingLength == null) {
            if (other.wingLength != null) return false;
        } else if (!wingLength.equals(other.wingLength)) return false;
        if (fatScore == null) {
            if (other.fatScore != null) return false;
        } else if (!fatScore.equals(other.fatScore)) return false;
        if (muscleScore == null) {
            if (other.muscleScore != null) return false;
        } else if (!muscleScore.equals(other.muscleScore)) return false;
        if (moulting == null) {
            if (other.moulting != null) return false;
        } else if (!moulting.equals(other.moulting)) return false;
        if (broodPatch == null) {
            if (other.broodPatch != null) return false;
        } else if (!broodPatch.equals(other.broodPatch)) return false;
        if (weight == null) {
            if (other.weight != null) return false;
        } else if (!weight.equals(other.weight)) return false;
        if (netNumber == null) {
            if (other.netNumber != null) return false;
        } else if (!netNumber.equals(other.netNumber)) return false;
        if (cloaca == null) {
            if (other.cloaca != null) return false;
        } else if (!cloaca.equals(other.cloaca)) return false;
        if (billWidth == null) {
            if (other.billWidth != null) return false;
        } else if (!billWidth.equals(other.billWidth)) return false;
        if (billHeight == null) {
            if (other.billHeight != null) return false;
        } else if (!billHeight.equals(other.billHeight)) return false;
        if (tarsus == null) {
            if (other.tarsus != null) return false;
        } else if (!tarsus.equals(other.tarsus)) return false;
        if (thirdPrimary == null) {
            if (other.thirdPrimary != null) return false;
        } else if (!thirdPrimary.equals(other.thirdPrimary)) return false;
        if (tail == null) {
            if (other.tail != null) return false;
        } else if (!tail.equals(other.tail)) return false;
        if (hindClaw == null) {
            if (other.hindClaw != null) return false;
        } else if (!hindClaw.equals(other.hindClaw)) return false;
        if (billLength == null) {
            if (other.billLength != null) return false;
        } else if (!billLength.equals(other.billLength)) return false;
        if (billLengthMethod == null) {
            if (other.billLengthMethod != null) return false;
        } else if (!billLengthMethod.equals(other.billLengthMethod)) return false;
        if (moultCardId == null) {
            if (other.moultCardId != null) return false;
        } else if (!moultCardId.equals(other.moultCardId)) return false;
        if (colourMark == null) {
            if (other.colourMark != null) return false;
        } else if (!colourMark.equals(other.colourMark)) return false;
        if (weighingDate == null) {
            if (other.weighingDate != null) return false;
        } else if (!weighingDate.equals(other.weighingDate)) return false;
        if (weighingHour == null) {
            if (other.weighingHour != null) return false;
        } else if (!weighingHour.equals(other.weighingHour)) return false;
        if (ownerId == null) {
            if (other.ownerId != null) return false;
        } else if (!ownerId.equals(other.ownerId)) return false;
        if (site == null) {
            if (other.site != null) return false;
        } else if (!site.equals(other.site)) return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((remarks == null) ? 0 : remarks.hashCode());
        result = prime * result + ((ringingDate == null) ? 0 : ringingDate.hashCode());
        result = prime * result + ((type == null) ? 0 : type.hashCode());
        result = prime * result + ((ringer == null) ? 0 : ringer.hashCode());
        result = prime * result + ((ringNumber == null) ? 0 : ringNumber.hashCode());
        result = prime * result + ((euring == null) ? 0 : euring.hashCode());
        result = prime * result + ((age == null) ? 0 : age.hashCode());
        result = prime * result + ((sex == null) ? 0 : sex.hashCode());
        result = prime * result + ((wingLength == null) ? 0 : wingLength.hashCode());
        result = prime * result + ((fatScore == null) ? 0 : fatScore.hashCode());
        result = prime * result + ((muscleScore == null) ? 0 : muscleScore.hashCode());
        result = prime * result + ((moulting == null) ? 0 : moulting.hashCode());
        result = prime * result + ((broodPatch == null) ? 0 : broodPatch.hashCode());
        result = prime * result + ((weight == null) ? 0 : weight.hashCode());
        result = prime * result + ((netNumber == null) ? 0 : netNumber.hashCode());
        result = prime * result + ((cloaca == null) ? 0 : cloaca.hashCode());
        result = prime * result + ((billWidth == null) ? 0 : billWidth.hashCode());
        result = prime * result + ((billHeight == null) ? 0 : billHeight.hashCode());
        result = prime * result + ((tarsus == null) ? 0 : tarsus.hashCode());
        result = prime * result + ((thirdPrimary == null) ? 0 : thirdPrimary.hashCode());
        result = prime * result + ((tail == null) ? 0 : tail.hashCode());
        result = prime * result + ((hindClaw == null) ? 0 : hindClaw.hashCode());
        result = prime * result + ((billLength == null) ? 0 : billLength.hashCode());
        result = prime * result + ((billLengthMethod == null) ? 0 : billLengthMethod.hashCode());
        result = prime * result + ((moultCardId == null) ? 0 : moultCardId.hashCode());
        result = prime * result + ((colourMark == null) ? 0 : colourMark.hashCode());
        result = prime * result + ((weighingDate == null) ? 0 : weighingDate.hashCode());
        result = prime * result + ((subspecies == null) ? 0 : subspecies.hashCode());
        result = prime * result + ((ownerId == null) ? 0 : ownerId.hashCode());
        result = prime * result + ((site == null) ? 0 : site.hashCode());
        result = prime * result + weighingHour;
        result = prime * result + timeHour;
        return result;
    }

    @Override
    public String toString() {
        final StringBuilder buf = new StringBuilder();
        buf.append(getClass().getSimpleName());
        buf.append("{ id=").append(id);
        buf.append(", remarks=").append(remarks);
        buf.append(", subspecies=").append(subspecies);
        buf.append(", ringingDate=").append(ringingDate);
        buf.append(", timeHour=").append(timeHour);
        buf.append(", type=").append(type);
        buf.append(", ringer=").append(ringer);
        buf.append(", ringNumber=").append(ringNumber);
        buf.append(", euring=").append(euring);
        buf.append(", age=").append(age);
        buf.append(", sex=").append(sex);
        buf.append(", wingLength=").append(wingLength);
        buf.append(", fatScore=").append(fatScore);
        buf.append(", muscleScore=").append(muscleScore);
        buf.append(", moulting=").append(moulting);
        buf.append(", broodPatch=").append(broodPatch);
        buf.append(", netNumber=").append(netNumber);
        buf.append(", cloaca=").append(cloaca);
        buf.append(", billWidth=").append(billWidth);
        buf.append(", billHeight=").append(billHeight);
        buf.append(", tarsus=").append(tarsus);
        buf.append(", thirdPrimary=").append(thirdPrimary);
        buf.append(", tail=").append(tail);
        buf.append(", hindClaw=").append(hindClaw);
        buf.append(", billLength=").append(billLength);
        buf.append(", billLengthMethod=").append(billLengthMethod);
        buf.append(", moultCardId=").append(moultCardId);
        buf.append(", colourMark=").append(colourMark);
        buf.append(", weighingDate=").append(weighingDate);
        buf.append(", weighingHour=").append(weighingHour);
        buf.append(", ownerId=").append(ownerId);
        buf.append(", site=").append(site);
        buf.append('}');
        return buf.toString();
    }
}
