package mobat.bonesa;

import ibis.util.IPUtils;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import mobat.bonesa.action.BuildSucceededStatus;
import mobat.bonesa.components.JCustomFrame;
import mobat.bonesa.components.WarningBox;
import mobat.bonesa.dist.Distribution;
import mobat.bonesa.store.IBonesaAlgorithmDescription;
import mobat.bonesa.store.impl.RemoteAlgorithmDescription;
import mobat.tuning.store.IAlgorithmDescription;

/**
 *
 * @author sst210
 */
public class NewDistribution extends JCustomFrame {

    private File directory;

    private IAlgorithmDescription[] descr;

    private CheckAddress check = new CheckAddress();

    /** Creates new form NewDistribution */
    public NewDistribution() {
        initComponents();
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension screenSize = tk.getScreenSize();
        int screenHeight = screenSize.height;
        int screenWidth = screenSize.width;
        setLocation((screenWidth - getWidth()) / 2, (screenHeight - getHeight()) / 2);
        try {
            txtHost.setText(IPUtils.getLocalHostAddress().getHostName());
        } catch (UnknownHostException ex) {
            try {
                txtHost.setText(IPUtils.getLocalHostAddress().getHostAddress());
            } catch (UnknownHostException ex2) {
                txtHost.setText("");
            }
        }
        iconError.setVisible(false);
        check.start();
    }

    public NewDistribution(File directory, IAlgorithmDescription[] descr) {
        this();
        this.directory = directory;
        this.descr = descr;
        if (directory != null) {
            try {
                jTextPane1.setText("<html><p style=\"margin: 5px\"><b>A .zip file will be created in " + directory.getCanonicalPath().toString() + " containing all nessesary files. </b><br><br>You can start the server or slave by double-clicking on the ParameterTuning.jar file, or by running: <br><br><tt>java -jar ParameterTuning.jar</tt></p></html>");
            } catch (IOException e) {
                jTextPane1.setText("<html><p style=\"margin: 5px\"><b>A .zip file will be created in ./dist containing all nessesary files. </b><br><br>You can start the server or slave by double-clicking on the ParameterTuning.jar file, or by running: <br><br><tt>java -jar ParameterTuning.jar</tt></p></html>");
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        txtHost = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        iconOk = new javax.swing.JLabel();
        iconError = new javax.swing.JLabel();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(554, 469));
        setName("Form");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                onClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jLabel1.setLabelFor(txtHost);
        jLabel1.setText("Distribution Server/Host");
        jLabel1.setName("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 114, -1, 20));
        txtHost.setText("Host");
        txtHost.setName("txtHost");
        txtHost.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHostActionPerformed(evt);
            }
        });
        txtHost.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHostKeyPressed(evt);
            }

            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHostKeyReleased(evt);
            }
        });
        getContentPane().add(txtHost, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, 190, -1));
        jLabel3.setIcon(Bonesa.getIcon("process", 32));
        jLabel3.setText("");
        jLabel3.setName("jLabel3");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));
        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getStyle() | java.awt.Font.BOLD, jLabel2.getFont().getSize() + 1));
        jLabel2.setIcon(Bonesa.getIcon("package", 48));
        jLabel2.setText("Create new distribution package");
        jLabel2.setName("jLabel2");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));
        jScrollPane2.setName("jScrollPane2");
        jScrollPane2.setOpaque(false);
        jTextPane1.setBorder(null);
        jTextPane1.setFont(jTextPane1.getFont());
        jTextPane1.setName("jTextPane1");
        jTextPane1.setOpaque(false);
        jScrollPane2.setViewportView(jTextPane1);
        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 490, 190));
        jButton2.setText("Cancel");
        jButton2.setName("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 390, -1, -1));
        jButton3.setText("Create");
        jButton3.setName("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 390, -1, -1));
        iconOk.setFont(iconOk.getFont());
        iconOk.setIcon(Bonesa.getIcon("accept", 16));
        iconOk.setName("iconOk");
        getContentPane().add(iconOk, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 115, -1, -1));
        iconError.setFont(iconError.getFont());
        iconError.setIcon(Bonesa.getIcon("warning", 16));
        iconError.setName("iconError");
        getContentPane().add(iconError, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 115, -1, -1));
        pack();
    }

    private void txtHostActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        setVisible(false);
    }

    private void txtHostKeyPressed(java.awt.event.KeyEvent evt) {
    }

    private void txtHostKeyReleased(java.awt.event.KeyEvent evt) {
        iconError.setVisible(false);
        iconOk.setVisible(false);
    }

    private void onClosing(java.awt.event.WindowEvent evt) {
        check.interrupt();
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            Distribution.create(directory, descr, txtHost.getText());
            ((BonesaView) Bonesa.getApplication().getMainView()).saveCurrentProject();
            Bonesa.getApplication().getMainView().scheduleAction(new BuildSucceededStatus());
            RemoteAlgorithmDescription rad = null;
            for (IBonesaAlgorithmDescription bad : Bonesa.getApplication().getCurrentProject().getAlgorithmDescriptions()) {
                if (bad instanceof RemoteAlgorithmDescription) {
                    if (((RemoteAlgorithmDescription) bad).getRoot() == descr[0]) {
                        rad = (RemoteAlgorithmDescription) bad;
                        if (rad != null) {
                            JTree algorithmTree = ((BonesaView) Bonesa.getApplication().getMainView()).algorithmTree;
                            for (int i = 0; i < algorithmTree.getRowCount(); i++) {
                                if (((DefaultMutableTreeNode) algorithmTree.getPathForRow(i).getLastPathComponent()).getUserObject().equals(descr)) {
                                    ((DefaultMutableTreeNode) algorithmTree.getPathForRow(i).getLastPathComponent()).setUserObject(rad);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            ((BonesaView) Bonesa.getApplication().getMainView()).experimentDesign1.setAlgorithmDescription(rad, Bonesa.getApplication().getCurrentProject().getLocationOfAlgorithmDescription(rad));
            ((BonesaView) Bonesa.getApplication().getMainView()).doEnableDisableButtons();
        } catch (RuntimeException e) {
            WarningBox.showWarning("Error", e);
        }
        setVisible(false);
    }

    private javax.swing.JLabel iconError;

    private javax.swing.JLabel iconOk;

    private javax.swing.JButton jButton2;

    private javax.swing.JButton jButton3;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JLabel jTextPane1;

    private javax.swing.JTextField txtHost;

    class CheckAddress extends Thread {

        public CheckAddress() {
            setDaemon(true);
        }

        public void run() {
            while (true) {
                try {
                    if (txtHost.getText().equals("localhost")) {
                        InetAddress.getLocalHost();
                    } else {
                        InetAddress.getByName(txtHost.getText());
                    }
                    iconError.setVisible(false);
                    iconOk.setVisible(true);
                } catch (UnknownHostException ex) {
                    iconError.setVisible(true);
                    iconOk.setVisible(false);
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                }
            }
        }
    }
}
