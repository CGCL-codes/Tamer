package myriadempires.pantheon;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.AbstractListModel;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import myriadempires.core.interfaces.IProtoPlayer;
import myriadempires.pantheon.modules.Alexiares;
import myriadempires.pantheon.modules.Anicetus;
import myriadempires.pantheon.modules.Ares;
import myriadempires.pantheon.modules.Artemis;
import myriadempires.pantheon.modules.Hermes;

/**
 *
 * @author Richard
 */
public class PantheonConstructor extends javax.swing.JDialog implements IProtoPlayer {

    private final ArrayList<Class> availableModules = new ArrayList<Class>() {

        @Override
        public boolean add(Class e) {
            if (!contains(e)) {
                return super.add(e);
            }
            return false;
        }
    };

    private final ArrayList<Class> loadedModules = new ArrayList<Class>();

    private final TableCellRenderer tcrCapabilityRenderer = new DefaultTableCellRenderer() {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value instanceof AICapability) {
                setForeground(((AICapability) value).getColor());
            } else {
                setForeground(Color.black);
            }
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }

        @Override
        public void setBorder(Border border) {
        }
    };

    public void Configure() {
        setVisible(true);
        tblAvailable.setModel(new ModuleTableModel());
        lstSelected.setModel(new ModuleListModel());
    }

    /** Creates new form PantheonConstructor */
    public PantheonConstructor() {
        availableModules.add(Alexiares.class);
        availableModules.add(Anicetus.class);
        availableModules.add(Ares.class);
        availableModules.add(Artemis.class);
        availableModules.add(Hermes.class);
        initComponents();
        setModal(true);
        calculateOverall();
        calculateModular();
    }

    public Class[] getModules() {
        return loadedModules.toArray(new Class[0]);
    }

    private void calculateOverall() {
        AICapability t = AICapability.NONE;
        AICapability g = AICapability.NONE;
        AICapability e = AICapability.NONE;
        AICapability f = AICapability.NONE;
        for (Class m : loadedModules) {
            PantheonModule cap = (PantheonModule) m.getAnnotation(PantheonModule.class);
            t = t.Combine(cap.TradeIn());
            g = g.Combine(cap.Garrison());
            e = e.Combine(cap.Engage());
            f = f.Combine(cap.Fortify());
        }
        txtTrading1.setText(t.toString());
        txtTrading1.setForeground(t.getColor());
        txtGarrisoning1.setText(g.toString());
        txtGarrisoning1.setForeground(g.getColor());
        txtEngaging1.setText(e.toString());
        txtEngaging1.setForeground(e.getColor());
        txtFortifying1.setText(f.toString());
        txtFortifying1.setForeground(f.getColor());
    }

    private void calculateModular() {
        Class c;
        AICapability t, g, e, f;
        if (lstSelected.getSelectedIndex() == -1 && lstSelected.getModel().getSize() > 0) {
            lstSelected.setSelectedIndex(0);
        }
        if (lstSelected.getModel().getSize() == 0) {
            t = AICapability.NONE;
            g = AICapability.NONE;
            e = AICapability.NONE;
            f = AICapability.NONE;
        } else {
            c = (Class) loadedModules.get(lstSelected.getSelectedIndex());
            PantheonModule a = (PantheonModule) c.getAnnotation(PantheonModule.class);
            t = a.TradeIn();
            g = a.Garrison();
            e = a.Engage();
            f = a.Fortify();
        }
        txtTrading.setText(t.toString());
        txtTrading.setForeground(t.getColor());
        txtGarrisoning.setText(g.toString());
        txtGarrisoning.setForeground(g.getColor());
        txtEngaging.setText(e.toString());
        txtEngaging.setForeground(e.getColor());
        txtFortifying.setText(f.toString());
        txtFortifying.setForeground(f.getColor());
    }

    /** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        fcBrowser = new javax.swing.JFileChooser();
        pnlName = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        pnlSelected = new javax.swing.JPanel();
        scrSelected = new javax.swing.JScrollPane();
        lstSelected = new javax.swing.JList();
        cmdRemove = new javax.swing.JButton();
        pnlModule = new javax.swing.JPanel();
        lblTrading = new javax.swing.JLabel();
        lblGarrisoning = new javax.swing.JLabel();
        lblEngaging = new javax.swing.JLabel();
        lblFortifying = new javax.swing.JLabel();
        txtTrading = new javax.swing.JLabel();
        txtGarrisoning = new javax.swing.JLabel();
        txtEngaging = new javax.swing.JLabel();
        txtFortifying = new javax.swing.JLabel();
        pnlOverall = new javax.swing.JPanel();
        lblTrading1 = new javax.swing.JLabel();
        lblGarrisoning1 = new javax.swing.JLabel();
        lblEngaging1 = new javax.swing.JLabel();
        lblFortifying1 = new javax.swing.JLabel();
        txtTrading1 = new javax.swing.JLabel();
        txtGarrisoning1 = new javax.swing.JLabel();
        txtEngaging1 = new javax.swing.JLabel();
        txtFortifying1 = new javax.swing.JLabel();
        pnlAvailable = new javax.swing.JPanel();
        scrAvailable = new javax.swing.JScrollPane();
        tblAvailable = new javax.swing.JTable();
        pnlButtons = new javax.swing.JPanel();
        cmdAdd = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cmdOK = new javax.swing.JButton();
        getContentPane().setLayout(new java.awt.GridBagLayout());
        pnlName.setBorder(javax.swing.BorderFactory.createTitledBorder("Character"));
        pnlName.setLayout(new java.awt.GridBagLayout());
        lblName.setText("Character Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlName.add(lblName, gridBagConstraints);
        txtName.setText("New Pantheon");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlName.add(txtName, gridBagConstraints);
        jButton1.setText("Load...");
        jButton1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlName.add(jButton1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(pnlName, gridBagConstraints);
        pnlSelected.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Modules"));
        pnlSelected.setLayout(new java.awt.GridBagLayout());
        lstSelected.setModel(new ModuleListModel());
        lstSelected.setPreferredSize(new java.awt.Dimension(150, 80));
        lstSelected.addListSelectionListener(new javax.swing.event.ListSelectionListener() {

            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstSelectedValueChanged(evt);
            }
        });
        scrSelected.setViewportView(lstSelected);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlSelected.add(scrSelected, gridBagConstraints);
        cmdRemove.setText("Remove");
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pnlSelected.add(cmdRemove, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnlSelected, gridBagConstraints);
        pnlModule.setBorder(javax.swing.BorderFactory.createTitledBorder("Module Properties"));
        pnlModule.setLayout(new java.awt.GridBagLayout());
        lblTrading.setText("Trading:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlModule.add(lblTrading, gridBagConstraints);
        lblGarrisoning.setText("Garrisoning:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlModule.add(lblGarrisoning, gridBagConstraints);
        lblEngaging.setText("Engaging:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlModule.add(lblEngaging, gridBagConstraints);
        lblFortifying.setText("Fortifying:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlModule.add(lblFortifying, gridBagConstraints);
        txtTrading.setText("None");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlModule.add(txtTrading, gridBagConstraints);
        txtGarrisoning.setText("Advisory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlModule.add(txtGarrisoning, gridBagConstraints);
        txtEngaging.setText("Independant");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlModule.add(txtEngaging, gridBagConstraints);
        txtFortifying.setText("Exclusive");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlModule.add(txtFortifying, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnlModule, gridBagConstraints);
        pnlOverall.setBorder(javax.swing.BorderFactory.createTitledBorder("Overall Properties"));
        pnlOverall.setLayout(new java.awt.GridBagLayout());
        lblTrading1.setText("Trading:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlOverall.add(lblTrading1, gridBagConstraints);
        lblGarrisoning1.setText("Garrisoning:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlOverall.add(lblGarrisoning1, gridBagConstraints);
        lblEngaging1.setText("Engaging:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlOverall.add(lblEngaging1, gridBagConstraints);
        lblFortifying1.setText("Fortifying:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlOverall.add(lblFortifying1, gridBagConstraints);
        txtTrading1.setText("None");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlOverall.add(txtTrading1, gridBagConstraints);
        txtGarrisoning1.setText("Advisory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlOverall.add(txtGarrisoning1, gridBagConstraints);
        txtEngaging1.setText("Independant");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlOverall.add(txtEngaging1, gridBagConstraints);
        txtFortifying1.setText("Exclusive");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlOverall.add(txtFortifying1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnlOverall, gridBagConstraints);
        pnlAvailable.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Modules"));
        pnlAvailable.setLayout(new java.awt.GridBagLayout());
        scrAvailable.setMinimumSize(new java.awt.Dimension(450, 150));
        scrAvailable.setPreferredSize(new java.awt.Dimension(200, 402));
        tblAvailable.setModel(new ModuleTableModel());
        tblAvailable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblAvailable.setDefaultRenderer(AICapability.class, tcrCapabilityRenderer);
        scrAvailable.setViewportView(tblAvailable);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlAvailable.add(scrAvailable, gridBagConstraints);
        cmdAdd.setText("Add Module");
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout pnlButtonsLayout = new javax.swing.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlButtonsLayout.createSequentialGroup().addContainerGap().addComponent(cmdAdd).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        pnlButtonsLayout.setVerticalGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlButtonsLayout.createSequentialGroup().addContainerGap().addComponent(cmdAdd).addContainerGap(136, Short.MAX_VALUE)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlAvailable.add(pnlButtons, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnlAvailable, gridBagConstraints);
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 5));
        cmdOK.setText("OK");
        cmdOK.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });
        jPanel1.add(cmdOK);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel1, gridBagConstraints);
        pack();
    }

    private void lstSelectedValueChanged(javax.swing.event.ListSelectionEvent evt) {
        if (evt.getValueIsAdjusting()) {
            return;
        }
        calculateModular();
    }

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {
        for (int idx : tblAvailable.getSelectedRows()) {
            loadedModules.add(availableModules.get(idx));
        }
        availableModules.removeAll(loadedModules);
        tblAvailable.setModel(new ModuleTableModel());
        lstSelected.setModel(new ModuleListModel());
        calculateOverall();
        calculateModular();
    }

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {
        for (int idx : lstSelected.getSelectedIndices()) {
            availableModules.add(loadedModules.get(idx));
        }
        loadedModules.removeAll(availableModules);
        tblAvailable.setModel(new ModuleTableModel());
        lstSelected.setModel(new ModuleListModel());
        calculateOverall();
        calculateModular();
    }

    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {
        this.setVisible(false);
    }

    private javax.swing.JButton cmdAdd;

    private javax.swing.JButton cmdOK;

    private javax.swing.JButton cmdRemove;

    private javax.swing.JFileChooser fcBrowser;

    private javax.swing.JButton jButton1;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JLabel lblEngaging;

    private javax.swing.JLabel lblEngaging1;

    private javax.swing.JLabel lblFortifying;

    private javax.swing.JLabel lblFortifying1;

    private javax.swing.JLabel lblGarrisoning;

    private javax.swing.JLabel lblGarrisoning1;

    private javax.swing.JLabel lblName;

    private javax.swing.JLabel lblTrading;

    private javax.swing.JLabel lblTrading1;

    private javax.swing.JList lstSelected;

    private javax.swing.JPanel pnlAvailable;

    private javax.swing.JPanel pnlButtons;

    private javax.swing.JPanel pnlModule;

    private javax.swing.JPanel pnlName;

    private javax.swing.JPanel pnlOverall;

    private javax.swing.JPanel pnlSelected;

    private javax.swing.JScrollPane scrAvailable;

    private javax.swing.JScrollPane scrSelected;

    private javax.swing.JTable tblAvailable;

    private javax.swing.JLabel txtEngaging;

    private javax.swing.JLabel txtEngaging1;

    private javax.swing.JLabel txtFortifying;

    private javax.swing.JLabel txtFortifying1;

    private javax.swing.JLabel txtGarrisoning;

    private javax.swing.JLabel txtGarrisoning1;

    private javax.swing.JTextField txtName;

    private javax.swing.JLabel txtTrading;

    private javax.swing.JLabel txtTrading1;

    private class ModuleTableModel extends DefaultTableModel {

        public ModuleTableModel() {
            super(new String[] { "Module", "Trading", "Garrisoning", "Engaging", "Fortifying" }, 0);
            for (Class c : availableModules) {
                PantheonModule cap = (PantheonModule) c.getAnnotation(PantheonModule.class);
                addRow(new Object[] { c.getSimpleName(), cap.TradeIn(), cap.Garrison(), cap.Engage(), cap.Fortify() });
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if (columnIndex > 0 && columnIndex <= 4) {
                return AICapability.class;
            }
            return super.getColumnClass(columnIndex);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    }

    private class ModuleListModel extends AbstractListModel {

        public ModuleListModel() {
            super();
        }

        public int getSize() {
            return loadedModules.size();
        }

        public Object getElementAt(int i) {
            return loadedModules.get(i).getSimpleName();
        }
    }

    ;
}
