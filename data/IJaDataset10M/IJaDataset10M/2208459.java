package UI;

import Logic.*;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.Calendar;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;

/**
 *
 * @author Tiep
 */
public class GererPlanningJPanel extends javax.swing.JPanel implements WindowListener {

    private Calendar calLundi;

    private int iJourSelected;

    private Utilisateur uMoi;

    private RepondreInvitationJDialog jdRepInv;

    private ConnaitreReponseJDialog crd = null;

    private JTabbedPane tbParent;

    /** Creates new form GererPlanningJPanel */
    public GererPlanningJPanel() {
        initComponents();
    }

    public GererPlanningJPanel(JTabbedPane jTabbedPane1, Utilisateur utilCourant) {
        this.uMoi = utilCourant;
        this.tbParent = jTabbedPane1;
        initComponents();
        this.AfficheTime(Calendar.getInstance());
        this.JpEditDispo.setVisible(false);
        this.AfficherDispo();
        AfficherInvitation();
        AfficherRdvAccept();
        AfficherRdvRefuses();
        afficherRDVOrganises();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        JpGauche = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        JtColorDispo = new javax.swing.JTextField();
        JtColorDispo1 = new javax.swing.JTextField();
        JtColorDispo2 = new javax.swing.JTextField();
        JtColorDispo3 = new javax.swing.JTextField();
        JpEditDispo = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        JtEditDispoDebut = new javax.swing.JTextField();
        JtEditDispoFin = new javax.swing.JTextField();
        JbEditDispoValid = new javax.swing.JButton();
        JbEditDispoAnnul = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jbRefresh = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        JtColorDispo4 = new javax.swing.JTextField();
        JpDroite = new javax.swing.JPanel();
        JbMoisAvant = new javax.swing.JButton();
        JbMoisApres = new javax.swing.JButton();
        JtMois = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        JtPlanning = new javax.swing.JTable();
        JbSemAvant = new javax.swing.JButton();
        JbSemApres = new javax.swing.JButton();
        jbFermer = new javax.swing.JButton();
        JpGauche.setName("JpGauche");
        jLabel1.setText("Disponible");
        jLabel1.setName("jLabel1");
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Rendez-vous accepté");
        jLabel2.setFocusable(false);
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel2.setName("jLabel2");
        jLabel3.setText("Rendez-vous proposé");
        jLabel3.setName("jLabel3");
        jLabel4.setText("Rendez-vous refusé");
        jLabel4.setName("jLabel4");
        JtColorDispo.setBackground(new java.awt.Color(0, 0, 153));
        JtColorDispo.setEditable(false);
        JtColorDispo.setAutoscrolls(false);
        JtColorDispo.setBorder(null);
        JtColorDispo.setName("JtColorDispo");
        JtColorDispo.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JtColorDispoActionPerformed(evt);
            }
        });
        JtColorDispo1.setBackground(new java.awt.Color(0, 204, 0));
        JtColorDispo1.setEditable(false);
        JtColorDispo1.setAutoscrolls(false);
        JtColorDispo1.setBorder(null);
        JtColorDispo1.setName("JtColorDispo1");
        JtColorDispo2.setBackground(new java.awt.Color(255, 102, 0));
        JtColorDispo2.setEditable(false);
        JtColorDispo2.setAutoscrolls(false);
        JtColorDispo2.setBorder(null);
        JtColorDispo2.setName("JtColorDispo2");
        JtColorDispo3.setBackground(new java.awt.Color(204, 0, 0));
        JtColorDispo3.setEditable(false);
        JtColorDispo3.setAutoscrolls(false);
        JtColorDispo3.setBorder(null);
        JtColorDispo3.setName("JtColorDispo3");
        JpEditDispo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        JpEditDispo.setName("JpEditDispo");
        jLabel5.setText("Début:");
        jLabel5.setName("jLabel5");
        jLabel6.setText("Fin:");
        jLabel6.setName("jLabel6");
        JtEditDispoDebut.setText("hh:mm");
        JtEditDispoDebut.setName("JtEditDispoDebut");
        JtEditDispoDebut.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JtEditDispoDebutActionPerformed(evt);
            }
        });
        JtEditDispoDebut.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                JtEditDispoDebutFocusLost(evt);
            }
        });
        JtEditDispoFin.setText("hh:mm");
        JtEditDispoFin.setName("JtEditDispoFin");
        JtEditDispoFin.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                JtEditDispoFinFocusLost(evt);
            }
        });
        JbEditDispoValid.setBackground(new java.awt.Color(153, 255, 153));
        JbEditDispoValid.setText("Valider");
        JbEditDispoValid.setName("JbEditDispoValid");
        JbEditDispoValid.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JbEditDispoValidMouseClicked(evt);
            }
        });
        JbEditDispoAnnul.setBackground(new java.awt.Color(255, 153, 153));
        JbEditDispoAnnul.setText("Annuler");
        JbEditDispoAnnul.setName("JbEditDispoAnnul");
        JbEditDispoAnnul.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JbEditDispoAnnulMouseClicked(evt);
            }
        });
        jLabel7.setText("Edition de la disponibilité");
        jLabel7.setName("jLabel7");
        javax.swing.GroupLayout JpEditDispoLayout = new javax.swing.GroupLayout(JpEditDispo);
        JpEditDispo.setLayout(JpEditDispoLayout);
        JpEditDispoLayout.setHorizontalGroup(JpEditDispoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(JpEditDispoLayout.createSequentialGroup().addGroup(JpEditDispoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(JpEditDispoLayout.createSequentialGroup().addContainerGap().addGroup(JpEditDispoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabel5).addComponent(jLabel6)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(JpEditDispoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(JtEditDispoFin).addComponent(JtEditDispoDebut, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))).addGroup(JpEditDispoLayout.createSequentialGroup().addGap(5, 5, 5).addGroup(JpEditDispoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel7).addGroup(JpEditDispoLayout.createSequentialGroup().addComponent(JbEditDispoValid, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(JbEditDispoAnnul, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))).addContainerGap(16, Short.MAX_VALUE)));
        JpEditDispoLayout.setVerticalGroup(JpEditDispoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(JpEditDispoLayout.createSequentialGroup().addComponent(jLabel7).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE).addGroup(JpEditDispoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel5).addComponent(JtEditDispoDebut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(JpEditDispoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel6).addComponent(JtEditDispoFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(JpEditDispoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(JbEditDispoValid).addComponent(JbEditDispoAnnul)).addContainerGap()));
        jbRefresh.setText("Rafraichir");
        jbRefresh.setToolTipText("Recharge le planning de cette semaine");
        jbRefresh.setName("jbRefresh");
        jbRefresh.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRefreshActionPerformed(evt);
            }
        });
        jLabel8.setText("Rendez-vous organisé");
        jLabel8.setName("jLabel8");
        JtColorDispo4.setBackground(new java.awt.Color(255, 255, 0));
        JtColorDispo4.setEditable(false);
        JtColorDispo4.setAutoscrolls(false);
        JtColorDispo4.setBorder(null);
        JtColorDispo4.setName("JtColorDispo4");
        javax.swing.GroupLayout JpGaucheLayout = new javax.swing.GroupLayout(JpGauche);
        JpGauche.setLayout(JpGaucheLayout);
        JpGaucheLayout.setHorizontalGroup(JpGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(JpGaucheLayout.createSequentialGroup().addContainerGap().addGroup(JpGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(JpGaucheLayout.createSequentialGroup().addComponent(JtColorDispo, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel1)).addGroup(JpGaucheLayout.createSequentialGroup().addGroup(JpGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(JtColorDispo3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(JtColorDispo2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(JtColorDispo1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(JpGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel2).addComponent(jLabel4).addComponent(jLabel3))))).addComponent(JpEditDispo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(JpGaucheLayout.createSequentialGroup().addContainerGap().addComponent(JtColorDispo4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel8)).addGroup(JpGaucheLayout.createSequentialGroup().addGap(42, 42, 42).addComponent(jbRefresh)));
        JpGaucheLayout.setVerticalGroup(JpGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(JpGaucheLayout.createSequentialGroup().addGap(87, 87, 87).addGroup(JpGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(JtColorDispo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel1)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(JpGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(JtColorDispo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(JpGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(JtColorDispo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(JpGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(JtColorDispo3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel4)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(JpGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(JtColorDispo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel8)).addGap(20, 20, 20).addComponent(JpEditDispo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(41, 41, 41).addComponent(jbRefresh).addContainerGap(138, Short.MAX_VALUE)));
        JpDroite.setName("JpDroite");
        JbMoisAvant.setText("<<");
        JbMoisAvant.setToolTipText("Aller au mois précédent");
        JbMoisAvant.setName("JbMoisAvant");
        JbMoisAvant.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JbMoisAvantMouseClicked(evt);
            }
        });
        JbMoisApres.setText(">>");
        JbMoisApres.setToolTipText("Aller au mois suivant");
        JbMoisApres.setName("JbMoisApres");
        JbMoisApres.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JbMoisApresMouseClicked(evt);
            }
        });
        JtMois.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        JtMois.setText("Semaine en cours");
        JtMois.setName("JtMois");
        jScrollPane1.setName("jScrollPane1");
        JtPlanning.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { "0h", null, null, null, null, null, null, null }, { "1h", null, null, null, null, null, null, null }, { "2h", null, null, null, null, null, null, null }, { "3h", null, null, null, null, null, null, null }, { "4h", null, null, null, null, null, null, null }, { "5h", null, null, null, null, null, null, null }, { "6h", null, null, null, null, null, null, null }, { "7h", null, null, null, null, null, null, null }, { "8h", null, null, null, null, null, null, null }, { "9h", null, null, null, null, null, null, null }, { "10h", null, null, null, null, null, null, null }, { "11h", null, null, null, null, null, null, null }, { "12h", null, null, null, null, null, null, null }, { "13h", null, null, null, null, null, null, null }, { "14h", null, null, null, null, null, null, null }, { "15h", null, null, null, null, null, null, null }, { "16h", null, null, null, null, null, null, null }, { "17h", null, null, null, null, null, null, null }, { "18h", null, null, null, null, null, null, null }, { "19h", null, null, null, null, null, null, null }, { "20h", null, null, null, null, null, null, null }, { "21h", null, null, null, null, null, null, null }, { "22h", null, null, null, null, null, null, null }, { "23h", null, null, null, null, null, null, null } }, new String[] { "Heure/Jour", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche" }) {

            Class[] types = new Class[] { java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class };

            boolean[] canEdit = new boolean[] { false, false, false, false, false, false, false, false };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        JtPlanning.setName("JtPlanning");
        JtPlanning.getTableHeader().setReorderingAllowed(false);
        JtPlanning.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JtPlanningMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JtPlanning);
        JbSemAvant.setText("<");
        JbSemAvant.setToolTipText("Aller à la semaine précédente");
        JbSemAvant.setName("JbSemAvant");
        JbSemAvant.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JbSemAvantMouseClicked(evt);
            }
        });
        JbSemApres.setText(">");
        JbSemApres.setToolTipText("Aller à la semaine suivante");
        JbSemApres.setName("JbSemApres");
        JbSemApres.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JbSemApresMouseClicked(evt);
            }
        });
        javax.swing.GroupLayout JpDroiteLayout = new javax.swing.GroupLayout(JpDroite);
        JpDroite.setLayout(JpDroiteLayout);
        JpDroiteLayout.setHorizontalGroup(JpDroiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(JpDroiteLayout.createSequentialGroup().addComponent(JbMoisAvant, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(JbSemAvant, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(JtMois, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE).addGap(8, 8, 8).addComponent(JbSemApres).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(JbMoisApres, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE));
        JpDroiteLayout.setVerticalGroup(JpDroiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(JpDroiteLayout.createSequentialGroup().addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(JpDroiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(JbMoisAvant).addComponent(JtMois, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(JbMoisApres).addComponent(JbSemAvant).addComponent(JbSemApres)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)));
        jbFermer.setText("Fermer");
        jbFermer.setName("jbFermer");
        jbFermer.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFermerActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(JpGauche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(JpDroite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(layout.createSequentialGroup().addComponent(jbFermer).addContainerGap()))));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(JpGauche, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(layout.createSequentialGroup().addComponent(JpDroite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jbFermer).addContainerGap(13, Short.MAX_VALUE)));
    }

    private void JtColorDispoActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void JtEditDispoDebutActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void JtPlanningMouseClicked(java.awt.event.MouseEvent evt) {
        int iRow = this.JtPlanning.getSelectedRow();
        int iCol = this.JtPlanning.getSelectedColumn();
        this.JpEditDispo.setVisible(false);
        if (this.JtPlanning.getValueAt(iRow, iCol) != null && this.JtPlanning.getValueAt(iRow, iCol).getClass().equals(Logic.RendezVous.class)) {
            this.ModifInvit();
        } else if (this.JtPlanning.getValueAt(iRow, iCol) != null && this.JtPlanning.getValueAt(iRow, iCol).getClass().equals(Logic.RendezVousAccept.class)) {
            this.ModifInvit();
        } else if (this.JtPlanning.getValueAt(iRow, iCol) != null && this.JtPlanning.getValueAt(iRow, iCol).getClass().equals(Logic.RendezVousRefuses.class)) {
            this.ModifInvit();
        } else if (this.JtPlanning.getValueAt(iRow, iCol) != null && this.JtPlanning.getValueAt(iRow, iCol).getClass().equals(Logic.RendezVousOrganise.class)) {
            afficheReponseRDV((RendezVous) JtPlanning.getValueAt(iRow, iCol));
        } else if (this.JtPlanning.getValueAt(iRow, iCol) == null) this.ModifDispo();
    }

    private void JbEditDispoAnnulMouseClicked(java.awt.event.MouseEvent evt) {
        this.JpEditDispo.setVisible(false);
        this.RecalTable();
    }

    private void JbEditDispoValidMouseClicked(java.awt.event.MouseEvent evt) {
        Calendar calJour = (Calendar) this.calLundi.clone();
        int iDecalage = this.JtPlanning.getSelectedColumn() - 1;
        calJour.add(Calendar.DATE, +iDecalage);
        String sDate = calJour.get(Calendar.YEAR) + "/" + "";
        int iMois = 0;
        iMois = calJour.get(Calendar.MONTH) + 1;
        if (iMois < 10) {
            sDate += "0";
        }
        sDate += iMois + "/" + calJour.get(Calendar.DAY_OF_MONTH);
        String sReq = "INSERT INTO Disponibilite (`Date`,`Heure_Debut`,`Heure_Fin`,`Utilisateur`)";
        String sVal = " VALUES ('" + sDate + "','" + this.JtEditDispoDebut.getText() + "','" + this.JtEditDispoFin.getText() + "'," + this.uMoi.getId() + ");";
        DB.StockerObjetLogic sol = null;
        if (sol == null) {
            try {
                sol = new DB.StockerObjetLogic(false);
            } catch (Exception ex) {
                String titreMessage = "Attention !";
                String message = "Impossible de mettre à jour ce compte\nVeuillez contacter un administrateur";
                int gravite = JOptionPane.ERROR_MESSAGE;
                JOptionPane.showMessageDialog(this, message, "Attention !", gravite);
                return;
            }
        }
        sol.AddDispo(sReq + sVal);
        this.RecalTable();
        this.JpEditDispo.setVisible(false);
    }

    private void JbSemAvantMouseClicked(java.awt.event.MouseEvent evt) {
        this.calLundi.add(Calendar.DATE, -7);
        this.AfficheTime(this.calLundi);
    }

    private void JbMoisAvantMouseClicked(java.awt.event.MouseEvent evt) {
        this.calLundi.add(Calendar.DATE, -30);
        this.AfficheTime(this.calLundi);
    }

    private void JbSemApresMouseClicked(java.awt.event.MouseEvent evt) {
        this.calLundi.add(Calendar.DATE, +7);
        this.AfficheTime(this.calLundi);
    }

    private void JbMoisApresMouseClicked(java.awt.event.MouseEvent evt) {
        this.calLundi.add(Calendar.DATE, +30);
        this.AfficheTime(this.calLundi);
    }

    private void jbFermerActionPerformed(java.awt.event.ActionEvent evt) {
        this.tbParent.remove(this);
    }

    private void jbRefreshActionPerformed(java.awt.event.ActionEvent evt) {
        this.RecalTable();
    }

    private void JtEditDispoDebutFocusLost(java.awt.event.FocusEvent evt) {
        if (!(this.JtEditDispoDebut.getText().matches("^[0-1][0-9]:[0-5][0-9]") || this.JtEditDispoDebut.getText().matches("^[2-2][0-3]:[0-5][0-9]"))) {
            this.JtEditDispoDebut.setText("00:00");
            JOptionPane.showMessageDialog(this, "L'heure doit être du format HH:MM", "Mauvais format de l'heure", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void JtEditDispoFinFocusLost(java.awt.event.FocusEvent evt) {
        if (!(this.JtEditDispoDebut.getText().matches("^[0-1][0-9]:[0-5][0-9]") || this.JtEditDispoDebut.getText().matches("^[2-2][0-3]:[0-5][0-9]"))) {
            this.JtEditDispoFin.setText("00:00");
            JOptionPane.showMessageDialog(this, "L'heure doit être du format HH:MM", "Mauvais format de l'heure", JOptionPane.ERROR_MESSAGE);
        }
        if (this.JtEditDispoFin.getText().compareTo(this.JtEditDispoDebut.getText()) < 0) {
            this.JtEditDispoFin.setText(this.JtEditDispoDebut.getText());
            JOptionPane.showMessageDialog(this, "L'heure de fin ne peut pas être avant l'heure de début", "Mauvaise l'heure de fin", JOptionPane.ERROR_MESSAGE);
        }
    }

    private javax.swing.JButton JbEditDispoAnnul;

    private javax.swing.JButton JbEditDispoValid;

    private javax.swing.JButton JbMoisApres;

    private javax.swing.JButton JbMoisAvant;

    private javax.swing.JButton JbSemApres;

    private javax.swing.JButton JbSemAvant;

    private javax.swing.JPanel JpDroite;

    private javax.swing.JPanel JpEditDispo;

    private javax.swing.JPanel JpGauche;

    private javax.swing.JTextField JtColorDispo;

    private javax.swing.JTextField JtColorDispo1;

    private javax.swing.JTextField JtColorDispo2;

    private javax.swing.JTextField JtColorDispo3;

    private javax.swing.JTextField JtColorDispo4;

    private javax.swing.JTextField JtEditDispoDebut;

    private javax.swing.JTextField JtEditDispoFin;

    private javax.swing.JTextField JtMois;

    private javax.swing.JTable JtPlanning;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JLabel jLabel4;

    private javax.swing.JLabel jLabel5;

    private javax.swing.JLabel jLabel6;

    private javax.swing.JLabel jLabel7;

    private javax.swing.JLabel jLabel8;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JButton jbFermer;

    private javax.swing.JButton jbRefresh;

    /**
     * Méthode pour caculer les éléments datés à la date choisie
     *
     */
    private void AfficheTime(Calendar calDate) {
        String sTime = "Semaine " + calDate.get(Calendar.WEEK_OF_YEAR) + " ";
        int iDayWeek = calDate.get(Calendar.DAY_OF_WEEK) - 2;
        if (iDayWeek == -1) iDayWeek = 6;
        int iLundi = calDate.get(Calendar.DAY_OF_MONTH) - iDayWeek;
        int iDimanche = calDate.get(Calendar.DAY_OF_MONTH) + 6 - iDayWeek;
        calDate.set(calDate.get(Calendar.YEAR), calDate.get(Calendar.MONTH), iLundi);
        this.calLundi = (Calendar) calDate.clone();
        if (iLundi <= 0) {
            calDate.add(Calendar.DATE, -(calDate.get(Calendar.DAY_OF_MONTH) - iLundi));
            iDayWeek = calDate.get(Calendar.DAY_OF_WEEK) - 2;
            if (iDayWeek == -1) {
                iDayWeek = 6;
            }
            iLundi = calDate.get(Calendar.DAY_OF_MONTH) - iDayWeek;
            calDate.set(calDate.get(Calendar.YEAR), calDate.get(Calendar.MONTH), iLundi);
            this.calLundi = (Calendar) calDate.clone();
        } else if (iDimanche >= calDate.getActualMaximum(Calendar.DAY_OF_MONTH)) {
            calDate.add(Calendar.DATE, iDimanche - calDate.get(Calendar.DAY_OF_MONTH));
            iDayWeek = calDate.get(Calendar.DAY_OF_WEEK) - 2;
            if (iDayWeek == -1) {
                iDayWeek = 6;
            }
            iDimanche = calDate.get(Calendar.DAY_OF_MONTH) + 6 - iDayWeek;
        }
        String sMois = "";
        if (calDate.get(Calendar.MONTH) < 8) sMois = "0";
        int iMois = calDate.get(Calendar.MONTH) + 1;
        sTime += "du lundi " + iLundi + "/" + sMois + iMois + " au dimanche " + iDimanche + "/" + sMois + iMois;
        this.JtMois.setText(sTime);
        this.RecalTable();
        this.JpEditDispo.setVisible(false);
    }

    /**
     * Méthode de réinitialisation du tableau
     *
     *
     */
    private void RecalTable() {
        this.JtPlanning.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { "0h", null, null, null, null, null, null, null }, { "1h", null, null, null, null, null, null, null }, { "2h", null, null, null, null, null, null, null }, { "3h", null, null, null, null, null, null, null }, { "4h", null, null, null, null, null, null, null }, { "5h", null, null, null, null, null, null, null }, { "6h", null, null, null, null, null, null, null }, { "7h", null, null, null, null, null, null, null }, { "8h", null, null, null, null, null, null, null }, { "9h", null, null, null, null, null, null, null }, { "10h", null, null, null, null, null, null, null }, { "11h", null, null, null, null, null, null, null }, { "12h", null, null, null, null, null, null, null }, { "13h", null, null, null, null, null, null, null }, { "14h", null, null, null, null, null, null, null }, { "15h", null, null, null, null, null, null, null }, { "16h", null, null, null, null, null, null, null }, { "17h", null, null, null, null, null, null, null }, { "18h", null, null, null, null, null, null, null }, { "19h", null, null, null, null, null, null, null }, { "20h", null, null, null, null, null, null, null }, { "21h", null, null, null, null, null, null, null }, { "22h", null, null, null, null, null, null, null }, { "23h", null, null, null, null, null, null, null } }, new String[] { "Heure/Jour", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche" }) {

            Class[] types = new Class[] { java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class };

            boolean[] canEdit = new boolean[] { false, false, false, false, false, false, false, false };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        JtPlanning.getColumnModel().getColumn(1).setCellRenderer(new Composants.JtrRenduTabGereRDV());
        JtPlanning.getColumnModel().getColumn(2).setCellRenderer(new Composants.JtrRenduTabGereRDV());
        JtPlanning.getColumnModel().getColumn(3).setCellRenderer(new Composants.JtrRenduTabGereRDV());
        JtPlanning.getColumnModel().getColumn(4).setCellRenderer(new Composants.JtrRenduTabGereRDV());
        JtPlanning.getColumnModel().getColumn(5).setCellRenderer(new Composants.JtrRenduTabGereRDV());
        JtPlanning.getColumnModel().getColumn(6).setCellRenderer(new Composants.JtrRenduTabGereRDV());
        JtPlanning.getColumnModel().getColumn(7).setCellRenderer(new Composants.JtrRenduTabGereRDV());
        if (this.uMoi != null) {
            AfficherDispo();
            AfficherInvitation();
            AfficherRdvAccept();
            AfficherRdvRefuses();
            afficherRDVOrganises();
        }
    }

    /**
     * Méthode pour afficher les disponibilités
     * 
     */
    private void AfficherDispo() {
        String titreMessage = "Attention !", message = "";
        int gravite = JOptionPane.INFORMATION_MESSAGE;
        Disponibilite[] disposJourInvitation = null;
        Calendar calJour = (Calendar) this.calLundi.clone();
        for (int iCpt = 0; iCpt < 7; iCpt++) {
            try {
                DB.ChargerObjetLogic col = new DB.ChargerObjetLogic();
                disposJourInvitation = col.getDisponibiliteUtilisateur(this.uMoi, new java.sql.Date(calJour.getTimeInMillis()));
            } catch (Exception ex) {
                message = "Impossible de se connecter à la base de données\nVeuillez contacter un administrateur";
                gravite = JOptionPane.ERROR_MESSAGE;
                JOptionPane.showMessageDialog(this, message, titreMessage, gravite);
                return;
            }
            if (disposJourInvitation != null && disposJourInvitation.length > 0) {
                for (Disponibilite d : disposJourInvitation) {
                    int iHd = Integer.parseInt(d.getHeureDebut().toString().substring(0, 2));
                    int iMd = Integer.parseInt(d.getHeureDebut().toString().substring(3, 5));
                    int iHf = Integer.parseInt(d.getHeureFin().toString().substring(0, 2));
                    int iMf = Integer.parseInt(d.getHeureFin().toString().substring(3, 5));
                    Calendar calTmp = Calendar.getInstance();
                    calTmp.setTimeInMillis(d.getDateDuJour().getTime());
                    int iCol = calTmp.get(Calendar.DAY_OF_MONTH) - this.calLundi.get(Calendar.DAY_OF_MONTH) + 1;
                    for (int iCptDay = iHd; iCptDay <= iHf; iCptDay++) {
                        String sComm = "Disponible de ";
                        if (iHd < 10) sComm += "0";
                        sComm += iHd + ":";
                        if (iMd < 10) sComm += "0";
                        sComm += iMd + " à ";
                        if (iHf < 10) sComm += "0";
                        sComm += iHf + ":";
                        if (iMf < 10) sComm += "0";
                        sComm += iMf + "";
                        this.JtPlanning.setValueAt(sComm, iCptDay, iCol);
                    }
                }
            }
            calJour.add(Calendar.DATE, +1);
        }
    }

    /**
     * Méthode pour l'affichage des Invitations
     *
     */
    private void AfficherInvitation() {
        String titreMessage = "Attention !", message = "";
        int gravite = JOptionPane.INFORMATION_MESSAGE;
        RendezVous[] RdvSansRep;
        try {
            DB.ChargerObjetLogic col = new DB.ChargerObjetLogic();
            RdvSansRep = col.getRendezVousSansReponse(this.uMoi);
        } catch (Exception ex) {
            message = "Impossible de se connecter à la base de données\nVeuillez contacter un administrateur";
            gravite = JOptionPane.ERROR_MESSAGE;
            JOptionPane.showMessageDialog(this, message, titreMessage, gravite);
            return;
        }
        for (int iCptRdv = 0; iCptRdv < RdvSansRep.length; iCptRdv++) {
            RendezVous rdTmp = RdvSansRep[iCptRdv];
            Calendar calTmp = Calendar.getInstance();
            calTmp.setTimeInMillis(rdTmp.getDateDuJour().getTime());
            int iCol = calTmp.get(Calendar.DAY_OF_MONTH) - this.calLundi.get(Calendar.DAY_OF_MONTH) + 1;
            calTmp.setTimeInMillis(rdTmp.getHeureDebut().getTime());
            int iHd = calTmp.get(Calendar.HOUR_OF_DAY);
            calTmp.setTimeInMillis(rdTmp.getHeureFin().getTime());
            int iHf = calTmp.get(Calendar.HOUR_OF_DAY);
            try {
                for (int iCptDay = iHd; iCptDay <= iHf; iCptDay++) {
                    this.JtPlanning.setValueAt(rdTmp, iCptDay, iCol);
                }
            } catch (ArrayIndexOutOfBoundsException e) {
            }
        }
    }

    /**
     * Méthode pour l'affichage des rdv acceptés
     *
     */
    private void AfficherRdvAccept() {
        String titreMessage = "Attention !", message = "";
        int gravite = JOptionPane.INFORMATION_MESSAGE;
        RendezVousAccept[] RdvSansRep = null;
        try {
            DB.ChargerObjetLogic col = new DB.ChargerObjetLogic();
            RdvSansRep = col.getRendezVousAccept(this.uMoi);
        } catch (Exception ex) {
            message = "Impossible de se connecter à la base de données\nVeuillez contacter un administrateur";
            gravite = JOptionPane.ERROR_MESSAGE;
            JOptionPane.showMessageDialog(this, message, titreMessage, gravite);
            return;
        }
        for (int iCptRdv = 0; iCptRdv < RdvSansRep.length; iCptRdv++) {
            RendezVousAccept rdTmp = RdvSansRep[iCptRdv];
            Calendar calTmp = Calendar.getInstance();
            calTmp.setTimeInMillis(rdTmp.getDateDuJour().getTime());
            int iCol = calTmp.get(Calendar.DAY_OF_MONTH) - this.calLundi.get(Calendar.DAY_OF_MONTH) + 1;
            calTmp.setTimeInMillis(rdTmp.getHeureDebut().getTime());
            int iHd = calTmp.get(Calendar.HOUR_OF_DAY);
            calTmp.setTimeInMillis(rdTmp.getHeureFin().getTime());
            int iHf = calTmp.get(Calendar.HOUR_OF_DAY);
            try {
                for (int iCptDay = iHd; iCptDay <= iHf; iCptDay++) {
                    this.JtPlanning.setValueAt(rdTmp, iCptDay, iCol);
                }
            } catch (ArrayIndexOutOfBoundsException e) {
            }
        }
    }

    /**
     * Méthode pour l'affichage des rdv refusés
     *
     */
    private void AfficherRdvRefuses() {
        String titreMessage = "Attention !", message = "";
        int gravite = JOptionPane.INFORMATION_MESSAGE;
        RendezVousRefuses[] RdvSansRep = null;
        try {
            DB.ChargerObjetLogic col = new DB.ChargerObjetLogic();
            RdvSansRep = col.RendezVousRefuses(this.uMoi);
        } catch (Exception ex) {
            message = "Impossible de se connecter à la base de données\nVeuillez contacter un administrateur";
            gravite = JOptionPane.ERROR_MESSAGE;
            JOptionPane.showMessageDialog(this, message, titreMessage, gravite);
            return;
        }
        for (int iCptRdv = 0; iCptRdv < RdvSansRep.length; iCptRdv++) {
            RendezVousRefuses rdTmp = RdvSansRep[iCptRdv];
            Calendar calTmp = Calendar.getInstance();
            calTmp.setTimeInMillis(rdTmp.getDateDuJour().getTime());
            int iCol = calTmp.get(Calendar.DAY_OF_MONTH) - this.calLundi.get(Calendar.DAY_OF_MONTH) + 1;
            calTmp.setTimeInMillis(rdTmp.getHeureDebut().getTime());
            int iHd = calTmp.get(Calendar.HOUR_OF_DAY);
            calTmp.setTimeInMillis(rdTmp.getHeureFin().getTime());
            int iHf = calTmp.get(Calendar.HOUR_OF_DAY);
            try {
                for (int iCptDay = iHd; iCptDay <= iHf; iCptDay++) {
                    this.JtPlanning.setValueAt(rdTmp, iCptDay, iCol);
                }
            } catch (ArrayIndexOutOfBoundsException e) {
            }
        }
    }

    /**
     * Méthode pour l'affichage des rdv organisés par l'utilisateur courant
     *
     */
    private void afficherRDVOrganises() {
        String titreMessage = "Attention !", message = "";
        int gravite = JOptionPane.INFORMATION_MESSAGE;
        RendezVous[] rdvOrganises = null;
        try {
            DB.ChargerObjetLogic col = new DB.ChargerObjetLogic();
            rdvOrganises = col.getRendezVousOrganise(uMoi);
        } catch (Exception ex) {
            message = "Impossible de se connecter à la base de données\nVeuillez contacter un administrateur";
            gravite = JOptionPane.ERROR_MESSAGE;
            JOptionPane.showMessageDialog(this, message, titreMessage, gravite);
            return;
        }
        for (int iCptRdv = 0; iCptRdv < rdvOrganises.length; iCptRdv++) {
            RendezVousOrganise rvo = new RendezVousOrganise(rdvOrganises[iCptRdv]);
            Calendar calTmp = Calendar.getInstance();
            calTmp.setTimeInMillis(rvo.getDateDuJour().getTime());
            int iCol = calTmp.get(Calendar.DAY_OF_MONTH) - this.calLundi.get(Calendar.DAY_OF_MONTH) + 1;
            calTmp.setTimeInMillis(rvo.getHeureDebut().getTime());
            int iHd = calTmp.get(Calendar.HOUR_OF_DAY);
            calTmp.setTimeInMillis(rvo.getHeureFin().getTime());
            int iHf = calTmp.get(Calendar.HOUR_OF_DAY);
            try {
                for (int iCptDay = iHd; iCptDay <= iHf; iCptDay++) JtPlanning.setValueAt(rvo, iCptDay, iCol);
            } catch (ArrayIndexOutOfBoundsException e) {
                e.printStackTrace();
            }
        }
    }

    private void ModifDispo() {
        if (this.JpEditDispo.isVisible()) {
            if (this.iJourSelected == this.JtPlanning.getSelectedColumn()) {
                int iHeure = this.JtPlanning.getSelectedRow();
                if (iHeure < 10) {
                    this.JtEditDispoFin.setText("0" + iHeure + ":00");
                } else {
                    this.JtEditDispoFin.setText(iHeure + ":00");
                }
            } else {
                System.out.println("Selectionner la même journée");
            }
        } else {
            this.JpEditDispo.setVisible(true);
            int iHeure = this.JtPlanning.getSelectedRow();
            if (iHeure < 10) {
                this.JtEditDispoDebut.setText("0" + iHeure + ":00");
                this.JtEditDispoFin.setText("0" + iHeure + ":00");
            } else {
                this.JtEditDispoDebut.setText(iHeure + ":00");
                this.JtEditDispoFin.setText(iHeure + ":00");
            }
            this.iJourSelected = this.JtPlanning.getSelectedColumn();
            this.JtPlanning.setValueAt("", iHeure, this.iJourSelected);
        }
    }

    /**
     * Méthode pour modif des invitations
     * 
     *
     */
    private void ModifInvit() {
        int iRow = this.JtPlanning.getSelectedRow();
        int iCol = this.JtPlanning.getSelectedColumn();
        JFrame jfSource = (JFrame) this.getParent().getParent().getParent().getParent().getParent();
        Invitation inInv = new Invitation((RendezVous) this.JtPlanning.getValueAt(iRow, iCol), this.uMoi);
        this.jdRepInv = new RepondreInvitationJDialog(jfSource, inInv, this.uMoi);
        jdRepInv.setVisible(true);
        if (jdRepInv.getChoix() != JOptionPane.CANCEL_OPTION) RecalTable();
        jdRepInv.addWindowListener(this);
    }

    /**
     * 
     */
    private void afficheReponseRDV(RendezVous rdv) {
        crd = new ConnaitreReponseJDialog((PrincipalJFrame) tbParent.getParent().getParent().getParent().getParent(), false, rdv, uMoi);
        crd.setVisible(true);
    }

    public void windowOpened(WindowEvent e) {
    }

    public void windowClosing(WindowEvent e) {
        this.RecalTable();
    }

    public void windowClosed(WindowEvent e) {
    }

    public void windowIconified(WindowEvent e) {
    }

    public void windowDeiconified(WindowEvent e) {
    }

    public void windowActivated(WindowEvent e) {
    }

    public void windowDeactivated(WindowEvent e) {
    }
}
