package ejb.bprocess.acquisitions;

import javax.ejb.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.hssf.record.*;
import org.apache.poi.hssf.model.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;

/**
 * Created Nov 13, 2004 9:48:46 AM
 * Code generated by the Sun ONE Studio EJB Builder
 * @author Administrator
 */
public class AccessioningReportSessionBean implements javax.ejb.SessionBean {

    private javax.ejb.SessionContext context;

    private ejb.bprocess.util.Utility utility = null;

    private ejb.bprocess.util.HomeFactory homeFactory = null;

    private ejb.bprocess.util.NewGenXMLGenerator newGenXMLGenerator = null;

    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context = aContext;
        utility = ejb.bprocess.util.Utility.getInstance();
        homeFactory = ejb.bprocess.util.HomeFactory.getInstance();
        newGenXMLGenerator = ejb.bprocess.util.NewGenXMLGenerator.getInstance();
    }

    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {
    }

    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {
    }

    public java.util.Vector getAccessionDetails(java.lang.String libraryid, java.lang.String fromdate, java.lang.String todate, java.lang.String fromNo, java.lang.String toNo, java.lang.String series) {
        Integer libraryId = new Integer(Integer.parseInt(libraryid));
        java.sql.Timestamp fromDate = utility.getInstance().getTimestamp(fromdate);
        java.sql.Timestamp toDate = utility.getInstance().getTimestamp(todate);
        java.util.Vector accession = new java.util.Vector();
        try {
            java.sql.Connection con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
            java.sql.Statement stat = null;
            if (fromNo.equals("") && toNo.equals("")) {
                String temp = "";
                if (series.equals("General")) {
                    temp = "select distinct Accession_Number from Document where Library_Id=" + libraryId + " and ENTRY_DATE between '" + fromDate + "' and '" + toDate + "' and VOLUME_ID is not null order by accession_number";
                } else {
                    String fix = "";
                    String max = "";
                    String accseries = "";
                    String prefix = "";
                    temp = "select distinct FIXED_VARIABLE,MAX_ZERO,PREFIX from ACCESSION_SERIES where LIBRARY_ID='" + libraryId + "' and SERIES_NAME = '" + series + "' ";
                    stat = con.createStatement();
                    java.sql.ResultSet rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            fix = rs.getString(1);
                            max = rs.getString(2);
                            prefix = rs.getString(3);
                        }
                    }
                    rs.close();
                    stat.close();
                    if (fix.trim().equals("B")) {
                        accseries = prefix;
                    } else if (fix.trim().equals("A")) {
                        int m1 = (new java.lang.Integer(max)).intValue() + 1;
                        String zero = "";
                        for (int h = 0; h < m1; h++) {
                            zero += "0";
                        }
                        accseries = prefix + zero;
                    }
                    temp = "select distinct Accession_Number from Document where Library_Id=" + libraryId + " and Accession_Number LIKE '" + accseries + "%' and ENTRY_DATE between '" + fromDate + "' and '" + toDate + "' and VOLUME_ID is not null order by accession_number";
                }
                stat = con.createStatement();
                java.sql.ResultSet rs = stat.executeQuery(temp);
                while (rs.next()) {
                    if (rs.getString(1) != null) {
                        String s1 = rs.getString(1);
                        accession.addElement(s1);
                    }
                }
                rs.close();
                stat.close();
            } else {
                String temp = "";
                int fromaccno = new Integer(fromNo).intValue();
                int toaccno = new Integer(toNo).intValue();
                if (series.equals("General")) {
                    for (int k = fromaccno; k <= toaccno; k++) {
                        String accnumber = String.valueOf(k);
                        temp = "select distinct Accession_Number from Document where Library_Id=" + libraryId + " and accession_number = '" + accnumber + "'  and VOLUME_ID is not null order by accession_number";
                        stat = con.createStatement();
                        java.sql.ResultSet rs = stat.executeQuery(temp);
                        while (rs.next()) {
                            if (rs.getString(1) != null) {
                                String s1 = rs.getString(1);
                                accession.addElement(s1);
                            }
                        }
                        rs.close();
                        stat.close();
                    }
                } else {
                    String fix = "";
                    String max = "";
                    String accseries = "";
                    String prefix = "";
                    temp = "select distinct FIXED_VARIABLE,MAX_ZERO,PREFIX from ACCESSION_SERIES where LIBRARY_ID='" + libraryId + "' and SERIES_NAME = '" + series + "' ";
                    stat = con.createStatement();
                    java.sql.ResultSet rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            fix = rs.getString(1);
                            max = rs.getString(2);
                            prefix = rs.getString(3);
                        }
                    }
                    rs.close();
                    stat.close();
                    for (int k = fromaccno; k <= toaccno; k++) {
                        if (fix.trim().equals("B")) {
                            accseries = prefix + k;
                        } else if (fix.trim().equals("A")) {
                            int m1 = (new java.lang.Integer(max)).intValue() - String.valueOf(k).trim().length() + 1;
                            String zero = "";
                            for (int h = 0; h < m1; h++) {
                                zero += "0";
                            }
                            accseries = prefix + zero + k;
                        }
                        temp = "select distinct Accession_Number from Document where Library_Id='" + libraryId + "' and accession_number = '" + accseries + "' and VOLUME_ID is not null order by accession_number ";
                        stat = con.createStatement();
                        java.sql.ResultSet rs1 = stat.executeQuery(temp);
                        while (rs1.next()) {
                            if (rs1.getString(1) != null) {
                                String s1 = rs1.getString(1);
                                accession.addElement(s1);
                            }
                        }
                        rs1.close();
                        stat.close();
                    }
                }
            }
            con.close();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        return accession;
    }

    public java.lang.String getAccessionSeries(java.lang.String libraryId) {
        org.jdom.Element root1 = new org.jdom.Element("Response");
        try {
            Object[] obx = ((ejb.objectmodel.administration.LocalACCESSION_SERIESHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("ACCESSION_SERIES")).findByLibraryId(new Integer(Integer.parseInt(libraryId))).toArray();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.administration.LocalACCESSION_SERIES series = (ejb.objectmodel.administration.LocalACCESSION_SERIES) obx[i];
                org.jdom.Element accesionSeriesDetails = new org.jdom.Element("AccessionSeriesDetails");
                org.jdom.Element name = new org.jdom.Element("Name");
                name.setText(utility.getTestedString(series.getSeries_Name()));
                accesionSeriesDetails.addContent(name);
                root1.addContent(accesionSeriesDetails);
            }
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        org.jdom.Document doc = new org.jdom.Document(root1);
        String xmlStr = (new org.jdom.output.XMLOutputter()).outputString(doc);
        return xmlStr;
    }

    public java.util.Vector getCatalogueDetails(java.lang.String libraryid, java.util.Vector vec, int count1, int count2) {
        Integer libraryId = new Integer(Integer.parseInt(libraryid));
        java.util.Vector catalogueVec = new java.util.Vector();
        java.util.Vector vec1 = new java.util.Vector();
        java.util.Vector vec2 = new java.util.Vector();
        java.util.Vector vec3 = new java.util.Vector();
        java.util.Vector vec4 = new java.util.Vector();
        try {
            java.sql.Connection con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
            java.sql.Statement stat = null;
            String temp = "";
            int count3 = 0;
            if (count1 <= 1) {
                count1 = 0;
            } else {
                count1 = count1 - 1;
            }
            if ((count1 + count2) >= vec.size()) {
                count3 = vec.size();
            } else {
                count3 = count1 + count2;
            }
            for (int i = count1; i < count3; i++) {
                String accno = vec.elementAt(i).toString();
                String accnumber = "";
                temp = "select accession_no from  acq_request_am_copy where accession_No ='" + accno + "' ";
                stat = con.createStatement();
                java.sql.ResultSet rs = stat.executeQuery(temp);
                while (rs.next()) {
                    if (rs.getString(1) != null) {
                        accnumber = rs.getString(1);
                    }
                }
                rs.close();
                stat.close();
                if (accnumber.equals("")) {
                    temp = "select a.CatalogueRecordId,a.Owner_Library_Id,b.BARCODE from  CAT_VOLUME a,Document b where  b.Accession_Number='" + accno + "' and b.Library_Id=" + libraryId + " and b.VOLUME_ID=a.VOLUME_ID";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    String catrecid = "";
                    String ownlibid = "";
                    String barcode = "";
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            catrecid = rs.getString(1);
                            ownlibid = rs.getString(2);
                            barcode = rs.getString(3);
                        }
                    }
                    rs.close();
                    stat.close();
                    java.lang.Integer catrec = new java.lang.Integer(catrecid);
                    java.lang.Integer ownlib = new java.lang.Integer(ownlibid);
                    java.util.Hashtable details = new java.util.Hashtable();
                    details = ((ejb.bprocess.opac.LocalSearchCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SearchCatalogue")).create().basicDetailsofcatalogueselected(catrec.intValue(), ownlib.intValue());
                    vec1.addElement("");
                    vec1.addElement(accno);
                    temp = "select entry_date from Document where accession_number = '" + accno + "' and library_id = '" + libraryId + "' ";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    java.sql.Timestamp date = null;
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            date = rs.getTimestamp(1);
                        }
                    }
                    rs.close();
                    stat.close();
                    String date2 = String.valueOf(date.getTime());
                    vec1.addElement(date2);
                    String title1 = "";
                    String tit = utility.getTestedString(details.get("Title/StatementOfResponsibility"));
                    if (!tit.equals("")) {
                        title1 = utility.getTestedString(details.get("Title/StatementOfResponsibility"));
                    }
                    vec1.addElement(title1);
                    String author1 = "";
                    java.util.Vector v3 = (java.util.Vector) details.get("Author/Creator");
                    if (v3.size() > 0) {
                        author1 = utility.getTestedString(v3.elementAt(3));
                    }
                    vec1.addElement(author1);
                    String edition1 = "-";
                    temp = "select EDITION from Searchable_CatalogueRecord where CatalogueRecordId=" + catrecid + " and Owner_Library_Id=" + ownlibid;
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        String edit = utility.getTestedString(rs.getString(1));
                        if (!edit.equals("")) {
                            edition1 = utility.getTestedString(rs.getString(1));
                        }
                    }
                    rs.close();
                    stat.close();
                    vec1.addElement(edition1);
                    String isbn1 = "";
                    String isn = utility.getTestedString(details.get("ISBN"));
                    if (!isn.equals("")) {
                        isbn1 = utility.getTestedString(details.get("ISBN"));
                    }
                    vec1.addElement(isbn1);
                    String publisher1 = "";
                    String pub = utility.getTestedString(details.get("Publisher"));
                    if (!pub.equals("")) {
                        publisher1 = utility.getTestedString(details.get("Publisher"));
                    }
                    vec1.addElement(publisher1);
                    String callNumber = "";
                    temp = "select call_number from Document where accession_number = '" + accno + "' and library_id = '" + libraryId + "' ";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            callNumber = rs.getString(1);
                        }
                    }
                    rs.close();
                    stat.close();
                    vec1.addElement(callNumber);
                    String bookNumber = "";
                    temp = "select book_number from Document where accession_number = '" + accno + "' and library_id = '" + libraryId + "' ";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            bookNumber = rs.getString(1);
                        }
                    }
                    rs.close();
                    stat.close();
                    vec1.addElement(bookNumber);
                    String custom = "";
                    temp = "select CUSTOM from Document where accession_number = '" + accno + "' and library_id = '" + libraryId + "' ";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            custom = utility.getTestedString(rs.getString(1));
                        }
                    }
                    rs.close();
                    stat.close();
                    if (!custom.equals("")) {
                        org.jdom.input.SAXBuilder sb = new org.jdom.input.SAXBuilder();
                        org.jdom.Document dochol = null;
                        try {
                            dochol = sb.build(new java.io.StringReader(custom));
                        } catch (Exception exp) {
                        }
                        if (dochol != null) {
                            java.util.List li = dochol.getRootElement().getChildren();
                            for (int k = 0; k < li.size(); k++) {
                                org.jdom.Element ele = (org.jdom.Element) li.get(k);
                                Object[] r = new Object[5];
                                r[0] = ele.getAttributeValue("NAME");
                                r[1] = ele.getAttributeValue("DISPLAYNAME");
                                r[2] = ele.getAttributeValue("TYPE");
                                r[3] = ele.getAttributeValue("DISPLAY");
                                r[4] = "";
                            }
                        }
                    }
                    vec1.addElement("");
                    vec1.addElement("");
                    vec1.addElement("");
                    vec1.addElement("");
                    String firmOrder1 = "Firm Order";
                    vec1.addElement(firmOrder1);
                    String lossstatus = "";
                    temp = "select status from Document where accession_number = '" + accno + "' and library_id = '" + libraryId + "' ";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            lossstatus = rs.getString(1);
                        }
                    }
                    rs.close();
                    stat.close();
                    vec1.addElement(lossstatus);
                } else {
                    java.util.Vector vector = new java.util.Vector();
                    vector = ((ejb.objectmodel.acquisitions.LocalACQ_REQUEST_AM_COPYHome) homeFactory.getInstance().getHome("ACQ_REQUEST_AM_COPY")).getAccessionDatewiseDetails(libraryId, accno);
                    if (vector.size() > 0) {
                        for (int k = 0; k < vector.size(); k += 12) {
                            vec2.addElement(utility.getTestedString(vector.elementAt(k)));
                            String accnumber1 = utility.getTestedString(vector.elementAt(k + 1));
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 1)));
                            java.sql.Timestamp date = (java.sql.Timestamp) vector.elementAt(k + 2);
                            String date3 = String.valueOf(date.getTime());
                            vec2.addElement(date3);
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 3)));
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 4)));
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 5)));
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 6)));
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 7)));
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 9)));
                            java.sql.Timestamp invoicedate = (java.sql.Timestamp) vector.elementAt(k + 10);
                            String date4 = String.valueOf(invoicedate.getTime());
                            vec2.addElement(date4);
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 11)));
                            Integer requestOrderId = new Integer(vector.elementAt(k + 8).toString());
                            ejb.objectmodel.acquisitions.ACQ_REQUEST_ORDERKey orderKey = new ejb.objectmodel.acquisitions.ACQ_REQUEST_ORDERKey();
                            orderKey.library_Id = libraryId;
                            orderKey.request_Order_Id = requestOrderId;
                            ejb.objectmodel.acquisitions.LocalACQ_REQUEST_ORDER localOrder = null;
                            localOrder = ((ejb.objectmodel.acquisitions.LocalACQ_REQUEST_ORDERHome) homeFactory.getInstance().getHome("ACQ_REQUEST_ORDER")).findByPrimaryKey(orderKey);
                            String orderId = localOrder.getOrder_Id();
                            ejb.objectmodel.acquisitions.ACQ_ORDERKey orderKey1 = new ejb.objectmodel.acquisitions.ACQ_ORDERKey();
                            orderKey1.library_Id = libraryId;
                            orderKey1.order_Id = orderId;
                            ejb.objectmodel.acquisitions.LocalACQ_ORDER localOrder1 = null;
                            localOrder1 = ((ejb.objectmodel.acquisitions.LocalACQ_ORDERHome) homeFactory.getInstance().getHome("ACQ_ORDER")).findByPrimaryKey(orderKey1);
                            Integer vendorId = localOrder1.getVendor_Id();
                            String vendorName = ((ejb.bprocess.acquisitions.LocalUtilityHome) homeFactory.getHome("Utility")).create().getVendorName(libraryId, vendorId);
                            vec2.addElement(vendorName);
                            String firmOrder1 = "Firm Order";
                            vec2.addElement(firmOrder1);
                            String callNumber = "";
                            temp = "select call_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    callNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec2.addElement(callNumber);
                            String bookNumber = "";
                            temp = "select book_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    bookNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec2.addElement(bookNumber);
                            String lossstatus = "";
                            temp = "select status from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    lossstatus = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec2.addElement(lossstatus);
                        }
                    } else {
                        java.util.Vector vector1 = new java.util.Vector();
                        vector1 = ((ejb.objectmodel.acquisitions.LocalACQ_REQUEST_AM_COPYHome) homeFactory.getInstance().getHome("ACQ_REQUEST_AM_COPY")).getBetweenSolicitedDetails(libraryId, accno);
                        for (int m = 0; m < vector1.size(); m += 8) {
                            String accnumber1 = utility.getTestedString(vector1.elementAt(m));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m)));
                            java.sql.Timestamp date = (java.sql.Timestamp) vector1.elementAt(m + 1);
                            String date2 = String.valueOf(date.getTime());
                            vec3.addElement(date2);
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 2)));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 3)));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 4)));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 5)));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 6)));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 7)));
                            String soli1 = "Solicited Gift";
                            vec3.addElement(soli1);
                            String callNumber = "";
                            temp = "select call_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    callNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec3.addElement(callNumber);
                            String bookNumber = "";
                            temp = "select book_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    bookNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec3.addElement(bookNumber);
                            String lossstatus = "";
                            temp = "select status from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    lossstatus = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec3.addElement(lossstatus);
                        }
                        java.util.Vector vector2 = new java.util.Vector();
                        vector2 = ((ejb.objectmodel.acquisitions.LocalACQ_REQUEST_AM_COPYHome) homeFactory.getInstance().getHome("ACQ_REQUEST_AM_COPY")).getBetweenUnSolicitedDetails(libraryId, accno);
                        for (int n = 0; n < vector2.size(); n += 8) {
                            String accnumber1 = utility.getTestedString(vector2.elementAt(n));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n)));
                            java.sql.Timestamp date = (java.sql.Timestamp) vector2.elementAt(n + 1);
                            String date4 = String.valueOf(date.getTime());
                            vec4.addElement(date4);
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 2)));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 3)));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 4)));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 5)));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 6)));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 7)));
                            String unsoli1 = "UnSolicited Gift";
                            vec4.addElement(unsoli1);
                            String callNumber = "";
                            temp = "select call_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    callNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec4.addElement(callNumber);
                            String bookNumber = "";
                            temp = "select book_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    bookNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec4.addElement(bookNumber);
                            String lossstatus = "";
                            temp = "select status from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    lossstatus = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec4.addElement(lossstatus);
                        }
                    }
                }
            }
            catalogueVec.addElement(vec1);
            catalogueVec.addElement(vec2);
            catalogueVec.addElement(vec3);
            catalogueVec.addElement(vec4);
            con.close();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        return catalogueVec;
    }

    public java.util.Vector getCompleteRecord(java.lang.String libraryid, java.lang.String fromdate, java.lang.String todate, java.lang.String fromNo, java.lang.String toNo, java.lang.String series) {
        java.sql.Timestamp fromDate = utility.getInstance().getTimestamp(fromdate);
        java.sql.Timestamp toDate = utility.getInstance().getTimestamp(todate);
        Integer libraryId = new Integer(Integer.parseInt(libraryid));
        java.util.Vector accession = new java.util.Vector();
        java.util.Vector vec = new java.util.Vector();
        java.util.Vector excelvector = new java.util.Vector();
        try {
            java.sql.Connection con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
            java.sql.Statement stat = null;
            if (fromNo.equals("") && toNo.equals("")) {
                String temp = "";
                if (series.equals("General")) {
                    temp = "select distinct Accession_Number from Document where Library_Id=" + libraryId + " and ENTRY_DATE between '" + fromDate + "' and '" + toDate + "' and VOLUME_ID is not null order by accession_number";
                } else {
                    String fix = "";
                    String max = "";
                    String accseries = "";
                    String prefix = "";
                    temp = "select distinct FIXED_VARIABLE,MAX_ZERO,PREFIX from ACCESSION_SERIES where LIBRARY_ID='" + libraryId + "' and SERIES_NAME = '" + series + "' ";
                    stat = con.createStatement();
                    java.sql.ResultSet rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            fix = rs.getString(1);
                            max = rs.getString(2);
                            prefix = rs.getString(3);
                        }
                    }
                    rs.close();
                    stat.close();
                    if (fix.trim().equals("B")) {
                        accseries = prefix;
                    } else if (fix.trim().equals("A")) {
                        int m1 = (new java.lang.Integer(max)).intValue() + 1;
                        String zero = "";
                        for (int h = 0; h < m1; h++) {
                            zero += "0";
                        }
                        accseries = prefix + zero;
                    }
                    temp = "select distinct Accession_Number from Document where Library_Id=" + libraryId + " and Accession_Number LIKE '" + accseries + "%' and ENTRY_DATE between '" + fromDate + "' and '" + toDate + "' and VOLUME_ID is not null order by accession_number";
                }
                stat = con.createStatement();
                java.sql.ResultSet rs = stat.executeQuery(temp);
                while (rs.next()) {
                    if (rs.getString(1) != null) {
                        String s1 = rs.getString(1);
                        accession.addElement(s1);
                    }
                }
                rs.close();
                stat.close();
            } else {
                String temp = "";
                int fromaccno = new Integer(fromNo).intValue();
                int toaccno = new Integer(toNo).intValue();
                if (series.equals("General")) {
                    for (int k = fromaccno; k <= toaccno; k++) {
                        String accnumber = String.valueOf(k);
                        temp = "select distinct Accession_Number from Document where Library_Id=" + libraryId + " and accession_number = '" + accnumber + "'  and VOLUME_ID is not null order by accession_number";
                        stat = con.createStatement();
                        java.sql.ResultSet rs = stat.executeQuery(temp);
                        while (rs.next()) {
                            if (rs.getString(1) != null) {
                                String s1 = rs.getString(1);
                                accession.addElement(s1);
                            }
                        }
                        rs.close();
                        stat.close();
                    }
                } else {
                    String fix = "";
                    String max = "";
                    String accseries = "";
                    String prefix = "";
                    temp = "select distinct FIXED_VARIABLE,MAX_ZERO,PREFIX from ACCESSION_SERIES where LIBRARY_ID='" + libraryId + "' and SERIES_NAME = '" + series + "' ";
                    stat = con.createStatement();
                    java.sql.ResultSet rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            fix = rs.getString(1);
                            max = rs.getString(2);
                            prefix = rs.getString(3);
                        }
                    }
                    rs.close();
                    stat.close();
                    for (int k = fromaccno; k <= toaccno; k++) {
                        if (fix.trim().equals("B")) {
                            accseries = prefix + k;
                        } else if (fix.trim().equals("A")) {
                            int m1 = (new java.lang.Integer(max)).intValue() - String.valueOf(k).trim().length() + 1;
                            String zero = "";
                            for (int h = 0; h < m1; h++) {
                                zero += "0";
                            }
                            accseries = prefix + zero + k;
                        }
                        temp = "select distinct Accession_Number from Document where Library_Id='" + libraryId + "' and accession_number = '" + accseries + "' and VOLUME_ID is not null order by accession_number ";
                        stat = con.createStatement();
                        java.sql.ResultSet rs1 = stat.executeQuery(temp);
                        while (rs1.next()) {
                            if (rs1.getString(1) != null) {
                                String s1 = rs1.getString(1);
                                accession.addElement(s1);
                            }
                        }
                        rs1.close();
                        stat.close();
                    }
                }
            }
            for (int i = 0; i < accession.size(); i++) {
                java.util.Vector vec1 = new java.util.Vector();
                String temp = "";
                String accno = accession.elementAt(i).toString();
                String accnumber = "";
                temp = "select accession_no from  acq_request_am_copy where accession_No ='" + accno + "' ";
                stat = con.createStatement();
                java.sql.ResultSet rs = stat.executeQuery(temp);
                while (rs.next()) {
                    if (rs.getString(1) != null) {
                        accnumber = rs.getString(1);
                    }
                }
                rs.close();
                stat.close();
                if (accnumber.equals("")) {
                    temp = "select a.CatalogueRecordId,a.Owner_Library_Id,b.BARCODE from  CAT_VOLUME a,Document b where  b.Accession_Number='" + accno + "' and b.Library_Id=" + libraryId + " and b.VOLUME_ID=a.VOLUME_ID";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    String catrecid = "";
                    String ownlibid = "";
                    String barcode = "";
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            catrecid = rs.getString(1);
                            ownlibid = rs.getString(2);
                            barcode = rs.getString(3);
                        }
                    }
                    rs.close();
                    stat.close();
                    vec1.addElement(accno);
                    java.lang.Integer catrec = new java.lang.Integer(catrecid);
                    java.lang.Integer ownlib = new java.lang.Integer(ownlibid);
                    java.util.Hashtable details = new java.util.Hashtable();
                    details = ((ejb.bprocess.opac.LocalSearchCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SearchCatalogue")).create().basicDetailsofcatalogueselected(catrec.intValue(), ownlib.intValue());
                    temp = "select entry_date from Document where accession_number = '" + accno + "' and library_id = '" + libraryId + "' ";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    java.sql.Timestamp date = null;
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            date = rs.getTimestamp(1);
                        }
                    }
                    rs.close();
                    stat.close();
                    String date2 = utility.getFormattedDate(date);
                    vec1.addElement(date2);
                    String title1 = "";
                    String tit = utility.getTestedString(details.get("Title/StatementOfResponsibility"));
                    if (!tit.equals("")) {
                        title1 = utility.getTestedString(details.get("Title/StatementOfResponsibility"));
                    }
                    vec1.addElement(title1);
                    String author1 = "";
                    java.util.Vector v3 = (java.util.Vector) details.get("Author/Creator");
                    if (v3.size() > 0) {
                        author1 = utility.getTestedString(v3.elementAt(3));
                    }
                    vec1.addElement(author1);
                    String edition1 = "-";
                    temp = "select EDITION from Searchable_CatalogueRecord where CatalogueRecordId=" + catrecid + " and Owner_Library_Id=" + ownlibid;
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        String edit = utility.getTestedString(rs.getString(1));
                        if (!edit.equals("")) {
                            edition1 = utility.getTestedString(rs.getString(1));
                        }
                    }
                    rs.close();
                    stat.close();
                    vec1.addElement(edition1);
                    String isbn1 = "";
                    String isn = utility.getTestedString(details.get("ISBN"));
                    if (!isn.equals("")) {
                        isbn1 = utility.getTestedString(details.get("ISBN"));
                    }
                    vec1.addElement(isbn1);
                    String publisher1 = "";
                    String pub = utility.getTestedString(details.get("Publisher"));
                    if (!pub.equals("")) {
                        publisher1 = utility.getTestedString(details.get("Publisher"));
                    }
                    vec1.addElement(publisher1);
                    String custom = "";
                    temp = "select CUSTOM from Document where accession_number = '" + accno + "' and library_id = '" + libraryId + "' ";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            custom = utility.getTestedString(rs.getString(1));
                        }
                    }
                    rs.close();
                    stat.close();
                    vec1.addElement("");
                    String callNumber = "";
                    temp = "select call_number from Document where accession_number = '" + accno + "' and library_id = '" + libraryId + "' ";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            callNumber = rs.getString(1);
                        }
                    }
                    rs.close();
                    stat.close();
                    vec1.addElement(callNumber);
                    String bookNumber = "";
                    temp = "select book_number from Document where accession_number = '" + accno + "' and library_id = '" + libraryId + "' ";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            bookNumber = rs.getString(1);
                        }
                    }
                    rs.close();
                    stat.close();
                    vec1.addElement(bookNumber);
                    vec1.addElement("");
                    vec1.addElement("");
                    String acqMode = "Firm Order";
                    vec1.addElement(acqMode);
                    vec1.addElement("");
                    String lossstatus = "";
                    temp = "select status from Document where accession_number = '" + accno + "' and library_id = '" + libraryId + "' ";
                    stat = con.createStatement();
                    rs = stat.executeQuery(temp);
                    while (rs.next()) {
                        if (rs.getString(1) != null) {
                            lossstatus = rs.getString(1);
                        }
                    }
                    rs.close();
                    stat.close();
                    String status = "";
                    String loss = lossstatus;
                    if (loss.equals("E")) {
                        status = "LOSS";
                    } else {
                        status = "";
                    }
                    vec1.addElement(status);
                    excelvector.addElement(vec1);
                } else {
                    java.util.Vector vector = new java.util.Vector();
                    vector = ((ejb.objectmodel.acquisitions.LocalACQ_REQUEST_AM_COPYHome) homeFactory.getInstance().getHome("ACQ_REQUEST_AM_COPY")).getAccessionDatewiseDetails(libraryId, accno);
                    if (vector.size() > 0) {
                        java.util.Vector vec2 = new java.util.Vector();
                        for (int k = 0; k < vector.size(); k += 12) {
                            String accnumber1 = utility.getTestedString(vector.elementAt(k + 1));
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 1)));
                            java.sql.Timestamp date = (java.sql.Timestamp) vector.elementAt(k + 2);
                            String date3 = utility.getFormattedDate(date);
                            vec2.addElement(date3);
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 3)));
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 4)));
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 5)));
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 6)));
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 7)));
                            Integer requestOrderId = new Integer(vector.elementAt(k + 8).toString());
                            ejb.objectmodel.acquisitions.ACQ_REQUEST_ORDERKey orderKey = new ejb.objectmodel.acquisitions.ACQ_REQUEST_ORDERKey();
                            orderKey.library_Id = libraryId;
                            orderKey.request_Order_Id = requestOrderId;
                            ejb.objectmodel.acquisitions.LocalACQ_REQUEST_ORDER localOrder = null;
                            localOrder = ((ejb.objectmodel.acquisitions.LocalACQ_REQUEST_ORDERHome) homeFactory.getInstance().getHome("ACQ_REQUEST_ORDER")).findByPrimaryKey(orderKey);
                            String orderId = localOrder.getOrder_Id();
                            ejb.objectmodel.acquisitions.ACQ_ORDERKey orderKey1 = new ejb.objectmodel.acquisitions.ACQ_ORDERKey();
                            orderKey1.library_Id = libraryId;
                            orderKey1.order_Id = orderId;
                            ejb.objectmodel.acquisitions.LocalACQ_ORDER localOrder1 = null;
                            localOrder1 = ((ejb.objectmodel.acquisitions.LocalACQ_ORDERHome) homeFactory.getInstance().getHome("ACQ_ORDER")).findByPrimaryKey(orderKey1);
                            Integer vendorId = localOrder1.getVendor_Id();
                            String vendorName = ((ejb.bprocess.acquisitions.LocalUtilityHome) homeFactory.getHome("Utility")).create().getVendorName(libraryId, vendorId);
                            vec2.addElement(vendorName);
                            String callNumber = "";
                            temp = "select call_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    callNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec2.addElement(callNumber);
                            String bookNumber = "";
                            temp = "select book_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    bookNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec2.addElement(bookNumber);
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 9)));
                            java.sql.Timestamp invoicedate = (java.sql.Timestamp) vector.elementAt(k + 10);
                            String date4 = utility.getFormattedDate(invoicedate);
                            vec2.addElement(date4);
                            String firmOrder1 = "Firm Order";
                            vec2.addElement(firmOrder1);
                            vec2.addElement(utility.getTestedString(vector.elementAt(k + 11)));
                            String lossstatus = "";
                            temp = "select status from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    lossstatus = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            String status = "";
                            String loss = lossstatus;
                            if (loss.equals("E")) {
                                status = "LOSS";
                            } else {
                                status = "";
                            }
                            vec2.addElement(status);
                            excelvector.addElement(vec2);
                        }
                    } else {
                        java.util.Vector vector1 = new java.util.Vector();
                        java.util.Vector vec3 = new java.util.Vector();
                        vector1 = ((ejb.objectmodel.acquisitions.LocalACQ_REQUEST_AM_COPYHome) homeFactory.getInstance().getHome("ACQ_REQUEST_AM_COPY")).getBetweenSolicitedDetails(libraryId, accno);
                        for (int m = 0; m < vector1.size(); m += 8) {
                            String accnumber1 = utility.getTestedString(vector1.elementAt(m));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m)));
                            java.sql.Timestamp date = (java.sql.Timestamp) vector1.elementAt(m + 1);
                            String date2 = utility.getFormattedDate(date);
                            vec3.addElement(date2);
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 2)));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 3)));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 4)));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 5)));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 6)));
                            vec3.addElement(utility.getTestedString(vector1.elementAt(m + 7)));
                            String callNumber = "";
                            temp = "select call_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    callNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec3.addElement(callNumber);
                            String bookNumber = "";
                            temp = "select book_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    bookNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec3.addElement(bookNumber);
                            vec3.addElement("");
                            vec3.addElement("");
                            String soli1 = "Solicited Gift";
                            vec3.addElement(soli1);
                            vec3.addElement("");
                            String lossstatus = "";
                            temp = "select status from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    lossstatus = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            String status = "";
                            String loss = lossstatus;
                            if (loss.equals("E")) {
                                status = "LOSS";
                            } else {
                                status = "";
                            }
                            vec3.addElement(status);
                            excelvector.addElement(vec3);
                        }
                        java.util.Vector vec4 = new java.util.Vector();
                        java.util.Vector vector2 = new java.util.Vector();
                        vector2 = ((ejb.objectmodel.acquisitions.LocalACQ_REQUEST_AM_COPYHome) homeFactory.getInstance().getHome("ACQ_REQUEST_AM_COPY")).getBetweenUnSolicitedDetails(libraryId, accno);
                        for (int n = 0; n < vector2.size(); n += 8) {
                            String accnumber1 = utility.getTestedString(vector2.elementAt(n));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n)));
                            java.sql.Timestamp date = (java.sql.Timestamp) vector2.elementAt(n + 1);
                            String date4 = utility.getFormattedDate(date);
                            vec4.addElement(date4);
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 2)));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 3)));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 4)));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 5)));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 6)));
                            vec4.addElement(utility.getTestedString(vector2.elementAt(n + 7)));
                            String callNumber = "";
                            temp = "select call_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    callNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec4.addElement(callNumber);
                            String bookNumber = "";
                            temp = "select book_number from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    bookNumber = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            vec4.addElement(bookNumber);
                            vec4.addElement("");
                            vec4.addElement("");
                            String unsoli1 = "UnSolicited Gift";
                            vec4.addElement(unsoli1);
                            vec4.addElement("");
                            String lossstatus = "";
                            temp = "select status from Document where accession_number = '" + accnumber1 + "' and library_id = '" + libraryId + "' ";
                            stat = con.createStatement();
                            rs = stat.executeQuery(temp);
                            while (rs.next()) {
                                if (rs.getString(1) != null) {
                                    lossstatus = rs.getString(1);
                                }
                            }
                            rs.close();
                            stat.close();
                            String status = "";
                            String loss = lossstatus;
                            if (loss.equals("E")) {
                                status = "LOSS";
                            } else {
                                status = "";
                            }
                            vec4.addElement(status);
                            excelvector.addElement(vec4);
                        }
                    }
                }
            }
            con.close();
            try {
                java.io.File file = new java.io.File("C:/localattchments/reports/");
                if (file.exists() == false) {
                    file.mkdirs();
                }
                String filename = "AccessionRegister" + String.valueOf(java.util.Calendar.getInstance().get(java.util.Calendar.DATE)) + String.valueOf(java.util.Calendar.getInstance().get(java.util.Calendar.MONTH) + 1) + String.valueOf(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)) + String.valueOf(java.util.Calendar.getInstance().get(java.util.Calendar.HOUR)) + String.valueOf(java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE)) + String.valueOf(java.util.Calendar.getInstance().get(java.util.Calendar.SECOND)) + String.valueOf(java.util.Calendar.getInstance().get(java.util.Calendar.MILLISECOND));
                javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
                fileChooser.setSelectedFile(new java.io.File("C:/localattchments/reports/" + filename));
                file = fileChooser.getSelectedFile();
                try {
                    String fileName = file.getName();
                    String extn = "xls";
                    if (fileName.indexOf(".") != -1) {
                        extn = fileName.substring(fileName.indexOf(".") + 1);
                    }
                    if (!(extn.equalsIgnoreCase("xls") || extn.equalsIgnoreCase("wri"))) {
                        extn = "xls";
                    }
                    file = new java.io.File(file.getAbsolutePath() + "." + extn);
                    if (extn.equalsIgnoreCase("xls")) {
                        HSSFWorkbook wb = new HSSFWorkbook();
                        HSSFSheet sheet = wb.createSheet();
                        HSSFFont font = wb.createFont();
                        font.setFontHeightInPoints((short) 18);
                        font.setFontName("Courier New");
                        font.setBoldweight((short) 8);
                        HSSFCellStyle style = wb.createCellStyle();
                        style.setFont(font);
                        int j;
                        int i;
                        int k = 0;
                        int m = 0;
                        HSSFRow row1 = sheet.createRow((short) 0);
                        HSSFCell cell = row1.createCell((short) 0);
                        cell.setCellValue("AccessionNo");
                        cell.setCellStyle(style);
                        HSSFCell cell1 = row1.createCell((short) 1);
                        cell1.setCellValue("Date Of Accession");
                        cell1.setCellStyle(style);
                        HSSFCell cell2 = row1.createCell((short) 2);
                        cell2.setCellValue("Title");
                        cell2.setCellStyle(style);
                        HSSFCell cell3 = row1.createCell((short) 3);
                        cell3.setCellValue("Author");
                        cell3.setCellStyle(style);
                        HSSFCell cell4 = row1.createCell((short) 4);
                        cell4.setCellValue("Edition");
                        cell4.setCellStyle(style);
                        HSSFCell cell5 = row1.createCell((short) 5);
                        cell5.setCellValue("ISBN");
                        cell5.setCellStyle(style);
                        HSSFCell cell6 = row1.createCell((short) 6);
                        cell6.setCellValue("Publisher");
                        cell6.setCellStyle(style);
                        HSSFCell cell7 = row1.createCell((short) 7);
                        cell7.setCellValue("Vendor/Donor");
                        cell7.setCellStyle(style);
                        HSSFCell cell8 = row1.createCell((short) 8);
                        cell8.setCellValue("Call Number");
                        cell8.setCellStyle(style);
                        HSSFCell cell9 = row1.createCell((short) 9);
                        cell9.setCellValue("Book Number");
                        cell9.setCellStyle(style);
                        HSSFCell cell10 = row1.createCell((short) 10);
                        cell10.setCellValue("Invoice No");
                        cell10.setCellStyle(style);
                        HSSFCell cell11 = row1.createCell((short) 11);
                        cell11.setCellValue("Invoice Date");
                        cell11.setCellStyle(style);
                        HSSFCell cell12 = row1.createCell((short) 12);
                        cell12.setCellValue("Acquisition Mode");
                        cell12.setCellStyle(style);
                        HSSFCell cell13 = row1.createCell((short) 13);
                        cell13.setCellValue("Amount Paid");
                        cell13.setCellStyle(style);
                        HSSFCell cell14 = row1.createCell((short) 14);
                        cell14.setCellValue("Status");
                        cell14.setCellStyle(style);
                        for (i = 0; i < excelvector.size(); i = i + 1) {
                            HSSFRow row = sheet.createRow((short) k + 1);
                            java.util.Vector tvec = (java.util.Vector) excelvector.elementAt(i);
                            for (j = 0; j < tvec.size(); j++) {
                                row.createCell((short) j).setCellValue(tvec.elementAt(j).toString().trim());
                                sheet.setColumnWidth((short) 0, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 1, (short) ((50 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 2, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 3, (short) ((50 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 4, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 5, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 6, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 7, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 8, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 9, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 10, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 11, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 12, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 13, (short) ((60 * 6) / ((double) 1 / 20)));
                                sheet.setColumnWidth((short) 14, (short) ((60 * 6) / ((double) 1 / 20)));
                            }
                            excelvector.removeElementAt(i);
                            i = i - 1;
                            k++;
                        }
                        java.io.FileOutputStream fileOut = new java.io.FileOutputStream(file);
                        wb.write(fileOut);
                        fileOut.close();
                        vec.addElement(wb);
                        vec.addElement(file);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        return vec;
    }
}
