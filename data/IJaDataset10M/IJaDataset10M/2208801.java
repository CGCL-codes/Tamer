package ispyb.server.webservice.AutoGenerated.Castor.PXLims.types;

import java.util.Hashtable;

/**
 * Class TypeOfExperimentType.
 * 
 * @version $Revision: 1.2 $ $Date: 2008/01/24 14:41:50 $
 */
public class TypeOfExperimentType implements java.io.Serializable {

    /**
     * The Single Wavelength type
     */
    public static final int SINGLE_WAVELENGTH_TYPE = 0;

    /**
     * The instance of the Single Wavelength type
     */
    public static final TypeOfExperimentType SINGLE_WAVELENGTH = new TypeOfExperimentType(SINGLE_WAVELENGTH_TYPE, "Single Wavelength");

    /**
     * The MAD type
     */
    public static final int MAD_TYPE = 1;

    /**
     * The instance of the MAD type
     */
    public static final TypeOfExperimentType MAD = new TypeOfExperimentType(MAD_TYPE, "MAD");

    /**
     * The SAD type
     */
    public static final int SAD_TYPE = 2;

    /**
     * The instance of the SAD type
     */
    public static final TypeOfExperimentType SAD = new TypeOfExperimentType(SAD_TYPE, "SAD");

    /**
     * Field _memberTable
     */
    private static java.util.Hashtable _memberTable = init();

    /**
     * Field type
     */
    private int type = -1;

    /**
     * Field stringValue
     */
    private java.lang.String stringValue = null;

    private TypeOfExperimentType(int type, java.lang.String value) {
        super();
        this.type = type;
        this.stringValue = value;
    }

    /**
     * Method enumerateReturns an enumeration of all possible
     * instances of TypeOfExperimentType
     */
    public static java.util.Enumeration enumerate() {
        return _memberTable.elements();
    }

    /**
     * Method getTypeReturns the type of this TypeOfExperimentType
     */
    public int getType() {
        return this.type;
    }

    /**
     * Method init
     */
    private static java.util.Hashtable init() {
        Hashtable members = new Hashtable();
        members.put("Single Wavelength", SINGLE_WAVELENGTH);
        members.put("MAD", MAD);
        members.put("SAD", SAD);
        return members;
    }

    /**
     * Method readResolve will be called during deserialization to
     * replace the deserialized object with the correct constant
     * instance. <br/>
     */
    private java.lang.Object readResolve() {
        return valueOf(this.stringValue);
    }

    /**
     * Method toStringReturns the String representation of this
     * TypeOfExperimentType
     */
    public java.lang.String toString() {
        return this.stringValue;
    }

    /**
     * Method valueOfReturns a new TypeOfExperimentType based on
     * the given String value.
     * 
     * @param string
     */
    public static ispyb.server.webservice.AutoGenerated.Castor.PXLims.types.TypeOfExperimentType valueOf(java.lang.String string) {
        java.lang.Object obj = null;
        if (string != null) obj = _memberTable.get(string);
        if (obj == null) {
            String err = "'" + string + "' is not a valid TypeOfExperimentType";
            throw new IllegalArgumentException(err);
        }
        return (TypeOfExperimentType) obj;
    }
}
