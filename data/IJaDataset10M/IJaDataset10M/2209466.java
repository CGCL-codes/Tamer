package com.rapidminer.operator.visualization;

import java.util.ArrayList;
import java.util.List;
import com.rapidminer.datatable.DataTable;
import com.rapidminer.datatable.DataTableRow;
import com.rapidminer.example.Attribute;
import com.rapidminer.example.table.AttributeFactory;
import com.rapidminer.example.table.DoubleArrayDataRow;
import com.rapidminer.example.table.MemoryExampleTable;
import com.rapidminer.operator.Operator;
import com.rapidminer.operator.OperatorDescription;
import com.rapidminer.operator.OperatorException;
import com.rapidminer.operator.UserError;
import com.rapidminer.operator.ports.DummyPortPairExtender;
import com.rapidminer.operator.ports.OutputPort;
import com.rapidminer.operator.ports.PortPairExtender;
import com.rapidminer.operator.ports.metadata.ExampleSetMetaData;
import com.rapidminer.operator.ports.metadata.GenerateNewMDRule;
import com.rapidminer.parameter.ParameterType;
import com.rapidminer.parameter.ParameterTypeString;
import com.rapidminer.tools.Ontology;

/**
 * This operator transforms the data generated by a ProcessLog operator into 
 * an ExampleSet which can then be used by other operators.
 * 
 * @author Ingo Mierswa
 */
public class ProcessLog2ExampleSet extends Operator {

    public static final String PARAMETER_LOG_NAME = "log_name";

    private final OutputPort exampleSetOutput = getOutputPorts().createPort("exampleSet");

    private final PortPairExtender dummyPorts = new DummyPortPairExtender("through", getInputPorts(), getOutputPorts());

    public ProcessLog2ExampleSet(OperatorDescription description) {
        super(description);
        ExampleSetMetaData newEMD = new ExampleSetMetaData();
        newEMD.attributesAreSuperset();
        newEMD.setNumberOfExamples(0);
        newEMD.getNumberOfExamples().increaseByUnknownAmount();
        getTransformer().addRule(new GenerateNewMDRule(exampleSetOutput, newEMD));
        dummyPorts.start();
        getTransformer().addRule(dummyPorts.makePassThroughRule());
    }

    @Override
    public void doWork() throws OperatorException {
        DataTable table = null;
        if (isParameterSet(PARAMETER_LOG_NAME)) {
            String dataTableName = getParameterAsString(PARAMETER_LOG_NAME);
            table = getProcess().getDataTable(dataTableName);
        } else {
            if (getProcess().getDataTables().size() > 0) {
                table = getProcess().getDataTables().iterator().next();
                logNote("No log name was specified, using first data table found...");
            }
        }
        if (table == null) {
            throw new UserError(this, 939);
        }
        List<Attribute> attributes = new ArrayList<Attribute>();
        for (int i = 0; i < table.getNumberOfColumns(); i++) {
            String name = table.getColumnName(i);
            if (table.isDate(i)) {
                attributes.add(AttributeFactory.createAttribute(name, Ontology.DATE));
            } else if (table.isDateTime(i)) {
                attributes.add(AttributeFactory.createAttribute(name, Ontology.DATE_TIME));
            } else if (table.isNumerical(i)) {
                attributes.add(AttributeFactory.createAttribute(name, Ontology.REAL));
            } else {
                attributes.add(AttributeFactory.createAttribute(name, Ontology.NOMINAL));
            }
        }
        MemoryExampleTable exampleTable = new MemoryExampleTable(attributes);
        for (int r = 0; r < table.getNumberOfRows(); r++) {
            DataTableRow row = table.getRow(r);
            double[] data = new double[attributes.size()];
            for (int i = 0; i < table.getNumberOfColumns(); i++) {
                if (table.isDate(i)) {
                    data[i] = row.getValue(i);
                } else if (table.isDateTime(i)) {
                    data[i] = row.getValue(i);
                } else if (table.isNumerical(i)) {
                    data[i] = row.getValue(i);
                } else {
                    Attribute attribute = attributes.get(i);
                    String value = table.getValueAsString(row, i);
                    data[i] = attribute.getMapping().mapString(value);
                }
            }
            exampleTable.addDataRow(new DoubleArrayDataRow(data));
        }
        exampleSetOutput.deliver(exampleTable.createExampleSet());
        dummyPorts.passDataThrough();
    }

    @Override
    public List<ParameterType> getParameterTypes() {
        List<ParameterType> types = super.getParameterTypes();
        types.add(new ParameterTypeString(PARAMETER_LOG_NAME, "The name of the ProcessLog operator which generated the log data which should be transformed (empty: use first found data table).", true, false));
        return types;
    }
}
