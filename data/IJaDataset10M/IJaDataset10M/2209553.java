package cn.myapps.core.deploy.application.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import cn.myapps.base.dao.DAOException;
import cn.myapps.base.dao.PersistenceUtils;
import cn.myapps.util.DbTypeUtil;

public class DB2ApplicationInitDAO extends AbstractApplicationInitDAO {

    public DB2ApplicationInitDAO(Connection conn) throws Exception {
        super(conn);
        this.dbType = "DB2: ";
        this.schema = DbTypeUtil.getSchema(conn, DbTypeUtil.DBTYPE_DB2);
    }

    public void initTables() throws Exception {
        String[] tableNames = { "T_DOCUMENT", "T_FLOWSTATERT", "T_COUNTER", "T_ACTORRT", "T_NODERT", "T_RELATIONHIS", "T_ACTORHIS", "T_PENDING", "T_PENDING_ACTOR_SET" };
        String[] sqls = { "CREATE TABLE " + getTableFullName("T_DOCUMENT") + " (ID VARCHAR(255) NOT NULL, LASTMODIFIED TIMESTAMP, FORMNAME VARCHAR(255), OWNER VARCHAR(255), TASKID DECIMAL(19,0), AUDITDATE TIMESTAMP, AUTHOR VARCHAR(255), CREATED TIMESTAMP, ISSUBDOC DECIMAL(1,0), CHANNELSNAME VARCHAR(255), FORMID VARCHAR(255), CHILDS VARCHAR(255), ISTMP DECIMAL(1,0), FLOWID VARCHAR(255), VERSIONS DECIMAL(10,0), SORTID VARCHAR(255), APPLICATIONID VARCHAR(255), STATELABEL VARCHAR(255), AUDITUSER VARCHAR(255), AUDITORNAMES VARCHAR(255), LASTFLOWOPERATION VARCHAR(255), STATEINT DECIMAL(10,0), PARENT VARCHAR(255), STATE VARCHAR(100), LASTMODIFIER VARCHAR(255), DOMAINID VARCHAR(255), AUDITORLIST CLOB, MAPPINGID VARCHAR(255), PRIMARY KEY (ID))", "CREATE TABLE " + getTableFullName("T_FLOWSTATERT") + " (ID VARCHAR(255) NOT NULL,DOCID VARCHAR(255),FLOWID VARCHAR(255),STATE DECIMAL(10,0),SORTID VARCHAR(255),  APPLICATIONID VARCHAR(255),  PRIMARY KEY(ID))", "CREATE TABLE " + getTableFullName("T_COUNTER") + " (ID VARCHAR(255) NOT NULL, COUNTER DECIMAL(10,0), NAME VARCHAR(255), SORTID VARCHAR(255), APPLICATIONID VARCHAR(255), DOMAINID VARCHAR(255),  PRIMARY KEY (ID))", "CREATE TABLE " + getTableFullName("T_ACTORRT") + " (ID VARCHAR(255) NOT NULL, ACTORID VARCHAR(255), NAME VARCHAR(255), ISPROCESSED DECIMAL(1,0), TYPE DECIMAL(10,0), NODERT_ID VARCHAR(255), FLOWSTATERT_ID VARCHAR(255), DEADLINE TIMESTAMP, SORTID VARCHAR(255), PENDING DECIMAL(1,0), DOMAINID VARCHAR(255), APPLICATIONID VARCHAR(255),  PRIMARY KEY (ID))", "CREATE TABLE " + getTableFullName("T_NODERT") + " (ID VARCHAR(255) NOT NULL, NAME VARCHAR(255), NODEID VARCHAR(255), FLOWID VARCHAR(255), DOCID VARCHAR(255), FLOWSTATERT_ID VARCHAR(255), SORTID VARCHAR(255), NOTIFIABLE DECIMAL(1,0), DOMAINID VARCHAR(255), APPLICATIONID VARCHAR(255), STATELABEL VARCHAR(255), FLOWOPTION VARCHAR(255), PASSCONDITION DECIMAL(10,0), PRIMARY KEY (ID))", "CREATE TABLE " + getTableFullName("T_RELATIONHIS") + " (ID VARCHAR(255) NOT NULL, ACTIONTIME TIMESTAMP, PROCESSTIME TIMESTAMP, STARTNODENAME VARCHAR(255), FLOWID VARCHAR(255), DOCID VARCHAR(255), ENDNODEID VARCHAR(255), ENDNODENAME VARCHAR(255), STARTNODEID VARCHAR(255), ISPASSED DECIMAL(1,0), ATTITUDE VARCHAR(255), SORTID VARCHAR(255), AUDITOR VARCHAR(255), APPLICATIONID VARCHAR(255),FLOWOPERATION VARCHAR(255),REMINDERCOUNT DECIMAL(10,0), PRIMARY KEY (ID))", "CREATE TABLE " + getTableFullName("T_ACTORHIS") + " (ID VARCHAR(255) NOT NULL, ACTORID VARCHAR(255), NAME VARCHAR(255), TYPE DECIMAL(10,0), NODEHIS_ID VARCHAR(255), SORTID VARCHAR(255), APPLICATIONID VARCHAR(255), PRIMARY KEY (ID)) ", "CREATE TABLE " + getTableFullName("T_PENDING") + " (ID VARCHAR(255) NOT NULL, FORMID VARCHAR(255),FORMNAME VARCHAR(255), FLOWID VARCHAR(255), CREATED TIMESTAMP, LASTMODIFIED TIMESTAMP, AUDITDATE TIMESTAMP, AUTHOR VARCHAR(255), AUDITUSER VARCHAR(255), STATELABEL VARCHAR(255), STATE VARCHAR(100), AUDITORNAMES VARCHAR(255), LASTFLOWOPERATION VARCHAR(255), LASTMODIFIER VARCHAR(255), SUMMARY CLOB, APPLICATIONID VARCHAR(255), DOMAINID VARCHAR(255), AUDITORLIST CLOB, PRIMARY KEY (ID))", "CREATE TABLE " + getTableFullName("T_PENDING_ACTOR_SET") + " (DOCID VARCHAR(255) NOT NULL, ACTORID VARCHAR(255) NOT NULL, DOMAINID VARCHAR(255), PRIMARY KEY (DOCID, ACTORID))" };
        for (int i = 0; i < sqls.length; i++) {
            if (!isTableExist(tableNames[i])) {
                createTable(sqls[i]);
            }
        }
    }

    private boolean isTableExist(String tableName) throws DAOException {
        String checkSQL = "SELECT * FROM SYSIBM.TABLES WHERE TABLE_NAME ='" + tableName + "'";
        checkSQL += " AND TABLE_SCHEMA=?";
        PreparedStatement statement = null;
        try {
            statement = connection.prepareStatement(checkSQL);
            log.info(dbType + checkSQL);
            statement.setObject(1, schema);
            ResultSet rs = statement.executeQuery();
            return rs.next();
        } catch (Exception e) {
            throw new DAOException(e.getMessage());
        } finally {
            PersistenceUtils.closeStatement(statement);
        }
    }
}
