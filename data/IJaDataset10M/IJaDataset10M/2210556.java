package net.sf.istcontract.aws.communication.protocol.Toy13_1_5;

import net.sf.istcontract.aws.communication.message.MessageTemplate;
import net.sf.istcontract.aws.communication.performative.ConsentSuggestion;
import net.sf.istcontract.aws.communication.performative.Inform;
import net.sf.istcontract.aws.communication.performative.Propose;
import net.sf.istcontract.aws.communication.performative.Suggest;
import net.sf.istcontract.aws.knowledge.actor.Role;
import java.util.HashMap;
import java.util.Vector;
import net.sf.istcontract.aws.communication.protocol.*;

/**
 *
 * This is a protocol implementation
 *
 * It is part of the CommunicationManager component.
 *
 * @author Autogenerated by ingenias2contractcodegenerator (Ignasi Gomez-Sebastia)
 *
 */
public class Toy13_1_5 extends Protocol {

    private static HashMap Predecessors = new HashMap();

    public Toy13_1_5() {
        if (name == null) {
            System.err.println("Toy13_1_5 name=null");
        }
        try {
            Role Initiator, Participant, Notary;
            Initiator = addActor(InitiatorRole.class.getName());
            Participant = addActor(ParticipantRole.class.getName());
            Notary = addActor(NotaryRole.class.getName());
            MessageTemplate NotaryReplyNotaryParticipant = addMessage(Notary, Participant, NotaryReply.class, EBookContractOntology.class);
            MessageTemplate NotaryReplyNotaryInitiator = addMessage(Notary, Initiator, NotaryReply.class, EBookContractOntology.class);
            MessageTemplate SuggestPartiParticipantInitiator = addMessage(Participant, Initiator, SuggestParti.class, EBookContractOntology.class);
            MessageTemplate ConsentInitInitiatorParticipant = addMessage(Initiator, Participant, ConsentInit.class, EBookContractOntology.class);
            MessageTemplate SuggestInitAuxInitiatorParticipant = addMessage(Initiator, Participant, SuggestInitAux.class, EBookContractOntology.class);
            MessageTemplate NotaryInformParticipantNotary = addMessage(Participant, Notary, NotaryInform.class, EBookContractOntology.class);
            MessageTemplate NotaryInformInitiatorNotary = addMessage(Initiator, Notary, NotaryInform.class, EBookContractOntology.class);
            MessageTemplate DisimissInitInitiatorParticipant = addMessage(Initiator, Participant, DisimissInit.class, EBookContractOntology.class);
            MessageTemplate ConsentPartiParticipantInitiator = addMessage(Participant, Initiator, ConsentParti.class, EBookContractOntology.class);
            MessageTemplate DisimissPartiParticipantInitiator = addMessage(Participant, Initiator, DisimissParti.class, EBookContractOntology.class);
            MessageTemplate SuggestInitInitiatorParticipant = addMessage(Initiator, Participant, SuggestInit.class, EBookContractOntology.class);
            setStartMessage(SuggestInitAuxInitiatorParticipant);
            setConversationInitiator(InitiatorRole.class);
            setConversationParticipant(ParticipantRole.class);
            setConversationParticipant(NotaryRole.class);
            LinkFollowingMessage(SuggestInitAuxInitiatorParticipant, SuggestPartiParticipantInitiator);
            LinkFollowingMessage(SuggestInitAuxInitiatorParticipant, DisimissPartiParticipantInitiator);
            LinkFollowingMessage(SuggestInitAuxInitiatorParticipant, ConsentPartiParticipantInitiator);
            LinkFollowingMessage(SuggestPartiParticipantInitiator, DisimissInitInitiatorParticipant);
            LinkFollowingMessage(SuggestPartiParticipantInitiator, SuggestInitInitiatorParticipant);
            LinkFollowingMessage(SuggestPartiParticipantInitiator, ConsentInitInitiatorParticipant);
            LinkFollowingMessage(ConsentPartiParticipantInitiator, NotaryInformParticipantNotary);
            LinkFollowingMessage(ConsentPartiParticipantInitiator, NotaryInformInitiatorNotary);
            LinkFollowingMessage(SuggestInitInitiatorParticipant, ConsentPartiParticipantInitiator);
            LinkFollowingMessage(SuggestInitInitiatorParticipant, DisimissPartiParticipantInitiator);
            LinkFollowingMessage(SuggestInitInitiatorParticipant, SuggestPartiParticipantInitiator);
            LinkFollowingMessage(ConsentInitInitiatorParticipant, NotaryInformParticipantNotary);
            LinkFollowingMessage(ConsentInitInitiatorParticipant, NotaryInformInitiatorNotary);
            LinkFollowingMessage(NotaryInformParticipantNotary, NotaryReplyNotaryParticipant);
            LinkFollowingMessage(NotaryInformParticipantNotary, NotaryReplyNotaryInitiator);
            LinkFollowingMessage(NotaryInformInitiatorNotary, NotaryReplyNotaryParticipant);
            LinkFollowingMessage(NotaryInformInitiatorNotary, NotaryReplyNotaryInitiator);
        } catch (Exception E) {
            E.printStackTrace();
        }
    }
}
