package com.neurogrid.simulation;

import java.util.Random;
import java.util.Set;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import com.neurogrid.simulation.root.ContentMessage;
import com.neurogrid.simulation.root.Document;
import com.neurogrid.simulation.root.Keyword;
import com.neurogrid.simulation.root.Node;

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/
public class AdversarialNodeTest extends TestCase {

    com.neurogrid.simulation.AdversarialNode adversarialnode = null;

    com.neurogrid.simulation.AdversarialNetwork adversarialnetwork = null;

    /**
 * @param name  the name of the test
 */
    public AdversarialNodeTest(String name) {
        super(name);
        AdversarialNode.init(System.getProperty("Log4jConfig"));
    }

    public com.neurogrid.simulation.AdversarialNode createInstance() throws Exception {
        adversarialnetwork = new AdversarialNetwork();
        return new com.neurogrid.simulation.AdversarialNode(adversarialnetwork, new GnutellaMessageHandler(new Random(888)));
    }

    protected void setUp() throws Exception {
        super.setUp();
        adversarialnode = createInstance();
    }

    protected void tearDown() throws Exception {
        adversarialnode = null;
        super.tearDown();
    }

    public void testGetCvsInfo() throws Exception {
    }

    public void testInit() throws Exception {
    }

    public void testGetNewNodeID() throws Exception {
    }

    public void testToString() throws Exception {
    }

    public void testAddMessageToInbox() throws Exception {
        Keyword[] x_keywords = new SimpleKeyword[3];
        for (int i = 0; i < 3; i++) {
            x_keywords[i] = new SimpleKeyword();
        }
        Document x_doc = new SimpleDocument(x_keywords);
        Node x_node = new AdversarialNode(adversarialnetwork, new GnutellaMessageHandler(new Random(888)));
        ContentMessage x_message = new SimpleContentMessage(3, x_doc.getKeywords(), x_doc, x_node);
        adversarialnode.addMessageToInbox(x_message);
        assertTrue("message location not updated", x_message.getLocation() == adversarialnode);
        assertTrue("message of correct type not in inbox", adversarialnode.inboxContainsMessage(x_message).equals("com.neurogrid.simulation.SimpleContentMessage"));
    }

    public void testDoGraphics() throws Exception {
    }

    public void testDoGraphics2() throws Exception {
    }

    public void testProcessMessage() throws Exception {
    }

    public void testSetInactive() throws Exception {
        assertTrue("node already active", !adversarialnode.getActive());
        adversarialnode.setActive();
        assertTrue("node not active", adversarialnode.getActive());
        assertTrue("node not added to active set", adversarialnetwork.activeNodeContains(adversarialnode));
        adversarialnode.setInactive();
        assertTrue("node not inactive", !adversarialnode.getActive());
        assertTrue("node still in active set", !adversarialnetwork.activeNodeContains(adversarialnode));
    }

    public void testSetActive() throws Exception {
        assertTrue("node already active", !adversarialnode.getActive());
        adversarialnode.setActive();
        assertTrue("node not active", adversarialnode.getActive());
        assertTrue("node not added to active set", adversarialnetwork.activeNodeContains(adversarialnode));
    }

    public void testGetActive() throws Exception {
    }

    public void testGetNodeID() throws Exception {
    }

    public void testGetNoConnections() throws Exception {
    }

    public void testGetNoContents() throws Exception {
    }

    public void testGetNoKnowledge() throws Exception {
    }

    public void testGetTotalNoKnowledge() throws Exception {
    }

    public void testCheckInbox() throws Exception {
    }

    public void testClearInbox() throws Exception {
        Keyword[] x_keywords = new SimpleKeyword[3];
        for (int i = 0; i < 3; i++) {
            x_keywords[i] = new SimpleKeyword();
        }
        Document x_doc = new SimpleDocument(x_keywords);
        Node x_node = new AdversarialNode(adversarialnetwork, new GnutellaMessageHandler(new Random(888)));
        ContentMessage x_message = new SimpleContentMessage(3, x_doc.getKeywords(), x_doc, x_node);
        adversarialnode.addMessageToInbox(x_message);
        assertTrue("message location not updated", x_message.getLocation() == adversarialnode);
        assertTrue("message of correct type not in inbox", adversarialnode.inboxContainsMessage(x_message).equals("com.neurogrid.simulation.SimpleContentMessage"));
        assertTrue("checkInbox indicates inbox empty", adversarialnode.checkInbox());
        adversarialnode.clearInbox();
        assertTrue("checkInbox indicated inbox full", !adversarialnode.checkInbox());
    }

    public void testCheckSeen() throws Exception {
        Keyword[] x_keywords = new SimpleKeyword[3];
        for (int i = 0; i < 3; i++) {
            x_keywords[i] = new SimpleKeyword();
        }
        Document x_doc = new SimpleDocument(x_keywords);
        Node x_node = new AdversarialNode(adversarialnetwork, new GnutellaMessageHandler(new Random(888)));
        ContentMessage x_message = new SimpleContentMessage(3, x_doc.getKeywords(), x_doc, x_node);
        ContentMessage x_message2 = new SimpleContentMessage(3, x_doc.getKeywords(), x_doc, x_node);
        adversarialnode.addToSeen(x_message);
        assertTrue("seen message not indicated as such", adversarialnode.checkSeen(x_message) != null);
        assertTrue("unseen messageindicated as seen", adversarialnode.checkSeen(x_message2) == null);
    }

    public void testClearGUIDs() throws Exception {
        Keyword[] x_keywords = new SimpleKeyword[3];
        for (int i = 0; i < 3; i++) {
            x_keywords[i] = new SimpleKeyword();
        }
        Document x_doc = new SimpleDocument(x_keywords);
        Node x_node = new AdversarialNode(adversarialnetwork, new GnutellaMessageHandler(new Random(888)));
        ContentMessage x_message = new SimpleContentMessage(3, x_doc.getKeywords(), x_doc, x_node);
        adversarialnode.addToSeen(x_message);
        assertTrue("seen message not indicated as such", adversarialnode.checkSeen(x_message) != null);
        adversarialnode.clearGUIDs();
        assertTrue("message indicated as seen after cleared", adversarialnode.checkSeen(x_message) == null);
        assertTrue("not all messages cleared", adversarialnode.getNoSeenMessages() == 0);
    }

    public void testClearConnList() throws Exception {
        AdversarialNode x_node = new AdversarialNode(adversarialnetwork, new GnutellaMessageHandler(new Random(888)));
        adversarialnode.addConnection(x_node);
        assertTrue("failed to add connection", adversarialnode.hasConnection(x_node));
        adversarialnode.clearConnList();
        assertTrue("clear failed to remove connection", !adversarialnode.hasConnection(x_node));
        assertTrue("no. conns not zero", adversarialnode.getNoConnections() == 0);
    }

    public void testClearContents() throws Exception {
        SimpleDocument x_doc = new SimpleDocument(3);
        adversarialnode.addContent(x_doc);
        assertTrue("content not added", adversarialnode.hasContent(x_doc));
        adversarialnode.clearContents();
        assertTrue("node failing to still claim contents", adversarialnode.hasContent(x_doc));
        assertTrue("no. content not zero", adversarialnode.getNoContents() == 0);
    }

    public void testGetConnList() throws Exception {
    }

    public void testAllKeywords() throws Exception {
    }

    public void testAddConnection() throws Exception {
        try {
            adversarialnode.addConnection(null);
            fail("Failed to throw exception when adding null connection");
        } catch (Exception e) {
        }
        AdversarialNode x_node = new AdversarialNode(adversarialnetwork, new GnutellaMessageHandler(new Random(888)));
        adversarialnode.addConnection(x_node);
        assertTrue(adversarialnode.hasConnection(x_node));
    }

    public void testHasConnection() throws Exception {
        try {
            adversarialnode.hasConnection(null);
            fail("Failed to throw exception when checking for null connection");
        } catch (Exception e) {
        }
        AdversarialNode x_node = new AdversarialNode(adversarialnetwork, new GnutellaMessageHandler(new Random(888)));
        AdversarialNode x_node2 = new AdversarialNode(adversarialnetwork, new GnutellaMessageHandler(new Random(888)));
        adversarialnode.addConnection(x_node);
        assertTrue(adversarialnode.hasConnection(x_node));
        assertTrue(!adversarialnode.hasConnection(x_node2));
    }

    public void testAddContent() throws Exception {
        try {
            adversarialnode.addContent(null);
            fail("Failed to throw exception when adding null content");
        } catch (Exception e) {
        }
        SimpleDocument x_doc = new SimpleDocument(3);
        adversarialnode.addContent(x_doc);
        assertTrue(adversarialnode.hasContent(x_doc));
    }

    public void testHasContent() throws Exception {
        try {
            adversarialnode.hasContent(null);
            fail("Failed to throw exception when checking for null content");
        } catch (Exception e) {
        }
        SimpleDocument x_doc = new SimpleDocument(3);
        SimpleDocument x_doc2 = new SimpleDocument(3);
        adversarialnode.addContent(x_doc);
        assertTrue("node claims no content when it should always claim content", adversarialnode.hasContent(x_doc));
        assertTrue("node failed to claim not present content, but it should", adversarialnode.hasContent(x_doc2));
    }

    public void testHasKeyword() throws Exception {
        try {
            adversarialnode.hasKeyword(null);
            fail("Failed to throw exception when checking for null content");
        } catch (Exception e) {
        }
        Keyword[] x_keywords = new SimpleKeyword[3];
        Keyword[] x_keywords2 = new SimpleKeyword[3];
        for (int i = 0; i < 3; i++) {
            x_keywords[i] = new SimpleKeyword();
            x_keywords2[i] = new SimpleKeyword();
        }
        SimpleDocument x_doc = new SimpleDocument(x_keywords);
        SimpleDocument x_doc2 = new SimpleDocument(x_keywords2);
        adversarialnode.addContent(x_doc);
        for (int i = 0; i < 3; i++) {
            assertTrue("local keyword not indicated", adversarialnode.hasKeyword(x_keywords[i]) == 1);
            assertTrue("absent keyword identified as local", adversarialnode.hasKeyword(x_keywords2[i]) == 0);
        }
    }

    public void testMatchingDocuments() throws Exception {
        try {
            adversarialnode.matchingDocuments(null);
            fail("Failed to throw exception when checking for null content");
        } catch (Exception e) {
        }
        Keyword[] x_keywords = new SimpleKeyword[3];
        Keyword[] x_keywords2 = new SimpleKeyword[3];
        Keyword[] x_keywords3 = new SimpleKeyword[3];
        for (int i = 0; i < 3; i++) {
            x_keywords[i] = new SimpleKeyword();
            x_keywords2[i] = new SimpleKeyword();
            x_keywords3[i] = new SimpleKeyword();
        }
        SimpleDocument x_doc = new SimpleDocument(x_keywords);
        SimpleDocument x_doc2 = new SimpleDocument(x_keywords);
        SimpleDocument x_doc3 = new SimpleDocument(x_keywords2);
        adversarialnode.addContent(x_doc);
        adversarialnode.addContent(x_doc2);
        adversarialnode.addContent(x_doc3);
        Set x_set = adversarialnode.matchingDocuments(x_keywords);
        assertTrue("node not claiming all possible docs", x_set.size() == 3);
        assertTrue("x_doc not found", x_set.contains(x_doc));
        assertTrue("xdoc2 not found", x_set.contains(x_doc2));
        assertTrue("xdoc3 claimed absent when even absent docs should be claimed", x_set.contains(x_doc3));
        x_set = adversarialnode.matchingDocuments(x_keywords3);
        assertTrue("failed to clain match from unrelated keywords", x_set.size() == 3);
    }

    public void testMatchingKeywords() throws Exception {
    }

    public void testGetContent() throws Exception {
    }

    public void testGetContentsByDocID() throws Exception {
    }

    public void testGetRandomContent() throws Exception {
    }

    public void testGetRandomKeyword() throws Exception {
    }

    public void testAddKnowledge() throws Exception {
    }

    public void testGetRecommendation() throws Exception {
    }

    public void testHandleMessage() throws Exception {
        SimpleKeyword[][] x_keywords = new SimpleKeyword[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                x_keywords[i][j] = new SimpleKeyword();
            }
        }
        SimpleDocument[] x_doc = new SimpleDocument[3];
        ContentMessage x_message[] = new SimpleContentMessage[3];
        Node x_node[] = new AdversarialNode[4];
        for (int i = 0; i < 4; i++) {
            x_node[i] = new AdversarialNode(adversarialnetwork, new GnutellaMessageHandler(new Random(888)));
        }
        adversarialnode.addConnection(x_node[1]);
        adversarialnode.addConnection(x_node[2]);
        adversarialnode.addConnection(x_node[3]);
        for (int k = 0; k < 3; k++) {
            x_doc[k] = new SimpleDocument(x_keywords[k]);
            x_message[k] = new SimpleContentMessage(3, x_doc[k].getKeywords(), x_doc[k], x_node[3]);
            x_message[k].setPreviousLocation(x_node[3]);
        }
        adversarialnode.addContent(x_doc[0]);
        assertTrue("failed to successfully handle message", adversarialnode.handleMessage(x_message[1]));
        assertTrue("node not activated", adversarialnode.getActive());
        assertTrue("Connected Node failed to receive message of correct type", x_node[1].inboxContainsMessage(x_message[1]).equals("com.neurogrid.simulation.SimpleContentMessage"));
        assertTrue("Connected Node failed to receive message of correct type", x_node[2].inboxContainsMessage(x_message[1]).equals("com.neurogrid.simulation.SimpleContentMessage"));
        assertTrue("Connected Node that sent message re-received message", x_node[3].inboxContainsMessage(x_message[1]) == null);
        assertTrue("initial node still has message", adversarialnode.inboxContainsMessage(x_message[1]) == null);
    }

    /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
    public void testVault() throws Exception {
    }

    public static void main(String[] args) {
        String x_method = System.getProperty("test.method");
        System.out.println("test.method=" + x_method);
        if (x_method == null || x_method.equals("")) {
            System.out.println("testing all methods");
            junit.textui.TestRunner.run(AdversarialNodeTest.class);
        } else {
            System.out.println("testing single method");
            TestSuite suite = new TestSuite();
            suite.addTest(new AdversarialNodeTest(x_method));
            junit.textui.TestRunner.run(suite);
        }
    }
}
