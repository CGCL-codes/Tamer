package ppine.ui.mips;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import java.util.Map;
import java.util.Collection;
import cytoscape.CyNode;
import cytoscape.Cytoscape;
import cytoscape.data.CyAttributes;
import cytoscape.view.CyNetworkView;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

public class MIPSPanel extends javax.swing.JPanel {

    private Complex myComplex;

    private Map<String, Complex> mipsComplexes;

    private Collection<String> mipsComplexesNames;

    /** Creates new form MIPSPanel */
    public MIPSPanel() {
        initComponents();
        ComplexesLogger.setTextArea(jTextArea1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton1.setText("Load MIPS Complexes");
        jButton1.setIconTextGap(2);
        jButton1.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jButton1.setName("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton3.setText("Calc Jaccard");
        jButton3.setName("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jScrollPane1.setName("jScrollPane1");
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1");
        jScrollPane1.setViewportView(jTextArea1);
        jButton5.setText("MCODE help");
        jButton5.setName("jButton5");
        jButton5.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jTextField1.setName("jTextField1");
        jButton6.setText("Calc all Jaccards");
        jButton6.setName("jButton6");
        jButton6.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE).addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE).addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)))).addGap(10, 10, 10)));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jButton1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButton3).addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jButton6)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(fc);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                ComplexesNamesReader complexesNamesReader = new ComplexesNamesReader();
                mipsComplexesNames = complexesNamesReader.readAllNames(file);
                ComplexesReader mipsComplexesReader = new ComplexesReader(mipsComplexesNames);
                mipsComplexes = mipsComplexesReader.readComplexes(file);
            } catch (IOException ex) {
                Logger.getLogger(MIPSPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            ComplexesCytoReader textReader = new ComplexesCytoReader();
            myComplex = textReader.readProteins();
            ComplexesComparator comparator = new ComplexesComparator(mipsComplexes, myComplex);
            comparator.compare();
        } catch (IOException ex) {
            System.out.println("DUPA");
        }
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {
        final CyAttributes nodesAttributes = Cytoscape.getNodeAttributes();
        @SuppressWarnings("unchecked") List<CyNode> nodes = Cytoscape.getCurrentNetwork().nodesList();
        String mcodeAttr = "MCODE_Cluster";
        String outattr = "MCODE_ClusterID";
        ArrayList clusterArrayList = new ArrayList();
        for (CyNode node : nodes) {
            clusterArrayList = (ArrayList) nodesAttributes.getAttributeList(node.getIdentifier(), mcodeAttr);
            for (int i = 0; i < clusterArrayList.size(); i++) {
                nodesAttributes.setAttribute(node.getIdentifier(), outattr, String.valueOf(clusterArrayList.get(i)));
            }
        }
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {
        String attr = jTextField1.getText();
        ComplexesCytoReader cytoReader = new ComplexesCytoReader();
        Map<String, Complex> complexes = cytoReader.readAllComplexes(attr);
        ComplexesComparator comparator = new ComplexesComparator(mipsComplexes, complexes);
        comparator.compareAll();
    }

    private javax.swing.JButton jButton1;

    private javax.swing.JButton jButton3;

    private javax.swing.JButton jButton5;

    private javax.swing.JButton jButton6;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JTextArea jTextArea1;

    private javax.swing.JTextField jTextField1;

    private Map<String, String> getClustering(Collection<Complex> tmpComplexes) {
        Map<String, String> ret = new TreeMap<String, String>();
        for (Complex complex : tmpComplexes) {
            for (String proteinID : complex.getProteins()) {
                ret.put(proteinID, complex.getName());
            }
        }
        return ret;
    }
}
