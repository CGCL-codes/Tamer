package org.dmd.features.extgwt.extended;

import java.util.TreeMap;
import org.dmd.dms.ClassDefinition;
import org.dmd.features.extgwt.generated.dmo.MvcViewDMO;
import org.dmd.features.extgwt.generated.dmw.MvcViewDMW;
import org.dmd.util.exceptions.DebugInfo;
import org.dmd.util.formatting.CodeFormatter;

public class MvcView extends MvcViewDMW {

    StringBuffer importDefs;

    StringBuffer classComments;

    StringBuffer localVariables;

    StringBuffer handleEventFunction;

    StringBuffer eventHandlers;

    StringBuffer dispatchedEvents;

    StringBuffer firedEvents;

    StringBuffer resourceAccessFunctions;

    TreeMap<String, String> uniqueResourceImports;

    String variableName;

    Boolean haveServerEvents;

    TreeMap<String, MvcServerEvent> serverEvents;

    StringBuffer serverEventHandlers;

    StringBuffer handleServerEventFunction;

    String additionalInterfaces;

    public MvcView() {
        super();
    }

    public MvcView(MvcViewDMO obj, ClassDefinition cd) {
        super(obj, cd);
    }

    public void initCodeGenInfo() {
        if (importDefs == null) {
            importDefs = new StringBuffer();
            classComments = new StringBuffer();
            localVariables = new StringBuffer();
            handleEventFunction = new StringBuffer();
            eventHandlers = new StringBuffer();
            serverEvents = new TreeMap<String, MvcServerEvent>();
            serverEventHandlers = new StringBuffer();
            handleServerEventFunction = new StringBuffer();
            additionalInterfaces = "";
            dispatchedEvents = new StringBuffer();
            firedEvents = new StringBuffer();
            resourceAccessFunctions = new StringBuffer();
            uniqueResourceImports = new TreeMap<String, String>();
            classComments.append("/**\n");
            CodeFormatter.dumpCodeComment(getDescription(), classComments, " * ");
            classComments.append(" * <P>\n");
            classComments.append(" * This code was auto-generated by the mvcgenerator utility and shouldn't be altered manually!\n");
            classComments.append(" * Generated from: " + DebugInfo.getWhereWeAreNow() + "\n");
            classComments.append(" */\n");
            initEventHandlers();
            initResourceAccessFunctions();
            initImportDefs();
            initServerEventInfo();
        }
    }

    void initServerEventInfo() {
        if (getHandlesServerEventHasValue()) {
            importDefs.append("import org.dmd.features.extgwt.client.ServerEventHandlerIF;\n");
            importDefs.append("import org.dmd.dmp.shared.generated.dmo.DMPEventDMO;\n");
            importDefs.append("import org.dmd.dmp.shared.generated.enums.DMPEventTypeEnum;\n");
            additionalInterfaces = " implements ServerEventHandlerIF";
            handleServerEventFunction.append("    public void handleServerEvent(DMPEventDMO event) {\n");
            boolean first = true;
            for (MvcServerEvent event : getHandlesServerEventIterable()) {
                if (first) {
                    handleServerEventFunction.append("        if (event.getSourceObjectClass().equals(\"" + event.getSourceObjectClass() + "\"))\n");
                    handleServerEventFunction.append("            handle" + event.getCamelCaseName() + "(event.getEventTypeDMP(),(" + event.getDMOClass() + ")event.getSourceObject());\n");
                    first = false;
                } else {
                    handleServerEventFunction.append("        else if (event.getSourceObjectClass().equals(\"" + event.getSourceObjectClass() + "\"))\n");
                    handleServerEventFunction.append("            handle" + event.getCamelCaseName() + "(event.getEventTypeDMP(),(" + event.getDMOClass() + ")event.getSourceObject());\n");
                }
                serverEventHandlers.append(event.getAbstractFunction());
                importDefs.append("import " + event.getEventDataType() + ";\n");
            }
            handleServerEventFunction.append("    }\n\n");
        }
    }

    public boolean usesServerEvents() {
        if (haveServerEvents == null) {
            if (getHandlesServerEventHasValue()) haveServerEvents = true; else haveServerEvents = false;
        }
        return (haveServerEvents);
    }

    public String getAdditionalInterfaces() {
        return (additionalInterfaces);
    }

    public String getHandleServerEventFunction() {
        return (handleServerEventFunction.toString());
    }

    public String getServerEventHandlers() {
        return (serverEventHandlers.toString());
    }

    public String getImportDefs() {
        return (importDefs.toString());
    }

    public String getLocalVariables() {
        return (localVariables.toString());
    }

    public String getHandleEventFunction() {
        return (handleEventFunction.toString());
    }

    public String getEventHandlers() {
        return (eventHandlers.toString());
    }

    public String getResourceAccessFunctions() {
        return (resourceAccessFunctions.toString());
    }

    /**
	 * Initializes the event handle functions.
	 */
    void initEventHandlers() {
        boolean first = true;
        String prefix = "if";
        if (getHandlesEventHasValue()) {
            handleEventFunction.append("    public void handleEvent(AppEvent event) {\n");
            handleEventFunction.append("        EventType type = event.getType();\n");
            for (MvcEvent event : getHandlesEventIterable()) {
                if (event.getName().equals("mvc.init.eventFramework")) {
                    eventHandlers.append("    /**\n");
                    eventHandlers.append("     * When we receive this event, we add ourselves to handle various server events.\n");
                    eventHandlers.append("     */\n");
                    eventHandlers.append("    protected void handleMvcInitEventFrameworkEvent(AppEvent event){\n");
                    for (MvcServerEvent se : getHandlesServerEventIterable()) {
                        eventHandlers.append("        getMvcServerEventController().addEventHandler(this,\"" + se.getSourceObjectClass() + "\");\n");
                    }
                    eventHandlers.append("    }\n\n");
                } else {
                    eventHandlers.append(event.getAbstractFunction() + "\n");
                }
                handleEventFunction.append("        " + prefix + " (type == myController." + event.getCamelCaseName() + ") {\n");
                handleEventFunction.append(event.getHandleLocalFunctionCall());
                handleEventFunction.append("        }\n");
                if (first) {
                    first = false;
                    prefix = "else if";
                }
                if (event.getUserDataType() != null) uniqueResourceImports.put(event.getUserDataType(), event.getUserDataType());
                if (event.getUserDataCollection() != null) uniqueResourceImports.put(event.getUserDataCollection(), event.getUserDataCollection());
            }
            handleEventFunction.append("    }\n\n");
        }
    }

    /**
	 * Initializes the resourceAccessFunctionand uniqueResourceImports
	 */
    void initResourceAccessFunctions() {
        for (MvcRegistryItem item : getUsesRegistryItemIterable()) {
            resourceAccessFunctions.append(item.getAccessFunction());
            uniqueResourceImports.put(item.getUserDataType(), item.getUserDataType());
            if (localVariables.length() == 0) localVariables.append("    // Resources\n");
            localVariables.append("    private " + item.getItemType() + " " + item.getVariableName() + ";\n");
        }
        for (MvcRegistryItem item : getCreatesRegistryItemIterable()) {
            resourceAccessFunctions.append(item.getAccessFunction());
            resourceAccessFunctions.append(item.getRegisterFunction());
            uniqueResourceImports.put(item.getUserDataType(), item.getUserDataType());
            if (localVariables.length() == 0) localVariables.append("    // Resources\n");
            localVariables.append("    protected " + item.getItemType() + " " + item.getVariableName() + ";\n");
        }
    }

    void initImportDefs() {
        importDefs.append("import com.extjs.gxt.ui.client.mvc.Controller;\n");
        if (eventHandlers.length() > 0) {
            importDefs.append("import com.extjs.gxt.ui.client.mvc.AppEvent;\n");
            importDefs.append("import com.extjs.gxt.ui.client.event.EventType;\n");
        }
        if (resourceAccessFunctions.length() > 0) importDefs.append("import com.extjs.gxt.ui.client.Registry;\n");
        for (String s : uniqueResourceImports.values()) {
            importDefs.append("import " + s + ";\n");
        }
    }

    public String getClassComments() {
        return (classComments.toString());
    }

    /**
	 * @return An abstract event handler for each of the events we handle.
	 */
    public String getEventHandlerFunctions() {
        return (eventHandlers.toString());
    }
}
