package com.pehrs.mailpost.util;

import java.text.*;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import java.util.logging.*;

/**
 * A JFrame that shows JDK1.4 Logger log messages.
 * @author <a href="mailto:matti.pehrs@home.se">Matti Pehrs</a>
 * @version $Id: LogWindow.java,v 1.1.1.1 2004/10/19 22:46:07 mattipehrs Exp $
 * @see java.util.loggin.Logger
 */
public class LogWindow extends javax.swing.JFrame {

    /** Creates new form LogWindow */
    public LogWindow() {
        super("MailPost Admin: Log");
        initComponents();
        setupLogging();
        setSize(400, 300);
        Utils.centerWindow(this);
    }

    public LogWindow(boolean doPopup) {
        super("MailPost Admin: Log");
        this.doPopup = doPopup;
        initComponents();
        setupLogging();
        setSize(400, 300);
        Utils.centerWindow(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        mbar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        closeMI = new javax.swing.JMenuItem();
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        jScrollPane1.setViewportView(text);
        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);
        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        closeMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        closeMI.setText("Close");
        closeMI.setToolTipText("Close Log Window");
        closeMI.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMIActionPerformed(evt);
            }
        });
        fileMenu.add(closeMI);
        mbar.add(fileMenu);
        setJMenuBar(mbar);
        pack();
    }

    private void closeMIActionPerformed(java.awt.event.ActionEvent evt) {
        setVisible(false);
    }

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {
        setVisible(false);
    }

    private void setupLogging() {
        LogHandler lh = new LogHandler();
        LogManager mgr = LogManager.getLogManager();
        for (Enumeration e = mgr.getLoggerNames(); e.hasMoreElements(); ) {
            String ln = (String) e.nextElement();
            Logger lgr = mgr.getLogger(ln);
            lgr.addHandler(lh);
        }
    }

    public void log(String str) {
        LogUpdater upd = new LogUpdater(str);
        SwingUtilities.invokeLater(upd);
    }

    public void log(LogRecord lr) {
        LogUpdater upd = null;
        if (lr.getLevel() == Level.FINEST) {
            upd = new LogUpdater(fmt.format(lr), false);
        } else {
            upd = new LogUpdater(fmt.format(lr));
        }
        SwingUtilities.invokeLater(upd);
    }

    public void println(String str) {
        LogUpdater upd = new LogUpdater(str, false);
        SwingUtilities.invokeLater(upd);
    }

    public void log(String str, Throwable thrown) {
        StringBuffer msg = new StringBuffer();
        StringWriter ss = new StringWriter();
        PrintWriter out = new PrintWriter(ss);
        thrown.printStackTrace(out);
        out.flush();
        msg.append(str);
        msg.append(":\n");
        msg.append(ss.toString());
        msg.append("\n");
        LogUpdater upd = new LogUpdater(msg.toString());
        SwingUtilities.invokeLater(upd);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new LogWindow().show();
    }

    /**
     * Getter for property doPopup.
     * @return Value of property doPopup.
     */
    public boolean isDoPopup() {
        return this.doPopup;
    }

    /**
     * Setter for property doPopup.
     * @param doPopup New value of property doPopup.
     */
    public void setDoPopup(boolean doPopup) {
        this.doPopup = doPopup;
    }

    private javax.swing.JMenuItem closeMI;

    private javax.swing.JMenu fileMenu;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JMenuBar mbar;

    private javax.swing.JTextArea text;

    LogFormatter fmt = new LogFormatter();

    /**
     * Holds value of property doPopup.
     */
    private boolean doPopup = true;

    class LogUpdater implements Runnable {

        boolean doErr = true;

        String str = null;

        public LogUpdater(String s) {
            str = s;
        }

        public LogUpdater(String s, boolean doErr) {
            this.doErr = doErr;
            this.str = s;
        }

        public void run() {
            text.append(str);
            if (doErr && doPopup) {
                LogWindow.this.show();
            }
        }
    }

    class LoggerThread extends Thread {

        boolean doErr = true;

        public LoggerThread(boolean doErr) {
            this.doErr = doErr;
        }

        public void run() {
            Exception lastEx = null;
            while (1 == 1) {
                try {
                    PipedInputStream inpipe = new PipedInputStream();
                    BufferedReader in = new BufferedReader(new InputStreamReader(inpipe));
                    PrintStream out = new PrintStream(new PipedOutputStream(inpipe));
                    if (doErr) {
                        System.setErr(out);
                    } else {
                        System.setOut(out);
                    }
                    if (lastEx != null) {
                        lastEx = null;
                    }
                    while (1 == 1) {
                        String line = in.readLine();
                        if (doErr) {
                            log("err: " + line);
                        } else {
                            println(line);
                        }
                    }
                } catch (Exception ex) {
                    lastEx = ex;
                }
            }
        }
    }

    class LogHandler extends Handler {

        public void close() throws SecurityException {
        }

        public void flush() {
        }

        public void publish(LogRecord record) {
            log(record);
        }
    }
}
