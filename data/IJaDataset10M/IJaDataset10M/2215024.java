package org.gocha.gef.gui.property;

import java.util.ArrayList;
import org.gocha.gef.*;
import org.gocha.gef.gui.DefaultMessages;

/**
 * Редактор свойств Glyph
 * @author  GoCha
 */
public class GlyphEditor extends javax.swing.JPanel implements PropertyEditor {

    /** 
     * Конструктор
     */
    public GlyphEditor() {
        initComponents();
        jlLeft.setText(DefaultMessages.get().leftCoord());
        jlTop.setText(DefaultMessages.get().topCoord());
        jlScaleX.setText(DefaultMessages.get().scaleX());
        jlScaleY.setText(DefaultMessages.get().scaleY());
        jlAngle.setText(DefaultMessages.get().angle());
        jbSetLeft.setText(DefaultMessages.get().apply());
        jbSetTop.setText(DefaultMessages.get().apply());
        jbSetScaleX.setText(DefaultMessages.get().apply());
        jbSetScaleY.setText(DefaultMessages.get().apply());
        jbSetAngle.setText(DefaultMessages.get().apply());
        setName(DefaultMessages.get().glyphEditorTitle());
    }

    private ArrayList<Glyph> glyphs = new ArrayList<Glyph>();

    @Override
    public void select(Iterable objects) {
        glyphs.clear();
        if (objects == null) return;
        for (Object obj : objects) {
            if (obj instanceof Glyph) {
                glyphs.add((Glyph) obj);
            }
        }
        if (glyphs.size() == 1) {
            Glyph glyph = glyphs.get(0);
            jtfLeft.setText(Double.toString(glyph.getTransform().getLeft()));
            jtfTop.setText(Double.toString(glyph.getTransform().getTop()));
            jtfScaleX.setText(Double.toString(glyph.getTransform().getScaleX()));
            jtfScaleY.setText(Double.toString(glyph.getTransform().getScaleY()));
            jtfAngle.setText(Double.toString(glyph.getTransform().getAngle()));
        }
    }

    private void setLeft() {
        try {
            double left = Double.parseDouble(jtfLeft.getText());
            for (Glyph g : glyphs) {
                g.getTransform().setLeft(left);
            }
        } catch (NumberFormatException ex) {
        }
    }

    private void setTop() {
        try {
            double top = Double.parseDouble(jtfTop.getText());
            for (Glyph g : glyphs) {
                g.getTransform().setTop(top);
            }
        } catch (NumberFormatException ex) {
        }
    }

    private void setScaleX() {
        try {
            double scale_x = Double.parseDouble(jtfScaleX.getText());
            for (Glyph g : glyphs) {
                g.getTransform().setScaleX(scale_x);
            }
        } catch (NumberFormatException ex) {
        }
    }

    private void setScaleY() {
        try {
            double scale_y = Double.parseDouble(jtfScaleY.getText());
            for (Glyph g : glyphs) {
                g.getTransform().setScaleY(scale_y);
            }
        } catch (NumberFormatException ex) {
        }
    }

    private void setAngle() {
        try {
            double angle = Double.parseDouble(jtfAngle.getText());
            for (Glyph g : glyphs) {
                g.getTransform().setAngle(angle);
            }
        } catch (NumberFormatException ex) {
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        jlLeft = new javax.swing.JLabel();
        jtfLeft = new javax.swing.JTextField();
        jbSetLeft = new javax.swing.JButton();
        jlTop = new javax.swing.JLabel();
        jtfTop = new javax.swing.JTextField();
        jbSetTop = new javax.swing.JButton();
        jlScaleX = new javax.swing.JLabel();
        jtfScaleX = new javax.swing.JTextField();
        jbSetScaleX = new javax.swing.JButton();
        jlScaleY = new javax.swing.JLabel();
        jtfScaleY = new javax.swing.JTextField();
        jbSetScaleY = new javax.swing.JButton();
        jlAngle = new javax.swing.JLabel();
        jtfAngle = new javax.swing.JTextField();
        jbSetAngle = new javax.swing.JButton();
        setLayout(new java.awt.GridBagLayout());
        jlLeft.setText("Left");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jlLeft, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(jtfLeft, gridBagConstraints);
        jbSetLeft.setText("Set");
        jbSetLeft.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSetLeftActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(jbSetLeft, gridBagConstraints);
        jlTop.setText("Top");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jlTop, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(jtfTop, gridBagConstraints);
        jbSetTop.setText("Set");
        jbSetTop.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSetTopActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(jbSetTop, gridBagConstraints);
        jlScaleX.setText("Scale X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jlScaleX, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(jtfScaleX, gridBagConstraints);
        jbSetScaleX.setText("Set");
        jbSetScaleX.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSetScaleXActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(jbSetScaleX, gridBagConstraints);
        jlScaleY.setText("Scale Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jlScaleY, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(jtfScaleY, gridBagConstraints);
        jbSetScaleY.setText("Set");
        jbSetScaleY.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSetScaleYActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(jbSetScaleY, gridBagConstraints);
        jlAngle.setText("Angle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jlAngle, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(jtfAngle, gridBagConstraints);
        jbSetAngle.setText("Set");
        jbSetAngle.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSetAngleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(jbSetAngle, gridBagConstraints);
    }

    private void jbSetLeftActionPerformed(java.awt.event.ActionEvent evt) {
        setLeft();
    }

    private void jbSetTopActionPerformed(java.awt.event.ActionEvent evt) {
        setTop();
    }

    private void jbSetScaleXActionPerformed(java.awt.event.ActionEvent evt) {
        setScaleX();
    }

    private void jbSetScaleYActionPerformed(java.awt.event.ActionEvent evt) {
        setScaleY();
    }

    private void jbSetAngleActionPerformed(java.awt.event.ActionEvent evt) {
        setAngle();
    }

    private javax.swing.JButton jbSetAngle;

    private javax.swing.JButton jbSetLeft;

    private javax.swing.JButton jbSetScaleX;

    private javax.swing.JButton jbSetScaleY;

    private javax.swing.JButton jbSetTop;

    private javax.swing.JLabel jlAngle;

    private javax.swing.JLabel jlLeft;

    private javax.swing.JLabel jlScaleX;

    private javax.swing.JLabel jlScaleY;

    private javax.swing.JLabel jlTop;

    private javax.swing.JTextField jtfAngle;

    private javax.swing.JTextField jtfLeft;

    private javax.swing.JTextField jtfScaleX;

    private javax.swing.JTextField jtfScaleY;

    private javax.swing.JTextField jtfTop;
}
