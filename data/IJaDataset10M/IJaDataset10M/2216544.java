package rpr2_d18.enumeratedDataRepresentations;

import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.ByteWrapper;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.RtiFactoryFactory;
import hla.rti1516e.encoding.EncoderFactory;
import hla.rti1516e.encoding.HLAinteger32BE;

/**
 * JAVADOC_COMMENTS
 * name notes = 10
 * semantics  = -NULL- 
 * @author : auto generated by DRDC FOM Generator
 */
public class MinefieldPaintSchemeEnum32 implements DataElement {

    private HLAinteger32BE value;

    private static EncoderFactory ef;

    public static final HLAinteger32BE Other = ef.createHLAinteger32BE((int) 0);

    public static final HLAinteger32BE Standard = ef.createHLAinteger32BE((int) 1);

    public static final HLAinteger32BE CamouflageDesert = ef.createHLAinteger32BE((int) 2);

    public static final HLAinteger32BE CamouflageJungle = ef.createHLAinteger32BE((int) 3);

    public static final HLAinteger32BE CamouflageSnow = ef.createHLAinteger32BE((int) 4);

    public static final HLAinteger32BE CamouflageGravel = ef.createHLAinteger32BE((int) 5);

    public static final HLAinteger32BE CamouflagePavement = ef.createHLAinteger32BE((int) 6);

    public static final HLAinteger32BE CamouflageSand = ef.createHLAinteger32BE((int) 7);

    public static final HLAinteger32BE NaturalWood = ef.createHLAinteger32BE((int) 8);

    public static final HLAinteger32BE Clear = ef.createHLAinteger32BE((int) 9);

    public static final HLAinteger32BE Red = ef.createHLAinteger32BE((int) 10);

    public static final HLAinteger32BE Blue = ef.createHLAinteger32BE((int) 11);

    public static final HLAinteger32BE Green = ef.createHLAinteger32BE((int) 12);

    public static final HLAinteger32BE Olive = ef.createHLAinteger32BE((int) 13);

    public static final HLAinteger32BE White = ef.createHLAinteger32BE((int) 14);

    public static final HLAinteger32BE Tan = ef.createHLAinteger32BE((int) 15);

    public static final HLAinteger32BE Black = ef.createHLAinteger32BE((int) 16);

    public static final HLAinteger32BE Yellow = ef.createHLAinteger32BE((int) 17);

    public static final HLAinteger32BE Brown = ef.createHLAinteger32BE((int) 18);

    /**
   * Empty constructor
   */
    public MinefieldPaintSchemeEnum32() throws RTIinternalError {
        ef = RtiFactoryFactory.getRtiFactory().getEncoderFactory();
    }

    /**
   * Returns this data value element
   * 
   * @return : native value type
   */
    public HLAinteger32BE get() {
        return value;
    }

    /**
   * Set the value from a native java type
   * 
   * @param newValue : the value to set it to
   */
    public void set(HLAinteger32BE newValue) {
        value = newValue;
    }

    /**
   * Decodes this element from an array of bytes
   * 
   * @param bytes : array of bytes 
   */
    public void decode(byte[] newValue) throws DecoderException {
        value.decode(newValue);
    }

    /**
   * Decodes this element from a ByteWrapper object
   * 
   * @param byteWrapper : organized array of bytes 
   */
    public void decode(ByteWrapper byteWrapper) throws DecoderException {
        value.decode(byteWrapper);
    }

    /**
   * Encodes this element into the specified ByteWrapper.
   * 
   * @param byteWrapper : organized byte array containing native java value
   */
    public void encode(ByteWrapper byteWrapper) {
        value.encode(byteWrapper);
    }

    /**
   * Returns the size in bytes of this element's encoding.
   * 
   * @return : length in bytes
   */
    public int getEncodedLength() {
        return value.getEncodedLength();
    }

    /**
   * Returns the octet boundary of this element.
   *  
   * @return : octet boundary position
   */
    public int getOctetBoundary() {
        return value.getOctetBoundary();
    }

    /**
   * Copies the value into an array of bytes
   * 
   * @return : array of bytes
   */
    public byte[] toByteArray() {
        return value.toByteArray();
    }
}
