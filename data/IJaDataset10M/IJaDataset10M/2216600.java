package mips.model;

import java.awt.Dimension;
import java.awt.Point;
import mips.util.Signal;
import view.modeling.ViewableAtomic;
import view.modeling.ViewableComponent;
import view.modeling.ViewableDigraph;

public class MCPEH_CtrlUnit extends ViewableDigraph {

    public MCPEH_CtrlUnit() {
        super("ControlUnit");
        String[] inports = { "Opcode", "Funct", "C", "Zero", "Overflow" };
        String[] outports = { "RegDst", "RegWrite", "ALUSrcA", "ALUSrcB", "ALUOp", "PCSource", "PCWrite", "IorD", "MemRead", "MemWrite", "MemtoReg", "IRWrite", "CauseWrite", "EPCWrite", "IntCause" };
        for (int i = 0; i < inports.length; i++) {
            addInport(inports[i]);
        }
        for (int i = 0; i < outports.length; i++) {
            addOutport(outports[i]);
        }
        ViewableAtomic control = new Control_MCP("Control", true);
        ViewableAtomic aluControl = new ALUControl("ALUControl");
        ViewableAtomic and = new And("And", 2);
        ViewableAtomic or = new Or("Or", 2);
        add(control);
        add(aluControl);
        add(and);
        add(or);
        addCoupling(this, "Opcode", control, "In");
        addCoupling(this, "C", control, "C");
        addCoupling(this, "Overflow", control, "Overflow");
        addCoupling(this, "Funct", aluControl, "Inst");
        addCoupling(this, "Zero", and, "In0");
        addCoupling(control, "ALUOp", aluControl, "ALUOP");
        addCoupling(control, "PCWriteCond", and, "In1");
        addCoupling(control, "PCWrite", or, "In1");
        addCoupling(and, "Out", or, "In0");
        String port;
        for (int i = 0; i < outports.length; i++) {
            port = outports[i];
            if (!port.equals("ALUOp") && !port.equals("PCWrite")) {
                addCoupling(control, port, this, port);
            }
        }
        addCoupling(aluControl, "Out", this, "ALUOp");
        addCoupling(or, "Out", this, "PCWrite");
        addTestInput("Opcode", new Signal("000000"), 0);
        addTestInput("Opcode", new Signal("100011"), 0);
        addTestInput("Opcode", new Signal("101011"), 0);
        addTestInput("Opcode", new Signal("000100"), 0);
        addTestInput("Opcode", new Signal("000010"), 0);
        addTestInput("Opcode", new Signal("110010"), 0);
        addTestInput("Funct", new Signal("100000"), 0);
        addTestInput("Funct", new Signal("100010"), 0);
        addTestInput("Funct", new Signal("100100"), 0);
        addTestInput("Funct", new Signal("100101"), 0);
        addTestInput("Funct", new Signal("101010"), 0);
        addTestInput("C", new Signal("0"), 100);
        addTestInput("C", new Signal("1"), 100);
        addTestInput("Zero", new Signal("0"), 0);
        addTestInput("Zero", new Signal("1"), 0);
        addTestInput("Overflow", new Signal("0"), 0);
        addTestInput("Overflow", new Signal("1"), 0);
    }

    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView() {
        preferredSize = new Dimension(377, 377);
        ((ViewableComponent) withName("Control")).setPreferredLocation(new Point(-16, 75));
        ((ViewableComponent) withName("And")).setPreferredLocation(new Point(9, 318));
        ((ViewableComponent) withName("Or")).setPreferredLocation(new Point(9, 261));
        ((ViewableComponent) withName("ALUControl")).setPreferredLocation(new Point(-8, 18));
    }
}
