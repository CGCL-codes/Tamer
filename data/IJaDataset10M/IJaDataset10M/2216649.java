package org.stjs.generator;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Properties;
import org.stjs.generator.utils.ClassUtils;
import org.stjs.generator.utils.PreConditions;
import com.google.common.io.Closeables;

/**
 * This class represents a class and the corresponding generated javascript file. The information about dependencies and
 * sources are stored at generation time in a properties file that has as name [class-name].stjs (and it's packed along
 * with the source file in the same folder). Thus, if a STJS library is built, it will be delivered with all this
 * information, as the original Java code will no longer be available with the library.
 * 
 * @author acraciun
 * 
 */
public class STJSClass implements ClassWithJavascript {

    private static final String DEPENDENCIES_PROP = "dependencies";

    private static final String GENERATED_JS_FILE_PROP = "js";

    private final Properties properties;

    private final DependencyResolver dependencyResolver;

    private List<String> dependencies = Collections.emptyList();

    private List<ClassWithJavascript> directDependencies = null;

    private URI generatedJavascriptFile;

    private final String className;

    private final File targetFolder;

    /**
	 * constructor for storage
	 */
    public STJSClass(DependencyResolver dependencyResolver, File targetFolder, String className) {
        PreConditions.checkNotNull(dependencyResolver);
        PreConditions.checkNotNull(targetFolder);
        PreConditions.checkNotNull(className);
        this.targetFolder = targetFolder;
        this.className = className;
        this.properties = new Properties();
        this.dependencyResolver = dependencyResolver;
    }

    /**
	 * constructor for loading
	 * 
	 * @param builtProjectClassLoader
	 * @param className
	 */
    public STJSClass(DependencyResolver dependencyResolver, ClassLoader classLoader, String className) {
        PreConditions.checkNotNull(dependencyResolver);
        PreConditions.checkNotNull(classLoader);
        PreConditions.checkNotNull(className);
        this.className = className;
        this.targetFolder = null;
        this.dependencyResolver = dependencyResolver;
        properties = new Properties();
        InputStream inputStream = null;
        try {
            inputStream = classLoader.getResourceAsStream(ClassUtils.getPropertiesFileName(className));
            if (inputStream != null) {
                properties.load(inputStream);
            } else {
                System.err.println("CANNOT find:" + ClassUtils.getPropertiesFileName(className) + " clazz:" + classLoader.getResource(ClassUtils.getPropertiesFileName(className)));
            }
        } catch (IOException e) {
        } finally {
            Closeables.closeQuietly(inputStream);
        }
        String depProp = properties.getProperty(DEPENDENCIES_PROP);
        if (depProp != null) {
            depProp = depProp.trim();
            if (depProp.length() > 2) {
                String deps[] = depProp.substring(1, depProp.length() - 1).split(",");
                dependencies = Arrays.asList(deps);
            }
        }
        String jsFile = properties.getProperty(GENERATED_JS_FILE_PROP);
        if (jsFile != null) {
            try {
                generatedJavascriptFile = new URI(jsFile);
            } catch (URISyntaxException e) {
                System.err.println("Could not load URI from " + jsFile);
            }
        }
    }

    private File getStjsPropertiesFile() {
        File propFile = new File(targetFolder, ClassUtils.getPropertiesFileName(className));
        propFile.getParentFile().mkdirs();
        return propFile;
    }

    public void store() {
        if (targetFolder == null) {
            throw new IllegalStateException("This properties file was open for read only");
        }
        FileOutputStream propertiesWriter = null;
        try {
            propertiesWriter = new FileOutputStream(getStjsPropertiesFile());
            properties.store(propertiesWriter, "Generated by STJS ");
        } catch (IOException e1) {
            throw new RuntimeException("Could not open properties file " + getStjsPropertiesFile() + ":" + e1, e1);
        } finally {
            try {
                if (propertiesWriter != null) {
                    propertiesWriter.close();
                }
            } catch (IOException e) {
            }
        }
    }

    public void setDependencies(Collection<String> dependencies) {
        this.dependencies = new ArrayList<String>(dependencies);
        if (dependencies != null) {
            properties.put(DEPENDENCIES_PROP, dependencies.toString());
        } else {
            properties.remove(DEPENDENCIES_PROP);
        }
    }

    public void setGeneratedJavascriptFile(URI generatedJavascriptFile) {
        this.generatedJavascriptFile = generatedJavascriptFile;
        if (generatedJavascriptFile != null) {
            properties.put(GENERATED_JS_FILE_PROP, generatedJavascriptFile.toString());
        } else {
            properties.remove(GENERATED_JS_FILE_PROP);
        }
    }

    @Override
    public String getClassName() {
        return className;
    }

    @Override
    public List<URI> getJavascriptFiles() {
        if (generatedJavascriptFile == null) {
            return Collections.emptyList();
        }
        return Collections.singletonList(generatedJavascriptFile);
    }

    @Override
    public List<ClassWithJavascript> getDirectDependencies() {
        if (directDependencies == null) {
            directDependencies = new ArrayList<ClassWithJavascript>(dependencies.size());
            for (String className : dependencies) {
                directDependencies.add(dependencyResolver.resolve(className.trim()));
            }
        }
        return directDependencies;
    }

    @Override
    public String toString() {
        return "STJSClass [className=" + className + "]";
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + className.hashCode();
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        STJSClass other = (STJSClass) obj;
        return className.equals(other.className);
    }
}
