package com.chauhai.sequencelogvisualizer.datafile;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.chauhai.sequencelogvisualizer.datafile.demo.DataFileGenerator;
import com.chauhai.sequencelogvisualizer.datafile.displaydata.DisplayData;
import com.chauhai.sequencelogvisualizer.datafile.displaydata.Message;
import com.chauhai.sequencelogvisualizer.datafile.displaydata.MessageData;
import com.chauhai.sequencelogvisualizer.datafile.displaydata.TargetObjectData;
import com.chauhai.sequencelogvisualizer.display.displaydata.IDisplayData;
import com.chauhai.sequencelogvisualizer.display.displaydata.IMessageData;
import com.chauhai.sequencelogvisualizer.display.displaydata.ITargetObjectData;

/**
 * Class LogFileLoader.
 * Process data file generated by
 * com.chauhai.sequencelogvisualizer.datafile.demo.DataFileGenerator
 * (which just create a random data for testing)
 * to get messages to be showed by SequenceLogVisualizer.
 * 
 * This class can be used as base class to create another
 * log file loader by overriding the method processLine().
 */
public class LogFileLoader {

    protected Message currentMessage;

    protected IDisplayData displayData;

    protected List<ITargetObjectData> targetObjectData;

    protected List<IMessageData> messageData;

    protected Map<String, ITargetObjectData> targetObjectDataMap;

    protected File file;

    public IDisplayData getDisplayData() {
        return displayData;
    }

    /**
	 * Constructor.
	 * @param file Log file to be processed.
	 * @throws Exception 
	 */
    public LogFileLoader(File file) {
        this.file = file;
    }

    /**
	 * Initialize LogFileLoader before loading file.
	 */
    private void initialize() {
        targetObjectData = new ArrayList<ITargetObjectData>();
        messageData = new ArrayList<IMessageData>();
        targetObjectDataMap = new HashMap<String, ITargetObjectData>();
        initializeMembers();
    }

    /**
	 * Subclass can override this method to initialize member variables,
	 * example specifying some initial TargetObjectData.
	 */
    protected void initializeMembers() {
        currentMessage = new Message();
    }

    /**
	 * Load file to generate DisplayData.
	 * 
	 * @param file
	 * @throws Exception
	 */
    public void load() throws Exception {
        initialize();
        readFile(file);
        displayData = new DisplayData(targetObjectData.toArray(new ITargetObjectData[0]), messageData.toArray(new IMessageData[0]));
    }

    /**
	 * Read file and parse data to get DisplayData.
	 * 
	 * @param file
	 * @throws Exception 
	 */
    private void readFile(File file) throws Exception {
        BufferedReader input = new BufferedReader(new FileReader(file));
        try {
            String line = null;
            while ((line = input.readLine()) != null) {
                processLine(line);
            }
        } catch (IOException e) {
            throw e;
        } finally {
            input.close();
        }
    }

    /**
	 * Process a line of the data file.
	 * Subclass should override this method to process data of new log file type.
	 * @param line
	 * @throws Exception
	 */
    protected void processLine(String line) throws Exception {
        Message message = createMessage(line);
        if (message != null) {
            if (currentMessage.getName() != null) {
                messageData.add(generateMessageData(currentMessage));
            }
            currentMessage = message;
        } else {
            currentMessage.appendInfo(line);
        }
    }

    /**
	 * Try to create a message from a log line.
	 * @param line
	 * @return a message if this line is the start log line of a message, null otherwise.
	 * @throws Exception
	 */
    protected Message createMessage(String line) throws Exception {
        Message message = DataFileGenerator.parseLine(line);
        return message;
    }

    /**
	 * Create a MessageData object with specified information.
	 * @param name
	 * @param infoTitle
	 * @param info
	 * @param senderName
	 * @param receiverName
	 * @return
	 */
    protected IMessageData generateMessageData(Message message) {
        MessageData messageData = new MessageData(message.getName(), generateTargetObjectData(message.getSenderName()), generateTargetObjectData(message.getReceiverName()));
        messageData.setInfoTitle(message.getInfoTitle());
        messageData.setInfo(message.getInfo());
        return messageData;
    }

    /**
	 * Return targetObjectData specified by name.
	 * If targetObjectData does not exist, create it.
	 * 
	 * @param name The name of targetObjectData.
	 * @return
	 */
    protected ITargetObjectData generateTargetObjectData(String name) {
        ITargetObjectData tod;
        if (!targetObjectDataMap.containsKey(name)) {
            tod = new TargetObjectData(name);
            targetObjectDataMap.put(name, tod);
            targetObjectData.add(tod);
        } else {
            tod = targetObjectDataMap.get(name);
        }
        return tod;
    }
}
