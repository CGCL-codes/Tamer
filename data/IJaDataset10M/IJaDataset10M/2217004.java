package org.dcm4chee.xero.test;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import org.antlr.stringtemplate.StringTemplate;
import org.antlr.stringtemplate.StringTemplateGroup;
import org.antlr.stringtemplate.servlet.StringSafeRenderer;
import org.dcm4chee.xero.metadata.MetaDataBean;
import org.dcm4chee.xero.metadata.access.MapWithDefaults;
import org.dcm4chee.xero.template.AutoStringTemplateGroup;
import org.dcm4chee.xero.util.StringUtil;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.RhinoException;
import org.mozilla.javascript.ScriptableObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class creates javascript automated tests from the template model, and
 * any provided data model to test from. It is separated out as a separate class
 * to allow modifications and different sets of tests to be run.
 * 
 * @author bwallace
 * 
 */
public class JSTemplate {

    static final Logger log = LoggerFactory.getLogger(JSTemplate.class);

    String[] groups;

    MetaDataBean mdbModel;

    Map<String, Object> model;

    StringTemplateGroup stg;

    /** Create a JSTemplate on the given groups, no model. */
    public JSTemplate(String... groups) {
        this.groups = groups;
        assert groups.length > 0;
        stg = new AutoStringTemplateGroup(groups);
        stg.setAttributeRenderers(StringSafeRenderer.JS_RENDERERS);
    }

    /** Create a JSTemplate on the given data model, and given groups */
    public JSTemplate(MetaDataBean mdbModel, String... groups) {
        this(groups);
        this.mdbModel = mdbModel;
    }

    public void runTest(String jsName) {
        runTest(jsName, false);
    }

    /** Gets the data model to use when templating to create the javascript */
    @SuppressWarnings("unchecked")
    public Map<String, Object> getModel() {
        if (mdbModel != null) {
            log.debug("Found a non-null mdb to create the model {}", mdbModel.getPath());
            Map<String, Object> ret = (Map<String, Object>) mdbModel.getValue();
            if (ret == null) return new MapWithDefaults(mdbModel);
            return ret;
        }
        log.info("No mdb model found, returning {}", model);
        return model;
    }

    /**
    * Runs the named JavaScript test suite, as generated by StringTemplate -
    * loads the base js classes, the Xero model, and then the named test.
    * 
    * @param suite of tests to run.
    */
    public void runTest(String suite, boolean verbose) {
        String js = generateTest(suite);
        if (js.indexOf(suite + ".runUnitTests") == -1) {
            js = js + "\n" + suite + ".runUnitTests();\n";
        }
        runJSTest(js, verbose);
    }

    /** 
    * Runs a specific JavaScript test
    */
    public void runTest(String suite, String test, boolean verbose) {
        String js = generateTest(suite);
        if (js.indexOf(suite + ".runUnitTests") >= 0) throw new IllegalArgumentException("Can't run a single test if all tests are run automatically.");
        js = js + "\n" + suite + ".runUnitTest(\"" + test + "\");\n";
        runJSTest(js, verbose);
    }

    /** 
    * Replace runTest with this version in order to debug your tests. 
    * Executes the Rhino debugger on the given test - the test will likely pass, as this
    * just executes the rhino.cmd batch file on the test script, not waiting to
    * see if it succeeds or fails.  Requires the rhino.cmd and cmd.exe to be 
    * available in the path, and to launch the debugger.   That in turn requires
    * the debugger to be included in the Rhino run-time/jar file - see the Mozilla
    * site for the rhino downloads.
    * @throws IOException 
    */
    public void debugTest(String suite, String test, boolean verbose) throws IOException {
        String js = generateTest(suite);
        if (js.indexOf(suite + ".runUnitTests") >= 0) throw new IllegalArgumentException("Can't run a single test if all tests are run automatically.");
        js = js + "\n" + suite + ".runUnitTest(\"" + test + "\");\n";
        File f = File.createTempFile(suite, ".js");
        FileWriter fw = new FileWriter(f);
        fw.write(js);
        fw.close();
        log.info("Wrote js test file to " + f.getAbsolutePath());
        Runtime r = Runtime.getRuntime();
        r.exec(new String[] { "cmd.exe", "/C", "rhino.cmd", f.getAbsolutePath() });
    }

    /** Generates a given test code */
    public String generateTest(String suite) {
        StringTemplate st;
        Map<String, Object> useModel = this.getModel();
        if (useModel != null) st = stg.getInstanceOf(suite, useModel); else st = stg.getInstanceOf(suite);
        String js = st.toString();
        return js;
    }

    /** Runs the provided javascript */
    public void runJSTest(String js, boolean verbose) {
        ContextFactory cf = new ContextFactory();
        Context cx = cf.enterContext();
        ScriptableObject scope = cx.initStandardObjects();
        if (verbose) {
            log.info("Generated script {}", js);
        }
        try {
            cx.evaluateString(scope, js, "<cmd>", 1, null);
        } catch (RhinoException e) {
            log.warn("Caught exception {} on line {}", e.getMessage(), e.lineNumber());
            int line = e.lineNumber();
            String[] splits = StringUtil.split(js, '\n', true);
            log.warn("Number of lines " + splits.length);
            for (int i = Math.max(0, line - 5), n = Math.min(splits.length - 1, line + 5); i < n; i++) {
                log.info("{}: {}", i + 1, splits[i]);
            }
            assert false;
        }
    }
}
