package lprms.panel;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;
import lprms.LPRMSApp;
import lprms.obj.CheckData;
import lprms.sql.SQL_Library;
import org.jdesktop.application.Task;
import org.jdesktop.application.TaskService;

/**
 *
 * @author Sarah
 */
public class Panel_UserCheckin extends Panel {

    /** Creates new form Panel_Checkin */
    public Panel_UserCheckin() {
        data = new DefaultTableModel(COLS, 0) {

            @Override
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        dataView = new javax.swing.JTable();
        info = new javax.swing.JLabel();
        setName("Form");
        jScrollPane1.setName("jScrollPane1");
        dataView.setModel(data);
        dataView.setName("dataView");
        jScrollPane1.setViewportView(dataView);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(lprms.LPRMSApp.class).getContext().getResourceMap(Panel_UserCheckin.class);
        info.setText(resourceMap.getString("info.text"));
        info.setName("info");
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE).addComponent(info, javax.swing.GroupLayout.Alignment.TRAILING)).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(info)));
    }

    private javax.swing.JTable dataView;

    private javax.swing.JLabel info;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.table.DefaultTableModel data;

    private class RefreshTask extends Task {

        RefreshTask() {
            super(LPRMSApp.getApplication());
        }

        @SuppressWarnings("unchecked")
        @Override
        protected Void doInBackground() {
            setMessage("Refreshing Entries");
            data.setRowCount(0);
            data.setDataVector(null, COLS);
            SQL_Library.loadCheckData();
            ArrayList<CheckData> cdata = SQL_Library.getCheckData();
            int in = 0;
            for (int i = cdata.size() - 1; i >= 0; i--) {
                data.addRow(cdata.get(i).getCheckDataInfo());
                this.setProgress(cdata.size() - 1 - i, 0, cdata.size());
                if (cdata.get(i).isIn()) in++;
            }
            info.setText("Status: (" + in + "/" + SQL_Library.getUsers().size() + ")");
            return null;
        }

        @Override
        protected void finished() {
            setMessage("Done");
        }
    }

    public void refresh() {
        RefreshTask task = new RefreshTask();
        TaskService ts = LPRMSApp.getInstance().getContext().getTaskService();
        ts.execute(task);
    }

    public void processInput(String input) {
        if (input.length() != 6) return;
        int uid = 0;
        try {
            uid = Integer.parseInt(input);
        } catch (NumberFormatException e) {
            System.err.println("Invalid ID!");
        }
        if (uid != 0) {
            SQL_Library.toggle(uid);
            refresh();
        }
    }

    public void scrollToVisible(int rowIndex) {
        if (!(dataView.getParent() instanceof JViewport)) {
            return;
        }
        JViewport viewport = (JViewport) dataView.getParent();
        Rectangle rect = dataView.getCellRect(rowIndex, 0, true);
        Point pt = viewport.getViewPosition();
        rect.setLocation(rect.x - pt.x, rect.y - pt.y);
        viewport.scrollRectToVisible(rect);
    }

    public static final String[] COLS = { "ID", "Username", "Check-in Time", "Check-out Time", "Duration (min)" };
}
