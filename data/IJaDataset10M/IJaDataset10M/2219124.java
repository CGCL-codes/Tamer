package compiler;

import java_cup.runtime.*;
import java.io.IOException;
import compiler.table.MySymbol;
import compiler.KualaSym;
import static compiler.KualaSym.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/01/10 11:24 from the specification file
 * <tt>/home/eduardo/Área de Trabalho/Kuala/src/compiler/kuala.lex</tt>
 */
final class KualaLex implements java_cup.runtime.Scanner {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;

    /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
    private static final int ZZ_LEXSTATE[] = { 0, 0 };

    /** 
   * Translates characters to character classes
   */
    private static final String ZZ_CMAP_PACKED = "\11\0\1\0\1\5\1\0\1\0\1\4\22\0\1\0\1\42\3\0" + "\1\51\1\37\1\0\1\54\1\55\1\47\1\45\1\61\1\46\1\0" + "\1\50\1\2\7\10\2\6\1\11\1\60\1\43\1\41\1\44\2\0" + "\32\1\1\56\1\0\1\57\1\0\1\1\1\0\1\17\1\3\1\15" + "\1\25\1\13\1\24\1\1\1\34\1\21\1\1\1\36\1\16\1\26" + "\1\12\1\31\1\27\1\1\1\23\1\20\1\22\1\30\1\32\1\14" + "\1\7\1\33\1\35\1\52\1\40\1\53ﾂ\0";

    /** 
   * Translates characters to character classes
   */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /** 
   * Translates DFA states to action switch labels.
   */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\1\2\1\3\1\2\1\1\1\3\1\4" + "\15\2\2\1\1\5\1\6\1\7\1\10\1\11\1\12" + "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22" + "\1\23\1\24\1\25\1\26\1\0\1\2\2\27\12\2" + "\1\30\1\31\5\2\1\32\3\2\1\33\1\34\1\35" + "\1\36\1\37\1\40\1\41\1\42\1\43\1\2\1\44" + "\17\2\1\45\6\2\1\46\1\47\11\2\1\50\7\2" + "\1\51\1\2\1\52\1\53\10\2\1\54\10\2\1\55" + "\1\56\3\2\1\57\3\2\1\60\1\61\1\62\5\2" + "\1\63\1\64\1\2\1\65\1\66\5\2\1\67\1\2" + "\1\70\1\2\1\71\1\2\1\72";

    private static int[] zzUnpackAction() {
        int[] result = new int[173];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** 
   * Translates a state to a row index in the transition table
   */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\62\0\144\0\226\0\310\0\372\0Ĭ\0Ş" + "\0Ɛ\0ǂ\0Ǵ\0Ȧ\0ɘ\0ʊ\0ʼ\0ˮ" + "\0̠\0͒\0΄\0ζ\0Ϩ\0К\0ь\0Ѿ" + "\0Ұ\0Ӣ\0Ԕ\0Ն\0ո\0\62\0\62\0\62" + "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\62" + "\0֪\0ל\0؎\0ـ\0\62\0ٲ\0ڤ\0ۖ" + "\0܈\0ܺ\0ݬ\0ޞ\0ߐ\0ࠂ\0࠴\0ࡦ" + "\0\144\0࢘\0࣊\0ࣼ\0म\0ॠ\0\144\0঒" + "\0ৄ\0৶\0\62\0\62\0\62\0\62\0\62\0\62" + "\0\62\0\62\0ל\0ਨ\0\144\0ਗ਼\0ઌ\0ા" + "\0૰\0ଢ\0୔\0ஆ\0ஸ\0௪\0జ\0౎" + "\0ಀ\0ಲ\0೤\0ഖ\0ൈ\0ൺ\0ඬ\0ෞ" + "\0ฐ\0โ\0๴\0\144\0\144\0຦\0໘\0༊" + "\0༼\0཮\0ྠ\0࿒\0င\0ံ\0\144\0ၨ" + "\0ႚ\0჌\0ჾ\0ᄰ\0ᅢ\0ᆔ\0\144\0ᇆ" + "\0\144\0\144\0ᇸ\0ሪ\0ቜ\0኎\0ዀ\0ዲ" + "\0ጤ\0ፖ\0\144\0ᎈ\0Ꮊ\0Ꮼ\0ᐞ\0ᑐ" + "\0ᒂ\0ᒴ\0ᓦ\0\144\0\144\0ᔘ\0ᕊ\0ᕼ" + "\0\144\0ᖮ\0ᗠ\0ᘒ\0\144\0\144\0\144\0ᙄ" + "\0ᙶ\0ᚨ\0ᛚ\0ᜌ\0\144\0\144\0᜾\0\144" + "\0\144\0ᝰ\0អ\0។\0᠆\0ᠸ\0\144\0ᡪ" + "\0\144\0ᢜ\0\144\0ᣎ\0\144";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[173];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /** 
   * The transition table of the DFA
   */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\3" + "\1\7\1\10\1\11\1\12\1\13\1\14\1\3\1\15" + "\1\16\1\17\1\20\1\21\1\22\1\23\1\3\1\24" + "\1\25\6\3\1\26\1\27\1\30\1\31\1\32\1\33" + "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43" + "\1\44\1\45\1\46\1\47\1\50\63\0\3\3\2\0" + "\3\3\1\0\25\3\25\0\1\51\4\0\1\52\1\51" + "\52\0\3\3\2\0\3\3\1\0\11\3\1\53\13\3" + "\30\0\1\2\56\0\1\7\3\0\1\7\1\0\1\7" + "\55\0\1\54\1\55\55\0\3\3\2\0\3\3\1\0" + "\1\3\1\56\23\3\24\0\3\3\2\0\1\3\1\57" + "\1\3\1\0\4\3\1\60\20\3\24\0\3\3\2\0" + "\3\3\1\0\22\3\1\61\2\3\24\0\3\3\2\0" + "\3\3\1\0\4\3\1\62\12\3\1\63\5\3\24\0" + "\2\3\1\64\2\0\3\3\1\0\25\3\24\0\3\3" + "\2\0\3\3\1\0\2\3\1\65\5\3\1\66\10\3" + "\1\67\3\3\24\0\3\3\2\0\3\3\1\0\1\70" + "\11\3\1\71\1\3\1\72\10\3\24\0\3\3\2\0" + "\3\3\1\0\22\3\1\73\2\3\24\0\3\3\2\0" + "\3\3\1\0\1\3\1\74\23\3\24\0\3\3\2\0" + "\3\3\1\0\7\3\1\75\7\3\1\76\5\3\24\0" + "\3\3\2\0\3\3\1\0\17\3\1\77\5\3\24\0" + "\3\3\2\0\3\3\1\0\11\3\1\100\4\3\1\101" + "\6\3\24\0\3\3\2\0\3\3\1\0\1\102\24\3" + "\62\0\1\103\62\0\1\104\62\0\1\105\61\0\1\106" + "\61\0\1\107\61\0\1\110\65\0\1\111\62\0\1\112" + "\15\0\1\51\5\0\1\51\53\0\2\113\2\0\1\113" + "\1\0\1\113\2\0\1\113\1\0\1\113\1\0\1\113" + "\4\0\2\113\35\0\3\3\2\0\3\3\1\0\1\3" + "\1\114\23\3\30\0\1\55\55\0\3\3\2\0\3\3" + "\1\0\2\3\1\115\22\3\24\0\3\3\2\0\3\3" + "\1\0\10\3\1\116\14\3\24\0\3\3\2\0\3\3" + "\1\0\6\3\1\117\1\120\15\3\24\0\3\3\2\0" + "\3\3\1\0\7\3\1\121\15\3\24\0\3\3\2\0" + "\3\3\1\0\5\3\1\122\17\3\24\0\3\3\2\0" + "\3\3\1\0\1\123\24\3\24\0\3\3\2\0\3\3" + "\1\0\6\3\1\124\16\3\24\0\3\3\2\0\3\3" + "\1\0\7\3\1\125\15\3\24\0\3\3\2\0\3\3" + "\1\0\5\3\1\126\17\3\24\0\3\3\2\0\3\3" + "\1\0\1\127\24\3\24\0\3\3\2\0\3\3\1\0" + "\10\3\1\130\14\3\24\0\3\3\2\0\3\3\1\0" + "\15\3\1\131\7\3\24\0\3\3\2\0\3\3\1\0" + "\7\3\1\132\15\3\24\0\3\3\2\0\3\3\1\0" + "\10\3\1\133\14\3\24\0\3\3\2\0\3\3\1\0" + "\1\134\24\3\24\0\3\3\2\0\3\3\1\0\11\3" + "\1\135\13\3\24\0\3\3\2\0\3\3\1\0\7\3" + "\1\136\7\3\1\137\5\3\24\0\2\3\1\140\2\0" + "\3\3\1\0\25\3\24\0\3\3\2\0\3\3\1\0" + "\4\3\1\141\20\3\24\0\3\3\2\0\3\3\1\0" + "\5\3\1\142\17\3\24\0\3\3\2\0\3\3\1\0" + "\1\3\1\143\23\3\24\0\3\3\2\0\3\3\1\0" + "\1\3\1\144\23\3\24\0\3\3\2\0\3\3\1\0" + "\12\3\1\145\12\3\24\0\3\3\2\0\3\3\1\0" + "\4\3\1\146\20\3\24\0\3\3\2\0\3\3\1\0" + "\6\3\1\147\16\3\24\0\3\3\2\0\3\3\1\0" + "\10\3\1\150\14\3\24\0\3\3\2\0\3\3\1\0" + "\10\3\1\151\14\3\24\0\3\3\2\0\3\3\1\0" + "\10\3\1\152\14\3\24\0\3\3\2\0\3\3\1\0" + "\10\3\1\153\14\3\24\0\3\3\2\0\3\3\1\0" + "\3\3\1\154\21\3\24\0\3\3\2\0\3\3\1\0" + "\1\3\1\155\23\3\24\0\3\3\2\0\3\3\1\0" + "\4\3\1\156\20\3\24\0\3\3\2\0\3\3\1\0" + "\6\3\1\157\16\3\24\0\3\3\2\0\3\3\1\0" + "\16\3\1\160\6\3\24\0\3\3\2\0\3\3\1\0" + "\5\3\1\161\17\3\24\0\3\3\2\0\3\3\1\0" + "\1\3\1\162\23\3\24\0\3\3\2\0\3\3\1\0" + "\20\3\1\163\4\3\24\0\3\3\2\0\3\3\1\0" + "\10\3\1\164\14\3\24\0\3\3\2\0\3\3\1\0" + "\4\3\1\165\20\3\24\0\3\3\2\0\3\3\1\0" + "\1\3\1\166\23\3\24\0\3\3\2\0\3\3\1\0" + "\24\3\1\167\24\0\3\3\2\0\3\3\1\0\1\170" + "\24\3\24\0\3\3\2\0\3\3\1\0\1\3\1\171" + "\23\3\24\0\3\3\2\0\3\3\1\0\6\3\1\172" + "\16\3\24\0\3\3\2\0\3\3\1\0\7\3\1\173" + "\15\3\24\0\3\3\2\0\3\3\1\0\11\3\1\174" + "\13\3\24\0\3\3\2\0\3\3\1\0\3\3\1\175" + "\21\3\24\0\3\3\2\0\3\3\1\0\7\3\1\176" + "\15\3\24\0\3\3\2\0\3\3\1\0\22\3\1\177" + "\2\3\24\0\3\3\2\0\3\3\1\0\11\3\1\200" + "\13\3\24\0\3\3\2\0\3\3\1\0\1\3\1\201" + "\23\3\24\0\3\3\2\0\3\3\1\0\11\3\1\202" + "\13\3\24\0\3\3\2\0\3\3\1\0\4\3\1\203" + "\20\3\24\0\3\3\2\0\3\3\1\0\5\3\1\204" + "\17\3\24\0\3\3\2\0\3\3\1\0\5\3\1\205" + "\17\3\24\0\3\3\2\0\3\3\1\0\1\3\1\206" + "\23\3\24\0\3\3\2\0\3\3\1\0\7\3\1\207" + "\15\3\24\0\3\3\2\0\3\3\1\0\6\3\1\210" + "\16\3\24\0\3\3\2\0\3\3\1\0\13\3\1\211" + "\11\3\24\0\3\3\2\0\3\3\1\0\1\212\24\3" + "\24\0\3\3\2\0\3\3\1\0\5\3\1\213\17\3" + "\24\0\3\3\2\0\3\3\1\0\22\3\1\214\2\3" + "\24\0\3\3\2\0\3\3\1\0\3\3\1\215\21\3" + "\24\0\3\3\2\0\3\3\1\0\11\3\1\216\13\3" + "\24\0\3\3\2\0\3\3\1\0\12\3\1\217\12\3" + "\24\0\3\3\2\0\3\3\1\0\14\3\1\220\10\3" + "\24\0\3\3\2\0\3\3\1\0\1\221\24\3\24\0" + "\3\3\2\0\3\3\1\0\3\3\1\222\21\3\24\0" + "\3\3\2\0\3\3\1\0\10\3\1\223\14\3\24\0" + "\3\3\2\0\3\3\1\0\3\3\1\224\21\3\24\0" + "\3\3\2\0\3\3\1\0\3\3\1\225\21\3\24\0" + "\3\3\2\0\3\3\1\0\6\3\1\226\16\3\24\0" + "\3\3\2\0\3\3\1\0\6\3\1\227\16\3\24\0" + "\3\3\2\0\3\3\1\0\16\3\1\230\6\3\24\0" + "\3\3\2\0\3\3\1\0\3\3\1\231\21\3\24\0" + "\3\3\2\0\3\3\1\0\17\3\1\232\5\3\24\0" + "\3\3\2\0\3\3\1\0\5\3\1\233\17\3\24\0" + "\3\3\2\0\3\3\1\0\1\3\1\234\23\3\24\0" + "\3\3\2\0\3\3\1\0\22\3\1\235\2\3\24\0" + "\3\3\2\0\3\3\1\0\1\3\1\236\23\3\24\0" + "\3\3\2\0\3\3\1\0\10\3\1\237\14\3\24\0" + "\3\3\2\0\3\3\1\0\1\3\1\240\23\3\24\0" + "\3\3\2\0\3\3\1\0\10\3\1\241\14\3\24\0" + "\3\3\2\0\3\3\1\0\1\242\24\3\24\0\3\3" + "\2\0\3\3\1\0\3\3\1\243\21\3\24\0\3\3" + "\2\0\3\3\1\0\1\244\24\3\24\0\3\3\2\0" + "\3\3\1\0\1\3\1\245\23\3\24\0\3\3\2\0" + "\3\3\1\0\7\3\1\246\15\3\24\0\3\3\2\0" + "\3\3\1\0\1\3\1\247\23\3\24\0\3\3\2\0" + "\3\3\1\0\10\3\1\250\14\3\24\0\3\3\2\0" + "\3\3\1\0\13\3\1\251\11\3\24\0\3\3\2\0" + "\3\3\1\0\23\3\1\252\1\3\24\0\3\3\2\0" + "\3\3\1\0\6\3\1\253\16\3\24\0\3\3\2\0" + "\3\3\1\0\1\3\1\254\23\3\24\0\3\3\2\0" + "\3\3\1\0\13\3\1\255\11\3\23\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[6400];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static final int ZZ_UNKNOWN_ERROR = 0;

    private static final int ZZ_NO_MATCH = 1;

    private static final int ZZ_PUSHBACK_2BIG = 2;

    private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };

    /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\11\33\1\13\11\1\1\1\0\2\1\1\11" + "\25\1\10\11\143\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[173];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
      from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
    private int yycolumn;

    /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    private Symbol sym(int type) {
        return sym(type, yytext());
    }

    private Symbol sym(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    private void error() throws IOException {
        throw new IOException("illegal text at line = " + yyline + ", column = " + yycolumn + ", text = '" + yytext() + "'");
    }

    /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
    KualaLex(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
    KualaLex(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;
        int j = 0;
        while (i < 134) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
    private boolean zzRefill() throws java.io.IOException {
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }
        if (zzCurrentPos >= zzBuffer.length) {
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }
        int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);
        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }
        return true;
    }

    /**
   * Closes the input stream.
   */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        zzEndRead = zzStartRead;
        if (zzReader != null) zzReader.close();
    }

    /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }

    /**
   * Returns the current lexical state.
   */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
   * Returns the text matched by the current regular expression.
   */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
   * Returns the length of the matched text region.
   */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }
        throw new Error(message);
    }

    /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
    public void yypushback(int number) {
        if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG);
        zzMarkedPos -= number;
    }

    /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;
        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;
        while (true) {
            zzMarkedPosL = zzMarkedPos;
            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
                switch(zzBufferL[zzCurrentPosL]) {
                    case '':
                    case '':
                    case '':
                    case ' ':
                    case ' ':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) zzR = false; else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn++;
                }
            }
            if (zzR) {
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) zzPeek = zzBufferL[zzMarkedPosL] == '\n'; else if (zzAtEOF) zzPeek = false; else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) zzPeek = false; else zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;
            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
            zzState = ZZ_LEXSTATE[zzLexicalState];
            zzForAction: {
                while (true) {
                    if (zzCurrentPosL < zzEndReadL) zzInput = zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;
                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }
                }
            }
            zzMarkedPos = zzMarkedPosL;
            switch(zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 8:
                    {
                        return sym(GT);
                    }
                case 59:
                    break;
                case 30:
                    {
                        return sym(NEQ);
                    }
                case 60:
                    break;
                case 5:
                    {
                        return sym(ASSIGN);
                    }
                case 61:
                    break;
                case 43:
                    {
                        return sym(CLASS);
                    }
                case 62:
                    break;
                case 47:
                    {
                        return sym(RETURN);
                    }
                case 63:
                    break;
                case 7:
                    {
                        return sym(LT);
                    }
                case 64:
                    break;
                case 39:
                    {
                        return sym(ELIF);
                    }
                case 65:
                    break;
                case 20:
                    {
                        return sym(SEMICOLON);
                    }
                case 66:
                    break;
                case 16:
                    {
                        return sym(L_PARENTHESES);
                    }
                case 67:
                    break;
                case 57:
                    {
                        return sym(IMPLEMENTS);
                    }
                case 68:
                    break;
                case 9:
                    {
                        return sym(PLUS);
                    }
                case 69:
                    break;
                case 37:
                    {
                        return sym(FOR);
                    }
                case 70:
                    break;
                case 46:
                    {
                        return sym(STATIC);
                    }
                case 71:
                    break;
                case 2:
                    {
                        return sym(ID, MySymbol.getSymbol(yytext()));
                    }
                case 72:
                    break;
                case 52:
                    {
                        return sym(PRIVATE);
                    }
                case 73:
                    break;
                case 14:
                    {
                        return sym(L_BRACES);
                    }
                case 74:
                    break;
                case 38:
                    {
                        return sym(ELSE);
                    }
                case 75:
                    break;
                case 45:
                    {
                        return sym(SWITCH);
                    }
                case 76:
                    break;
                case 36:
                    {
                        return sym(NEW);
                    }
                case 77:
                    break;
                case 1:
                    {
                    }
                case 78:
                    break;
                case 54:
                    {
                        return sym(ABSTRACT);
                    }
                case 79:
                    break;
                case 44:
                    {
                        return sym(FINAL);
                    }
                case 80:
                    break;
                case 26:
                    {
                        return sym(DO);
                    }
                case 81:
                    break;
                case 34:
                    {
                        return sym(DEC);
                    }
                case 82:
                    break;
                case 49:
                    {
                        return sym(UNLESS);
                    }
                case 83:
                    break;
                case 40:
                    {
                        return sym(THIS);
                    }
                case 84:
                    break;
                case 25:
                    {
                        return sym(IF);
                    }
                case 85:
                    break;
                case 15:
                    {
                        return sym(R_BRACES);
                    }
                case 86:
                    break;
                case 11:
                    {
                        return sym(TIMES);
                    }
                case 87:
                    break;
                case 4:
                    {
                        return sym(COLON);
                    }
                case 88:
                    break;
                case 35:
                    {
                        return sym(NUMBER, Integer.parseInt(yytext().substring(2), 16));
                    }
                case 89:
                    break;
                case 18:
                    {
                        return sym(L_BRACKETS);
                    }
                case 90:
                    break;
                case 28:
                    {
                        return sym(OR);
                    }
                case 91:
                    break;
                case 24:
                    {
                        return sym(IN);
                    }
                case 92:
                    break;
                case 29:
                    {
                        return sym(EQ);
                    }
                case 93:
                    break;
                case 50:
                    {
                        return sym(EXTENDS);
                    }
                case 94:
                    break;
                case 42:
                    {
                        return sym(WHILE);
                    }
                case 95:
                    break;
                case 41:
                    {
                        return sym(BREAK);
                    }
                case 96:
                    break;
                case 51:
                    {
                        return sym(FOREACH);
                    }
                case 97:
                    break;
                case 23:
                    {
                        System.out.println("IDENT NOW");
                    }
                case 98:
                    break;
                case 48:
                    {
                        return sym(PUBLIC);
                    }
                case 99:
                    break;
                case 33:
                    {
                        return sym(INC);
                    }
                case 100:
                    break;
                case 19:
                    {
                        return sym(R_BRACKETS);
                    }
                case 101:
                    break;
                case 22:
                    {
                        return sym(NUMBER, Integer.parseInt(yytext(), 8));
                    }
                case 102:
                    break;
                case 32:
                    {
                        return sym(GE);
                    }
                case 103:
                    break;
                case 6:
                    {
                        return sym(NOT);
                    }
                case 104:
                    break;
                case 27:
                    {
                        return sym(AND);
                    }
                case 105:
                    break;
                case 10:
                    {
                        return sym(MINUS);
                    }
                case 106:
                    break;
                case 31:
                    {
                        return sym(LE);
                    }
                case 107:
                    break;
                case 12:
                    {
                        return sym(DIV);
                    }
                case 108:
                    break;
                case 17:
                    {
                        return sym(R_PARENTHESES);
                    }
                case 109:
                    break;
                case 53:
                    {
                        return sym(CONTINUE);
                    }
                case 110:
                    break;
                case 3:
                    {
                        return sym(NUMBER, Integer.parseInt(yytext()));
                    }
                case 111:
                    break;
                case 58:
                    {
                        return sym(SYNCHRONIZED);
                    }
                case 112:
                    break;
                case 55:
                    {
                        return sym(INTERFACE);
                    }
                case 113:
                    break;
                case 13:
                    {
                        return sym(MOD);
                    }
                case 114:
                    break;
                case 56:
                    {
                        return sym(PROTECTED);
                    }
                case 115:
                    break;
                case 21:
                    {
                        return sym(COMMA);
                    }
                case 116:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        {
                            return new java_cup.runtime.Symbol(compiler.KualaSym.EOF);
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

    /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface compiler.KualaSym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
    private String getTokenName(int token) {
        try {
            java.lang.reflect.Field[] classFields = compiler.KualaSym.class.getFields();
            for (int i = 0; i < classFields.length; i++) {
                if (classFields[i].getInt(null) == token) {
                    return classFields[i].getName();
                }
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
        return "UNKNOWN TOKEN";
    }

    /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
    public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
        java_cup.runtime.Symbol s = next_token();
        System.out.println("line:" + (yyline + 1) + " col:" + (yycolumn + 1) + " --" + yytext() + "--" + getTokenName(s.sym) + "--");
        return s;
    }

    /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java KualaLex <inputfile>");
        } else {
            for (int i = 0; i < argv.length; i++) {
                KualaLex scanner = null;
                try {
                    scanner = new KualaLex(new java.io.FileReader(argv[i]));
                    while (!scanner.zzAtEOF) scanner.debug_next_token();
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }
}
