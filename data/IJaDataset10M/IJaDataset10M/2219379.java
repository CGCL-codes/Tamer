package edu.rice.cs.cunit.util;

import junit.framework.TestCase;
import java.util.List;

/**
 * Unit tests for RangeMap.
 * @author Mathias Ricken
 */
public class RangeMapTest extends TestCase {

    public void testSimple() {
        RangeMap<Integer, String> map = new RangeMap<Integer, String>();
        assertEquals(0, map.size());
        assertTrue(map.isEmpty());
        map.put(new Range<Integer>(10, 20), "10to20");
        assertEquals(1, map.size());
        assertFalse(map.isEmpty());
        assertFalse(map.containsKey(9));
        assertTrue(map.containsKey(10));
        assertTrue(map.containsKey(15));
        assertTrue(map.containsKey(20));
        assertFalse(map.containsKey(21));
        assertFalse(map.containsKey(new Range<Integer>(10, 19)));
        assertTrue(map.containsKey(new Range<Integer>(10, 20)));
        assertFalse(map.containsKey(new Range<Integer>(10, 21)));
        List<String> l = map.get(9);
        assertEquals(0, l.size());
        l = map.get(10);
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(15);
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(20);
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(21);
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 19));
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 20));
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(new Range<Integer>(10, 21));
        assertEquals(0, l.size());
        List<IRange<Integer>> k = map.getKeys(9);
        assertEquals(0, k.size());
        k = map.getKeys(10);
        assertEquals(1, k.size());
        assertEquals(new Range<Integer>(10, 20), k.get(0));
        k = map.getKeys(21);
        assertEquals(0, k.size());
        map.put(new Range<Integer>(30, 40), "30to40");
        assertEquals(2, map.size());
        assertFalse(map.isEmpty());
        assertFalse(map.containsKey(29));
        assertTrue(map.containsKey(30));
        assertTrue(map.containsKey(35));
        assertTrue(map.containsKey(40));
        assertFalse(map.containsKey(41));
        assertFalse(map.containsKey(new Range<Integer>(30, 39)));
        assertTrue(map.containsKey(new Range<Integer>(30, 40)));
        assertFalse(map.containsKey(new Range<Integer>(30, 41)));
        l = map.get(29);
        assertEquals(0, l.size());
        l = map.get(30);
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(35);
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(40);
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(41);
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(30, 39));
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(30, 40));
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(new Range<Integer>(30, 41));
        assertEquals(0, l.size());
        k = map.getKeys(29);
        assertEquals(0, k.size());
        k = map.getKeys(30);
        assertEquals(1, k.size());
        assertEquals(new Range<Integer>(30, 40), k.get(0));
        k = map.getKeys(41);
        assertEquals(0, k.size());
    }

    public void testOverlapping() {
        RangeMap<Integer, String> map = new RangeMap<Integer, String>();
        assertEquals(0, map.size());
        assertTrue(map.isEmpty());
        map.put(new Range<Integer>(10, 20), "10to20");
        assertEquals(1, map.size());
        assertFalse(map.isEmpty());
        assertFalse(map.containsKey(9));
        assertTrue(map.containsKey(10));
        assertTrue(map.containsKey(15));
        assertTrue(map.containsKey(20));
        assertFalse(map.containsKey(21));
        assertFalse(map.containsKey(new Range<Integer>(10, 19)));
        assertTrue(map.containsKey(new Range<Integer>(10, 20)));
        assertFalse(map.containsKey(new Range<Integer>(10, 21)));
        List<String> l = map.get(9);
        assertEquals(0, l.size());
        l = map.get(10);
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(15);
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(20);
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(21);
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 19));
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 20));
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(new Range<Integer>(10, 21));
        assertEquals(0, l.size());
        List<IRange<Integer>> k = map.getKeys(9);
        assertEquals(0, k.size());
        k = map.getKeys(10);
        assertEquals(1, k.size());
        assertEquals(new Range<Integer>(10, 20), k.get(0));
        k = map.getKeys(21);
        assertEquals(0, k.size());
        map.put(new Range<Integer>(30, 40), "30to40");
        assertEquals(2, map.size());
        assertFalse(map.isEmpty());
        assertFalse(map.containsKey(29));
        assertTrue(map.containsKey(30));
        assertTrue(map.containsKey(35));
        assertTrue(map.containsKey(40));
        assertFalse(map.containsKey(41));
        assertFalse(map.containsKey(new Range<Integer>(30, 39)));
        assertTrue(map.containsKey(new Range<Integer>(30, 40)));
        assertFalse(map.containsKey(new Range<Integer>(30, 41)));
        l = map.get(29);
        assertEquals(0, l.size());
        l = map.get(30);
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(35);
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(40);
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(41);
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(30, 39));
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(30, 40));
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(new Range<Integer>(30, 41));
        assertEquals(0, l.size());
        k = map.getKeys(29);
        assertEquals(0, k.size());
        k = map.getKeys(30);
        assertEquals(1, k.size());
        assertEquals(new Range<Integer>(30, 40), k.get(0));
        k = map.getKeys(41);
        assertEquals(0, k.size());
        map.put(new Range<Integer>(10, 40), "10to40");
        assertEquals(3, map.size());
        assertFalse(map.isEmpty());
        assertFalse(map.containsKey(9));
        assertTrue(map.containsKey(10));
        assertTrue(map.containsKey(25));
        assertTrue(map.containsKey(40));
        assertFalse(map.containsKey(41));
        assertFalse(map.containsKey(new Range<Integer>(10, 39)));
        assertTrue(map.containsKey(new Range<Integer>(10, 40)));
        assertFalse(map.containsKey(new Range<Integer>(10, 41)));
        l = map.get(9);
        assertEquals(0, l.size());
        l = map.get(10);
        assertEquals(2, l.size());
        assertEquals("10to20", l.get(0));
        assertEquals("10to40", l.get(1));
        l = map.get(25);
        assertEquals(1, l.size());
        assertEquals("10to40", l.get(0));
        l = map.get(40);
        assertEquals(2, l.size());
        assertEquals("30to40", l.get(0));
        assertEquals("10to40", l.get(1));
        l = map.get(41);
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 39));
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 40));
        assertEquals(1, l.size());
        assertEquals("10to40", l.get(0));
        l = map.get(new Range<Integer>(10, 41));
        assertEquals(0, l.size());
        k = map.getKeys(9);
        assertEquals(0, k.size());
        k = map.getKeys(10);
        assertEquals(2, k.size());
        assertEquals(new Range<Integer>(10, 20), k.get(0));
        assertEquals(new Range<Integer>(10, 40), k.get(1));
        k = map.getKeys(41);
        assertEquals(0, k.size());
    }

    public void testRemove() {
        RangeMap<Integer, String> map = new RangeMap<Integer, String>();
        assertEquals(0, map.size());
        assertTrue(map.isEmpty());
        map.put(new Range<Integer>(10, 20), "10to20");
        assertEquals(1, map.size());
        assertFalse(map.isEmpty());
        assertFalse(map.containsKey(9));
        assertTrue(map.containsKey(10));
        assertTrue(map.containsKey(15));
        assertTrue(map.containsKey(20));
        assertFalse(map.containsKey(21));
        assertFalse(map.containsKey(new Range<Integer>(10, 19)));
        assertTrue(map.containsKey(new Range<Integer>(10, 20)));
        assertFalse(map.containsKey(new Range<Integer>(10, 21)));
        List<String> l = map.get(9);
        assertEquals(0, l.size());
        l = map.get(10);
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(15);
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(20);
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(21);
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 19));
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 20));
        assertEquals(1, l.size());
        assertEquals("10to20", l.get(0));
        l = map.get(new Range<Integer>(10, 21));
        assertEquals(0, l.size());
        List<IRange<Integer>> k = map.getKeys(9);
        assertEquals(0, k.size());
        k = map.getKeys(10);
        assertEquals(1, k.size());
        assertEquals(new Range<Integer>(10, 20), k.get(0));
        k = map.getKeys(21);
        assertEquals(0, k.size());
        map.put(new Range<Integer>(30, 40), "30to40");
        assertEquals(2, map.size());
        assertFalse(map.isEmpty());
        assertFalse(map.containsKey(29));
        assertTrue(map.containsKey(30));
        assertTrue(map.containsKey(35));
        assertTrue(map.containsKey(40));
        assertFalse(map.containsKey(41));
        assertFalse(map.containsKey(new Range<Integer>(30, 39)));
        assertTrue(map.containsKey(new Range<Integer>(30, 40)));
        assertFalse(map.containsKey(new Range<Integer>(30, 41)));
        l = map.get(29);
        assertEquals(0, l.size());
        l = map.get(30);
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(35);
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(40);
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(41);
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(30, 39));
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(30, 40));
        assertEquals(1, l.size());
        assertEquals("30to40", l.get(0));
        l = map.get(new Range<Integer>(30, 41));
        assertEquals(0, l.size());
        k = map.getKeys(29);
        assertEquals(0, k.size());
        k = map.getKeys(30);
        assertEquals(1, k.size());
        assertEquals(new Range<Integer>(30, 40), k.get(0));
        k = map.getKeys(41);
        assertEquals(0, k.size());
        map.put(new Range<Integer>(10, 40), "10to40");
        assertEquals(3, map.size());
        assertFalse(map.isEmpty());
        assertFalse(map.containsKey(9));
        assertTrue(map.containsKey(10));
        assertTrue(map.containsKey(25));
        assertTrue(map.containsKey(40));
        assertFalse(map.containsKey(41));
        assertFalse(map.containsKey(new Range<Integer>(10, 39)));
        assertTrue(map.containsKey(new Range<Integer>(10, 40)));
        assertFalse(map.containsKey(new Range<Integer>(10, 41)));
        l = map.get(9);
        assertEquals(0, l.size());
        l = map.get(10);
        assertEquals(2, l.size());
        assertEquals("10to20", l.get(0));
        assertEquals("10to40", l.get(1));
        l = map.get(25);
        assertEquals(1, l.size());
        assertEquals("10to40", l.get(0));
        l = map.get(40);
        assertEquals(2, l.size());
        assertEquals("30to40", l.get(0));
        assertEquals("10to40", l.get(1));
        l = map.get(41);
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 39));
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 40));
        assertEquals(1, l.size());
        assertEquals("10to40", l.get(0));
        l = map.get(new Range<Integer>(10, 41));
        assertEquals(0, l.size());
        k = map.getKeys(9);
        assertEquals(0, k.size());
        k = map.getKeys(10);
        assertEquals(2, k.size());
        assertEquals(new Range<Integer>(10, 20), k.get(0));
        assertEquals(new Range<Integer>(10, 40), k.get(1));
        k = map.getKeys(41);
        assertEquals(0, k.size());
        map.remove(new Range<Integer>(10, 20));
        assertEquals(0, k.size());
        assertFalse(map.isEmpty());
        assertFalse(map.containsKey(9));
        assertTrue(map.containsKey(10));
        assertTrue(map.containsKey(25));
        assertTrue(map.containsKey(40));
        assertFalse(map.containsKey(41));
        assertFalse(map.containsKey(new Range<Integer>(10, 39)));
        assertTrue(map.containsKey(new Range<Integer>(10, 40)));
        assertFalse(map.containsKey(new Range<Integer>(10, 41)));
        assertFalse(map.containsKey(new Range<Integer>(10, 20)));
        l = map.get(9);
        assertEquals(0, l.size());
        l = map.get(10);
        assertEquals(1, l.size());
        assertEquals("10to40", l.get(0));
        l = map.get(25);
        assertEquals(1, l.size());
        assertEquals("10to40", l.get(0));
        l = map.get(40);
        assertEquals(2, l.size());
        assertEquals("30to40", l.get(0));
        assertEquals("10to40", l.get(1));
        l = map.get(41);
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 39));
        assertEquals(0, l.size());
        l = map.get(new Range<Integer>(10, 40));
        assertEquals(1, l.size());
        assertEquals("10to40", l.get(0));
        l = map.get(new Range<Integer>(10, 41));
        assertEquals(0, l.size());
        k = map.getKeys(9);
        assertEquals(0, k.size());
        k = map.getKeys(10);
        assertEquals(1, k.size());
        assertEquals(new Range<Integer>(10, 40), k.get(0));
        k = map.getKeys(41);
        assertEquals(0, k.size());
    }
}
