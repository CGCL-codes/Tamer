package easyaccept.app.business.domain;

import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * Execution generated by hbm2java
 */
@Entity
@Table(name = "Execution", catalog = "eaw", uniqueConstraints = {  })
public class Execution extends DomainModelBean<Execution> {

    /**
	 * 
	 */
    private static final long serialVersionUID = -5179803025927074259L;

    private int id;

    private Project project;

    private User user;

    private Date dtRegister;

    private String fullQualifiedFacadeName;

    private List<Script> scripts;

    private Archive archive;

    private String vmArgs;

    private HistoryMetaData history;

    private boolean verboseMode = false;

    /**
	 * default constructor
	 */
    public Execution() {
    }

    /**
	 * Full constructor
	 * 
	 * @param scripts
	 * @param fullQualifiedFacadeName
	 * @param id
	 * @param project
	 * @param user
	 * @param dtRegister
	 * @param history
	 */
    public Execution(int id, List<Script> scripts, String fullQualifiedFacadeName, Project project, User user, Date dtRegister, HistoryMetaData history) {
        super();
        this.id = id;
        this.scripts = scripts;
        this.fullQualifiedFacadeName = fullQualifiedFacadeName;
        this.project = project;
        this.user = user;
        this.dtRegister = dtRegister;
        this.history = history;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", unique = true, nullable = false, insertable = true, updatable = true)
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "dtRegister", unique = false, nullable = false, insertable = true, updatable = true)
    public Date getDtRegister() {
        return dtRegister;
    }

    public void setDtRegister(Date dtRegister) {
        this.dtRegister = dtRegister;
    }

    @ManyToOne(cascade = {  }, fetch = FetchType.LAZY)
    @JoinColumn(name = "Project_id", unique = false, nullable = false, insertable = true, updatable = true)
    public Project getProject() {
        return project;
    }

    public void setProject(Project project) {
        this.project = project;
    }

    @ManyToOne(cascade = {  }, fetch = FetchType.LAZY)
    @JoinColumn(name = "User_id", unique = false, nullable = false, insertable = true, updatable = true)
    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @OneToOne(cascade = {  }, fetch = FetchType.LAZY, mappedBy = "execution", targetEntity = easyaccept.app.business.domain.HistoryMetaData.class)
    public HistoryMetaData getHistory() {
        return history;
    }

    public void setHistory(HistoryMetaData history) {
        this.history = history;
    }

    @Column(name = "fullQualifiedFacadeName", unique = false, nullable = false, insertable = true, updatable = true, length = 2000)
    public String getFullQualifiedFacadeName() {
        return fullQualifiedFacadeName;
    }

    public void setFullQualifiedFacadeName(String fullQualifiedFacadeName) {
        this.fullQualifiedFacadeName = fullQualifiedFacadeName;
    }

    @ManyToMany(targetEntity = easyaccept.app.business.domain.Script.class)
    @JoinTable(name = "Script_Execution", joinColumns = { @JoinColumn(name = "Execution_id", insertable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Script_id", insertable = false, updatable = false) })
    public List<Script> getScripts() {
        return scripts;
    }

    public void setScripts(List<Script> scripts) {
        this.scripts = scripts;
    }

    @ManyToOne(cascade = {  }, fetch = FetchType.LAZY)
    @JoinColumn(name = "Archive_id", unique = false, nullable = false, insertable = true, updatable = true)
    public Archive getArchive() {
        return archive;
    }

    public void setArchive(Archive archive) {
        this.archive = archive;
    }

    @Column(name = "vmArgs", unique = false, nullable = false, insertable = true, updatable = true, length = 2000)
    public String getVmArgs() {
        return vmArgs;
    }

    public void setVmArgs(String vmArgs) {
        this.vmArgs = vmArgs;
    }

    @Transient
    public boolean isVerboseMode() {
        return verboseMode;
    }

    public void setVerboseMode(boolean verboseMode) {
        this.verboseMode = verboseMode;
    }

    @Override
    public Map<String, Object> describe(String... ignoredProperties) {
        String[] ignoreProperties = { "id", "history" };
        Map<String, Object> map = super.describe(ignoreProperties);
        map.putAll(history.describe());
        return map;
    }
}
