package be.ac.fundp.infonet.econf.producer;

import java.io.*;
import java.util.*;
import be.ac.fundp.infonet.econf.*;
import be.ac.fundp.infonet.econf.util.*;
import be.ac.fundp.infonet.econf.resource.*;

/**
 * Creates a synchronization file that is compliant with the SMIL format.
 * @author Stephane Nicoll - Infonet FUNDP
 * @version 0.2
 */
public class SMILSynchronizer {

    /**
     * Logging object.
     */
    private static org.apache.log4j.Category m_logCat = org.apache.log4j.Category.getInstance(SMILSynchronizer.class.getName());

    /**
     * META author property.
     * This property contains the author's name for this session.
     * This property has no default value.
     */
    public static final String META_AUTHOR = "econf.session.author";

    /**
     * META copyright property.
     * This property contains the author's copyright for this session.
     * This property has no default value.
     */
    public static final String META_COPYRIGHT = "econf.session.copyright";

    /**
     * META title property.
     * This property contains the title for this session.
     * This property has no default value.
     */
    public static final String META_TITLE = "econf.session.title";

    /**
     * The META author value.
     */
    private static String author = null;

    /**
     * The META copyright value.
     */
    private static String copyright = null;

    /**
     * The META title value.
     */
    private static String title = null;

    /**
     * Buffer used to create the synchronization file.
     */
    private StringBuffer sb = null;

    /**
     * New line value (OS - dependant).
     */
    private String nl = System.getProperty("line.separator");

    /**
     * The archive to work on.
     */
    private Archive a = null;

    /**
     * Creates a new SMIL Synchronizer
     */
    public SMILSynchronizer() {
        Context ctx = Context.getInstance();
        author = ctx.getProperty(META_AUTHOR);
        copyright = ctx.getProperty(META_COPYRIGHT);
        title = ctx.getProperty(META_TITLE);
    }

    /**
     * Create a SMIL file for this archive and include this file in the archive
     * @return the relative path of the synchronization file.
     */
    public String process(Archive a) {
        SessionManager sessionManager = SessionManager.getInstance();
        this.a = a;
        init();
        constructBody();
        close();
        String path = sessionManager.getSessionName() + ".smil";
        File f = new File(sessionManager.getSessionDir(), path);
        if (f.exists()) {
            f.renameTo(new File(f.toString() + ".bak"));
            f = new File(sessionManager.getSessionDir(), path);
        }
        try {
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));
            StringReader in = new StringReader(sb.toString());
            int b;
            while ((b = in.read()) != -1) out.write(b);
            out.flush();
            out.close();
            in.close();
            a.add(f, path);
            return path;
        } catch (IOException ioe) {
            m_logCat.error("An error occured while saving " + path, ioe);
        }
        return null;
    }

    private void init() {
        sb = new StringBuffer();
        sb.append("<smil>" + nl);
        sb.append("<head>" + nl);
        sb.append("<!-- Synchronization file generated by eConf. -->" + nl);
        if (author != null) sb.append("<meta name=\"author\" content=\"" + author + "\" />" + nl);
        if (copyright != null) sb.append("<meta name=\"copyright\" content=\"" + copyright + "\" />" + nl);
        if (title != null) sb.append("<meta name=\"copyright\" content=\"" + title + "\" />" + nl);
        sb.append("<layout>" + nl);
        sb.append("<root-layout/>" + nl);
        sb.append("<region id=\"main\" fit=\"fill\"/>" + nl);
        sb.append("</layout>" + nl);
        sb.append("</head>" + nl);
    }

    private void constructBody() {
        sb.append("<body>" + nl);
        sb.append("<par>" + nl);
        sb.append("<audio src=\"" + a.getSoundFilePath() + "\"/>" + nl);
        Enumeration e = a.getRootFiles().elements();
        while (e.hasMoreElements()) {
            Slide s = (Slide) e.nextElement();
            sb.append("<img src=\"" + s.getPath() + "\" region=\"main\" dur=\"" + s.getDuration() + s.getMetric() + "\" />" + nl);
        }
        sb.append("</par>" + nl);
        sb.append("</body>" + nl);
    }

    private void close() {
        sb.append("</smil>");
    }
}
