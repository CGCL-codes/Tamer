package junit.iono;

import org.junit.*;
import org.junit.Assert.*;
import junit.framework.JUnit4TestAdapter;
import java.sql.*;
import java.util.*;
import dbaccess.util2.*;
import dbaccess.iono2.*;

/**
 * JUnit TestCase for Ursi class
 */
public class ipsLoadTest {

    private static String DB = "ionodb_blank";

    static IonoRowList rows;

    static int Nrows = 0;

    static DBConnect connection;

    public static junit.framework.Test suite() {
        return new JUnit4TestAdapter(ipsLoadTest.class);
    }

    /**
    * setup before the class 
    * load the test file data into the database
    */
    @BeforeClass
    public static void setUp() {
        String args[] = { "--database=" + DB, "testfile.IPS" };
        IpsLoad ips = new IpsLoad();
        boolean rc = ips.initialize(args);
        if (!rc) System.exit(1);
        ips.loop();
        DBProperties prop = new DBProperties();
        prop.setProperty("propPrefix", "Iono");
        prop.setProperty("database", DB);
        prop.getProperties();
        connection = new DBConnect(prop, "Iono");
        connection.connect();
        rows = new IonoRowList(connection);
        try {
            Nrows = rows.get("HO54K", 2001, 01);
        } catch (Exception e) {
            Assert.fail("Failed on getting loaded data; rows.get() exception:" + e);
        }
    }

    /**
    * teardown after the class
    * remove the test file data from the database
    */
    @AfterClass
    public static void tearDown() {
        String args[] = { "-d", "--database=" + DB, "testfile.IPS" };
        IpsLoad i = new IpsLoad();
        boolean rc = i.initialize(args);
        if (!rc) System.exit(1);
        i.loop();
    }

    public void checkNrows() {
        Assert.assertEquals(19, Nrows);
    }

    @Test
    public void check00() {
        ArrayList<IonoRow> urows = rows.getUrsiRows("00");
        Assert.assertEquals(31, urows.size());
        IonoObs obs;
        IonoRow row;
        IonoObsList obsList;
        row = urows.get(0);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 1, 1), row.getObsdate());
        Assert.assertEquals("00", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(24, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(24, obsList.getTobs());
        Assert.assertEquals(24, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(0, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(0.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals('C', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(1, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(86.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(2);
        Assert.assertEquals(2, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(89.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals('/', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(3);
        Assert.assertEquals(3, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(88.0f, obs.getData(), .0001);
        Assert.assertEquals('/', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('A', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(23);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(78.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        row = urows.get(1);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 1, 2), row.getObsdate());
        Assert.assertEquals("00", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(24, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(24, obsList.getTobs());
        Assert.assertEquals(24, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(0, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(80.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(1, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(80.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(23);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(87.0f, obs.getData(), .0001);
        Assert.assertEquals('U', obs.getDataQ());
        Assert.assertEquals('H', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        row = urows.get(30);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 1, 31), row.getObsdate());
        Assert.assertEquals("00", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(24, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(24, obsList.getTobs());
        Assert.assertEquals(24, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(0, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(80.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(1, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(79.0f, obs.getData(), .0001);
        Assert.assertEquals('J', obs.getDataQ());
        Assert.assertEquals('R', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(23);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(63.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
    }

    @Test
    public void check03() {
        ArrayList<IonoRow> urows = rows.getUrsiRows("03");
        Assert.assertEquals(31, urows.size());
        IonoObs obs;
        IonoRow row;
        IonoObsList obsList;
        row = urows.get(0);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 1, 1), row.getObsdate());
        Assert.assertEquals("03", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(24, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(24, obsList.getTobs());
        Assert.assertEquals(24, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(0, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(0.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals('C', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(1, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(2.79f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(23);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(2.86f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        row = urows.get(1);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 1, 2), row.getObsdate());
        Assert.assertEquals("03", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(24, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(24, obsList.getTobs());
        Assert.assertEquals(24, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(0, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(2.75f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(1, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(2.730f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(23);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(2.98f, obs.getData(), .0001);
        Assert.assertEquals('U', obs.getDataQ());
        Assert.assertEquals('H', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        row = urows.get(30);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 1, 31), row.getObsdate());
        Assert.assertEquals("03", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(24, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(24, obsList.getTobs());
        Assert.assertEquals(24, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(0, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(2.89f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(1, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(2.88f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals('R', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(23);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(2.82f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
    }

    @Test
    public void check36() {
        ArrayList<IonoRow> urows = rows.getUrsiRows("36");
        Assert.assertEquals(31, urows.size());
        IonoObs obs;
        IonoRow row;
        IonoObsList obsList;
        row = urows.get(0);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 1, 1), row.getObsdate());
        Assert.assertEquals("36", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(21, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(21, obsList.getTobs());
        Assert.assertEquals(21, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(1, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(0.0f, obs.getData(), .0001);
        Assert.assertEquals('C', obs.getDataQ());
        Assert.assertEquals('L', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(2, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(0.0f, obs.getData(), .0001);
        Assert.assertEquals('C', obs.getDataQ());
        Assert.assertEquals('L', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(20);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(0.0f, obs.getData(), .0001);
        Assert.assertEquals('H', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        row = urows.get(1);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 1, 2), row.getObsdate());
        Assert.assertEquals("36", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(23, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(23, obsList.getTobs());
        Assert.assertEquals(23, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(0, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(0.0f, obs.getData(), .0001);
        Assert.assertEquals('H', obs.getDataQ());
        Assert.assertEquals('L', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(1, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(0.0f, obs.getData(), .0001);
        Assert.assertEquals('C', obs.getDataQ());
        Assert.assertEquals('L', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(22);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(0.0f, obs.getData(), .0001);
        Assert.assertEquals('C', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        row = urows.get(30);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 1, 31), row.getObsdate());
        Assert.assertEquals("36", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(17, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(17, obsList.getTobs());
        Assert.assertEquals(17, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(0, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(0.0f, obs.getData(), .0001);
        Assert.assertEquals('C', obs.getDataQ());
        Assert.assertEquals('L', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(1, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(0.0f, obs.getData(), .0001);
        Assert.assertEquals('L', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(16);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(0.0f, obs.getData(), .0001);
        Assert.assertEquals('C', obs.getDataQ());
        Assert.assertEquals('L', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
    }

    @Test
    public void checkMonth200() {
        rows = new IonoRowList(connection);
        try {
            Nrows = rows.get("HO54K", 2001, 2);
        } catch (Exception e) {
            Assert.fail("Failed on getting loaded data; rows.get() exception:" + e);
        }
        ArrayList<IonoRow> urows = rows.getUrsiRows("00");
        Assert.assertEquals(28, urows.size());
        IonoObs obs;
        IonoRow row;
        IonoObsList obsList;
        row = urows.get(0);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 2, 1), row.getObsdate());
        Assert.assertEquals("00", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(24, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(24, obsList.getTobs());
        Assert.assertEquals(24, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(0, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(64.0f, obs.getData(), .0001);
        Assert.assertEquals('U', obs.getDataQ());
        Assert.assertEquals('F', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(1, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(69.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(23);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(66.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        row = urows.get(27);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 2, 28), row.getObsdate());
        Assert.assertEquals("00", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(24, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(24, obsList.getTobs());
        Assert.assertEquals(24, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(0, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(73.0f, obs.getData(), .0001);
        Assert.assertEquals('J', obs.getDataQ());
        Assert.assertEquals('R', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(1, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(73.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals(' ', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(23);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(85.0f, obs.getData(), .0001);
        Assert.assertEquals('J', obs.getDataQ());
        Assert.assertEquals('R', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
    }

    @Test
    public void checkMonth1256() {
        rows = new IonoRowList(connection);
        try {
            Nrows = rows.get("HO54K", 2001, 12);
        } catch (Exception e) {
            Assert.fail("Failed on getting loaded data; rows.get() exception:" + e);
        }
        ArrayList<IonoRow> urows = rows.getUrsiRows("56");
        Assert.assertEquals(30, urows.size());
        IonoObs obs;
        IonoRow row;
        IonoObsList obsList;
        row = urows.get(0);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 12, 1), row.getObsdate());
        Assert.assertEquals("56", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(3, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(3, obsList.getTobs());
        Assert.assertEquals(3, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(15, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(2.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals('P', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(17, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(1.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals('P', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(2);
        Assert.assertEquals(18, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(2.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals('P', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        row = urows.get(29);
        Assert.assertEquals("HO54K", row.getStn());
        Assert.assertEquals(new DateTime(2001, 12, 31), row.getObsdate());
        Assert.assertEquals("56", row.getUrsi());
        Assert.assertEquals("R", row.getRelease());
        Assert.assertEquals(0, row.getIonosondeID());
        Assert.assertEquals(1.0, row.getScaling(), .00001);
        Assert.assertEquals(0, row.getOffset());
        Assert.assertEquals(13, row.getNobs());
        obsList = row.getObsList();
        Assert.assertEquals(13, obsList.getTobs());
        Assert.assertEquals(13, obsList.getNobs());
        obs = obsList.get(0);
        Assert.assertEquals(8, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(1.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals('P', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(1);
        Assert.assertEquals(9, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(1.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals('P', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
        obs = obsList.get(12);
        Assert.assertEquals(23, obs.getHour());
        Assert.assertEquals(0, obs.getMin());
        Assert.assertEquals(0, obs.getSec());
        Assert.assertEquals(2.0f, obs.getData(), .0001);
        Assert.assertEquals(' ', obs.getDataQ());
        Assert.assertEquals('K', obs.getDataD());
        Assert.assertEquals('M', obs.getScale());
        Assert.assertEquals(7, obs.getSourceID());
        Assert.assertEquals(0, obs.getQual());
    }
}
