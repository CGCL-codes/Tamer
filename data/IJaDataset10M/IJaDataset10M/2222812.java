package remotelrcontrol;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;

/**
 *
 * @author victorn
 */
public class BTConfigView extends javax.swing.JFrame {

    private boolean addressesChanged;

    /** Creates new form BTConfigView */
    public BTConfigView() {
        initComponents();
        addressesChanged = false;
        File connections = new File(".connectons".intern());
        if (connections.exists()) {
            try {
                BufferedReader loadConnections = new BufferedReader(new FileReader(connections));
                MACInput.setText(loadConnections.readLine());
                loadConnections.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(BTConfigView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(BTConfigView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    @Action
    public void hideWindow() {
        this.setVisible(false);
        if (Boolean.parseBoolean(RCProperties.config.getProperty("useVideoCamDetection".intern()))) RemoteLRControlApp.appView.showVideoConfigWindow();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        MACInput = new javax.swing.JTextField();
        connectBtn = new javax.swing.JButton();
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(remotelrcontrol.RemoteLRControlApp.class).getContext().getResourceMap(BTConfigView.class);
        setTitle(resourceMap.getString("Form.title"));
        setName("Form");
        setResizable(false);
        jLabel1.setLabelFor(MACInput);
        jLabel1.setText(resourceMap.getString("jLabel1.text"));
        jLabel1.setName("jLabel1");
        MACInput.setText(resourceMap.getString("MACInput.text"));
        MACInput.setToolTipText(resourceMap.getString("MACInput.toolTipText"));
        MACInput.setName("MACInput");
        MACInput.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                MACInputKeyTyped(evt);
            }
        });
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(remotelrcontrol.RemoteLRControlApp.class).getContext().getActionMap(BTConfigView.class, this);
        connectBtn.setAction(actionMap.get("hideWindow"));
        connectBtn.setText(resourceMap.getString("connectBtn.text"));
        connectBtn.setName("connectBtn");
        connectBtn.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connectBtnMouseClicked(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(12, 12, 12).addComponent(MACInput, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(jLabel1))).addGroup(layout.createSequentialGroup().addGap(164, 164, 164).addComponent(connectBtn))).addContainerGap(20, Short.MAX_VALUE)));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(MACInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(connectBtn).addContainerGap()));
    }

    private void connect() {
        String names[] = MACInput.getText().split(" ");
        for (int i = 0; i < names.length; i++) if (!names[i].matches("^([0-9a-fA-F]{2}[:-]?){6}")) {
            RCErrorDialogView errDialog = new RCErrorDialogView(BTConfigView.getFrames()[0], true);
            errDialog.setErrorText("Illegal MAC address format!");
            errDialog.setSize(errDialog.errorTextLabel.getWidth() + 10, 110);
            errDialog.setLocationRelativeTo(BTConfigView.getFrames()[0]);
            errDialog.setVisible(true);
            MACInput.selectAll();
            return;
        }
        String addresses = MACInput.getText();
        if (addressesChanged) {
            try {
                File connections = new File(".connectons".intern());
                if (!connections.exists()) {
                    connections.createNewFile();
                }
                BufferedWriter writeConnections = new BufferedWriter(new FileWriter(connections));
                writeConnections.write(addresses);
                writeConnections.close();
            } catch (IOException ex) {
                Logger.getLogger(BTConfigView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            BTConnector.configureBTModules((String) RCProperties.config.getProperty("btModulePath".intern()), (String) RCProperties.config.getProperty("btModuleBinaryName".intern()), addresses.replaceAll("[:-]", ""), (String) RCProperties.config.getProperty("lejosBinPath".intern()));
            RemoteLRControlApp.mover.initialize(names.length);
            RemoteLRControlApp.appView.createTrajBtn.setEnabled(true);
            RemoteLRControlApp.appView.loadTrajBtn.setEnabled(true);
        } catch (IOException ex) {
            Logger.getLogger(BTConfigView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void connectBtnMouseClicked(java.awt.event.MouseEvent evt) {
        connect();
    }

    private void MACInputKeyTyped(java.awt.event.KeyEvent evt) {
        if (KeyEvent.getKeyText(evt.getKeyChar()).contains("Enter")) {
            connect();
            hideWindow();
            return;
        }
        addressesChanged = true;
    }

    private javax.swing.JTextField MACInput;

    private javax.swing.JButton connectBtn;

    private javax.swing.JLabel jLabel1;
}
