package net.sf.istcontract.aws.communication.protocol.Toy13_4_4;

import net.sf.istcontract.aws.SimplePercept;
import net.sf.istcontract.aws.communication.message.MessageTemplate;
import net.sf.istcontract.aws.communication.performative.*;
import net.sf.istcontract.aws.communication.protocol.IConversationListener;
import net.sf.istcontract.aws.communication.protocol.MalformedMessageException;
import net.sf.istcontract.aws.communication.protocol.NoSuchConversationException;
import net.sf.istcontract.aws.communication.protocol.NoSuchProtocolException;
import net.sf.istcontract.aws.communication.protocol.ProtocolInstance;
import net.sf.istcontract.aws.communication.protocol.ProtocolViolationException;
import net.sf.istcontract.aws.configuration.InvalidAgentConfiguration;
import net.sf.istcontract.aws.exception.AgentException;
import net.sf.istcontract.aws.input.domain.EBookContract;
import net.sf.istcontract.aws.knowledge.ontology.OntologyConcept;
import net.sf.istcontract.aws.utils.AgentLogger;
import net.sf.istcontract.aws.reasoning.behaviour.Behaviour;

/**
 *
 * This a behaivour stub, created to be able to handle each and every performative type the specified role
 * is able to handle, according to the protocol.
 * 
 * Just add your own behaviour here, mainly:
 * + Choices, when several messages can be sent (uncomment the choice - stubs)
 * + Ontological contents to be sent along with messages
 *
 *
 * @author Autogenerated by ingenias2contractcodegenerator (Ignasi Gomez-Sebastia)
 *
 */
public class ObserverBehaivour extends Behaviour {

    @Override
    protected void runRequest(IConversationListener comm, Request dummy_percept) throws AgentException {
        try {
            String currNode = "Warning: Not initialized yet";
            Performative receivedPerf = (Performative) this.percept;
            String ID = comm.buildID(receivedPerf, "Participant");
            MessageTemplate[] NextMsg;
            MessageTemplate replyMessage;
            OntologyConcept onto = null;
            try {
                comm.UpdateStateOfConversationReceivedMessage(receivedPerf, Request.class, ID);
                currNode = comm.GetCurrentNodeName(ID);
            } catch (NoSuchProtocolException NSPE) {
                currNode = "ListenerRequest";
            }
            AgentLogger.log("Agent is at runRequest: Current node is ------->" + currNode);
            if (currNode.equalsIgnoreCase("ListenerRequest")) {
                NextMsg = comm.GetMessagesStartNewConversationParticipant(Toy13_4_4.class, ObserverRole.class, receivedPerf);
                if (chooseInform()) {
                    replyMessage = this.getBehaivoralChoice("ObserverInform", NextMsg);
                    Inform replyPerformative = new Inform(receivedPerf.getIdMessage(), receivedPerf.getIdDialog(), receivedPerf.getInReplyTo(), receivedPerf.getSender(), receivedPerf.getReceiver(), onto, receivedPerf.getProtocolName(), receivedPerf.getReplyWith());
                    comm.sendMessage(replyPerformative, replyMessage, onto, ID);
                }
                if (chooseFailure()) {
                    replyMessage = this.getBehaivoralChoice("ObserverFailure", NextMsg);
                    Failure replyPerformative = new Failure(receivedPerf.getIdMessage(), receivedPerf.getIdDialog(), receivedPerf.getInReplyTo(), receivedPerf.getSender(), receivedPerf.getReceiver(), onto, receivedPerf.getProtocolName(), receivedPerf.getReplyWith());
                    comm.sendMessage(replyPerformative, replyMessage, onto, ID);
                }
            }
        } catch (Exception E) {
            String dummy = getStackTrace(E);
            AgentLogger.log(dummy);
        }
    }

    private boolean chooseInform() {
        return true;
    }

    private boolean chooseFailure() {
        return false;
    }

    @Override
    protected void runNotUnderstood(IConversationListener comm) throws AgentException {
        Performative receivedPerf = (Performative) this.percept;
        String sender = receivedPerf.getSender();
        AgentLogger.log("--------------WARNING---------------------");
        AgentLogger.log("----> Agent '" + sender + "' did not understood my last message");
        AgentLogger.log("------------------------------------------");
    }

    public String getStackTrace(Throwable t) {
        java.io.StringWriter stringWritter = new java.io.StringWriter();
        java.io.PrintWriter printWritter = new java.io.PrintWriter(stringWritter, true);
        t.printStackTrace(printWritter);
        printWritter.flush();
        stringWritter.flush();
        return stringWritter.toString();
    }
}
