package nl.openu.tiles.service.base;

import com.liferay.counter.service.CounterLocalService;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.search.SearchException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;
import nl.openu.tiles.model.TileLayout;
import nl.openu.tiles.service.TileCategoryLocalService;
import nl.openu.tiles.service.TileLayoutLocalService;
import nl.openu.tiles.service.TileLocalService;
import nl.openu.tiles.service.TileProviderLocalService;
import nl.openu.tiles.service.persistence.TileCategoryPersistence;
import nl.openu.tiles.service.persistence.TileLayoutPersistence;
import nl.openu.tiles.service.persistence.TilePersistence;
import nl.openu.tiles.service.persistence.TileProviderPersistence;
import java.io.Serializable;
import java.util.List;
import javax.sql.DataSource;

/**
 * The base implementation of the tile layout local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link nl.openu.tiles.service.impl.TileLayoutLocalServiceImpl}.
 * </p>
 *
 * @author Hubert Vogten, Harrie Martens
 * @see nl.openu.tiles.service.impl.TileLayoutLocalServiceImpl
 * @see nl.openu.tiles.service.TileLayoutLocalServiceUtil
 * @generated
 */
public abstract class TileLayoutLocalServiceBaseImpl implements TileLayoutLocalService, IdentifiableBean {

    /**
	 * Adds the tile layout to the database. Also notifies the appropriate model listeners.
	 *
	 * @param tileLayout the tile layout
	 * @return the tile layout that was added
	 * @throws SystemException if a system exception occurred
	 */
    public TileLayout addTileLayout(TileLayout tileLayout) throws SystemException {
        tileLayout.setNew(true);
        tileLayout = tileLayoutPersistence.update(tileLayout, false);
        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());
        if (indexer != null) {
            try {
                indexer.reindex(tileLayout);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }
        return tileLayout;
    }

    /**
	 * Creates a new tile layout with the primary key. Does not add the tile layout to the database.
	 *
	 * @param tileLayoutId the primary key for the new tile layout
	 * @return the new tile layout
	 */
    public TileLayout createTileLayout(long tileLayoutId) {
        return tileLayoutPersistence.create(tileLayoutId);
    }

    /**
	 * Deletes the tile layout with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param tileLayoutId the primary key of the tile layout
	 * @throws PortalException if a tile layout with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
    public void deleteTileLayout(long tileLayoutId) throws PortalException, SystemException {
        TileLayout tileLayout = tileLayoutPersistence.remove(tileLayoutId);
        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());
        if (indexer != null) {
            try {
                indexer.delete(tileLayout);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }
    }

    /**
	 * Deletes the tile layout from the database. Also notifies the appropriate model listeners.
	 *
	 * @param tileLayout the tile layout
	 * @throws SystemException if a system exception occurred
	 */
    public void deleteTileLayout(TileLayout tileLayout) throws SystemException {
        tileLayoutPersistence.remove(tileLayout);
        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());
        if (indexer != null) {
            try {
                indexer.delete(tileLayout);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }
    }

    /**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery) throws SystemException {
        return tileLayoutPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end) throws SystemException {
        return tileLayoutPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end, OrderByComparator orderByComparator) throws SystemException {
        return tileLayoutPersistence.findWithDynamicQuery(dynamicQuery, start, end, orderByComparator);
    }

    /**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
    public long dynamicQueryCount(DynamicQuery dynamicQuery) throws SystemException {
        return tileLayoutPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
	 * Returns the tile layout with the primary key.
	 *
	 * @param tileLayoutId the primary key of the tile layout
	 * @return the tile layout
	 * @throws PortalException if a tile layout with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
    public TileLayout getTileLayout(long tileLayoutId) throws PortalException, SystemException {
        return tileLayoutPersistence.findByPrimaryKey(tileLayoutId);
    }

    public PersistedModel getPersistedModel(Serializable primaryKeyObj) throws PortalException, SystemException {
        return tileLayoutPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
	 * Returns a range of all the tile layouts.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of tile layouts
	 * @param end the upper bound of the range of tile layouts (not inclusive)
	 * @return the range of tile layouts
	 * @throws SystemException if a system exception occurred
	 */
    public List<TileLayout> getTileLayouts(int start, int end) throws SystemException {
        return tileLayoutPersistence.findAll(start, end);
    }

    /**
	 * Returns the number of tile layouts.
	 *
	 * @return the number of tile layouts
	 * @throws SystemException if a system exception occurred
	 */
    public int getTileLayoutsCount() throws SystemException {
        return tileLayoutPersistence.countAll();
    }

    /**
	 * Updates the tile layout in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param tileLayout the tile layout
	 * @return the tile layout that was updated
	 * @throws SystemException if a system exception occurred
	 */
    public TileLayout updateTileLayout(TileLayout tileLayout) throws SystemException {
        return updateTileLayout(tileLayout, true);
    }

    /**
	 * Updates the tile layout in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param tileLayout the tile layout
	 * @param merge whether to merge the tile layout with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the tile layout that was updated
	 * @throws SystemException if a system exception occurred
	 */
    public TileLayout updateTileLayout(TileLayout tileLayout, boolean merge) throws SystemException {
        tileLayout.setNew(false);
        tileLayout = tileLayoutPersistence.update(tileLayout, merge);
        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());
        if (indexer != null) {
            try {
                indexer.reindex(tileLayout);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }
        return tileLayout;
    }

    /**
	 * Returns the tile local service.
	 *
	 * @return the tile local service
	 */
    public TileLocalService getTileLocalService() {
        return tileLocalService;
    }

    /**
	 * Sets the tile local service.
	 *
	 * @param tileLocalService the tile local service
	 */
    public void setTileLocalService(TileLocalService tileLocalService) {
        this.tileLocalService = tileLocalService;
    }

    /**
	 * Returns the tile persistence.
	 *
	 * @return the tile persistence
	 */
    public TilePersistence getTilePersistence() {
        return tilePersistence;
    }

    /**
	 * Sets the tile persistence.
	 *
	 * @param tilePersistence the tile persistence
	 */
    public void setTilePersistence(TilePersistence tilePersistence) {
        this.tilePersistence = tilePersistence;
    }

    /**
	 * Returns the tile category local service.
	 *
	 * @return the tile category local service
	 */
    public TileCategoryLocalService getTileCategoryLocalService() {
        return tileCategoryLocalService;
    }

    /**
	 * Sets the tile category local service.
	 *
	 * @param tileCategoryLocalService the tile category local service
	 */
    public void setTileCategoryLocalService(TileCategoryLocalService tileCategoryLocalService) {
        this.tileCategoryLocalService = tileCategoryLocalService;
    }

    /**
	 * Returns the tile category persistence.
	 *
	 * @return the tile category persistence
	 */
    public TileCategoryPersistence getTileCategoryPersistence() {
        return tileCategoryPersistence;
    }

    /**
	 * Sets the tile category persistence.
	 *
	 * @param tileCategoryPersistence the tile category persistence
	 */
    public void setTileCategoryPersistence(TileCategoryPersistence tileCategoryPersistence) {
        this.tileCategoryPersistence = tileCategoryPersistence;
    }

    /**
	 * Returns the tile layout local service.
	 *
	 * @return the tile layout local service
	 */
    public TileLayoutLocalService getTileLayoutLocalService() {
        return tileLayoutLocalService;
    }

    /**
	 * Sets the tile layout local service.
	 *
	 * @param tileLayoutLocalService the tile layout local service
	 */
    public void setTileLayoutLocalService(TileLayoutLocalService tileLayoutLocalService) {
        this.tileLayoutLocalService = tileLayoutLocalService;
    }

    /**
	 * Returns the tile layout persistence.
	 *
	 * @return the tile layout persistence
	 */
    public TileLayoutPersistence getTileLayoutPersistence() {
        return tileLayoutPersistence;
    }

    /**
	 * Sets the tile layout persistence.
	 *
	 * @param tileLayoutPersistence the tile layout persistence
	 */
    public void setTileLayoutPersistence(TileLayoutPersistence tileLayoutPersistence) {
        this.tileLayoutPersistence = tileLayoutPersistence;
    }

    /**
	 * Returns the tile provider local service.
	 *
	 * @return the tile provider local service
	 */
    public TileProviderLocalService getTileProviderLocalService() {
        return tileProviderLocalService;
    }

    /**
	 * Sets the tile provider local service.
	 *
	 * @param tileProviderLocalService the tile provider local service
	 */
    public void setTileProviderLocalService(TileProviderLocalService tileProviderLocalService) {
        this.tileProviderLocalService = tileProviderLocalService;
    }

    /**
	 * Returns the tile provider persistence.
	 *
	 * @return the tile provider persistence
	 */
    public TileProviderPersistence getTileProviderPersistence() {
        return tileProviderPersistence;
    }

    /**
	 * Sets the tile provider persistence.
	 *
	 * @param tileProviderPersistence the tile provider persistence
	 */
    public void setTileProviderPersistence(TileProviderPersistence tileProviderPersistence) {
        this.tileProviderPersistence = tileProviderPersistence;
    }

    /**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
    public CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
    public void setCounterLocalService(CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
    public ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
    public void setResourceLocalService(ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
    public ResourceService getResourceService() {
        return resourceService;
    }

    /**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
    public void setResourceService(ResourceService resourceService) {
        this.resourceService = resourceService;
    }

    /**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
    public ResourcePersistence getResourcePersistence() {
        return resourcePersistence;
    }

    /**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
    public void setResourcePersistence(ResourcePersistence resourcePersistence) {
        this.resourcePersistence = resourcePersistence;
    }

    /**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
    public UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
    public void setUserLocalService(UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
    public UserService getUserService() {
        return userService;
    }

    /**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    /**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        PersistedModelLocalServiceRegistryUtil.register("nl.openu.tiles.model.TileLayout", tileLayoutLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister("nl.openu.tiles.model.TileLayout");
    }

    /**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    protected Class<?> getModelClass() {
        return TileLayout.class;
    }

    protected String getModelClassName() {
        return TileLayout.class.getName();
    }

    /**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = tileLayoutPersistence.getDataSource();
            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource, sql, new int[0]);
            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }

    @BeanReference(type = TileLocalService.class)
    protected TileLocalService tileLocalService;

    @BeanReference(type = TilePersistence.class)
    protected TilePersistence tilePersistence;

    @BeanReference(type = TileCategoryLocalService.class)
    protected TileCategoryLocalService tileCategoryLocalService;

    @BeanReference(type = TileCategoryPersistence.class)
    protected TileCategoryPersistence tileCategoryPersistence;

    @BeanReference(type = TileLayoutLocalService.class)
    protected TileLayoutLocalService tileLayoutLocalService;

    @BeanReference(type = TileLayoutPersistence.class)
    protected TileLayoutPersistence tileLayoutPersistence;

    @BeanReference(type = TileProviderLocalService.class)
    protected TileProviderLocalService tileProviderLocalService;

    @BeanReference(type = TileProviderPersistence.class)
    protected TileProviderPersistence tileProviderPersistence;

    @BeanReference(type = CounterLocalService.class)
    protected CounterLocalService counterLocalService;

    @BeanReference(type = ResourceLocalService.class)
    protected ResourceLocalService resourceLocalService;

    @BeanReference(type = ResourceService.class)
    protected ResourceService resourceService;

    @BeanReference(type = ResourcePersistence.class)
    protected ResourcePersistence resourcePersistence;

    @BeanReference(type = UserLocalService.class)
    protected UserLocalService userLocalService;

    @BeanReference(type = UserService.class)
    protected UserService userService;

    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;

    private static Log _log = LogFactoryUtil.getLog(TileLayoutLocalServiceBaseImpl.class);

    private String _beanIdentifier;
}
