package jmri.jmrit.operations.router;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import jmri.jmrit.XmlFile;
import jmri.jmrit.operations.locations.Location;
import jmri.jmrit.operations.locations.LocationManagerXml;
import jmri.jmrit.operations.locations.Schedule;
import jmri.jmrit.operations.locations.ScheduleItem;
import jmri.jmrit.operations.locations.ScheduleManager;
import jmri.jmrit.operations.locations.Track;
import jmri.jmrit.operations.locations.LocationManager;
import jmri.jmrit.operations.rollingstock.cars.Car;
import jmri.jmrit.operations.rollingstock.cars.CarLoads;
import jmri.jmrit.operations.rollingstock.cars.CarManager;
import jmri.jmrit.operations.rollingstock.cars.CarManagerXml;
import jmri.jmrit.operations.rollingstock.cars.CarTypes;
import jmri.jmrit.operations.rollingstock.engines.EngineManagerXml;
import jmri.jmrit.operations.routes.Route;
import jmri.jmrit.operations.routes.RouteLocation;
import jmri.jmrit.operations.routes.RouteManagerXml;
import jmri.jmrit.operations.setup.OperationsSetupXml;
import jmri.jmrit.operations.setup.Setup;
import jmri.jmrit.operations.routes.RouteManager;
import jmri.jmrit.operations.trains.TrainManager;
import jmri.jmrit.operations.trains.Train;
import jmri.jmrit.operations.trains.TrainManagerXml;
import java.io.File;
import java.util.List;
import java.util.Locale;

/**
 * Tests for the Operations Router class
 *  
 * @author	Daniel Boudreau Copyright (C) 2010, 2011
 * @version $Revision: 19040 $
 */
public class OperationsCarRouterTest extends TestCase {

    private final int DIRECTION_ALL = Location.EAST + Location.WEST + Location.NORTH + Location.SOUTH;

    public void testCarRoutingDefaults() {
        Assert.assertTrue("Default car routing true", Setup.isCarRoutingEnabled());
        Assert.assertFalse("Default routing through staging", Setup.isCarRoutingViaStagingEnabled());
    }

    /** Test car routing.  First set of tests confirm proper operation of just one location.
	 * The next set of tests confirms operation using one train and two locations.
	 * When this test was written, routing up to 5 trains and 6 locations was supported.
	 * 
	 */
    public void testCarRouting() {
        TrainManager.instance().dispose();
        LocationManager.instance().dispose();
        TrainManager tmanager = TrainManager.instance();
        RouteManager rmanager = RouteManager.instance();
        LocationManager lmanager = LocationManager.instance();
        Router router = Router.instance();
        CarManager cmanager = CarManager.instance();
        CarTypes ct = CarTypes.instance();
        ct.addName("Boxcar");
        ct.addName("Caboose");
        ct.addName("Flat");
        Location Acton = lmanager.newLocation("Acton MA");
        Assert.assertEquals("Location 1 Name", "Acton MA", Acton.getName());
        Assert.assertEquals("Location 1 Initial Length", 0, Acton.getLength());
        Track AS1 = Acton.addTrack("Acton Siding 1", Track.SIDING);
        AS1.setLength(300);
        Assert.assertEquals("Location AS1 Name", "Acton Siding 1", AS1.getName());
        Assert.assertEquals("Location AS1 Length", 300, AS1.getLength());
        Track AS2 = Acton.addTrack("Acton Siding 2", Track.SIDING);
        AS2.setLength(300);
        Assert.assertEquals("Location AS2 Name", "Acton Siding 2", AS2.getName());
        Assert.assertEquals("Location AS2 Length", 300, AS2.getLength());
        Track AY = Acton.addTrack("Acton Yard", Track.YARD);
        AY.setLength(400);
        Assert.assertEquals("Location AY Name", "Acton Yard", AY.getName());
        Assert.assertEquals("Location AY Length", 400, AY.getLength());
        Track AI = Acton.addTrack("Acton Interchange", Track.INTERCHANGE);
        AI.setLength(500);
        Assert.assertEquals("Track AI Name", "Acton Interchange", AI.getName());
        Assert.assertEquals("Track AI Length", 500, AI.getLength());
        Assert.assertEquals("Track AI Train Directions", DIRECTION_ALL, AI.getTrainDirections());
        Location Bedford = lmanager.newLocation("Bedford MA");
        Assert.assertEquals("Location 1 Name", "Bedford MA", Bedford.getName());
        Assert.assertEquals("Location 1 Initial Length", 0, Bedford.getLength());
        Track BS1 = Bedford.addTrack("Bedford Siding 1", Track.SIDING);
        BS1.setLength(300);
        Assert.assertEquals("Location BS1 Name", "Bedford Siding 1", BS1.getName());
        Assert.assertEquals("Location BS1 Length", 300, BS1.getLength());
        Track BS2 = Bedford.addTrack("Bedford Siding 2", Track.SIDING);
        BS2.setLength(300);
        Assert.assertEquals("Location BS2 Name", "Bedford Siding 2", BS2.getName());
        Assert.assertEquals("Location BS2 Length", 300, BS2.getLength());
        Track BY = Bedford.addTrack("Bedford Yard", Track.YARD);
        BY.setLength(400);
        Assert.assertEquals("Location BY Name", "Bedford Yard", BY.getName());
        Assert.assertEquals("Location BY Length", 400, BY.getLength());
        Track BI = Bedford.addTrack("Bedford Interchange", Track.INTERCHANGE);
        BI.setLength(500);
        Assert.assertEquals("Track BI Name", "Bedford Interchange", BI.getName());
        Assert.assertEquals("Track BI Length", 500, BI.getLength());
        Location Clinton = lmanager.newLocation("Clinton MA");
        Assert.assertEquals("Location 1 Name", "Clinton MA", Clinton.getName());
        Assert.assertEquals("Location 1 Initial Length", 0, Clinton.getLength());
        Track CS1 = Clinton.addTrack("Clinton Siding 1", Track.SIDING);
        CS1.setLength(300);
        Assert.assertEquals("Location CS1 Name", "Clinton Siding 1", CS1.getName());
        Assert.assertEquals("Location CS1 Length", 300, CS1.getLength());
        Track CS2 = Clinton.addTrack("Clinton Siding 2", Track.SIDING);
        CS2.setLength(300);
        Assert.assertEquals("Location CS2 Name", "Clinton Siding 2", CS2.getName());
        Assert.assertEquals("Location CS2 Length", 300, BS2.getLength());
        Track CY = Clinton.addTrack("Clinton Yard", Track.YARD);
        CY.setLength(400);
        Assert.assertEquals("Location CY Name", "Clinton Yard", CY.getName());
        Assert.assertEquals("Location CY Length", 400, CY.getLength());
        Track CI = Clinton.addTrack("Clinton Interchange", Track.INTERCHANGE);
        CI.setLength(500);
        Assert.assertEquals("Track CI Name", "Clinton Interchange", CI.getName());
        Assert.assertEquals("Track CI Length", 500, CI.getLength());
        Location Danbury = lmanager.newLocation("Danbury MA");
        Track DS1 = Danbury.addTrack("Danbury Siding 1", Track.SIDING);
        DS1.setLength(300);
        Track DS2 = Danbury.addTrack("Danbury Siding 2", Track.SIDING);
        DS2.setLength(300);
        Track DY = Danbury.addTrack("Danbury Yard", Track.YARD);
        DY.setLength(400);
        Track DI = Danbury.addTrack("Danbury Interchange", Track.INTERCHANGE);
        DI.setLength(500);
        Location Essex = lmanager.newLocation("Essex MA");
        Track ES1 = Essex.addTrack("Essex Siding 1", Track.SIDING);
        ES1.setLength(300);
        Track ES2 = Essex.addTrack("Essex Siding 2", Track.SIDING);
        ES2.setLength(300);
        Track EY = Essex.addTrack("Essex Yard", Track.YARD);
        EY.setLength(400);
        Track EI = Essex.addTrack("Essex Interchange", Track.INTERCHANGE);
        EI.setLength(500);
        Location Foxboro = lmanager.newLocation("Foxboro MA");
        Track FS1 = Foxboro.addTrack("Foxboro Siding 1", Track.SIDING);
        FS1.setLength(300);
        Track FS2 = Foxboro.addTrack("Foxboro Siding 2", Track.SIDING);
        FS2.setLength(300);
        Track FY = Foxboro.addTrack("Foxboro Yard", Track.YARD);
        FY.setLength(400);
        Track FI = Foxboro.addTrack("Foxboro Interchange", Track.INTERCHANGE);
        FI.setLength(500);
        Car c3 = cmanager.newCar("BA", "3");
        c3.setType("Boxcar");
        c3.setLength("40");
        c3.setOwner("DAB");
        c3.setBuilt("1984");
        Assert.assertEquals("Box Car 3 Length", "40", c3.getLength());
        Car c4 = cmanager.newCar("BB", "4");
        c4.setType("Flat");
        c4.setLength("40");
        c4.setOwner("AT");
        c4.setBuilt("1-86");
        Assert.assertEquals("Box Car 4 Length", "40", c4.getLength());
        Assert.assertEquals("place car at BI", Track.OKAY, c3.setLocation(Acton, AS1));
        Assert.assertFalse("Try routing no next destination", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        Assert.assertEquals("place car at Acton", Track.OKAY, c4.setLocation(Acton, AS1));
        Assert.assertFalse("Try routing no next destination", router.setDestination(c4, null, null));
        Assert.assertEquals("Check car's destination", "", c4.getDestinationName());
        c3.setNextDestination(Acton);
        Assert.assertFalse("Try routing next destination equal to current", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertFalse("Try routing next track not equal to current", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS1);
        Assert.assertFalse("Try routing next track equal to current", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        Train ActonTrain = tmanager.newTrain("Acton Local");
        Route routeA = rmanager.newRoute("A");
        RouteLocation rlA = routeA.addLocation(Acton);
        rlA.setTrainIconX(25);
        rlA.setTrainIconY(250);
        ActonTrain.setRoute(routeA);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing next track with Acton Local", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Siding 2", c3.getDestinationTrackName());
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing next track with Acton Local", router.setDestination(c3, ActonTrain, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Siding 2", c3.getDestinationTrackName());
        ActonTrain.deleteTypeName("Boxcar");
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertFalse("Try routing with train that doesn't service Boxcar", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        c4.setDestination(null, null);
        c4.setNextDestination(Acton);
        c4.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing with train that service Flat", router.setDestination(c4, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c4.getDestinationName());
        ActonTrain.addTypeName("Boxcar");
        Assert.assertTrue("Try routing with train that does service Boxcar", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        ActonTrain.addRoadName("BA");
        ActonTrain.setRoadOption(Train.EXCLUDEROADS);
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertFalse("Try routing with train that doesn't service road name BA", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        c4.setDestination(null, null);
        c4.setNextDestination(Acton);
        c4.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing with train that services road BB", router.setDestination(c4, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c4.getDestinationName());
        ActonTrain.setRoadOption(Train.ALLROADS);
        Assert.assertTrue("Try routing with train that does service road name BA", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        ActonTrain.setBuiltStartYear("1985");
        ActonTrain.setBuiltEndYear("2010");
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertFalse("Try routing with train that doesn't service car built before 1985", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        c4.setDestination(null, null);
        c4.setNextDestination(Acton);
        c4.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing with train that services car built after 1985", router.setDestination(c4, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c4.getDestinationName());
        ActonTrain.setBuiltStartYear("1983");
        Assert.assertTrue("Try routing with train that doesn't service car built before 1983", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        c3.setLoad("Tools");
        ActonTrain.addLoadName("Tools");
        ActonTrain.setLoadOption(Train.EXCLUDELOADS);
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertFalse("Try routing with train that doesn't service load Tools", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        c4.setDestination(null, null);
        c4.setNextDestination(Acton);
        c4.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing with train that services load E", router.setDestination(c4, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c4.getDestinationName());
        ActonTrain.setLoadOption(Train.ALLLOADS);
        Assert.assertTrue("Try routing with train that that does service load Tools", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        rlA.setCanPickup(false);
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertFalse("Try routing with train that doesn't pickup cars", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        rlA.setCanPickup(true);
        Assert.assertTrue("Try routing with train that that can pickup cars", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        rlA.setCanDrop(false);
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertFalse("Try routing with train that doesn't drop cars", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        rlA.setCanDrop(true);
        Assert.assertTrue("Try routing with train that that can drop cars", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        rlA.setMaxCarMoves(0);
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertFalse("Try routing with train that doesn't service location", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        rlA.setMaxCarMoves(10);
        Assert.assertTrue("Try routing with train that does service location", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("check default direction", Track.NORTH, rlA.getTrainDirection());
        Acton.setTrainDirections(Track.SOUTH);
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing with local train that departs north, location south", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Acton.setTrainDirections(Track.NORTH);
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing with local train that departs north, location north", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        AS1.setTrainDirections(0);
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing with local only", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        AS1.setTrainDirections(Track.NORTH);
        Assert.assertTrue("Try routing with local train that departs north, track north", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        AS2.setTrainDirections(0);
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing with local train", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        AS2.setTrainDirections(Track.NORTH);
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing with train that departs north, track north", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Route routeA2 = rmanager.newRoute("A2");
        RouteLocation rlA2 = routeA2.addLocation(Acton);
        rlA2.setTrainIconX(25);
        rlA2.setTrainIconY(250);
        Train ActonTrain2 = tmanager.newTrain("Acton Local 2");
        ActonTrain2.setRoute(routeA2);
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing next track with Acton Local", router.setDestination(c3, ActonTrain2, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Siding 2", c3.getDestinationTrackName());
        ActonTrain2.deleteTypeName("Boxcar");
        c3.setDestination(null, null);
        c3.setNextDestination(Acton);
        c3.setNextDestTrack(AS2);
        Assert.assertTrue("Try routing with train that doesn't service Boxcar", router.setDestination(c3, ActonTrain2, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        c3.setNextDestTrack(null);
        Assert.assertFalse("Try routing with next destination", router.setDestination(c3, null, null));
        Train ActonToBedfordTrain = tmanager.newTrain("Acton to Bedford");
        Route routeAB = rmanager.newRoute("AB");
        RouteLocation rlActon = routeAB.addLocation(Acton);
        RouteLocation rlBedford = routeAB.addLocation(Bedford);
        rlBedford.setTrainIconX(100);
        rlBedford.setTrainIconY(250);
        ActonToBedfordTrain.setRoute(routeAB);
        Assert.assertTrue("Try routing with next destination and train", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        c3.setNextDestTrack(null);
        Assert.assertTrue("Try routing with next destination and train", router.setDestination(c3, ActonToBedfordTrain, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        ActonToBedfordTrain.deleteTypeName("Boxcar");
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        Assert.assertFalse("Try routing with train that doesn't service Boxcar", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        c4.setDestination(null, null);
        c4.setNextDestination(Bedford);
        c4.setNextDestTrack(null);
        Assert.assertTrue("Try routing with train that service Flat", router.setDestination(c4, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c4.getDestinationName());
        ActonToBedfordTrain.addTypeName("Boxcar");
        Assert.assertTrue("Try routing with train that does service Boxcar", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        ActonToBedfordTrain.addRoadName("BA");
        ActonToBedfordTrain.setRoadOption(Train.EXCLUDEROADS);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        Assert.assertFalse("Try routing with train that doesn't service road name BA", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        c4.setDestination(null, null);
        c4.setNextDestination(Bedford);
        Assert.assertTrue("Try routing with train that services road BB", router.setDestination(c4, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c4.getDestinationName());
        ActonToBedfordTrain.setRoadOption(Train.ALLROADS);
        Assert.assertTrue("Try routing with train that does service road name BA", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        ActonToBedfordTrain.setBuiltStartYear("1985");
        ActonToBedfordTrain.setBuiltEndYear("2010");
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        Assert.assertFalse("Try routing with train that doesn't service car built before 1985", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        c4.setDestination(null, null);
        c4.setNextDestination(Bedford);
        Assert.assertTrue("Try routing with train that services car built after 1985", router.setDestination(c4, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c4.getDestinationName());
        ActonToBedfordTrain.setBuiltStartYear("1983");
        Assert.assertTrue("Try routing with train that doesn't service car built before 1983", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        c3.setLoad("Tools");
        ActonToBedfordTrain.addLoadName("Tools");
        ActonToBedfordTrain.setLoadOption(Train.EXCLUDELOADS);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        Assert.assertFalse("Try routing with train that doesn't service load Tools", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        c4.setDestination(null, null);
        c4.setNextDestination(Bedford);
        Assert.assertTrue("Try routing with train that services load E", router.setDestination(c4, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c4.getDestinationName());
        ActonToBedfordTrain.setLoadOption(Train.ALLLOADS);
        Assert.assertTrue("Try routing with train that that does service load Tools", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        rlActon.setCanPickup(false);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        Assert.assertFalse("Try routing with train that doesn't pickup cars", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        rlActon.setCanPickup(true);
        Assert.assertTrue("Try routing with train that that can pickup cars", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        rlBedford.setCanDrop(false);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        Assert.assertFalse("Try routing with train that doesn't drop cars", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        rlBedford.setCanDrop(true);
        Assert.assertTrue("Try routing with train that that can drop cars", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        rlBedford.setMaxCarMoves(0);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        Assert.assertFalse("Try routing with train that doesn't service destination", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        rlBedford.setMaxCarMoves(5);
        Assert.assertTrue("Try routing with train that does service destination", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        rlActon.setMaxCarMoves(0);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        Assert.assertFalse("Try routing with train that doesn't service location", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        rlActon.setMaxCarMoves(5);
        Assert.assertTrue("Try routing with train that does service location", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        Assert.assertEquals("check default direction", Track.NORTH, rlActon.getTrainDirection());
        Acton.setTrainDirections(Track.SOUTH);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        ActonTrain.deleteTypeName("Boxcar");
        Assert.assertFalse("Try routing with train that departs north, location south", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        Acton.setTrainDirections(Track.NORTH);
        Assert.assertTrue("Try routing with train that departs north, location north", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        AS1.setTrainDirections(Track.SOUTH);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        Assert.assertFalse("Try routing with train that departs north, track south", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        AS1.setTrainDirections(Track.NORTH);
        Assert.assertTrue("Try routing with train that departs north, track north", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        Bedford.setTrainDirections(Track.SOUTH);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        Assert.assertFalse("Try routing with train that arrives north, destination south", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        Bedford.setTrainDirections(Track.NORTH);
        Assert.assertTrue("Try routing with train that arrives north, destination north", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        BS1.setTrainDirections(Track.SOUTH);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        Assert.assertTrue("Try routing with train that arrives north, but no next track", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        c3.setNextDestTrack(BS1);
        Assert.assertFalse("Try routing with train that arrives north, now with track", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        BS1.setTrainDirections(Track.NORTH);
        Assert.assertTrue("Try routing with train that departs north, track north", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        AS1.setTrainDirections(0);
        ActonTrain.addTypeName("Boxcar");
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        c3.setNextDestTrack(BS1);
        Assert.assertTrue("Try routing two trains via interchange", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Interchange", c3.getDestinationTrackName());
        AI.setDropOption(Track.TRAINS);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        c3.setNextDestTrack(BS1);
        Assert.assertTrue("Try routing two trains via yard", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Yard", c3.getDestinationTrackName());
        AI.setDropOption(Track.ANY);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        c3.setNextDestTrack(BS1);
        ActonTrain2.addTypeName("Boxcar");
        Assert.assertTrue("Try routing two trains", router.setDestination(c3, ActonTrain2, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Interchange", c3.getDestinationTrackName());
        ActonTrain2.addRoadName("BA");
        ActonTrain2.setRoadOption(Train.EXCLUDEROADS);
        c3.setDestination(null, null);
        c3.setNextDestination(Bedford);
        c3.setNextDestTrack(BS1);
        Assert.assertTrue("Try routing two trains via yard", router.setDestination(c3, ActonTrain2, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "", c3.getDestinationTrackName());
        c3.setDestination(null, null);
        c3.setNextDestination(Clinton);
        c3.setNextDestTrack(null);
        Assert.assertFalse("Try routing with next destination", router.setDestination(c3, null, null));
        Train BedfordToClintonTrain = tmanager.newTrain("Bedford to Clinton");
        Route routeBC = rmanager.newRoute("BC");
        routeBC.addLocation(Bedford);
        RouteLocation rlchelmsford = routeBC.addLocation(Clinton);
        rlchelmsford.setTrainIconX(175);
        rlchelmsford.setTrainIconY(250);
        BedfordToClintonTrain.setRoute(routeBC);
        Assert.assertTrue("Try routing with next destination and train", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Interchange", c3.getDestinationTrackName());
        ActonTrain2.setRoadOption(Train.ALLROADS);
        c3.setDestination(null, null);
        c3.setNextDestination(Clinton);
        Assert.assertTrue("Try routing three trains", router.setDestination(c3, ActonTrain2, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Interchange", c3.getDestinationTrackName());
        c3.setDestination(null, null);
        c3.setNextDestination(Clinton);
        ActonTrain2.setBuiltStartYear("1985");
        ActonTrain2.setBuiltEndYear("2010");
        Assert.assertTrue("Try routing three trains", router.setDestination(c3, ActonTrain2, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "", c3.getDestinationTrackName());
        ActonTrain2.setBuiltStartYear("1983");
        c3.setDestination(null, null);
        c3.setNextDestination(Danbury);
        Assert.assertFalse("Try routing with next destination", router.setDestination(c3, null, null));
        Train ClintonToDanburyTrain = tmanager.newTrain("Clinton to Danbury");
        Route routeCD = rmanager.newRoute("CD");
        routeCD.addLocation(Clinton);
        RouteLocation rlDanbury = routeCD.addLocation(Danbury);
        rlDanbury.setTrainIconX(250);
        rlDanbury.setTrainIconY(250);
        ClintonToDanburyTrain.setRoute(routeCD);
        Assert.assertTrue("Try routing with next destination and train", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Interchange", c3.getDestinationTrackName());
        c3.setDestination(null, null);
        c3.setNextDestination(Danbury);
        Assert.assertTrue("Try routing four trains", router.setDestination(c3, ActonTrain2, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Interchange", c3.getDestinationTrackName());
        c3.setDestination(null, null);
        c3.setNextDestination(Danbury);
        ActonTrain2.addLoadName("Tools");
        ActonTrain2.setLoadOption(Train.EXCLUDELOADS);
        Assert.assertTrue("Try routing four trains", router.setDestination(c3, ActonTrain2, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "", c3.getDestinationTrackName());
        ActonTrain2.setLoadOption(Train.ALLLOADS);
        c3.setDestination(null, null);
        c3.setNextDestination(Essex);
        Assert.assertFalse("Try routing with next destination", router.setDestination(c3, null, null));
        Train DanburyToEssexTrain = tmanager.newTrain("Danbury to Essex");
        Route routeDE = rmanager.newRoute("DE");
        RouteLocation rlDanbury2 = routeDE.addLocation(Danbury);
        RouteLocation rlEssex = routeDE.addLocation(Essex);
        rlDanbury2.setMaxCarMoves(8);
        rlEssex.setMaxCarMoves(8);
        rlEssex.setTrainIconX(25);
        rlEssex.setTrainIconY(275);
        DanburyToEssexTrain.setRoute(routeDE);
        Assert.assertTrue("Try routing with next destination and train", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Interchange", c3.getDestinationTrackName());
        c3.setDestination(null, null);
        c3.setNextDestination(Essex);
        Assert.assertTrue("Try routing five trains", router.setDestination(c3, ActonTrain2, null));
        Assert.assertEquals("Check car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Acton Interchange", c3.getDestinationTrackName());
        c3.setDestination(null, null);
        c3.setNextDestination(Essex);
        rlA2.setCanPickup(false);
        Assert.assertTrue("Try routing five trains", router.setDestination(c3, ActonTrain2, null));
        Assert.assertEquals("Check car's destination", "", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "", c3.getDestinationTrackName());
        c3.setDestination(null, null);
        c3.setNextDestination(Foxboro);
        Assert.assertFalse("Try routing with next destination", router.setDestination(c3, null, null));
        Train EssexToFoxboroTrain = tmanager.newTrain("Essex to Foxboro");
        Route routeEF = rmanager.newRoute("EF");
        routeEF.addLocation(Essex);
        RouteLocation rlFoxboro = routeEF.addLocation(Foxboro);
        rlFoxboro.setTrainIconX(100);
        rlFoxboro.setTrainIconY(275);
        EssexToFoxboroTrain.setRoute(routeEF);
        Assert.assertFalse("Try routing with next destination and train", router.setDestination(c3, null, null));
        Assert.assertFalse("Try routing with next destination and train", router.setDestination(c3, ActonTrain, null));
        Assert.assertFalse("Try routing with next destination and train", router.setDestination(c3, ActonTrain2, null));
        AS1.setTrainDirections(Track.NORTH);
        Assert.assertTrue("Try routing with next destination and train", router.setDestination(c3, null, null));
        Assert.assertEquals("Check car's destination", "Bedford MA", c3.getDestinationName());
        Assert.assertEquals("Check car's destination track", "Bedford Interchange", c3.getDestinationTrackName());
        AS1.setTrainDirections(0);
    }

    public void testRoutingWithTrains() {
        TrainManager tmanager = TrainManager.instance();
        CarManager cmanager = CarManager.instance();
        LocationManager lmanager = LocationManager.instance();
        List<String> trains = tmanager.getTrainsByNameList();
        Assert.assertEquals("confirm number of trains", 7, trains.size());
        Train ActonTrain = tmanager.getTrainByName("Acton Local");
        Train ActonToBedfordTrain = tmanager.getTrainByName("Acton to Bedford");
        Train BedfordToClintonTrain = tmanager.getTrainByName("Bedford to Clinton");
        Train ClintonToDanburyTrain = tmanager.getTrainByName("Clinton to Danbury");
        Train DanburyToEssexTrain = tmanager.getTrainByName("Danbury to Essex");
        Train EssexToFoxboroTrain = tmanager.getTrainByName("Essex to Foxboro");
        Car c3 = cmanager.getByRoadAndNumber("BA", "3");
        Car c4 = cmanager.getByRoadAndNumber("BB", "4");
        Location Essex = lmanager.getLocationByName("Essex MA");
        Track ES2 = Essex.getTrackByName("Essex Siding 2", Track.SIDING);
        Location Foxboro = lmanager.getLocationByName("Foxboro MA");
        Location Gulf = lmanager.newLocation("Gulf");
        Assert.assertEquals("car's location Acton", "Acton MA", c3.getLocationName());
        Assert.assertEquals("car's location Acton", "Acton Siding 1", c3.getTrackName());
        Assert.assertEquals("car's location Acton", "Acton MA", c4.getLocationName());
        Assert.assertEquals("car's location Acton", "Acton Siding 1", c4.getTrackName());
        c3.setDestination(null, null);
        c3.setNextDestination(Essex);
        c3.setNextDestTrack(ES2);
        c3.setLoad("L");
        c3.setReturnWhenEmptyDestination(Foxboro);
        c4.setDestination(null, null);
        c4.setNextDestination(Gulf);
        ActonTrain.build();
        Assert.assertEquals("car's destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("car's destinaton track", "Acton Interchange", c3.getDestinationTrackName());
        Assert.assertEquals("car's final destinaton", Essex, c3.getNextDestination());
        Assert.assertEquals("car's final destinaton track", ES2, c3.getNextDestTrack());
        Assert.assertEquals("car's destination", "Acton MA", c4.getDestinationName());
        Assert.assertEquals("car's destinaton track", "Acton Yard", c4.getDestinationTrackName());
        Assert.assertEquals("car's final destinaton", Gulf, c4.getNextDestination());
        Assert.assertEquals("car's final destinaton track", null, c4.getNextDestTrack());
        ActonTrain.reset();
        Assert.assertEquals("car's destination", "", c3.getDestinationName());
        Assert.assertEquals("car's destinaton track", "", c3.getDestinationTrackName());
        Assert.assertEquals("car's final destinaton", Essex, c3.getNextDestination());
        Assert.assertEquals("car's final destinaton track", ES2, c3.getNextDestTrack());
        Assert.assertEquals("car's load", "L", c3.getLoad());
        Assert.assertEquals("car's final destinaton", Gulf, c4.getNextDestination());
        Assert.assertEquals("car's final destinaton track", null, c4.getNextDestTrack());
        ActonTrain.build();
        ActonTrain.terminate();
        Assert.assertEquals("car's location Acton", "Acton MA", c3.getLocationName());
        Assert.assertEquals("car's location Acton", "Acton Interchange", c3.getTrackName());
        Assert.assertEquals("car's destination", "", c3.getDestinationName());
        Assert.assertEquals("car's destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("car's final destinaton", Essex, c3.getNextDestination());
        Assert.assertEquals("car's final destinaton track", ES2, c3.getNextDestTrack());
        Assert.assertEquals("car's load", "L", c3.getLoad());
        Assert.assertEquals("car's location Acton", "Acton MA", c4.getLocationName());
        Assert.assertEquals("car's location Acton", "Acton Yard", c4.getTrackName());
        Assert.assertEquals("car's destination", "", c4.getDestinationName());
        Assert.assertEquals("car's destination track", "", c4.getDestinationTrackName());
        ActonToBedfordTrain.build();
        ActonToBedfordTrain.terminate();
        Assert.assertEquals("car's location Bedford", "Bedford MA", c3.getLocationName());
        Assert.assertEquals("car's location Bedford", "Bedford Interchange", c3.getTrackName());
        Assert.assertEquals("car's destination", "", c3.getDestinationName());
        Assert.assertEquals("car's destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("car's load", "L", c3.getLoad());
        Assert.assertEquals("car's final destinaton", Essex, c3.getNextDestination());
        Assert.assertEquals("car's final destinaton track", ES2, c3.getNextDestTrack());
        Assert.assertEquals("car's location Bedford", "Bedford MA", c4.getLocationName());
        Assert.assertEquals("car's location Bedford", "Bedford Siding 2", c4.getTrackName());
        Assert.assertEquals("car's destination", "", c4.getDestinationName());
        Assert.assertEquals("car's destination track", "", c4.getDestinationTrackName());
        BedfordToClintonTrain.build();
        BedfordToClintonTrain.terminate();
        Assert.assertEquals("car's location Clinton", "Clinton MA", c3.getLocationName());
        Assert.assertEquals("car's location Clinton", "Clinton Interchange", c3.getTrackName());
        Assert.assertEquals("car's destination", "", c3.getDestinationName());
        Assert.assertEquals("car's destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("car's load", "L", c3.getLoad());
        Assert.assertEquals("car's final destinaton", Essex, c3.getNextDestination());
        Assert.assertEquals("car's final destinaton track", ES2, c3.getNextDestTrack());
        Assert.assertEquals("car's location Clinton", "Clinton MA", c4.getLocationName());
        Assert.assertEquals("car's location Clinton", "Clinton Siding 1", c4.getTrackName());
        Assert.assertEquals("car's destination", "", c4.getDestinationName());
        Assert.assertEquals("car's destination track", "", c4.getDestinationTrackName());
        ClintonToDanburyTrain.build();
        ClintonToDanburyTrain.terminate();
        Assert.assertEquals("car's location Danbury", "Danbury MA", c3.getLocationName());
        Assert.assertEquals("car's location Danbury", "Danbury Interchange", c3.getTrackName());
        Assert.assertEquals("car's destination", "", c3.getDestinationName());
        Assert.assertEquals("car's destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("car's load", "L", c3.getLoad());
        Assert.assertEquals("car's final destinaton", Essex, c3.getNextDestination());
        Assert.assertEquals("car's final destinaton track", ES2, c3.getNextDestTrack());
        Assert.assertEquals("car's location Danbury", "Danbury MA", c4.getLocationName());
        Assert.assertEquals("car's location Danbury", "Danbury Siding 1", c4.getTrackName());
        Assert.assertEquals("car's destination", "", c4.getDestinationName());
        Assert.assertEquals("car's destination track", "", c4.getDestinationTrackName());
        DanburyToEssexTrain.build();
        DanburyToEssexTrain.terminate();
        Assert.assertEquals("car's location Essex", "Essex MA", c3.getLocationName());
        Assert.assertEquals("car's location Essex", "Essex Siding 2", c3.getTrackName());
        Assert.assertEquals("car's destination", "", c3.getDestinationName());
        Assert.assertEquals("car's destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("car's load", "E", c3.getLoad());
        Assert.assertEquals("car's final destinaton", Foxboro, c3.getNextDestination());
        Assert.assertEquals("car's final destinaton track", null, c3.getNextDestTrack());
        Assert.assertEquals("car's location Essex", "Essex MA", c4.getLocationName());
        Assert.assertEquals("car's location Essex", "Essex Siding 1", c4.getTrackName());
        Assert.assertEquals("car's destination", "", c4.getDestinationName());
        Assert.assertEquals("car's destination track", "", c4.getDestinationTrackName());
        EssexToFoxboroTrain.build();
        EssexToFoxboroTrain.terminate();
        Assert.assertEquals("car's location Foxboro", "Foxboro MA", c3.getLocationName());
        Assert.assertEquals("car's location Foxboro", "Foxboro Siding 1", c3.getTrackName());
        Assert.assertEquals("car's destination", "", c3.getDestinationName());
        Assert.assertEquals("car's destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("car's load", "L", c3.getLoad());
        Assert.assertEquals("car's location Foxboro", "Foxboro MA", c4.getLocationName());
        Assert.assertEquals("car's location Foxboro", "Foxboro Siding 2", c4.getTrackName());
        Assert.assertEquals("car's destination", "", c4.getDestinationName());
        Assert.assertEquals("car's destination track", "", c4.getDestinationTrackName());
    }

    public void testRoutingWithSimpleSchedules() {
        TrainManager tmanager = TrainManager.instance();
        CarManager cmanager = CarManager.instance();
        LocationManager lmanager = LocationManager.instance();
        List<String> trains = tmanager.getTrainsByNameList();
        Assert.assertEquals("confirm number of trains", 7, trains.size());
        Train ActonTrain = tmanager.getTrainByName("Acton Local");
        Train ActonToBedfordTrain = tmanager.getTrainByName("Acton to Bedford");
        Train BedfordToClintonTrain = tmanager.getTrainByName("Bedford to Clinton");
        Train ClintonToDanburyTrain = tmanager.getTrainByName("Clinton to Danbury");
        Train DanburyToEssexTrain = tmanager.getTrainByName("Danbury to Essex");
        Train EssexToFoxboroTrain = tmanager.getTrainByName("Essex to Foxboro");
        Car c3 = cmanager.getByRoadAndNumber("BA", "3");
        Car c4 = cmanager.getByRoadAndNumber("BB", "4");
        Location Acton = lmanager.getLocationByName("Acton MA");
        Location Clinton = lmanager.getLocationByName("Clinton MA");
        Location Danbury = lmanager.getLocationByName("Danbury MA");
        Location Essex = lmanager.getLocationByName("Essex MA");
        Location Foxboro = lmanager.getLocationByName("Foxboro MA");
        Track AS1 = Acton.getTrackByName("Acton Siding 1", Track.SIDING);
        Track CS1 = Clinton.getTrackByName("Clinton Siding 1", Track.SIDING);
        Track DS1 = Danbury.getTrackByName("Danbury Siding 1", Track.SIDING);
        Track DS2 = Danbury.getTrackByName("Danbury Siding 2", Track.SIDING);
        Track ES1 = Essex.getTrackByName("Essex Siding 1", Track.SIDING);
        Track ES2 = Essex.getTrackByName("Essex Siding 2", Track.SIDING);
        Track FS1 = Foxboro.getTrackByName("Foxboro Siding 1", Track.SIDING);
        ScheduleManager scheduleManager = ScheduleManager.instance();
        Schedule schA = scheduleManager.newSchedule("Schedule A");
        ScheduleItem schAItem1 = schA.addItem("Boxcar");
        schAItem1.setLoad("Food");
        schAItem1.setShip("Metal");
        schAItem1.setDestination(Danbury);
        schAItem1.setDestinationTrack(DS2);
        Schedule schB = scheduleManager.newSchedule("Schedule B");
        ScheduleItem schBItem1 = schB.addItem("Flat");
        schBItem1.setLoad("Food");
        schBItem1.setShip("Junk");
        schBItem1.setDestination(Foxboro);
        schBItem1.setDestinationTrack(FS1);
        Schedule schC = scheduleManager.newSchedule("Schedule C");
        ScheduleItem schCItem1 = schC.addItem("Boxcar");
        schCItem1.setShip("Screws");
        schCItem1.setDestination(Essex);
        Schedule schD = scheduleManager.newSchedule("Schedule D");
        ScheduleItem schDItem1 = schD.addItem("Boxcar");
        schDItem1.setLoad("Screws");
        schDItem1.setShip("Nails");
        schDItem1.setWait(1);
        schDItem1.setDestination(Foxboro);
        schDItem1.setDestinationTrack(FS1);
        DS1.setScheduleId(schB.getId());
        DS2.setScheduleId(schC.getId());
        ES1.setScheduleId(schD.getId());
        ES2.setScheduleId(schA.getId());
        CS1.setScheduleId(schA.getId());
        ES2.setMoves(0);
        DS2.setMoves(50);
        Assert.assertEquals("Place car", Track.OKAY, c3.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c4.setLocation(Acton, AS1));
        c3.setLoad("Food");
        c3.setNextDestination(null);
        c3.setNextDestTrack(null);
        c4.setLoad("Food");
        c4.setNextDestination(null);
        c4.setNextDestTrack(null);
        ActonTrain.build();
        Assert.assertTrue("Acton train built", ActonTrain.isBuilt());
        Assert.assertEquals("Car BA 3 destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Acton Interchange", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Essex MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Essex Siding 2", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "Acton MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Acton Interchange", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Danbury MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Danbury Siding 1", c4.getNextDestTrackName());
        ActonTrain.reset();
        Assert.assertEquals("Car BA 3 destination", "", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "", c4.getNextDestTrackName());
        ES2.setMoves(100);
        ActonTrain.reset();
        ActonTrain.build();
        Assert.assertTrue("Acton train built", ActonTrain.isBuilt());
        Assert.assertEquals("Car BA 3 destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Acton Interchange", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Clinton MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Clinton Siding 1", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "Acton MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Acton Interchange", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Danbury MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Danbury Siding 1", c4.getNextDestTrackName());
        ActonTrain.terminate();
        Assert.assertEquals("Car BA 3 destination", "", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Clinton MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Clinton Siding 1", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Danbury MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Danbury Siding 1", c4.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 load", "Food", c3.getLoad());
        Assert.assertEquals("Car BB 4 load", "Food", c4.getLoad());
        Assert.assertEquals("Car BA 3 load", "", c3.getNextLoad());
        Assert.assertEquals("Car BB 4 load", "", c4.getNextLoad());
        ActonToBedfordTrain.build();
        ActonToBedfordTrain.terminate();
        Assert.assertEquals("Car BA 3 destination", "", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Clinton MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Clinton Siding 1", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Danbury MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Danbury Siding 1", c4.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 load", "Food", c3.getLoad());
        Assert.assertEquals("Car BB 4 load", "Food", c4.getLoad());
        Assert.assertEquals("Car BA 3 load", "", c3.getNextLoad());
        Assert.assertEquals("Car BB 4 load", "", c4.getNextLoad());
        BedfordToClintonTrain.build();
        BedfordToClintonTrain.terminate();
        Assert.assertEquals("Car BA 3 destination", "", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Danbury MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Danbury Siding 2", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Danbury MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Danbury Siding 1", c4.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 load", "Metal", c3.getLoad());
        Assert.assertEquals("Car BB 4 load", "Food", c4.getLoad());
        Assert.assertEquals("Car BA 3 load", "", c3.getNextLoad());
        Assert.assertEquals("Car BB 4 load", "", c4.getNextLoad());
        ClintonToDanburyTrain.build();
        ClintonToDanburyTrain.terminate();
        Assert.assertEquals("Car BA 3 destination", "", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Essex MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Foxboro MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Foxboro Siding 1", c4.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 load", "Screws", c3.getLoad());
        Assert.assertEquals("Car BB 4 load", "Junk", c4.getLoad());
        Assert.assertEquals("Car BA 3 load", "", c3.getNextLoad());
        Assert.assertEquals("Car BB 4 load", "", c4.getNextLoad());
        DanburyToEssexTrain.build();
        Assert.assertEquals("Car BA 3 destination track", "Essex Siding 1", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Foxboro MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Foxboro Siding 1", c3.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 load", "Nails", c3.getNextLoad());
        Assert.assertEquals("Car BB 4 load", "", c4.getNextLoad());
        Assert.assertEquals("Car BA 3 has wait", 1, c3.getNextWait());
        Assert.assertEquals("Car BB 4 has no wait", 0, c4.getNextWait());
        DanburyToEssexTrain.terminate();
        Assert.assertEquals("Car BA 3 destination", "", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Foxboro MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Foxboro Siding 1", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Foxboro MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Foxboro Siding 1", c4.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 load", "Nails", c3.getLoad());
        Assert.assertEquals("Car BB 4 load", "Junk", c4.getLoad());
        Assert.assertEquals("Car BA 3 load", "", c3.getNextLoad());
        Assert.assertEquals("Car BB 4 load", "", c4.getNextLoad());
        Assert.assertEquals("Car BA 3 has wait", 1, c3.getWait());
        Assert.assertEquals("Car BB 4 has no wait", 0, c4.getWait());
        Assert.assertEquals("Car BA 3 has wait", 0, c3.getNextWait());
        Assert.assertEquals("Car BB 4 has no wait", 0, c4.getNextWait());
        EssexToFoxboroTrain.build();
        Assert.assertEquals("Car BA 3 not in train", null, c3.getTrain());
        Assert.assertEquals("Car BB 4 in train", EssexToFoxboroTrain, c4.getTrain());
        EssexToFoxboroTrain.terminate();
        Assert.assertEquals("Car BA 3 destination", "", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Foxboro MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Foxboro Siding 1", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "", c4.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 load", "Nails", c3.getLoad());
        Assert.assertEquals("Car BB 4 load", "E", c4.getLoad());
        Assert.assertEquals("Car BA 3 load", "", c3.getNextLoad());
        Assert.assertEquals("Car BB 4 load", "", c4.getNextLoad());
        Assert.assertEquals("Car BA 3 has no wait", 0, c3.getWait());
        Assert.assertEquals("Car BB 4 has no wait", 0, c4.getWait());
        EssexToFoxboroTrain.build();
        Assert.assertEquals("Car BA 3 in train", EssexToFoxboroTrain, c3.getTrain());
        Assert.assertEquals("Car BB 4 not in train", null, c4.getTrain());
        EssexToFoxboroTrain.terminate();
        Assert.assertEquals("Car BA 3 destination", "", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Foxboro MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "", c4.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 load", "E", c3.getLoad());
        Assert.assertEquals("Car BB 4 load", "E", c4.getLoad());
        Assert.assertEquals("Car BA 3 load", "", c3.getNextLoad());
        Assert.assertEquals("Car BB 4 load", "", c4.getNextLoad());
    }

    public void testRoutingWithSchedules() {
        TrainManager tmanager = TrainManager.instance();
        CarManager cmanager = CarManager.instance();
        LocationManager lmanager = LocationManager.instance();
        List<String> trains = tmanager.getTrainsByNameList();
        Assert.assertEquals("confirm number of trains", 7, trains.size());
        Train ActonTrain = tmanager.getTrainByName("Acton Local");
        Train ActonToBedfordTrain = tmanager.getTrainByName("Acton to Bedford");
        Train BedfordToClintonTrain = tmanager.getTrainByName("Bedford to Clinton");
        Car c3 = cmanager.getByRoadAndNumber("BA", "3");
        Car c4 = cmanager.getByRoadAndNumber("BB", "4");
        Car c5 = cmanager.newCar("BC", "5");
        Car c6 = cmanager.newCar("BD", "6");
        Location Acton = lmanager.getLocationByName("Acton MA");
        Location Clinton = lmanager.getLocationByName("Clinton MA");
        Location Danbury = lmanager.getLocationByName("Danbury MA");
        Location Essex = lmanager.getLocationByName("Essex MA");
        Track AS1 = Acton.getTrackByName("Acton Siding 1", Track.SIDING);
        Track CS1 = Clinton.getTrackByName("Clinton Siding 1", Track.SIDING);
        Track DS1 = Danbury.getTrackByName("Danbury Siding 1", Track.SIDING);
        Track DS2 = Danbury.getTrackByName("Danbury Siding 2", Track.SIDING);
        Track ES1 = Essex.getTrackByName("Essex Siding 1", Track.SIDING);
        Track ES2 = Essex.getTrackByName("Essex Siding 2", Track.SIDING);
        ScheduleManager scheduleManager = ScheduleManager.instance();
        Schedule schA = scheduleManager.newSchedule("Schedule AA");
        ScheduleItem schAItem1 = schA.addItem("Boxcar");
        schAItem1.setLoad("Empty");
        schAItem1.setShip("Metal");
        schAItem1.setDestination(Acton);
        schAItem1.setDestinationTrack(AS1);
        ScheduleItem schAItem2 = schA.addItem("Flat");
        schAItem2.setLoad("Junk");
        schAItem2.setShip("Metal");
        schAItem2.setDestination(Danbury);
        schAItem2.setDestinationTrack(DS2);
        ScheduleItem schAItem3 = schA.addItem("Boxcar");
        schAItem3.setLoad("Boxes");
        schAItem3.setShip("Screws");
        schAItem3.setDestination(Danbury);
        schAItem3.setDestinationTrack(DS1);
        CS1.setScheduleId(schA.getId());
        DS1.setScheduleId("");
        DS2.setScheduleId("");
        ES1.setScheduleId("");
        ES2.setScheduleId("");
        c3.setLoad("Empty");
        c3.setNextDestination(null);
        c3.setNextDestTrack(null);
        c3.setMoves(1);
        c4.setLoad("Junk");
        c4.setNextDestination(null);
        c4.setNextDestTrack(null);
        c4.setMoves(2);
        c5.setType("Boxcar");
        c5.setLoad("Boxes");
        c5.setLength("40");
        c5.setBuilt("2000");
        c5.setMoves(3);
        c6.setType("Boxcar");
        c6.setLoad("Empty");
        c6.setLength("40");
        c6.setBuilt("2000");
        c6.setMoves(4);
        Assert.assertEquals("Place car", Track.OKAY, c3.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c4.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c5.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c6.setLocation(Acton, AS1));
        ActonTrain.build();
        Assert.assertTrue("Acton train built", ActonTrain.isBuilt());
        Assert.assertEquals("Car BA 3 destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Acton Interchange", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Clinton MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Clinton Siding 1", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "Acton MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Acton Interchange", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Clinton MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Clinton Siding 1", c4.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 destination", "Acton MA", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "Acton Interchange", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "Clinton MA", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "Clinton Siding 1", c5.getNextDestTrackName());
        Assert.assertEquals("Car BD 6 destination", "Acton MA", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "Acton Interchange", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "Clinton MA", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "Clinton Siding 1", c6.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 schedule id", schAItem1.getId(), c3.getScheduleId());
        Assert.assertEquals("Car BB 4 schedule id", schAItem2.getId(), c4.getScheduleId());
        Assert.assertEquals("Car BC 5 schedule id", schAItem3.getId(), c5.getScheduleId());
        Assert.assertEquals("Car BD 6 schedule id", schAItem1.getId(), c6.getScheduleId());
        ActonTrain.reset();
        ActonTrain.build();
        Assert.assertTrue("Acton train built", ActonTrain.isBuilt());
        Assert.assertEquals("Car BA 3 destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Acton Yard", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "Acton MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Acton Interchange", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Clinton MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Clinton Siding 1", c4.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 destination", "Acton MA", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "Acton Interchange", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "Clinton MA", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "Clinton Siding 1", c5.getNextDestTrackName());
        Assert.assertEquals("Car BD 6 destination", "Acton MA", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "Acton Interchange", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "Clinton MA", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "Clinton Siding 1", c6.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 schedule id", "", c3.getScheduleId());
        Assert.assertEquals("Car BB 4 schedule id", schAItem2.getId(), c4.getScheduleId());
        Assert.assertEquals("Car BC 5 schedule id", schAItem3.getId(), c5.getScheduleId());
        Assert.assertEquals("Car BD 6 schedule id", schAItem1.getId(), c6.getScheduleId());
        ActonTrain.terminate();
        ActonToBedfordTrain.build();
        Assert.assertTrue("Bedford train built", ActonToBedfordTrain.isBuilt());
        Assert.assertEquals("Car BA 3 destination", "Bedford MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Bedford Yard", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "Bedford MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Bedford Interchange", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Clinton MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Clinton Siding 1", c4.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 destination", "Bedford MA", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "Bedford Interchange", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "Clinton MA", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "Clinton Siding 1", c5.getNextDestTrackName());
        Assert.assertEquals("Car BD 6 destination", "Bedford MA", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "Bedford Interchange", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "Clinton MA", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "Clinton Siding 1", c6.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 schedule id", "", c3.getScheduleId());
        Assert.assertEquals("Car BB 4 schedule id", schAItem2.getId(), c4.getScheduleId());
        Assert.assertEquals("Car BC 5 schedule id", schAItem3.getId(), c5.getScheduleId());
        Assert.assertEquals("Car BD 6 schedule id", schAItem1.getId(), c6.getScheduleId());
        ActonToBedfordTrain.terminate();
        BedfordToClintonTrain.build();
        Assert.assertTrue("Bedford train built", BedfordToClintonTrain.isBuilt());
        Assert.assertEquals("Car BA 3 destination", "Clinton MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Clinton Yard", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "Clinton MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Clinton Siding 1", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Danbury MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Danbury Siding 2", c4.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 destination", "Clinton MA", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "Clinton Siding 1", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "Danbury MA", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "Danbury Siding 1", c5.getNextDestTrackName());
        Assert.assertEquals("Car BD 6 destination", "Clinton MA", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "Clinton Siding 1", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "Acton MA", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "Acton Siding 1", c6.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 schedule id", "", c3.getScheduleId());
        Assert.assertEquals("Car BB 4 schedule id", "", c4.getScheduleId());
        Assert.assertEquals("Car BC 5 schedule id", "", c5.getScheduleId());
        Assert.assertEquals("Car BD 6 schedule id", "", c6.getScheduleId());
        BedfordToClintonTrain.terminate();
    }

    public void testRoutingWithSchedulesMatchMode() {
        TrainManager tmanager = TrainManager.instance();
        CarManager cmanager = CarManager.instance();
        LocationManager lmanager = LocationManager.instance();
        List<String> trains = tmanager.getTrainsByNameList();
        Assert.assertEquals("confirm number of trains", 7, trains.size());
        Car c3 = cmanager.getByRoadAndNumber("BA", "3");
        Car c4 = cmanager.getByRoadAndNumber("BB", "4");
        Car c5 = cmanager.getByRoadAndNumber("BC", "5");
        Car c6 = cmanager.getByRoadAndNumber("BD", "6");
        Car c7 = cmanager.newCar("BA", "7");
        Car c8 = cmanager.newCar("BB", "8");
        Car c9 = cmanager.newCar("BC", "9");
        Location Acton = lmanager.getLocationByName("Acton MA");
        Location Clinton = lmanager.getLocationByName("Clinton MA");
        Location Danbury = lmanager.getLocationByName("Danbury MA");
        Location Essex = lmanager.getLocationByName("Essex MA");
        Track AS1 = Acton.getTrackByName("Acton Siding 1", Track.SIDING);
        Track CS1 = Clinton.getTrackByName("Clinton Siding 1", Track.SIDING);
        Track DS1 = Danbury.getTrackByName("Danbury Siding 1", Track.SIDING);
        Track DS2 = Danbury.getTrackByName("Danbury Siding 2", Track.SIDING);
        Track ES1 = Essex.getTrackByName("Essex Siding 1", Track.SIDING);
        Track ES2 = Essex.getTrackByName("Essex Siding 2", Track.SIDING);
        ScheduleManager scheduleManager = ScheduleManager.instance();
        Schedule schA = scheduleManager.newSchedule("Schedule AAA");
        ScheduleItem schAItem1 = schA.addItem("Boxcar");
        schAItem1.setLoad("Empty");
        schAItem1.setShip("Metal");
        schAItem1.setDestination(Acton);
        schAItem1.setDestinationTrack(AS1);
        ScheduleItem schAItem2 = schA.addItem("Flat");
        schAItem2.setLoad("Junk");
        schAItem2.setShip("Metal");
        schAItem2.setDestination(Danbury);
        schAItem2.setDestinationTrack(DS2);
        ScheduleItem schAItem3 = schA.addItem("Boxcar");
        schAItem3.setLoad("Boxes");
        schAItem3.setShip("Screws");
        schAItem3.setDestination(Essex);
        schAItem3.setDestinationTrack(ES1);
        ScheduleItem schAItem4 = schA.addItem("Boxcar");
        schAItem4.setLoad("Boxes");
        schAItem4.setShip("Bolts");
        schAItem4.setDestination(Danbury);
        schAItem4.setDestinationTrack(DS1);
        ScheduleItem schAItem5 = schA.addItem("Boxcar");
        schAItem5.setLoad("");
        schAItem5.setShip("Nuts");
        schAItem5.setDestination(Essex);
        schAItem5.setDestinationTrack(ES2);
        CS1.setScheduleId("");
        ES1.setScheduleId(schA.getId());
        ES1.setScheduleMode(Track.MATCH);
        c3.setLoad("Boxes");
        c3.setDestination(null, null);
        c3.setNextDestination(null);
        c3.setNextDestTrack(null);
        c3.setMoves(1);
        c4.setLoad("Junk");
        c4.setDestination(null, null);
        c4.setNextDestination(null);
        c4.setNextDestTrack(null);
        c4.setMoves(2);
        c5.setDestination(null, null);
        c5.setLoad("Boxes");
        c5.setNextDestination(null);
        c5.setNextDestTrack(null);
        c5.setMoves(3);
        c6.setDestination(null, null);
        c6.setLoad("Boxes");
        c6.setNextDestination(null);
        c6.setNextDestTrack(null);
        c6.setMoves(4);
        c7.setType("Boxcar");
        c7.setLoad("Boxes");
        c7.setLength("4");
        c7.setBuilt("2000");
        c7.setMoves(5);
        c8.setType("Boxcar");
        c8.setLoad("Empty");
        c8.setLength("4");
        c8.setBuilt("2000");
        c8.setMoves(6);
        c9.setType("Boxcar");
        c9.setLoad("Empty");
        c9.setLength("4");
        c9.setBuilt("2000");
        c9.setMoves(7);
        Assert.assertEquals("Place car", Track.OKAY, c3.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c4.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c5.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c6.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c7.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c8.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c9.setLocation(Acton, AS1));
        Train ActonTrain = tmanager.getTrainByName("Acton Local");
        ActonTrain.build();
        Assert.assertTrue("Acton train built", ActonTrain.isBuilt());
        Assert.assertEquals("Car BA 3 destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Acton Interchange", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Essex MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Essex Siding 1", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "Acton MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Acton Interchange", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Essex MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Essex Siding 1", c4.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 destination", "Acton MA", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "Acton Interchange", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "Essex MA", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "Essex Siding 1", c5.getNextDestTrackName());
        Assert.assertEquals("Car BD 6 destination", "Acton MA", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "Acton Interchange", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "Essex MA", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "Essex Siding 1", c6.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 schedule id", schAItem3.getId(), c3.getScheduleId());
        Assert.assertEquals("Car BB 4 schedule id", schAItem2.getId(), c4.getScheduleId());
        Assert.assertEquals("Car BC 5 schedule id", schAItem3.getId(), c5.getScheduleId());
        Assert.assertEquals("Car BD 6 schedule id", schAItem4.getId(), c6.getScheduleId());
        Assert.assertEquals("Car BA 7 schedule id", schAItem5.getId(), c7.getScheduleId());
        Assert.assertEquals("Car BB 8 schedule id", schAItem1.getId(), c8.getScheduleId());
        Assert.assertEquals("Car BC 9 schedule id", schAItem5.getId(), c9.getScheduleId());
        ActonTrain.reset();
    }

    public void testRoutingWithSchedulesMatchMode2() {
        TrainManager tmanager = TrainManager.instance();
        CarManager cmanager = CarManager.instance();
        LocationManager lmanager = LocationManager.instance();
        List<String> trains = tmanager.getTrainsByNameList();
        Assert.assertEquals("confirm number of trains", 7, trains.size());
        Car c3 = cmanager.getByRoadAndNumber("BA", "3");
        Car c4 = cmanager.getByRoadAndNumber("BB", "4");
        Car c5 = cmanager.getByRoadAndNumber("BC", "5");
        Car c6 = cmanager.getByRoadAndNumber("BD", "6");
        Car c7 = cmanager.getByRoadAndNumber("BA", "7");
        Car c8 = cmanager.getByRoadAndNumber("BB", "8");
        Car c9 = cmanager.getByRoadAndNumber("BC", "9");
        Location Acton = lmanager.getLocationByName("Acton MA");
        Location Bedford = lmanager.getLocationByName("Bedford MA");
        Location Clinton = lmanager.getLocationByName("Clinton MA");
        Location Danbury = lmanager.getLocationByName("Danbury MA");
        Location Essex = lmanager.getLocationByName("Essex MA");
        Location Foxboro = lmanager.getLocationByName("Foxboro MA");
        Track AS1 = Acton.getTrackByName("Acton Siding 1", Track.SIDING);
        Track BS1 = Bedford.getTrackByName("Bedford Siding 1", Track.SIDING);
        Track CS1 = Clinton.getTrackByName("Clinton Siding 1", Track.SIDING);
        Track DS1 = Danbury.getTrackByName("Danbury Siding 1", Track.SIDING);
        Track DS2 = Danbury.getTrackByName("Danbury Siding 2", Track.SIDING);
        Track ES1 = Essex.getTrackByName("Essex Siding 1", Track.SIDING);
        Track FS1 = Foxboro.getTrackByName("Foxboro Siding 1", Track.SIDING);
        ScheduleManager scheduleManager = ScheduleManager.instance();
        Schedule schA = scheduleManager.newSchedule("Schedule ABC");
        ScheduleItem schAItem1 = schA.addItem("Boxcar");
        schAItem1.setShip("Metal");
        schAItem1.setDestination(Acton);
        schAItem1.setDestinationTrack(AS1);
        ScheduleItem schAItem2 = schA.addItem("Flat");
        schAItem2.setShip("Metal");
        schAItem2.setDestination(Danbury);
        schAItem2.setDestinationTrack(DS2);
        ScheduleItem schAItem3 = schA.addItem("Boxcar");
        schAItem3.setShip("Screws");
        schAItem3.setDestination(Bedford);
        schAItem3.setDestinationTrack(BS1);
        ScheduleItem schAItem4 = schA.addItem("Boxcar");
        schAItem4.setLoad(CarLoads.instance().getDefaultEmptyName());
        schAItem4.setShip("Bolts");
        schAItem4.setDestination(Danbury);
        schAItem4.setDestinationTrack(DS1);
        ScheduleItem schAItem5 = schA.addItem("Boxcar");
        schAItem5.setLoad(CarLoads.instance().getDefaultLoadName());
        schAItem5.setShip("Nuts");
        schAItem5.setDestination(Foxboro);
        schAItem5.setDestinationTrack(FS1);
        CS1.setScheduleId("");
        ES1.setScheduleId(schA.getId());
        ES1.setScheduleMode(Track.MATCH);
        c3.setLoad(CarLoads.instance().getDefaultEmptyName());
        c3.setDestination(null, null);
        c3.setNextDestination(Essex);
        c3.setNextDestTrack(null);
        c4.setLoad(CarLoads.instance().getDefaultEmptyName());
        c4.setDestination(null, null);
        c4.setNextDestination(Essex);
        c4.setNextDestTrack(ES1);
        c5.setDestination(null, null);
        c5.setLoad(CarLoads.instance().getDefaultLoadName());
        c5.setNextDestination(Essex);
        c5.setNextDestTrack(null);
        c6.setDestination(null, null);
        c6.setLoad(CarLoads.instance().getDefaultEmptyName());
        c6.setNextDestination(Essex);
        c6.setNextDestTrack(null);
        c7.setLoad(CarLoads.instance().getDefaultEmptyName());
        c7.setNextDestination(Essex);
        c7.setNextDestTrack(ES1);
        c8.setLoad(CarLoads.instance().getDefaultEmptyName());
        c8.setNextDestination(null);
        c8.setNextDestTrack(null);
        c8.setMoves(20);
        c9.setLoad(CarLoads.instance().getDefaultEmptyName());
        c9.setNextDestination(null);
        c9.setNextDestTrack(null);
        c9.setMoves(21);
        Assert.assertEquals("Place car", Track.OKAY, c3.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c4.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c5.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c6.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c7.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c8.setLocation(Danbury, DS1));
        Assert.assertEquals("Place car", Track.OKAY, c9.setLocation(Danbury, DS1));
        Train ActonTrain = tmanager.getTrainByName("Acton Local");
        ActonTrain.build();
        Assert.assertTrue("Acton train built", ActonTrain.isBuilt());
        Assert.assertEquals("Car BA 3 destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Acton Interchange", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Essex MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "", c3.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 destination", "Acton MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Acton Interchange", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Essex MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Essex Siding 1", c4.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 destination", "Acton MA", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "Acton Interchange", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "Essex MA", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "", c5.getNextDestTrackName());
        Assert.assertEquals("Car BD 6 destination", "Acton MA", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "Acton Interchange", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "Essex MA", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "", c6.getNextDestTrackName());
        Assert.assertEquals("Car BA 7 destination", "Acton MA", c7.getDestinationName());
        Assert.assertEquals("Car BA 7 destination track", "Acton Interchange", c7.getDestinationTrackName());
        Assert.assertEquals("Car BA 7 next destination", "Essex MA", c7.getNextDestinationName());
        Assert.assertEquals("Car BA 7 next destination track", "Essex Siding 1", c7.getNextDestTrackName());
        Assert.assertEquals("Car BB 8 destination", "", c8.getDestinationName());
        Assert.assertEquals("Car BB 8 destination track", "", c8.getDestinationTrackName());
        Assert.assertEquals("Car BB 8 next destination", "", c8.getNextDestinationName());
        Assert.assertEquals("Car BB 8 next destination track", "", c8.getNextDestTrackName());
        Assert.assertEquals("Car BC 9 destination", "", c9.getDestinationName());
        Assert.assertEquals("Car BC 9 destination track", "", c9.getDestinationTrackName());
        Assert.assertEquals("Car BC 9 next destination", "", c9.getNextDestinationName());
        Assert.assertEquals("Car BC 9 next destination track", "", c9.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 schedule id", "", c3.getScheduleId());
        Assert.assertEquals("Car BB 4 schedule id", "", c4.getScheduleId());
        Assert.assertEquals("Car BC 5 schedule id", "", c5.getScheduleId());
        Assert.assertEquals("Car BD 6 schedule id", "", c6.getScheduleId());
        Assert.assertEquals("Car BA 7 schedule id", "", c7.getScheduleId());
        Assert.assertEquals("Car BB 8 schedule id", "", c8.getScheduleId());
        Assert.assertEquals("Car BC 9 schedule id", "", c9.getScheduleId());
        ActonTrain.terminate();
        Train ActonToBedfordTrain = tmanager.getTrainByName("Acton to Bedford");
        ActonToBedfordTrain.build();
        Assert.assertTrue("Acton train built", ActonToBedfordTrain.isBuilt());
        ActonToBedfordTrain.terminate();
        Train BedfordToClintonTrain = tmanager.getTrainByName("Bedford to Clinton");
        BedfordToClintonTrain.build();
        Assert.assertTrue("Bedford train built", BedfordToClintonTrain.isBuilt());
        BedfordToClintonTrain.terminate();
        Train ClintonToDanburyTrain = tmanager.getTrainByName("Clinton to Danbury");
        ClintonToDanburyTrain.build();
        Assert.assertTrue("Clinton train built", ClintonToDanburyTrain.isBuilt());
        ClintonToDanburyTrain.terminate();
        Train DanburyToEssexTrain = tmanager.getTrainByName("Danbury to Essex");
        DanburyToEssexTrain.build();
        Assert.assertTrue("Danbury train built", DanburyToEssexTrain.isBuilt());
        Assert.assertEquals("Car BA 3 destination", "Essex MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Essex Siding 1", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Bedford MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Bedford Siding 1", c3.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 next load", "Screws", c3.getNextLoad());
        Assert.assertEquals("Car BA 3 schedule id", "", c3.getScheduleId());
        Assert.assertEquals("Car BB 4 destination", "Essex MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Essex Siding 1", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Danbury MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Danbury Siding 2", c4.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 next load", "Metal", c4.getNextLoad());
        Assert.assertEquals("Car BB 4 schedule id", "", c4.getScheduleId());
        Assert.assertEquals("Car BC 5 destination", "Essex MA", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "Essex Siding 1", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "Bedford MA", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "Bedford Siding 1", c5.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 next load", "Screws", c5.getNextLoad());
        Assert.assertEquals("Car BC 5 schedule id", "", c5.getScheduleId());
        Assert.assertEquals("Car BD 6 destination", "Essex MA", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "Essex Siding 1", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "Danbury MA", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "Danbury Siding 1", c6.getNextDestTrackName());
        Assert.assertEquals("Car BC 6 next load", "Bolts", c6.getNextLoad());
        Assert.assertEquals("Car BD 6 schedule id", "", c6.getScheduleId());
        Assert.assertEquals("Car BA 7 destination", "Essex MA", c7.getDestinationName());
        Assert.assertEquals("Car BA 7 destination track", "Essex Siding 1", c7.getDestinationTrackName());
        Assert.assertEquals("Car BA 7 next destination", "Acton MA", c7.getNextDestinationName());
        Assert.assertEquals("Car BA 7 next destination track", "Acton Siding 1", c7.getNextDestTrackName());
        Assert.assertEquals("Car BA 7 next load", "Metal", c7.getNextLoad());
        Assert.assertEquals("Car BA 7 schedule id", "", c7.getScheduleId());
        Assert.assertEquals("Car BB 8 destination", "Essex MA", c8.getDestinationName());
        Assert.assertEquals("Car BB 8 destination track", "Essex Siding 1", c8.getDestinationTrackName());
        Assert.assertEquals("Car BB 8 next destination", "Bedford MA", c8.getNextDestinationName());
        Assert.assertEquals("Car BB 8 next destination track", "Bedford Siding 1", c8.getNextDestTrackName());
        Assert.assertEquals("Car BB 8 next load", "Screws", c8.getNextLoad());
        Assert.assertEquals("Car BB 8 schedule id", "", c8.getScheduleId());
        Assert.assertEquals("Car BC 9 destination", "Essex MA", c9.getDestinationName());
        Assert.assertEquals("Car BC 9 destination track", "Essex Siding 1", c9.getDestinationTrackName());
        Assert.assertEquals("Car BC 9 next destination", "Danbury MA", c9.getNextDestinationName());
        Assert.assertEquals("Car BC 9 next destination track", "Danbury Siding 1", c9.getNextDestTrackName());
        Assert.assertEquals("Car BC 9 next load", "Bolts", c9.getNextLoad());
        Assert.assertEquals("Car BC 9 schedule id", "", c9.getScheduleId());
        DanburyToEssexTrain.reset();
        Assert.assertEquals("Car BA 3 destination", "", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Essex MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "", c3.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 next load", "", c3.getNextLoad());
        Assert.assertEquals("Car BB 4 destination", "", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Essex MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Essex Siding 1", c4.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 destination", "", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "Essex MA", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "", c5.getNextDestTrackName());
        Assert.assertEquals("Car BD 6 destination", "", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "Essex MA", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "", c6.getNextDestTrackName());
        Assert.assertEquals("Car BA 7 destination", "", c7.getDestinationName());
        Assert.assertEquals("Car BA 7 destination track", "", c7.getDestinationTrackName());
        Assert.assertEquals("Car BA 7 next destination", "Essex MA", c7.getNextDestinationName());
        Assert.assertEquals("Car BA 7 next destination track", "Essex Siding 1", c7.getNextDestTrackName());
        Assert.assertEquals("Car BB 8 destination", "", c8.getDestinationName());
        Assert.assertEquals("Car BB 8 destination track", "", c8.getDestinationTrackName());
        Assert.assertEquals("Car BB 8 next destination", "", c8.getNextDestinationName());
        Assert.assertEquals("Car BB 8 next destination track", "", c8.getNextDestTrackName());
        Assert.assertEquals("Car BC 9 destination", "", c9.getDestinationName());
        Assert.assertEquals("Car BC 9 destination track", "", c9.getDestinationTrackName());
        Assert.assertEquals("Car BC 9 next destination", "", c9.getNextDestinationName());
        Assert.assertEquals("Car BC 9 next destination track", "", c9.getNextDestTrackName());
        DanburyToEssexTrain.build();
        Assert.assertTrue("Bedford train built", DanburyToEssexTrain.isBuilt());
        Assert.assertEquals("Car BA 3 destination", "Essex MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Essex Siding 1", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Acton MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Acton Siding 1", c3.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 next load", "Metal", c3.getNextLoad());
        Assert.assertEquals("Car BA 3 schedule id", "", c3.getScheduleId());
        Assert.assertEquals("Car BB 4 destination", "Essex MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Essex Siding 1", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Danbury MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Danbury Siding 2", c4.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 next load", "Metal", c4.getNextLoad());
        Assert.assertEquals("Car BB 4 schedule id", "", c4.getScheduleId());
        Assert.assertEquals("Car BC 5 destination", "Essex MA", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "Essex Siding 1", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "Bedford MA", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "Bedford Siding 1", c5.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 next load", "Screws", c5.getNextLoad());
        Assert.assertEquals("Car BC 5 schedule id", "", c5.getScheduleId());
        Assert.assertEquals("Car BD 6 destination", "Essex MA", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "Essex Siding 1", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "Danbury MA", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "Danbury Siding 1", c6.getNextDestTrackName());
        Assert.assertEquals("Car BC 6 next load", "Bolts", c6.getNextLoad());
        Assert.assertEquals("Car BD 6 schedule id", "", c6.getScheduleId());
        Assert.assertEquals("Car BA 7 destination", "Essex MA", c7.getDestinationName());
        Assert.assertEquals("Car BA 7 destination track", "Essex Siding 1", c7.getDestinationTrackName());
        Assert.assertEquals("Car BA 7 next destination", "Acton MA", c7.getNextDestinationName());
        Assert.assertEquals("Car BA 7 next destination track", "Acton Siding 1", c7.getNextDestTrackName());
        Assert.assertEquals("Car BA 7 next load", "Metal", c7.getNextLoad());
        Assert.assertEquals("Car BA 7 schedule id", "", c7.getScheduleId());
        Assert.assertEquals("Car BB 8 destination", "Essex MA", c8.getDestinationName());
        Assert.assertEquals("Car BB 8 destination track", "Essex Siding 1", c8.getDestinationTrackName());
        Assert.assertEquals("Car BB 8 next destination", "Bedford MA", c8.getNextDestinationName());
        Assert.assertEquals("Car BB 8 next destination track", "Bedford Siding 1", c8.getNextDestTrackName());
        Assert.assertEquals("Car BB 8 next load", "Screws", c8.getNextLoad());
        Assert.assertEquals("Car BB 8 schedule id", "", c8.getScheduleId());
        Assert.assertEquals("Car BC 9 destination", "Essex MA", c9.getDestinationName());
        Assert.assertEquals("Car BC 9 destination track", "Essex Siding 1", c9.getDestinationTrackName());
        Assert.assertEquals("Car BC 9 next destination", "Danbury MA", c9.getNextDestinationName());
        Assert.assertEquals("Car BC 9 next destination track", "Danbury Siding 1", c9.getNextDestTrackName());
        Assert.assertEquals("Car BC 9 next load", "Bolts", c9.getNextLoad());
        Assert.assertEquals("Car BC 9 schedule id", "", c9.getScheduleId());
        DanburyToEssexTrain.terminate();
        Assert.assertEquals("Car BA 3 destination", "", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "Acton MA", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "Acton Siding 1", c3.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 load", "Metal", c3.getLoad());
        Assert.assertEquals("Car BA 3 next load", "", c3.getNextLoad());
        Assert.assertEquals("Car BA 3 schedule id", "", c3.getScheduleId());
        Assert.assertEquals("Car BB 4 destination", "", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Danbury MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "Danbury Siding 2", c4.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 load", "Metal", c4.getLoad());
        Assert.assertEquals("Car BB 4 next load", "", c4.getNextLoad());
        Assert.assertEquals("Car BB 4 schedule id", "", c4.getScheduleId());
        Assert.assertEquals("Car BC 5 destination", "", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "Bedford MA", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "Bedford Siding 1", c5.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 load", "Screws", c5.getLoad());
        Assert.assertEquals("Car BC 5 next load", "", c5.getNextLoad());
        Assert.assertEquals("Car BC 5 schedule id", "", c5.getScheduleId());
        Assert.assertEquals("Car BD 6 destination", "", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "Danbury MA", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "Danbury Siding 1", c6.getNextDestTrackName());
        Assert.assertEquals("Car BC 6 load", "Bolts", c6.getLoad());
        Assert.assertEquals("Car BC 6 next load", "", c6.getNextLoad());
        Assert.assertEquals("Car BD 6 schedule id", "", c6.getScheduleId());
        Assert.assertEquals("Car BA 7 destination", "", c7.getDestinationName());
        Assert.assertEquals("Car BA 7 destination track", "", c7.getDestinationTrackName());
        Assert.assertEquals("Car BA 7 next destination", "Acton MA", c7.getNextDestinationName());
        Assert.assertEquals("Car BA 7 next destination track", "Acton Siding 1", c7.getNextDestTrackName());
        Assert.assertEquals("Car BA 7 load", "Metal", c7.getLoad());
        Assert.assertEquals("Car BA 7 next load", "", c7.getNextLoad());
        Assert.assertEquals("Car BA 7 schedule id", "", c7.getScheduleId());
        Assert.assertEquals("Car BB 8 destination", "", c8.getDestinationName());
        Assert.assertEquals("Car BB 8 destination track", "", c8.getDestinationTrackName());
        Assert.assertEquals("Car BB 8 next destination", "Bedford MA", c8.getNextDestinationName());
        Assert.assertEquals("Car BB 8 next destination track", "Bedford Siding 1", c8.getNextDestTrackName());
        Assert.assertEquals("Car BB 8 load", "Screws", c8.getLoad());
        Assert.assertEquals("Car BB 8 next load", "", c8.getNextLoad());
        Assert.assertEquals("Car BB 8 schedule id", "", c8.getScheduleId());
        Assert.assertEquals("Car BC 9 destination", "", c9.getDestinationName());
        Assert.assertEquals("Car BC 9 destination track", "", c9.getDestinationTrackName());
        Assert.assertEquals("Car BC 9 next destination", "Danbury MA", c9.getNextDestinationName());
        Assert.assertEquals("Car BC 9 next destination track", "Danbury Siding 1", c9.getNextDestTrackName());
        Assert.assertEquals("Car BC 9 load", "Bolts", c9.getLoad());
        Assert.assertEquals("Car BC 9 next load", "", c9.getNextLoad());
        Assert.assertEquals("Car BC 9 schedule id", "", c9.getScheduleId());
    }

    public void testRoutingWithSchedulesLocal() {
        TrainManager tmanager = TrainManager.instance();
        CarManager cmanager = CarManager.instance();
        LocationManager lmanager = LocationManager.instance();
        List<String> trains = tmanager.getTrainsByNameList();
        Assert.assertEquals("confirm number of trains", 7, trains.size());
        Car c3 = cmanager.getByRoadAndNumber("BA", "3");
        Car c4 = cmanager.getByRoadAndNumber("BB", "4");
        Car c5 = cmanager.getByRoadAndNumber("BC", "5");
        Car c6 = cmanager.getByRoadAndNumber("BD", "6");
        Car c7 = cmanager.getByRoadAndNumber("BA", "7");
        Car c8 = cmanager.getByRoadAndNumber("BB", "8");
        Car c9 = cmanager.getByRoadAndNumber("BC", "9");
        c3.setLoad("Cardboard");
        c3.setDestination(null, null);
        c3.setNextDestination(null);
        c3.setNextDestTrack(null);
        c3.setMoves(1);
        c4.setLoad("Trucks");
        c4.setDestination(null, null);
        c4.setNextDestination(null);
        c4.setNextDestTrack(null);
        c4.setMoves(2);
        c5.setDestination(null, null);
        c5.setLoad(CarLoads.instance().getDefaultEmptyName());
        c5.setNextDestination(null);
        c5.setNextDestTrack(null);
        c5.setMoves(3);
        c6.setDestination(null, null);
        c6.setLoad(CarLoads.instance().getDefaultEmptyName());
        c6.setNextDestination(null);
        c6.setNextDestTrack(null);
        c6.setMoves(4);
        c7.setDestination(null, null);
        c7.setLoad(CarLoads.instance().getDefaultEmptyName());
        c7.setNextDestination(null);
        c7.setNextDestTrack(null);
        c7.setMoves(5);
        c8.setDestination(null, null);
        c8.setLoad("Trucks");
        c8.setNextDestination(null);
        c8.setNextDestTrack(null);
        c8.setMoves(6);
        c9.setDestination(null, null);
        c9.setLoad(CarLoads.instance().getDefaultEmptyName());
        c9.setNextDestination(null);
        c9.setNextDestTrack(null);
        c9.setMoves(7);
        Location Acton = lmanager.getLocationByName("Acton MA");
        Location Bedford = lmanager.getLocationByName("Bedford MA");
        Location Clinton = lmanager.getLocationByName("Clinton MA");
        Track CS1 = Clinton.getTrackByName("Clinton Siding 1", Track.SIDING);
        Track AS1 = Acton.getTrackByName("Acton Siding 1", Track.SIDING);
        AS1.setTrainDirections(Track.NORTH + Track.SOUTH);
        Track AS2 = Acton.getTrackByName("Acton Siding 2", Track.SIDING);
        Track AS3 = Acton.addTrack("Acton Siding 3", Track.SIDING);
        AS3.setLength(300);
        Track AY = Acton.getTrackByName("Acton Yard", Track.YARD);
        Track AI = Acton.getTrackByName("Acton Interchange", Track.INTERCHANGE);
        ScheduleManager scheduleManager = ScheduleManager.instance();
        Schedule schA = scheduleManager.newSchedule("Schedule Action");
        ScheduleItem schAItem1 = schA.addItem("Boxcar");
        schAItem1.setLoad("Cardboard");
        schAItem1.setShip("Scrap");
        ScheduleItem schAItem2 = schA.addItem("Gon");
        schAItem2.setLoad("Trucks");
        schAItem2.setShip("Tires");
        schAItem2.setDestination(Bedford);
        ScheduleItem schAItem3 = schA.addItem("Boxcar");
        schAItem3.setLoad("Trucks");
        schAItem3.setShip("Wire");
        schAItem3.setDestination(Clinton);
        schAItem3.setDestinationTrack(CS1);
        ScheduleItem schAItem4 = schA.addItem("Flat");
        schAItem4.setLoad("Trucks");
        schAItem4.setShip("Coils");
        schAItem4.setDestination(Bedford);
        ScheduleItem schAItem5 = schA.addItem("Flat");
        schAItem5.setLoad("Coils");
        schAItem5.setShip("Trucks");
        schAItem5.setDestination(Bedford);
        ScheduleItem schAItem6 = schA.addItem("Boxcar");
        schAItem6.setLoad("Scrap");
        schAItem6.setShip("E");
        ScheduleItem schAItem7 = schA.addItem("Boxcar");
        schAItem7.setLoad("Wire");
        schAItem7.setShip("L");
        AS1.setScheduleId(schA.getId());
        AS2.setScheduleId(schA.getId());
        AS3.setScheduleId(schA.getId());
        AS3.setScheduleMode(Track.MATCH);
        Assert.assertEquals("Place car", Track.OKAY, c3.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c4.setLocation(Acton, AS1));
        Assert.assertEquals("Place car", Track.OKAY, c5.setLocation(Acton, AS2));
        Assert.assertEquals("Place car", Track.OKAY, c6.setLocation(Acton, AS2));
        Assert.assertEquals("Place car", Track.OKAY, c7.setLocation(Acton, AS3));
        Assert.assertEquals("Place car", Track.OKAY, c8.setLocation(Acton, AY));
        Assert.assertEquals("Place car", Track.OKAY, c9.setLocation(Acton, AI));
        Train ActonToBedfordTrain = tmanager.getTrainByName("Acton to Bedford");
        Route ActonToBeford = ActonToBedfordTrain.getRoute();
        RouteLocation rl = ActonToBeford.getDepartsRouteLocation();
        RouteLocation rd = ActonToBeford.getLastLocationByName("Bedford MA");
        rl.setMaxCarMoves(10);
        rd.setMaxCarMoves(10);
        Train ClintonToDanburyTrain = tmanager.getTrainByName("Clinton to Danbury");
        tmanager.deregister(ClintonToDanburyTrain);
        ActonToBedfordTrain.build();
        Assert.assertTrue("Acton train built", ActonToBedfordTrain.isBuilt());
        Assert.assertEquals("Car BA 3 destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Acton Siding 2", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "", c3.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 load", "Cardboard", c3.getLoad());
        Assert.assertEquals("Car BA 3 next load", "Scrap", c3.getNextLoad());
        Assert.assertEquals("Car BB 4 destination", "Acton MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Acton Siding 3", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "Bedford MA", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "", c4.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 load", "Trucks", c4.getLoad());
        Assert.assertEquals("Car BB 4 next load", "Coils", c4.getNextLoad());
        Assert.assertEquals("Car BC 5 destination", "Bedford MA", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "Bedford Siding 1", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "", c5.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 load", "E", c5.getLoad());
        Assert.assertEquals("Car BC 5 next load", "", c5.getNextLoad());
        Assert.assertEquals("Car BD 6 destination", "Bedford MA", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "Bedford Siding 2", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "", c6.getNextDestTrackName());
        Assert.assertEquals("Car BD 6 load", "E", c6.getLoad());
        Assert.assertEquals("Car BD 6 next load", "", c6.getNextLoad());
        Assert.assertEquals("Car BA 7 destination", "Bedford MA", c7.getDestinationName());
        Assert.assertEquals("Car BA 7 destination track", "Bedford Yard", c7.getDestinationTrackName());
        Assert.assertEquals("Car BA 7 next destination", "", c7.getNextDestinationName());
        Assert.assertEquals("Car BA 7 next destination track", "", c7.getNextDestTrackName());
        Assert.assertEquals("Car BA 7 load", "E", c7.getLoad());
        Assert.assertEquals("Car BA 7 next load", "", c7.getNextLoad());
        Assert.assertEquals("Car BB 8 destination", "Acton MA", c8.getDestinationName());
        Assert.assertEquals("Car BB 8 destination track", "Acton Siding 3", c8.getDestinationTrackName());
        Assert.assertEquals("Car BB 8 next destination", "Clinton MA", c8.getNextDestinationName());
        Assert.assertEquals("Car BB 8 next destination track", "Clinton Siding 1", c8.getNextDestTrackName());
        Assert.assertEquals("Car BB 8 load", "Trucks", c8.getLoad());
        Assert.assertEquals("Car BB 8 next load", "Wire", c8.getNextLoad());
        Assert.assertEquals("Car BC 9 destination", "Bedford MA", c9.getDestinationName());
        Assert.assertEquals("Car BC 9 destination track", "Bedford Siding 1", c9.getDestinationTrackName());
        Assert.assertEquals("Car BC 9 next destination", "", c9.getNextDestinationName());
        Assert.assertEquals("Car BC 9 next destination track", "", c9.getNextDestTrackName());
        Assert.assertEquals("Car BC 9 load", "E", c9.getLoad());
        Assert.assertEquals("Car BC 9 next load", "", c9.getNextLoad());
        ActonToBedfordTrain.terminate();
        Train BedfordToActonTrain = tmanager.newTrain("BedfordToActonToBedford");
        Route BedfordToActon = RouteManager.instance().newRoute("BedfordToActonToBedford");
        RouteLocation rlB2 = BedfordToActon.addLocation(Bedford);
        RouteLocation rlA2 = BedfordToActon.addLocation(Acton);
        RouteLocation rlB3 = BedfordToActon.addLocation(Bedford);
        rlB2.setMaxCarMoves(10);
        rlA2.setMaxCarMoves(10);
        rlB3.setMaxCarMoves(10);
        BedfordToActonTrain.setRoute(BedfordToActon);
        BedfordToActonTrain.build();
        Assert.assertEquals("Car BA 3 destination", "Acton MA", c3.getDestinationName());
        Assert.assertEquals("Car BA 3 destination track", "Acton Siding 3", c3.getDestinationTrackName());
        Assert.assertEquals("Car BA 3 next destination", "", c3.getNextDestinationName());
        Assert.assertEquals("Car BA 3 next destination track", "", c3.getNextDestTrackName());
        Assert.assertEquals("Car BA 3 load", "Scrap", c3.getLoad());
        Assert.assertEquals("Car BA 3 next load", "E", c3.getNextLoad());
        Assert.assertEquals("Car BB 4 destination", "Bedford MA", c4.getDestinationName());
        Assert.assertEquals("Car BB 4 destination track", "Bedford Yard", c4.getDestinationTrackName());
        Assert.assertEquals("Car BB 4 next destination", "", c4.getNextDestinationName());
        Assert.assertEquals("Car BB 4 next destination track", "", c4.getNextDestTrackName());
        Assert.assertEquals("Car BB 4 load", "Coils", c4.getLoad());
        Assert.assertEquals("Car BB 4 next load", "", c4.getNextLoad());
        Assert.assertEquals("Car BC 5 destination", "Acton MA", c5.getDestinationName());
        Assert.assertEquals("Car BC 5 destination track", "Acton Yard", c5.getDestinationTrackName());
        Assert.assertEquals("Car BC 5 next destination", "", c5.getNextDestinationName());
        Assert.assertEquals("Car BC 5 next destination track", "", c5.getNextDestTrackName());
        Assert.assertEquals("Car BC 5 load", "L", c5.getLoad());
        Assert.assertEquals("Car BC 5 next load", "", c5.getNextLoad());
        Assert.assertEquals("Car BD 6 destination", "Acton MA", c6.getDestinationName());
        Assert.assertEquals("Car BD 6 destination track", "Acton Interchange", c6.getDestinationTrackName());
        Assert.assertEquals("Car BD 6 next destination", "", c6.getNextDestinationName());
        Assert.assertEquals("Car BD 6 next destination track", "", c6.getNextDestTrackName());
        Assert.assertEquals("Car BD 6 load", "L", c6.getLoad());
        Assert.assertEquals("Car BD 6 next load", "", c6.getNextLoad());
        Assert.assertEquals("Car BA 7 destination", "Acton MA", c7.getDestinationName());
        Assert.assertEquals("Car BA 7 destination track", "Acton Yard", c7.getDestinationTrackName());
        Assert.assertEquals("Car BA 7 next destination", "", c7.getNextDestinationName());
        Assert.assertEquals("Car BA 7 next destination track", "", c7.getNextDestTrackName());
        Assert.assertEquals("Car BA 7 load", "E", c7.getLoad());
        Assert.assertEquals("Car BA 7 next load", "", c7.getNextLoad());
        Assert.assertEquals("Car BB 8 destination", "Bedford MA", c8.getDestinationName());
        Assert.assertEquals("Car BB 8 destination track", "Bedford Interchange", c8.getDestinationTrackName());
        Assert.assertEquals("Car BB 8 next destination", "Clinton MA", c8.getNextDestinationName());
        Assert.assertEquals("Car BB 8 next destination track", "Clinton Siding 1", c8.getNextDestTrackName());
        Assert.assertEquals("Car BB 8 load", "Wire", c8.getLoad());
        Assert.assertEquals("Car BB 8 next load", "", c8.getNextLoad());
        Assert.assertEquals("Car BC 9 destination", "Acton MA", c9.getDestinationName());
        Assert.assertEquals("Car BC 9 destination track", "Acton Interchange", c9.getDestinationTrackName());
        Assert.assertEquals("Car BC 9 next destination", "", c9.getNextDestinationName());
        Assert.assertEquals("Car BC 9 next destination track", "", c9.getNextDestTrackName());
        Assert.assertEquals("Car BC 9 load", "L", c9.getLoad());
        Assert.assertEquals("Car BC 9 next load", "", c9.getNextLoad());
        BedfordToActonTrain.terminate();
    }

    @Override
    protected void setUp() {
        apps.tests.Log4JFixture.setUp();
        Locale.setDefault(Locale.ENGLISH);
        String tempstring = OperationsSetupXml.getOperationsDirectoryName();
        if (!tempstring.contains(File.separator + "JUnitTest")) {
            OperationsSetupXml.setOperationsDirectoryName("operations" + File.separator + "JUnitTest");
        }
        OperationsSetupXml.instance().setOperationsFileName("OperationsJUnitTest.xml");
        RouteManagerXml.instance().setOperationsFileName("OperationsJUnitTestRouteRoster.xml");
        EngineManagerXml.instance().setOperationsFileName("OperationsJUnitTestEngineRoster.xml");
        CarManagerXml.instance().setOperationsFileName("OperationsJUnitTestCarRoster.xml");
        LocationManagerXml.instance().setOperationsFileName("OperationsJUnitTestLocationRoster.xml");
        TrainManagerXml.instance().setOperationsFileName("OperationsJUnitTestTrainRoster.xml");
        XmlFile.ensurePrefsPresent(XmlFile.prefsDir() + File.separator + OperationsSetupXml.getOperationsDirectoryName());
        RouteManager.instance().dispose();
    }

    public OperationsCarRouterTest(String s) {
        super(s);
    }

    public static void main(String[] args) {
        String[] testCaseName = { "-noloading", OperationsCarRouterTest.class.getName() };
        junit.swingui.TestRunner.main(testCaseName);
    }

    public static Test suite() {
        TestSuite suite = new TestSuite(OperationsCarRouterTest.class);
        return suite;
    }

    @Override
    protected void tearDown() {
        apps.tests.Log4JFixture.tearDown();
    }
}
