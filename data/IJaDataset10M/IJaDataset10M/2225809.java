package opencv.generated;

import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;

/**
 * <i>native declaration : modules/core/include/opencv2/core/types_c.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvSeqBlock extends Structure<CvSeqBlock, CvSeqBlock.ByValue, CvSeqBlock.ByReference> {

    /**
	 * Previous sequence block.<br>
	 * C type : CvSeqBlock*
	 */
    public CvSeqBlock.ByReference prev;

    /**
	 * Next sequence block.<br>
	 * C type : CvSeqBlock*
	 */
    public CvSeqBlock.ByReference next;

    public int start_index;

    /**
	 * sequence->first->start_index.<br>
	 * Number of elements in the block.
	 */
    public int count;

    /**
	 * Pointer to the first element of the block.<br>
	 * C type : schar*
	 */
    public Pointer data;

    public CvSeqBlock() {
        super();
        initFieldOrder();
    }

    protected void initFieldOrder() {
        setFieldOrder(new java.lang.String[] { "prev", "next", "start_index", "count", "data" });
    }

    /**
	 * @param prev Previous sequence block.<br>
	 * C type : CvSeqBlock*<br>
	 * @param next Next sequence block.<br>
	 * C type : CvSeqBlock*<br>
	 * @param start_index Index of the first element in the block +<br>
	 * @param count sequence->first->start_index.<br>
	 * Number of elements in the block.<br>
	 * @param data Pointer to the first element of the block.<br>
	 * C type : schar*
	 */
    public CvSeqBlock(CvSeqBlock.ByReference prev, CvSeqBlock.ByReference next, int start_index, int count, Pointer data) {
        super();
        this.prev = prev;
        this.next = next;
        this.start_index = start_index;
        this.count = count;
        this.data = data;
        initFieldOrder();
    }

    protected ByReference newByReference() {
        return new ByReference();
    }

    protected ByValue newByValue() {
        return new ByValue();
    }

    protected CvSeqBlock newInstance() {
        return new CvSeqBlock();
    }

    public static CvSeqBlock[] newArray(int arrayLength) {
        return Structure.newArray(CvSeqBlock.class, arrayLength);
    }

    public static class ByReference extends CvSeqBlock implements Structure.ByReference {
    }

    ;

    public static class ByValue extends CvSeqBlock implements Structure.ByValue {
    }

    ;
}
