package net.murphyindustries.scorescore;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.jdesktop.application.Action;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

/**
 *
 * @author majorm
 */
public class ConvertXLSX extends javax.swing.JFrame {

    public ScoreScoreApplicationView mainFrame;

    /** Creates new form ConvertXLSX */
    public ConvertXLSX() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jSpinnerStartingRow = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSpinnerCounterBalance = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jSpinnerTargetMusicString = new javax.swing.JSpinner();
        jSpinnerDayNo = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jSpinnerTargetTime = new javax.swing.JSpinner();
        jSpinnerSheetMusicImage = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSpinnerFactorA = new javax.swing.JSpinner();
        jSpinnerFactorB = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jSpinnerFactorC = new javax.swing.JSpinner();
        jSpinnerMelodyNo = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        jSpinnerTrialNo = new javax.swing.JSpinner();
        jSpinnerBlockNo = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jSpinnerInst = new javax.swing.JSpinner();
        jSpinnerError = new javax.swing.JSpinner();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form");
        jSpinnerStartingRow.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerStartingRow.setName("jSpinnerStartingRow");
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(net.murphyindustries.scorescore.ScoreScoreApplication.class).getContext().getResourceMap(ConvertXLSX.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text"));
        jLabel1.setName("jLabel1");
        jLabel2.setText(resourceMap.getString("jLabel2.text"));
        jLabel2.setName("jLabel2");
        jSpinnerCounterBalance.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerCounterBalance.setName("jSpinnerCounterBalance");
        jLabel3.setText(resourceMap.getString("jLabel3.text"));
        jLabel3.setName("jLabel3");
        jSpinnerTargetMusicString.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(4), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerTargetMusicString.setName("jSpinnerTargetMusicString");
        jSpinnerDayNo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(6), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerDayNo.setName("jSpinnerDayNo");
        jLabel4.setText(resourceMap.getString("jLabel4.text"));
        jLabel4.setName("jLabel4");
        jSpinnerTargetTime.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerTargetTime.setName("jSpinnerTargetTime");
        jSpinnerSheetMusicImage.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(13), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerSheetMusicImage.setName("jSpinnerSheetMusicImage");
        jLabel5.setText(resourceMap.getString("jLabel5.text"));
        jLabel5.setName("jLabel5");
        jLabel6.setText(resourceMap.getString("jLabel6.text"));
        jLabel6.setName("jLabel6");
        jLabel7.setText(resourceMap.getString("jLabel7.text"));
        jLabel7.setName("jLabel7");
        jLabel8.setText(resourceMap.getString("jLabel8.text"));
        jLabel8.setName("jLabel8");
        jSpinnerFactorA.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerFactorA.setName("jSpinnerFactorA");
        jSpinnerFactorB.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(11), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerFactorB.setName("jSpinnerFactorB");
        jLabel9.setText(resourceMap.getString("jLabel9.text"));
        jLabel9.setName("jLabel9");
        jSpinnerFactorC.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(12), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerFactorC.setName("jSpinnerFactorC");
        jSpinnerMelodyNo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(9), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerMelodyNo.setName("jSpinnerMelodyNo");
        jLabel10.setText(resourceMap.getString("jLabel10.text"));
        jLabel10.setName("jLabel10");
        jSpinnerTrialNo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(8), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerTrialNo.setName("jSpinnerTrialNo");
        jSpinnerBlockNo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(7), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerBlockNo.setName("jSpinnerBlockNo");
        jLabel11.setText(resourceMap.getString("jLabel11.text"));
        jLabel11.setName("jLabel11");
        jLabel12.setText(resourceMap.getString("jLabel12.text"));
        jLabel12.setName("jLabel12");
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(net.murphyindustries.scorescore.ScoreScoreApplication.class).getContext().getActionMap(ConvertXLSX.class, this);
        jButton1.setAction(actionMap.get("Convert"));
        jButton1.setText(resourceMap.getString("jButton1.text"));
        jButton1.setName("jButton1");
        jLabel13.setText(resourceMap.getString("jLabel13.text"));
        jLabel13.setName("jLabel13");
        jLabel14.setText(resourceMap.getString("jLabel14.text"));
        jLabel14.setName("jLabel14");
        jSpinnerInst.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(14), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerInst.setName("jSpinnerInst");
        jSpinnerError.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(15), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerError.setName("jSpinnerError");
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addGroup(layout.createSequentialGroup().addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jSpinnerStartingRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(layout.createSequentialGroup().addComponent(jLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jSpinnerCounterBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(layout.createSequentialGroup().addComponent(jLabel3).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jSpinnerTargetMusicString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel6).addComponent(jLabel4).addComponent(jLabel5)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jSpinnerSheetMusicImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jSpinnerTargetTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jSpinnerDayNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel12).addComponent(jLabel10).addComponent(jLabel11)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jSpinnerMelodyNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jSpinnerTrialNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jSpinnerBlockNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel7).addComponent(jLabel9).addComponent(jLabel8).addComponent(jLabel13).addComponent(jLabel14)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jSpinnerFactorA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jSpinnerFactorB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jSpinnerFactorC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jSpinnerInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jSpinnerError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addComponent(jButton1).addGap(101, 101, 101)))));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(jSpinnerStartingRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel2).addComponent(jSpinnerCounterBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel3).addComponent(jSpinnerTargetMusicString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel6).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel4).addComponent(jSpinnerTargetTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel5).addComponent(jSpinnerDayNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel12).addComponent(jSpinnerBlockNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel10).addComponent(jSpinnerTrialNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel11).addComponent(jSpinnerMelodyNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel7).addComponent(jSpinnerSheetMusicImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jSpinnerFactorA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel9).addComponent(jSpinnerFactorB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel8).addComponent(jSpinnerFactorC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jLabel13).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE).addComponent(jButton1).addGap(33, 33, 33)).addGroup(layout.createSequentialGroup().addComponent(jSpinnerInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jSpinnerError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel14)).addGap(92, 92, 92)))));
        pack();
    }

    @Action
    public void Convert() {
        try {
            JFileChooser fc = new JFileChooser(mainFrame.userPrefs.get("OPENDIR", System.getProperty("user.home")));
            fc.setFileFilter(new ExtensionFileFilter("Excel OOXML (*.xlsx)", new String[] { "XLSX" }));
            int rc = fc.showOpenDialog(mainFrame.getFrame());
            if (rc != JFileChooser.APPROVE_OPTION) {
                return;
            }
            mainFrame.userPrefs.put("OPENDIR", fc.getCurrentDirectory().getPath());
            InputStream inp = new FileInputStream(fc.getSelectedFile());
            int rowNo = (Integer) jSpinnerStartingRow.getValue();
            int musicStringCol = (Integer) jSpinnerTargetMusicString.getValue();
            int targetTimeCol = (Integer) jSpinnerTargetTime.getValue();
            int counterBalCol = (Integer) jSpinnerCounterBalance.getValue();
            int sheetMusicCol = (Integer) jSpinnerSheetMusicImage.getValue();
            int DayNoCol = (Integer) jSpinnerDayNo.getValue();
            int blockCol = (Integer) jSpinnerBlockNo.getValue();
            int trialCol = (Integer) jSpinnerTrialNo.getValue();
            int melCol = (Integer) jSpinnerMelodyNo.getValue();
            int facACol = (Integer) jSpinnerFactorA.getValue();
            int facBCol = (Integer) jSpinnerFactorB.getValue();
            int facCCol = (Integer) jSpinnerFactorC.getValue();
            int instCol = (Integer) jSpinnerInst.getValue();
            int errCol = (Integer) jSpinnerError.getValue();
            Workbook wb = WorkbookFactory.create(inp);
            Sheet sheet = wb.getSheetAt(0);
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document doc = parser.newDocument();
            Element root = doc.createElement("ScoreScoreTrial");
            doc.appendChild(root);
            while (true) {
                Row row = sheet.getRow(rowNo);
                if (row == null) break;
                Cell cell = row.getCell(musicStringCol);
                if (cell == null || getValue(cell).isEmpty()) break;
                Element iteration = doc.createElement("Iteration");
                try {
                    String musicString = getValue(row.getCell(musicStringCol));
                    Node musicStringNode = doc.createElement("TargetMusicString");
                    musicStringNode.appendChild(doc.createTextNode(musicString));
                    iteration.appendChild(musicStringNode);
                    String targetTime = getValue(row.getCell(targetTimeCol));
                    Node ttNode = doc.createElement("TargetTime");
                    ttNode.appendChild(doc.createTextNode(targetTime));
                    iteration.appendChild(ttNode);
                    String cb = getValue(row.getCell(counterBalCol));
                    Node cbNode = doc.createElement("CounterBalance");
                    cbNode.appendChild(doc.createTextNode(cb));
                    iteration.appendChild(cbNode);
                    String dn = getValue(row.getCell(DayNoCol));
                    Node dnNode = doc.createElement("DayNum");
                    dnNode.appendChild(doc.createTextNode(dn));
                    iteration.appendChild(dnNode);
                    String bn = getValue(row.getCell(blockCol));
                    Node bnNode = doc.createElement("BlockNum");
                    bnNode.appendChild(doc.createTextNode(bn));
                    iteration.appendChild(bnNode);
                    String tn = getValue(row.getCell(trialCol));
                    Node tnNode = doc.createElement("TrialNum");
                    tnNode.appendChild(doc.createTextNode(tn));
                    iteration.appendChild(tnNode);
                    String mn = getValue(row.getCell(melCol));
                    Node mnNode = doc.createElement("MelodyNum");
                    mnNode.appendChild(doc.createTextNode(mn));
                    iteration.appendChild(mnNode);
                    String fa = getValue(row.getCell(facACol));
                    Node faNode = doc.createElement("FactorA");
                    faNode.appendChild(doc.createTextNode(fa));
                    iteration.appendChild(faNode);
                    String fb = getValue(row.getCell(facBCol));
                    Node fbNode = doc.createElement("FactorB");
                    fbNode.appendChild(doc.createTextNode(fb));
                    iteration.appendChild(fbNode);
                    String facc = getValue(row.getCell(facCCol));
                    Node fcNode = doc.createElement("FactorC");
                    fcNode.appendChild(doc.createTextNode(facc));
                    iteration.appendChild(fcNode);
                    String inst = getValue(row.getCell(instCol));
                    Node inNode = doc.createElement("Instructions");
                    inNode.appendChild(doc.createTextNode(inst));
                    iteration.appendChild(inNode);
                    String error = getValue(row.getCell(errCol));
                    Node erNode = doc.createElement("ErrorMessage");
                    erNode.appendChild(doc.createTextNode(error));
                    iteration.appendChild(erNode);
                    String sm = getValue(row.getCell(sheetMusicCol));
                    Node smNode = doc.createElement("SheetMusicImage");
                    smNode.appendChild(doc.createTextNode(sm));
                    iteration.appendChild(smNode);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(mainFrame.getFrame(), "Error reading file on row number: " + rowNo);
                    return;
                }
                root.appendChild(iteration);
                rowNo++;
            }
            fc = new JFileChooser(mainFrame.userPrefs.get("SAVEDIR", System.getProperty("user.home")));
            fc.setFileFilter(new ExtensionFileFilter("ScoreScore XML (*.xml)", new String[] { "XML" }));
            rc = fc.showSaveDialog(mainFrame.getFrame());
            if (rc != JFileChooser.APPROVE_OPTION) {
                return;
            }
            mainFrame.userPrefs.put("SAVEDIR", fc.getCurrentDirectory().getPath());
            this.export(fc.getSelectedFile(), doc);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(ConvertXLSX.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ConvertXLSX.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidFormatException ex) {
            Logger.getLogger(ConvertXLSX.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getValue(Cell cell) {
        if (cell.getCellType() == cell.CELL_TYPE_NUMERIC) return Integer.toString((int) cell.getNumericCellValue()); else return cell.getStringCellValue();
    }

    public void export(File file, Document doc) {
        TransformerFactory tFactory = TransformerFactory.newInstance();
        Transformer transformer = null;
        try {
            transformer = tFactory.newTransformer();
        } catch (TransformerConfigurationException ex) {
            Logger.getLogger(Trial.class.getName()).log(Level.SEVERE, null, ex);
        }
        DOMSource source = new DOMSource(doc);
        StreamResult result = new StreamResult(file);
        try {
            transformer.transform(source, result);
        } catch (TransformerException ex) {
            Logger.getLogger(Trial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private javax.swing.JButton jButton1;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel10;

    private javax.swing.JLabel jLabel11;

    private javax.swing.JLabel jLabel12;

    private javax.swing.JLabel jLabel13;

    private javax.swing.JLabel jLabel14;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JLabel jLabel4;

    private javax.swing.JLabel jLabel5;

    private javax.swing.JLabel jLabel6;

    private javax.swing.JLabel jLabel7;

    private javax.swing.JLabel jLabel8;

    private javax.swing.JLabel jLabel9;

    private javax.swing.JSpinner jSpinnerBlockNo;

    private javax.swing.JSpinner jSpinnerCounterBalance;

    private javax.swing.JSpinner jSpinnerDayNo;

    private javax.swing.JSpinner jSpinnerError;

    private javax.swing.JSpinner jSpinnerFactorA;

    private javax.swing.JSpinner jSpinnerFactorB;

    private javax.swing.JSpinner jSpinnerFactorC;

    private javax.swing.JSpinner jSpinnerInst;

    private javax.swing.JSpinner jSpinnerMelodyNo;

    private javax.swing.JSpinner jSpinnerSheetMusicImage;

    private javax.swing.JSpinner jSpinnerStartingRow;

    private javax.swing.JSpinner jSpinnerTargetMusicString;

    private javax.swing.JSpinner jSpinnerTargetTime;

    private javax.swing.JSpinner jSpinnerTrialNo;
}
