package pauker.program.gui.swing;

import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.*;
import java.text.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.text.*;
import javax.swing.undo.*;
import org.apache.lucene.queryParser.ParseException;
import pauker.program.*;
import tools.lucene.Indexing;
import tools.lucene.Searching;
import tools.lucene.VirtualIndex;
import tools.StringTools;

public class NewCardDialog extends JDialog {

    private PaukerFrame paukerFrame;

    private BatchListModel batchListModel;

    /** Creates new form AddCardDialog */
    public NewCardDialog(PaukerFrame paukerFrame, Pauker pauker) {
        super(paukerFrame, true);
        this.paukerFrame = paukerFrame;
        initComponents();
        editCardPanel.setNextFocusComponent(okButton);
        editCardPanel.getFrontSideTextArea().addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyReleased(java.awt.event.KeyEvent evt) {
                editCardPanel.repaint();
                processFrontSideInput();
            }
        });
        editCardPanel.getBackSideTextArea().addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyReleased(java.awt.event.KeyEvent evt) {
                editCardPanel.repaint();
                processBackSideInput();
            }
        });
        BatchListCellRenderer batchListCellRenderer = new BatchListCellRenderer(pauker);
        batchListCellRenderer.disableInfoPanel();
        batchList.setCellRenderer(batchListCellRenderer);
        batchListModel = new BatchListModel();
        batchList.setModel(batchListModel);
        setTitle(PaukerFrame.strings.getString("Add_Card"));
        editCardPanel.setOrientation(PaukerFrame.splitOrientation);
        pack();
        similarSeparator1.setMinimumSize(similarSeparator1.getPreferredSize());
        similarLabel.setMinimumSize(similarLabel.getPreferredSize());
        similarSeparator2.setMinimumSize(similarSeparator2.getPreferredSize());
        similarCardsPanel.setMinimumSize(similarCardsPanel.getPreferredSize());
        setLocationRelativeTo(paukerFrame);
    }

    public void setOrientation(int orientation) {
        editCardPanel.setOrientation(orientation);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        splitPane = new javax.swing.JSplitPane();
        editCardPanel = new pauker.program.gui.swing.EditCardPanel();
        similarCardsPanel = new javax.swing.JPanel();
        similarSeparator1 = new javax.swing.JSeparator();
        similarLabel = new javax.swing.JLabel();
        similarSeparator2 = new javax.swing.JSeparator();
        batchListScrollPane = new javax.swing.JScrollPane();
        batchList = new javax.swing.JList();
        buttonPanel = new javax.swing.JPanel();
        keepOpenCheckBox = new javax.swing.JCheckBox();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        getContentPane().setLayout(new java.awt.GridBagLayout());
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {

            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }

            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setResizeWeight(0.5);
        splitPane.setContinuousLayout(true);
        splitPane.setOneTouchExpandable(true);
        splitPane.setTopComponent(editCardPanel);
        similarCardsPanel.setLayout(new java.awt.GridBagLayout());
        similarSeparator1.setPreferredSize(new java.awt.Dimension(20, 2));
        similarCardsPanel.add(similarSeparator1, new java.awt.GridBagConstraints());
        similarLabel.setFont(new java.awt.Font("Dialog", 0, 10));
        similarLabel.setText(java.util.ResourceBundle.getBundle("pauker/Strings").getString("Similar_Cards"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        similarCardsPanel.add(similarLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        similarCardsPanel.add(similarSeparator2, gridBagConstraints);
        batchList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        batchList.setVisibleRowCount(3);
        batchList.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                batchListMouseClicked(evt);
            }
        });
        batchListScrollPane.setViewportView(batchList);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        similarCardsPanel.add(batchListScrollPane, gridBagConstraints);
        splitPane.setBottomComponent(similarCardsPanel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(splitPane, gridBagConstraints);
        buttonPanel.setLayout(new java.awt.GridBagLayout());
        keepOpenCheckBox.setFont(new java.awt.Font("Dialog", 0, 10));
        keepOpenCheckBox.setText(java.util.ResourceBundle.getBundle("pauker/Strings").getString("Keep_Dialog_Open"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        buttonPanel.add(keepOpenCheckBox, gridBagConstraints);
        okButton.setFont(new java.awt.Font("Dialog", 0, 10));
        okButton.setText(java.util.ResourceBundle.getBundle("pauker/Strings").getString("OK"));
        okButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        okButton.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusGained(java.awt.event.FocusEvent evt) {
                okButtonFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        buttonPanel.add(okButton, gridBagConstraints);
        cancelButton.setFont(new java.awt.Font("Dialog", 0, 10));
        cancelButton.setText(java.util.ResourceBundle.getBundle("pauker/Strings").getString("Cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cancelButton.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusGained(java.awt.event.FocusEvent evt) {
                cancelButtonFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                cancelButtonFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        buttonPanel.add(cancelButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        getContentPane().add(buttonPanel, gridBagConstraints);
    }

    private void batchListMouseClicked(java.awt.event.MouseEvent evt) {
        if (evt.getClickCount() == 2) {
            int selectedIndex = batchList.getSelectedIndex();
            if (selectedIndex != -1) {
                Card selectedCard = (Card) batchListModel.get(selectedIndex);
                EditCardDialog dialog = new EditCardDialog(this, selectedCard);
                batchListModel.cardsChanged(selectedIndex, selectedIndex);
            }
        }
    }

    private void cancelButtonFocusLost(java.awt.event.FocusEvent evt) {
        getRootPane().setDefaultButton(okButton);
    }

    private void okButtonFocusGained(java.awt.event.FocusEvent evt) {
        getRootPane().setDefaultButton(okButton);
    }

    private void cancelButtonFocusGained(java.awt.event.FocusEvent evt) {
        getRootPane().setDefaultButton(cancelButton);
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {
        editCardPanel.reset();
        keepOpenCheckBox.setSelected(false);
        getRootPane().setDefaultButton(okButton);
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        editCardPanel.setFocus(Pauker.FRONT_SIDE);
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        setVisible(false);
        batchListModel.removeAllElements();
        dispose();
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String frontSideText = (String) editCardPanel.getFrontSide();
        String backSideText = (String) editCardPanel.getBackSide();
        if (frontSideText.length() == 0) {
            JOptionPane.showMessageDialog(this, PaukerFrame.strings.getString("FrontSide_Is_Empty"), PaukerFrame.strings.getString("Error"), JOptionPane.ERROR_MESSAGE);
            editCardPanel.setFocus(Pauker.FRONT_SIDE);
            return;
        }
        if (backSideText.length() == 0) {
            JOptionPane.showMessageDialog(this, PaukerFrame.strings.getString("BackSide_Is_Empty"), PaukerFrame.strings.getString("Error"), JOptionPane.ERROR_MESSAGE);
            editCardPanel.setFocus(Pauker.BACK_SIDE);
            return;
        }
        boolean repeatByTyping = editCardPanel.getRepeatByTyping();
        Card newCard = new Card(frontSideText, backSideText, repeatByTyping);
        Indexing.indexCard(newCard);
        newCard.frontSideFont = editCardPanel.getFrontSideFont();
        newCard.backSideFont = editCardPanel.getBackSideFont();
        newCard.frontFontColor = editCardPanel.getFrontFontColor();
        newCard.frontBackgroundColor = editCardPanel.getFrontBackgroundColor();
        newCard.backFontColor = editCardPanel.getBackFontColor();
        newCard.backBackgroundColor = editCardPanel.getBackBackgroundColor();
        paukerFrame.addCard(newCard);
        if (keepOpenCheckBox.isSelected()) {
            editCardPanel.clear();
            editCardPanel.setFocus(Pauker.FRONT_SIDE);
            batchListModel.removeAllElements();
            batchList.repaint();
            return;
        }
        setVisible(false);
        batchListModel.removeAllElements();
        dispose();
    }

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {
        setVisible(false);
        batchListModel.removeAllElements();
        dispose();
    }

    private synchronized void processFrontSideInput() {
        try {
            String searchString = (String) editCardPanel.getFrontSide();
            if (searchString.length() > 2) {
                Vector vector = Searching.search(searchString, "frontside", VirtualIndex.getInstance());
                Batch batch = new Batch(vector);
                batchListModel.setBatch(batch);
                batchList.repaint();
            } else {
                batchListModel.clear();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private synchronized void processBackSideInput() {
        try {
            String searchString = (String) editCardPanel.getBackSide();
            if (searchString.length() > 2) {
                Vector vector = Searching.search((String) editCardPanel.getBackSide(), "backside", VirtualIndex.getInstance());
                Batch batch = new Batch(vector);
                batchListModel.setBatch(batch);
                batchList.repaint();
            } else {
                batchListModel.clear();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private javax.swing.JList batchList;

    private javax.swing.JScrollPane batchListScrollPane;

    private javax.swing.JPanel buttonPanel;

    private javax.swing.JButton cancelButton;

    private pauker.program.gui.swing.EditCardPanel editCardPanel;

    private javax.swing.JCheckBox keepOpenCheckBox;

    private javax.swing.JButton okButton;

    private javax.swing.JPanel similarCardsPanel;

    private javax.swing.JLabel similarLabel;

    private javax.swing.JSeparator similarSeparator1;

    private javax.swing.JSeparator similarSeparator2;

    private javax.swing.JSplitPane splitPane;
}
