package org.tolk.ui;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JTree;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.tolk.Tolk;
import org.tolk.io.DataSource;
import org.tolk.io.impl.JFreeChartDataSource;
import org.tolk.io.impl.JPanelDataSource;
import org.tolk.io.impl.QnPlotDataSource;
import org.tolk.util.TolkUiUtils;

/**
 * TolkUI
 */
public class TolkUI extends JFrame implements ActionListener, ItemListener {

    private static final String RES = "res/";

    private static final String CONTEXT_FILE_KEY = "applicationContextFile";

    private static final String TOLK_UI_PROPERTIES = "tolkUi.properties";

    private static final String PLEASE_SELECT_AN_APPLICATION_CONTEXT_FILE = "Please select an application context file";

    private static final String FAILED_TO_START_TOLK_TITLE = "Failed to start Tolk";

    private static final String FAILED_TO_START_TOLK_MESSAGE = "Failed to start Tolk. See system log.";

    private static final String TOLK_UI = "Tolk UI";

    private static final String APPLICATION_CONTEXT_FILE = "Application Context File";

    private static final String XML = "xml";

    private JTabbedPane mainTabPanel;

    private JPanel contentPane;

    private JLabel ctxPathLabel;

    private JToggleButton startStopTolkButton;

    private JTextField ctxPathTextField;

    private JTree ctxTree;

    private JScrollPane ctxTreeScrollPanel;

    private JPanel mainPanel;

    private JButton selectCtxFileButton;

    private File ctxFile;

    private Tolk tolk;

    private Properties properties;

    /**
     * Default Constructor
     */
    public TolkUI() {
        super();
        initializeComponent();
        this.setVisible(true);
        try {
            properties = new Properties();
            properties.load(new FileInputStream(TOLK_UI_PROPERTIES));
            ctxFile = new File(properties.getProperty(CONTEXT_FILE_KEY));
            ctxPathTextField.setText(ctxFile.getAbsolutePath());
        } catch (Exception e) {
        }
    }

    /**
     * Performs actions when TolkUi is destroyed.
     * 
     * Saves preferences to property file.
     */
    public void destroy() {
        try {
            if (ctxFile != null) {
                properties.put(CONTEXT_FILE_KEY, ctxFile.getAbsolutePath());
                properties.store(new FileOutputStream(new File(TOLK_UI_PROPERTIES)), "");
            }
        } catch (IOException e1) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Windows Form Designer. Otherwise, retrieving design might not work properly. Tip: If
     * you must revise this method, please backup this GUI file for JFrameBuilder to retrieve your design properly in future, before
     * revising this method.
     */
    private void initializeComponent() {
        mainTabPanel = new JTabbedPane();
        contentPane = (JPanel) this.getContentPane();
        ctxPathLabel = new JLabel("Context File Path:");
        ctxPathTextField = new JTextField();
        ctxPathTextField.setEditable(false);
        ctxTree = new JTree(new DefaultMutableTreeNode());
        ctxTreeScrollPanel = new JScrollPane();
        mainPanel = new JPanel();
        selectCtxFileButton = new JButton("...");
        selectCtxFileButton.addActionListener(this);
        mainTabPanel.addTab("main", mainPanel);
        mainTabPanel.addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
            }
        });
        contentPane.setLayout(null);
        TolkUiUtils.addComponent(contentPane, mainTabPanel, 1, 2, 870, 626);
        startStopTolkButton = new JToggleButton("Start / Stop Tolk");
        startStopTolkButton.setSelected(false);
        startStopTolkButton.addItemListener(this);
        ctxTree.addTreeSelectionListener(new TreeSelectionListener() {

            public void valueChanged(TreeSelectionEvent e) {
            }
        });
        ctxTreeScrollPanel.setViewportView(ctxTree);
        mainPanel.setLayout(null);
        mainPanel.setOpaque(false);
        TolkUiUtils.addComponent(mainPanel, ctxPathLabel, 9, 74, 182, 18);
        TolkUiUtils.addComponent(mainPanel, startStopTolkButton, 9, 15, 185, 28);
        TolkUiUtils.addComponent(mainPanel, ctxPathTextField, 10, 100, 183, 22);
        TolkUiUtils.addComponent(mainPanel, selectCtxFileButton, 195, 100, 15, 22);
        TolkUiUtils.addComponent(mainPanel, ctxTreeScrollPanel, 211, 6, 647, 591);
        this.setTitle(TOLK_UI);
        this.setLocation(new Point(0, 0));
        this.setSize(new Dimension(889, 664));
    }

    /**
     * Main methodTolkUiUtils
     * 
     * @param args
     */
    public static void main(String[] args) {
        TolkUiUtils.setLookAndFeel();
        final TolkUI tolkUI = new TolkUI();
        tolkUI.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                tolkUI.destroy();
                System.exit(0);
            }
        });
    }

    /**
     * @see org.tolk.ui.TolkUIController#actionPerformed(java.awt.event.ActionEvent)
     */
    public void actionPerformed(ActionEvent e) {
        Object src = e.getSource();
        if (src == selectCtxFileButton) {
            ctxFile = TolkUiUtils.getFile(this, XML, APPLICATION_CONTEXT_FILE, RES, false);
            if (ctxFile != null) {
                ctxPathTextField.setText(ctxFile.getAbsolutePath());
            }
        }
    }

    /**
     * = new Properties()
     * 
     * @see org.tolk.ui.TolkUIController#itemStateChanged(java.awt.event.ItemEvent)
     */
    public void itemStateChanged(ItemEvent e) {
        Object src = e.getSource();
        if (src == startStopTolkButton) {
            startStopTolk(e);
        }
    }

    /**
     * Starts or stops Tolk
     * 
     * @param e
     */
    private void startStopTolk(ItemEvent e) {
        boolean start = e.getStateChange() == ItemEvent.SELECTED;
        if (start) {
            if (ctxFile != null) {
                try {
                    if (tolk == null) {
                        tolk = new Tolk(ctxFile.getName());
                        initializeUiFromContext();
                    } else {
                        ctxFile = new File(ctxFile.getAbsolutePath());
                        tolk.start(ctxFile.getName());
                        initializeUiFromContext();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, FAILED_TO_START_TOLK_MESSAGE, FAILED_TO_START_TOLK_TITLE, JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                    startStopTolkButton.setSelected(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, PLEASE_SELECT_AN_APPLICATION_CONTEXT_FILE, PLEASE_SELECT_AN_APPLICATION_CONTEXT_FILE, JOptionPane.ERROR_MESSAGE);
                startStopTolkButton.setSelected(false);
            }
        } else {
            if (tolk != null) {
                tolk.stop();
                ctxTree.setModel(new DefaultTreeModel(new DefaultMutableTreeNode()));
            }
        }
    }

    /**
     * Initializes UI components based on newly loaded Spring application context.
     */
    private void initializeUiFromContext() {
        TolkUiUtils.clearTabs(mainTabPanel);
        TolkUiUtils.setContextTree(tolk.getBeans(DataSource.class), ctxFile.getName(), ctxTree);
        TolkUiUtils.setAppCtxEditorTab(new AppCtxEditorPanel(), ctxFile, mainTabPanel);
        TolkUiUtils.setDataSourceTabs(tolk.getBeans(JPanelDataSource.class), mainTabPanel);
        TolkUiUtils.setQnPlotDataSourceTabs(tolk.getBeans(QnPlotDataSource.class), mainTabPanel);
        TolkUiUtils.setJFreeChartDataSourceTabs(tolk.getBeans(JFreeChartDataSource.class), mainTabPanel);
    }
}
