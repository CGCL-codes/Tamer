package org.mariuszgromada.math.mxparser.syntaxchecker;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SyntaxCheckerConstants {

    /** End of File. */
    int EOF = 0;

    /** RegularExpression Id. */
    int LETTER = 5;

    /** RegularExpression Id. */
    int DIGIT = 6;

    /** RegularExpression Id. */
    int LETTERS = 7;

    /** RegularExpression Id. */
    int INTEGER = 8;

    /** RegularExpression Id. */
    int LEFT_PAR = 9;

    /** RegularExpression Id. */
    int RIGHT_PAR = 10;

    /** RegularExpression Id. */
    int PLUS = 11;

    /** RegularExpression Id. */
    int MINUS = 12;

    /** RegularExpression Id. */
    int MULTIPLY = 13;

    /** RegularExpression Id. */
    int DIV = 14;

    /** RegularExpression Id. */
    int POWER = 15;

    /** RegularExpression Id. */
    int MODULO = 16;

    /** RegularExpression Id. */
    int FACTORIAL = 17;

    /** RegularExpression Id. */
    int COMMA = 18;

    /** RegularExpression Id. */
    int SEMICOLON = 19;

    /** RegularExpression Id. */
    int EQ = 20;

    /** RegularExpression Id. */
    int NEQ = 21;

    /** RegularExpression Id. */
    int LT = 22;

    /** RegularExpression Id. */
    int LEQ = 23;

    /** RegularExpression Id. */
    int GT = 24;

    /** RegularExpression Id. */
    int GEQ = 25;

    /** RegularExpression Id. */
    int OR = 26;

    /** RegularExpression Id. */
    int AND = 27;

    /** RegularExpression Id. */
    int NOT = 28;

    /** RegularExpression Id. */
    int IMP = 29;

    /** RegularExpression Id. */
    int CIMP = 30;

    /** RegularExpression Id. */
    int NIMP = 31;

    /** RegularExpression Id. */
    int CNIMP = 32;

    /** RegularExpression Id. */
    int NAND = 33;

    /** RegularExpression Id. */
    int EQV = 34;

    /** RegularExpression Id. */
    int NOR = 35;

    /** RegularExpression Id. */
    int XOR = 36;

    /** RegularExpression Id. */
    int CHAR = 37;

    /** RegularExpression Id. */
    int REAL = 38;

    /** RegularExpression Id. */
    int IDENTIFIER = 39;

    /** RegularExpression Id. */
    int FUNCTION = 40;

    /** RegularExpression Id. */
    int INVALID_TOKEN = 43;

    /** RegularExpression Id. */
    int UNEXPECTED_CHAR = 44;

    /** Lexical state. */
    int DEFAULT = 0;

    /** Literal token values. */
    String[] tokenImage = { "<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"", "<LETTER>", "<DIGIT>", "<LETTERS>", "<INTEGER>", "\"(\"", "\")\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"", "\"^\"", "\"%\"", "\"!\"", "\",\"", "\";\"", "<EQ>", "<NEQ>", "\"<\"", "\"<=\"", "\">\"", "\">=\"", "<OR>", "<AND>", "\"~\"", "<IMP>", "<CIMP>", "<NIMP>", "<CNIMP>", "<NAND>", "<EQV>", "<NOR>", "<XOR>", "<CHAR>", "<REAL>", "<IDENTIFIER>", "<FUNCTION>", "\"[\"", "\"]\"", "<INVALID_TOKEN>", "<UNEXPECTED_CHAR>" };
}
