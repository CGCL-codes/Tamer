package com.bluebrim.layout.impl.server.manager;

import org.w3c.dom.Node;
import com.bluebrim.layout.impl.shared.*;
import com.bluebrim.layout.impl.shared.CoLocationSpecIF;
import com.bluebrim.layout.impl.shared.CoPageItemStringResources;
import com.bluebrim.layout.impl.shared.CoTopLocationIF;
import com.bluebrim.layout.shared.*;
import com.bluebrim.layout.shared.CoImmutableColumnGridIF;

/**
 * This class was generated by a SmartGuide.
 */
public class CoTopLocation extends CoLocationSpec implements CoTopLocationIF {

    public static final String XML_TAG = "top-location";

    public static com.bluebrim.xml.shared.CoXmlImportEnabledIF xmlCreateModel(Object superModel, Node node, com.bluebrim.xml.shared.CoXmlContext context) {
        return new CoTopLocation();
    }

    CoTopLocation() {
    }

    public boolean equals(Object o) {
        return (this == o) || (o instanceof CoTopLocation) || super.equals(o);
    }

    public String getFactoryKey() {
        return TOP_LOCATION;
    }

    public double getHeightAfterLocation(CoLayoutableIF layoutable) {
        return getBottomHeightAfterLocation(layoutable);
    }

    public String getIconName() {
        return "CoTopLocation.gif";
    }

    public static CoTopLocation getInstance() {
        return (CoTopLocation) getFactory().getTopLocation();
    }

    public CoLocationSpecIF getLocationSpecAfterReshape(boolean dx0, boolean dy0, boolean dx1, boolean dy1) {
        if (dy0) {
            return getFactory().getNoLocation();
        } else {
            return null;
        }
    }

    public String getType() {
        return CoPageItemStringResources.getName(TOP_LOCATION);
    }

    public double getWidthAfterLocation(CoLayoutableIF layoutable) {
        return getLeftRightWidthAfterLocation(layoutable);
    }

    public String getXmlTag() {
        return XML_TAG;
    }

    /**
 * Placerar sidelementet h�ngande mitt p� den �vre marginalen.
 *
 */
    public void placeLayoutable(CoLayoutableIF layoutable) {
        if (hasValidParent(layoutable, true)) {
            CoLayoutableContainerIF parent = layoutable.getLayoutParent();
            CoImmutableColumnGridIF grid = parent.getColumnGrid();
            double minY = grid.getTopMarginPosition();
            double x = (parent.getLayoutWidth() - layoutable.getLayoutWidth()) / 2;
            double y = parent.getColumnGrid().getTopMarginPosition();
            y = Math.max(minY, CoLayoutManagerUtilities.usedTopSpaceAt(x, layoutable, false, false));
            layoutable.setLayoutLocation(x, y);
        }
        layoutable.setLayoutSuccess(true);
    }

    public boolean usesTopSpace(CoLayoutableContainerIF layoutArea) {
        return true;
    }
}
