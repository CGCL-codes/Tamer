package com.acgvision.configurator;

import com.acgvision.configurator.ws.WebService;
import com.acgvision.core.wsparam.AutomaticAction;
import com.acgvision.core.wsparam.Job;
import com.acgvision.core.wsparam.LimitValue;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 *
 * @author RÃ©mi Debay <remi.debay@acgcenter.com>
 */
public class LimitPanel extends javax.swing.JPanel {

    private long maxIndex = 0L;

    Map<Long, LimitValue> list = new HashMap<Long, LimitValue>();

    Map<Long, comboIdActionAutomatic> listActions = new HashMap<Long, comboIdActionAutomatic>();

    /**
     * @param maxIndex the maxIndex to set
     */
    public void setMaxIndex(long maxIndex) {
        this.maxIndex = maxIndex;
        this.txtId.setText(String.valueOf(this.maxIndex + 1));
    }

    /** Creates new form CommandsPanel */
    public LimitPanel() {
        initComponents();
        ReLoadList();
        this.cmbLimits.setSelectedIndex(-1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        chkEqual = new javax.swing.JCheckBox();
        chkInferieur = new javax.swing.JCheckBox();
        chkSuperior = new javax.swing.JCheckBox();
        txtValue = new javax.swing.JTextField();
        lblValue = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbLimits = new javax.swing.JComboBox();
        txtName = new javax.swing.JTextField();
        lblLimitValue = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lbld = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        btNew = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        cmdAutomaticAction = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        chkActiveAutomaticAction = new javax.swing.JCheckBox();
        jButton1.setName("jButton1");
        jButton2.setName("jButton2");
        setName("Form");
        setPreferredSize(new java.awt.Dimension(1024, 768));
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.acgvision.configurator.ConfiguratorApp.class).getContext().getResourceMap(LimitPanel.class);
        saveButton.setText(resourceMap.getString("saveButton.text"));
        saveButton.setName("saveButton");
        saveButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        cancelButton.setText(resourceMap.getString("cancelButton.text"));
        cancelButton.setName("cancelButton");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        chkEqual.setText(resourceMap.getString("chkEqual.text"));
        chkEqual.setName("chkEqual");
        chkInferieur.setText(resourceMap.getString("chkInferieur.text"));
        chkInferieur.setName("chkInferieur");
        chkSuperior.setText(resourceMap.getString("chkSuperior.text"));
        chkSuperior.setName("chkSuperior");
        txtValue.setName("txtValue");
        lblValue.setText(resourceMap.getString("lblValue.text"));
        lblValue.setName("lblValue");
        jLabel5.setName("jLabel5");
        cmbLimits.setName("cmbLimits");
        cmbLimits.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLimitsActionPerformed(evt);
            }
        });
        txtName.setName("txtName");
        lblLimitValue.setText(resourceMap.getString("lblLimitValue.text"));
        lblLimitValue.setName("lblLimitValue");
        lblName.setName("lblName");
        lbld.setText(resourceMap.getString("lbld.text"));
        lbld.setName("lbld");
        txtId.setEditable(false);
        txtId.setName("txtId");
        btNew.setText(resourceMap.getString("btNew.text"));
        btNew.setName("btNew");
        btNew.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewActionPerformed(evt);
            }
        });
        lblTitle.setFont(resourceMap.getFont("lblTitle.font"));
        lblTitle.setText(resourceMap.getString("lblTitle.text"));
        lblTitle.setName("lblTitle");
        cmdAutomaticAction.setName("cmdAutomaticAction");
        jLabel1.setText(resourceMap.getString("jLabel1.text"));
        jLabel1.setName("jLabel1");
        chkActiveAutomaticAction.setText(resourceMap.getString("chkActiveAutomaticAction.text"));
        chkActiveAutomaticAction.setName("chkActiveAutomaticAction");
        chkActiveAutomaticAction.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkActiveAutomaticActionStateChanged(evt);
            }
        });
        chkActiveAutomaticAction.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkActiveAutomaticActionActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(lblTitle, javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(lbld).addComponent(lblName).addComponent(lblLimitValue).addComponent(txtValue, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblValue).addComponent(jLabel1)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE).addComponent(cmbLimits, 0, 861, Short.MAX_VALUE).addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE).addGroup(layout.createSequentialGroup().addComponent(jLabel5).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addComponent(chkSuperior).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 527, Short.MAX_VALUE).addComponent(btNew).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(saveButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cancelButton)).addComponent(chkInferieur).addGroup(layout.createSequentialGroup().addComponent(chkActiveAutomaticAction).addGap(36, 36, 36).addComponent(cmdAutomaticAction, 0, 745, Short.MAX_VALUE)).addComponent(chkEqual)))))).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(lblTitle).addGap(9, 9, 9).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(cmbLimits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblLimitValue)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lbld).addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblName)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(layout.createSequentialGroup().addComponent(jLabel5).addGap(27, 27, 27)).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(cmdAutomaticAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel1).addComponent(chkActiveAutomaticAction))).addGap(7, 7, 7).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblValue).addComponent(chkInferieur)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(chkEqual)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(saveButton).addComponent(btNew).addComponent(cancelButton).addComponent(chkSuperior)).addContainerGap(506, Short.MAX_VALUE)));
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        flush();
        ReLoadList();
        this.cmbLimits.setSelectedIndex(-1);
    }

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {
        LimitValue l = new LimitValue();
        if (!this.txtId.getText().equals("")) {
            l.setId(Long.parseLong(this.txtId.getText()));
        }
        l.setName(this.txtName.getText());
        l.setValue(Integer.parseInt(this.txtValue.getText()));
        l.setEqual(this.chkEqual.isSelected());
        l.setUnder(this.chkInferieur.isSelected());
        l.setHigh(this.chkSuperior.isSelected());
        if (this.chkActiveAutomaticAction.isSelected()) {
            comboIdActionAutomatic cmba = ((comboIdActionAutomatic) this.cmdAutomaticAction.getSelectedItem());
            l.setAutomaticAction(cmba.getAutomaticAction());
        } else {
            l.setAutomaticAction(null);
        }
        this.commit(l);
        flush();
        ReLoadList();
    }

    private void cmbLimitsActionPerformed(java.awt.event.ActionEvent evt) {
        this.load();
    }

    private void btNewActionPerformed(java.awt.event.ActionEvent evt) {
        this.cmbLimits.setSelectedIndex(-1);
    }

    private void chkActiveAutomaticActionActionPerformed(java.awt.event.ActionEvent evt) {
        if (!this.chkActiveAutomaticAction.isSelected()) {
            this.cmdAutomaticAction.setEnabled(false);
            this.cmdAutomaticAction.setSelectedIndex(-1);
        } else {
            this.cmdAutomaticAction.setEnabled(true);
            this.cmdAutomaticAction.setSelectedIndex(-1);
        }
    }

    private void chkActiveAutomaticActionStateChanged(javax.swing.event.ChangeEvent evt) {
    }

    private void flush() {
        this.txtId.setText("");
        this.txtName.setText("");
        this.txtValue.setText("");
        this.chkEqual.setSelected(false);
        this.chkInferieur.setSelected(false);
        this.chkSuperior.setSelected(false);
    }

    private void ReLoadList() {
        this.cmbLimits.removeAllItems();
        List<LimitValue> limits = ConfiguratorApp.getWs().getLimitValues();
        if (list != null) {
            Iterator<LimitValue> it = limits.iterator();
            LimitValue j = null;
            while (it.hasNext()) {
                j = it.next();
                this.cmbLimits.addItem(new comboIdJob(j.getId(), j));
                this.list.put(j.getId(), j);
            }
        }
        this.cmbLimits.setSelectedIndex(-1);
        this.loadAutomaticActions();
    }

    private javax.swing.JButton btNew;

    private javax.swing.JButton cancelButton;

    private javax.swing.JCheckBox chkActiveAutomaticAction;

    private javax.swing.JCheckBox chkEqual;

    private javax.swing.JCheckBox chkInferieur;

    private javax.swing.JCheckBox chkSuperior;

    private javax.swing.JComboBox cmbLimits;

    private javax.swing.JComboBox cmdAutomaticAction;

    private javax.swing.JButton jButton1;

    private javax.swing.JButton jButton2;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel5;

    private javax.swing.JLabel lblLimitValue;

    private javax.swing.JLabel lblName;

    private javax.swing.JLabel lblTitle;

    private javax.swing.JLabel lblValue;

    private javax.swing.JLabel lbld;

    private javax.swing.JButton saveButton;

    private javax.swing.JTextField txtId;

    private javax.swing.JTextField txtName;

    private javax.swing.JTextField txtValue;

    private List<LimitValue> getJobList() {
        List<LimitValue> jobs = new ArrayList<LimitValue>();
        LimitValue c = null;
        return jobs;
    }

    private void commit(LimitValue l) {
        ConfiguratorApp.getWs().save(l);
    }

    private void load(Job j) {
        this.txtId.setText(j.getId().toString());
        this.txtName.setText(j.getName());
    }

    private void load() {
        comboIdJob cmb = (comboIdJob) this.cmbLimits.getSelectedItem();
        if (cmb != null) {
            LimitValue l = (LimitValue) cmb.getJob();
            load(l);
            this.txtValue.setText(String.valueOf(l.getValue()));
            this.chkEqual.setSelected(l.isEqual());
            this.chkInferieur.setSelected(l.isUnder());
            this.chkSuperior.setSelected(l.isHigh());
            if (l.getAutomaticAction() == null) {
                this.chkActiveAutomaticAction.setSelected(false);
                this.cmdAutomaticAction.setEnabled(false);
                this.cmdAutomaticAction.setSelectedIndex(-1);
            } else {
                this.chkActiveAutomaticAction.setSelected(true);
                this.cmdAutomaticAction.setEnabled(true);
                comboIdActionAutomatic cmba = this.listActions.get(l.getAutomaticAction().getId());
                this.cmdAutomaticAction.setSelectedItem(cmba);
            }
        } else {
            flush();
        }
    }

    private void loadAutomaticActions() {
        List<AutomaticAction> actions = ConfiguratorApp.getWs().getAutomaticActions();
        this.cmdAutomaticAction.removeAllItems();
        for (AutomaticAction c : actions) {
            comboIdActionAutomatic cmbp = new comboIdActionAutomatic(c.getId(), c);
            this.cmdAutomaticAction.addItem(cmbp);
            this.listActions.put(c.getId(), cmbp);
        }
        this.cmdAutomaticAction.setSelectedIndex(-1);
    }
}
