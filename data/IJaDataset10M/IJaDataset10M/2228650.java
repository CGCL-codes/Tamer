package org.xmlcml.cml.units;

import java.io.IOException;
import java.io.Writer;
import nu.xom.Element;
import nu.xom.Node;

/**
 * user-modifiable class supporting unitType. * autogenerated from schema use as
 * a shell which can be edited
 *
 */
public class JumboUnitType extends Element {

    /** common units in chemistry */
    public enum UnitType {

        /** amount*/
        AMOUNT("unitType:amount"), /** mass*/
        DENSITY("unitType:density"), /** mass*/
        MASS("unitType:mass"), /** time*/
        TIME("unitType:time"), /** temperature*/
        TEMP("unitType:temp"), /** volume*/
        VOL("unitType:volume");

        /** dewisott */
        public final String value;

        private UnitType(String s) {
            value = s;
        }
    }

    ;

    /** amount*/
    public static final JumboUnitType UNKNOWN = new JumboUnitType("unitType:unk", "unk", "unk", JumboUnit.UNKNOWN);

    /** amount*/
    public static final JumboUnitType AMOUNT = new JumboUnitType("unitType:amount", "amount", "amt", JumboUnit.MOLE);

    /** mass*/
    public static final JumboUnitType DENSITY = new JumboUnitType("unitType:density", "density", "rho", JumboUnit.KGPERM3);

    /** mass*/
    public static final JumboUnitType MASS = new JumboUnitType("unitType:mass", "mass", "m", JumboUnit.KG);

    /** time*/
    public static final JumboUnitType TIME = new JumboUnitType("unitType:time", "time", "t", JumboUnit.SECOND);

    /** time*/
    public static final JumboUnitType PRESSURE = new JumboUnitType("unitType:pressure", "pressure", "P", JumboUnit.PASCAL);

    /** temperature*/
    public static final JumboUnitType TEMP = new JumboUnitType("unitType:temp", "temperature", "T", JumboUnit.KELVIN);

    /** volume*/
    public static final JumboUnitType VOL = new JumboUnitType("unitType:volume", "volume", "vol", JumboUnit.M3);

    ;

    /**
     * unit without valis JumboUnitType.
     *
     */
    public static JumboUnitType UNKNOWN_PARENT = null;

    static {
        UNKNOWN_PARENT = new JumboUnitType();
        UNKNOWN_PARENT.setId("unknownParentSI");
        UNKNOWN_PARENT.setTitle("unknown parentSI");
    }

    ;

    private String id;

    private String title;

    private String abbreviation;

    private JumboUnit parentSI;

    public JumboUnitType(String id, String title, String abbreviation, JumboUnit parentSI) {
        this();
        this.id = id;
        this.title = title;
        this.abbreviation = abbreviation;
        this.parentSI = parentSI;
    }

    /**
     * contructor.
     */
    public JumboUnitType() {
        this(JumboUnitType.UNKNOWN);
    }

    /**
     * contructor.
     *
     * @param old
     */
    public JumboUnitType(JumboUnitType old) {
        super(old.getLocalName());
    }

    /**
     * copy node .
     *
     * @return Node
     */
    public Node copy() {
        return new JumboUnitType(this);
    }

    /**
     * writes table header for units dictionary as HTML.
     *
     * @param w
     *            writer
     * @throws IOException
     */
    static void writeHTMLTableHeader(Writer w) throws IOException {
        w.write("<tr>" + "<th>id</th>" + "<th>name</th>" + "<th>abbrev</th>" + "<th>type</th>" + "<th>title</th>" + "<th>multSI</th>" + "<th>SI</th>" + "<th>description</th>" + "</tr>\n");
    }

    /**
     * writes units dictionary as HTML.
     *
     * @param w
     *            writer
     * @throws IOException
     */
    public void writeHTML(Writer w) throws IOException {
        w.write("<tr>" + "<td><b>" + this.getId() + "</b></td>" + "<td><b>" + "</b></td>" + "<td>" + this.getAbbreviation() + "</td>" + "<td>" + this.getTitle() + "</td>" + "<td>" + "</td>" + "<td>" + "</td>" + "</tr>\n");
    }

    /**
     * gets id. traps missing id and throws runtime.
     *
     * @return id
     * @throws RuntimeException
     *             missing id
     */
    public String getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAbbreviation() {
        return abbreviation;
    }

    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    public void setId(String id) {
        this.id = id;
    }
}
