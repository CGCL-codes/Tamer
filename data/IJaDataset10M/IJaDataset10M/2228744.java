package rpr2_d18.simpleDataRepresentations;

import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.ByteWrapper;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.RtiFactoryFactory;
import hla.rti1516e.encoding.EncoderFactory;
import hla.rti1516e.encoding.HLAfloat32BE;

/**
 * JAVADOC_COMMENTS
 * units      = Watts 
 * resolution =  
 * accuracy   = perfect
 * semantics  = -NULL- 
 * @author : auto generated by DRDC FOM Generator
 */
public class Power_Watts implements DataElement {

    private HLAfloat32BE value;

    /**
   * Empty constructor
   */
    public Power_Watts() throws RTIinternalError {
        EncoderFactory ef = RtiFactoryFactory.getRtiFactory().getEncoderFactory();
        value = ef.createHLAfloat32BE();
    }

    /**
   * Initializing constructor
   * @param initial : the initial value 
   */
    public Power_Watts(HLAfloat32BE initial) throws RTIinternalError {
        EncoderFactory ef = RtiFactoryFactory.getRtiFactory().getEncoderFactory();
        value = ef.createHLAfloat32BE();
    }

    /**
   * Returns the size in bytes of this element's encoding.
   * 
   * @return : length in bytes
   */
    public int getEncodedLength() {
        return this.value.getEncodedLength();
    }

    /**
   * Returns the octet boundary of this element.
   *  
   * @return : octet boundary position
   */
    public int getOctetBoundary() {
        return this.value.getOctetBoundary();
    }

    /**
   * Encodes this element into the specified ByteWrapper.
   * 
   * @param byteWrapper : organized byte array containing native java value
   */
    public void encode(ByteWrapper byteWrapper) {
        this.value.encode(byteWrapper);
    }

    /**
   * Decodes this element from a ByteWrapper object
   * 
   * @param byteWrapper : organized array of bytes 
   */
    public void decode(ByteWrapper byteWrapper) throws DecoderException {
        this.value.decode(byteWrapper);
    }

    /**
   * Decodes this element from an array of bytes
   * 
   * @param bytes : array of bytes 
   */
    public void decode(byte[] bytes) throws DecoderException {
        this.value.decode(bytes);
    }

    /**
   * Returns this data value element
   * 
   * @return : native value type
   */
    public HLAfloat32BE getValue() {
        return value;
    }

    /**
   * Copies the value into an array of bytes
   * 
   * @return : array of bytes
   */
    public byte[] toByteArray() {
        return this.value.toByteArray();
    }

    /**
   * Set the value from a native java type
   * 
   * @param newValue : the value to set it to
   */
    public void setValue(HLAfloat32BE newValue) throws RTIinternalError {
        EncoderFactory ef = RtiFactoryFactory.getRtiFactory().getEncoderFactory();
        value = ef.createHLAfloat32BE();
    }
}
