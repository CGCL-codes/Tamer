package com.voracious.ep1cG4m3.framework;

import javax.swing.JPanel;
import com.voracious.ep1cG4m3.utils.ScreenResultEvent;

/**
 * Absract super class all screens must extend.
 * 
 * @author Voracious Softworks
 * @see Drawable
 */
public abstract class Screen extends JPanel {

    /**
	 * Generated by eclipse
	 */
    private static final long serialVersionUID = 8843433126634456511L;

    int myId;

    ScreenResultEvent myListener;

    /**
	 * Sets id to be returned for identifying in the calling class and the class that will be returned to.
	 * 
	 * @param id unique screen id
	 * @param listener method that the screen will return a result to.
	 */
    public Screen(int id, ScreenResultEvent listener) {
        myId = id;
        myListener = listener;
        setVisible(true);
        setOpaque(false);
    }

    /**
	 * Supplies the id that the screen should send to onActivityResult in Menu
	 * 
	 * @return this screen's id
	 */
    public int getId() {
        return myId;
    }

    /**
	 * The game object that called the screen. Needed to call onActivityResult.
	 * 
	 * @return the class that the screen will return a result to
	 */
    public ScreenResultEvent getListener() {
        return myListener;
    }

    /**
	 * Called when the screen is being switched to. Each screen can initialize GUI elements and listeners here.
	 */
    public abstract void start();

    /**
	 * Called when switching to another screen. Each screen MUST remove it's specific listeners here.
	 */
    public abstract void stop();

    /**
	 * A method to call when GUI elements are interacted with.
	 * 
	 * @param id id for the GUI element
	 * @param type Action type
	 */
    protected void dispatchResult(int type) {
        myListener.onScreenResult(getId(), type);
    }
}
