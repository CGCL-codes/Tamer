package dot.swing;

import javax.swing.*;
import java.awt.*;

/**
 * A widget which displays data, and looks like an LCD display.
 * 
 * @author Rob Clark
 * @version 0.1
 */
public class LCDCharacterDisplay extends JComponent {

    private char screen[][];

    private Image buffer = null;

    /**
   * How big to draw the pixels.
   */
    private static final int PIXEL_SIZE = 2;

    private static final int PIXEL_SPACE = 1;

    /**
   * Space between characters, in terms of screen resolution.
   */
    private static final int CHAR_SPACE = 3;

    /**
   * We are using an 8x8 font.
   */
    private static final int CHAR_WIDTH = 8;

    private static final int CHAR_HEIGHT = 8;

    /**
   * The colors to use for on/off pixels.
   */
    private static final Color DEFAULT_ON_COLOR = Color.black;

    private static final Color DEFAULT_OFF_COLOR = new Color(0, 223, 0);

    private static final Color DEFAULT_BG_COLOR = new Color(0, 255, 0);

    private Color onColor;

    private Color offColor;

    private Color bgColor;

    /**
   * Class Constructor.  Set the screen to a blank screen of the specified
   * dimensions.
   * 
   * @param rows        the number of rows for the initial screen
   * @param cols        the number of columns for the initial screen
   * @param onColor     the color for an 'on' pixel/segment
   * @param offColor    the color for an 'off' pixel/segment
   * @param bgColor     the background color
   */
    public LCDCharacterDisplay(int rows, int cols, Color onColor, Color offColor, Color bgColor) {
        super();
        screen = new char[rows][cols];
        this.onColor = onColor;
        this.offColor = offColor;
        this.bgColor = bgColor;
    }

    /**
   * Class Constructor.  Set the screen to a blank screen of the specified
   * dimensions.
   * 
   * @param rows        the number of rows for the initial screen
   * @param cols        the number of columns for the initial screen
   */
    public LCDCharacterDisplay(int rows, int cols) {
        this(rows, cols, DEFAULT_ON_COLOR, DEFAULT_OFF_COLOR, DEFAULT_BG_COLOR);
    }

    /**
   * Class Constructor.  Set the screen to initially display <code>data</code>.
   * 
   * @param data        the initial screen
   */
    public LCDCharacterDisplay(char data[][]) {
        this(0, 0);
        updateScreen(data);
    }

    /**
   * Update the data displayed on the screen.  The size of the screen is
   * set based on the dimensions of data.  The offscreen buffer is
   * re-rendered.
   * 
   * @param data        the data to display on the screen
   */
    public void updateScreen(char data[][]) {
        if (data != null) {
            screen = data;
            buffer = null;
            repaint();
        }
    }

    /**
   * Get the size of this widget.
   */
    public Dimension getPreferredSize() {
        return getSize();
    }

    /**
   * Get the size of this widget.
   */
    public Dimension getMinimumSize() {
        return getSize();
    }

    /**
   * Get the size of this widget.
   */
    public Dimension getMaximumSize() {
        return getSize();
    }

    /**
   * Get the size of this widget.
   */
    public Dimension getSize() {
        int rows = screen.length;
        int cols = screen[0].length;
        int x = (cols * ((CHAR_WIDTH * (PIXEL_SIZE + PIXEL_SPACE)) + CHAR_SPACE)) - CHAR_SPACE;
        int y = (rows * ((CHAR_HEIGHT * (PIXEL_SIZE + PIXEL_SPACE)) + CHAR_SPACE)) - CHAR_SPACE;
        Dimension d = new Dimension(x, y);
        return d;
    }

    /**
   * Paint this display.
   * 
   * @param g  the graphics context to paint into
   */
    protected void paintComponent(Graphics g) {
        if (buffer == null) {
            Dimension d = getSize();
            buffer = createImage(d.width, d.height);
            if (buffer != null) {
                render(buffer.getGraphics());
            }
        }
        if (buffer != null) {
            g.drawImage(buffer, 0, 0, this);
        }
    }

    /**
   * Render the characters into the provided graphics context.
   * 
   * @param g  the graphics context to render into
   */
    private void render(Graphics g) {
        Dimension d = getSize();
        g.setColor(bgColor);
        g.fillRect(0, 0, d.width, d.height);
        int xinc = (CHAR_WIDTH * (PIXEL_SIZE + PIXEL_SPACE)) + CHAR_SPACE;
        int yinc = (CHAR_HEIGHT * (PIXEL_SIZE + PIXEL_SPACE)) + CHAR_SPACE;
        for (int i = 0, y = 0; i < screen.length; i++, y += yinc) {
            for (int j = 0, x = 0; j < screen[i].length; j++, x += xinc) {
                renderChar(g.create(x, y, xinc, yinc), screen[i][j]);
            }
        }
    }

    /**
   * Render a character into the provided graphics context.
   *<p>
   * This is pretty much hard-coded to use ?x8 font.  I could fix this
   * if there was a need to...
   * 
   * @param g  the graphics context to render into
   */
    private void renderChar(Graphics g, char c) {
        int yinc = PIXEL_SIZE + PIXEL_SPACE;
        int xinc = PIXEL_SIZE + PIXEL_SPACE;
        int character[] = font[c];
        for (int i = 0, y = PIXEL_SPACE; i < character.length; i++, y += yinc) {
            int p = character[i];
            boolean ps[] = new boolean[8];
            ps[0] = ((p & 0x80) != 0);
            ps[1] = ((p & 0x40) != 0);
            ps[2] = ((p & 0x20) != 0);
            ps[3] = ((p & 0x10) != 0);
            ps[4] = ((p & 0x08) != 0);
            ps[5] = ((p & 0x04) != 0);
            ps[6] = ((p & 0x02) != 0);
            ps[7] = ((p & 0x01) != 0);
            for (int j = 0, x = PIXEL_SPACE; j < 8; j++, x += xinc) {
                if (ps[j]) g.setColor(onColor); else g.setColor(offColor);
                g.fillRect(x, y, PIXEL_SIZE, PIXEL_SIZE);
            }
        }
    }

    /**
   * The font.
   */
    private static int font[][] = { { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e }, { 0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e }, { 0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00 }, { 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00 }, { 0x38, 0x7c, 0x38, 0xfe, 0xfe, 0xd6, 0x10, 0x38 }, { 0x10, 0x38, 0x7c, 0xfe, 0xfe, 0x7c, 0x10, 0x38 }, { 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00 }, { 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff }, { 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00 }, { 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff }, { 0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78 }, { 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18 }, { 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0 }, { 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0 }, { 0x18, 0xdb, 0x3c, 0xe7, 0xe7, 0x3c, 0xdb, 0x18 }, { 0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00 }, { 0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00 }, { 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18 }, { 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00 }, { 0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00 }, { 0x3e, 0x61, 0x3c, 0x66, 0x66, 0x3c, 0x86, 0x7c }, { 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00 }, { 0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff }, { 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00 }, { 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00 }, { 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00 }, { 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00 }, { 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00 }, { 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00 }, { 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00 }, { 0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x18, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x00 }, { 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00 }, { 0x18, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x18, 0x00 }, { 0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00 }, { 0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00 }, { 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00 }, { 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00 }, { 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00 }, { 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30 }, { 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00 }, { 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00 }, { 0x38, 0x6c, 0xc6, 0xd6, 0xc6, 0x6c, 0x38, 0x00 }, { 0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00 }, { 0x7c, 0xc6, 0x06, 0x1c, 0x30, 0x66, 0xfe, 0x00 }, { 0x7c, 0xc6, 0x06, 0x3c, 0x06, 0xc6, 0x7c, 0x00 }, { 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00 }, { 0xfe, 0xc0, 0xc0, 0xfc, 0x06, 0xc6, 0x7c, 0x00 }, { 0x38, 0x60, 0xc0, 0xfc, 0xc6, 0xc6, 0x7c, 0x00 }, { 0xfe, 0xc6, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00 }, { 0x7c, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0x7c, 0x00 }, { 0x7c, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00 }, { 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00 }, { 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30 }, { 0x06, 0x0c, 0x18, 0x30, 0x18, 0x0c, 0x06, 0x00 }, { 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00 }, { 0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00 }, { 0x7c, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x00 }, { 0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00 }, { 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00 }, { 0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00 }, { 0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00 }, { 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00 }, { 0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00 }, { 0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00 }, { 0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3a, 0x00 }, { 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00 }, { 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00 }, { 0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00 }, { 0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00 }, { 0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00 }, { 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00 }, { 0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00 }, { 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 }, { 0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00 }, { 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xce, 0x7c, 0x0e }, { 0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00 }, { 0x3c, 0x66, 0x30, 0x18, 0x0c, 0x66, 0x3c, 0x00 }, { 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x3c, 0x00 }, { 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 }, { 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00 }, { 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00 }, { 0xc6, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0xc6, 0x00 }, { 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x00 }, { 0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00 }, { 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00 }, { 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00 }, { 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00 }, { 0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff }, { 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00 }, { 0xe0, 0x60, 0x7c, 0x66, 0x66, 0x66, 0xdc, 0x00 }, { 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc6, 0x7c, 0x00 }, { 0x1c, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00 }, { 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00 }, { 0x3c, 0x66, 0x60, 0xf8, 0x60, 0x60, 0xf0, 0x00 }, { 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8 }, { 0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00 }, { 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00 }, { 0x06, 0x00, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c }, { 0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00 }, { 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00 }, { 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0x00 }, { 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x00 }, { 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 }, { 0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0 }, { 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e }, { 0x00, 0x00, 0xdc, 0x76, 0x60, 0x60, 0xf0, 0x00 }, { 0x00, 0x00, 0x7e, 0xc0, 0x7c, 0x06, 0xfc, 0x00 }, { 0x30, 0x30, 0xfc, 0x30, 0x30, 0x36, 0x1c, 0x00 }, { 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00 }, { 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00 }, { 0x00, 0x00, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00 }, { 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00 }, { 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0xfc }, { 0x00, 0x00, 0x7e, 0x4c, 0x18, 0x32, 0x7e, 0x00 }, { 0x0e, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0e, 0x00 }, { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00 }, { 0x70, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x70, 0x00 }, { 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00 }, { 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x0c, 0x78 }, { 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00 }, { 0x0c, 0x18, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00 }, { 0x7c, 0x82, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00 }, { 0xc6, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00 }, { 0x30, 0x18, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00 }, { 0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00 }, { 0x00, 0x00, 0x7e, 0xc0, 0xc0, 0x7e, 0x0c, 0x38 }, { 0x7c, 0x82, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00 }, { 0xc6, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00 }, { 0x30, 0x18, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00 }, { 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00 }, { 0x7c, 0x82, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00 }, { 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3c, 0x00 }, { 0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00 }, { 0x38, 0x6c, 0x7c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00 }, { 0x18, 0x30, 0xfe, 0xc0, 0xf8, 0xc0, 0xfe, 0x00 }, { 0x00, 0x00, 0x7e, 0x18, 0x7e, 0xd8, 0x7e, 0x00 }, { 0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00 }, { 0x7c, 0x82, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 }, { 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 }, { 0x30, 0x18, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 }, { 0x78, 0x84, 0x00, 0xcc, 0xcc, 0xcc, 0x76, 0x00 }, { 0x60, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00 }, { 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0xfc }, { 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x00 }, { 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 }, { 0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18 }, { 0x38, 0x6c, 0x64, 0xf0, 0x60, 0x66, 0xfc, 0x00 }, { 0x66, 0x66, 0x3c, 0x7e, 0x18, 0x7e, 0x18, 0x18 }, { 0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7 }, { 0x0e, 0x1b, 0x18, 0x3c, 0x18, 0xd8, 0x70, 0x00 }, { 0x18, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00 }, { 0x0c, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3c, 0x00 }, { 0x0c, 0x18, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 }, { 0x18, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00 }, { 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x00 }, { 0x76, 0xdc, 0x00, 0xe6, 0xf6, 0xde, 0xce, 0x00 }, { 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00 }, { 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00 }, { 0x18, 0x00, 0x18, 0x18, 0x30, 0x63, 0x3e, 0x00 }, { 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x00, 0x00 }, { 0x63, 0xe6, 0x6c, 0x7e, 0x33, 0x66, 0xcc, 0x0f }, { 0x63, 0xe6, 0x6c, 0x7a, 0x36, 0x6a, 0xdf, 0x06 }, { 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x18, 0x00 }, { 0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00 }, { 0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00 }, { 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88 }, { 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa }, { 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd }, { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 }, { 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18 }, { 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18 }, { 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36 }, { 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36 }, { 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18 }, { 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36 }, { 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36 }, { 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36 }, { 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00 }, { 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00 }, { 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18 }, { 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00 }, { 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18 }, { 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18 }, { 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00 }, { 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18 }, { 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18 }, { 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36 }, { 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36 }, { 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36 }, { 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36 }, { 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00 }, { 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36 }, { 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00 }, { 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18 }, { 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36 }, { 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00 }, { 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18 }, { 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36 }, { 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36 }, { 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18 }, { 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18 }, { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, { 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff }, { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0 }, { 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f }, { 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00 }, { 0x78, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xcc, 0x00 }, { 0xfe, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00 }, { 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x00 }, { 0xfe, 0xc6, 0x60, 0x30, 0x60, 0xc6, 0xfe, 0x00 }, { 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00 }, { 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0xc0 }, { 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00 }, { 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x7e }, { 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00 }, { 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00 }, { 0x0e, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x3c, 0x00 }, { 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00 }, { 0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0 }, { 0x1e, 0x30, 0x60, 0x7e, 0x60, 0x30, 0x1e, 0x00 }, { 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00 }, { 0x00, 0xfe, 0x00, 0xfe, 0x00, 0xfe, 0x00, 0x00 }, { 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x7e, 0x00 }, { 0x30, 0x18, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00 }, { 0x0c, 0x18, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00 }, { 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18 }, { 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70 }, { 0x00, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x00, 0x00 }, { 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00 }, { 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00 }, { 0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c }, { 0x6c, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00 }, { 0x78, 0x0c, 0x18, 0x30, 0x7c, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } };
}
