package rpr2_d18.fixedRecordRepresentations;

import java.util.Iterator;
import java.util.ArrayList;
import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.ByteWrapper;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.encoding.HLAfixedRecord;
import rpr2_d18.fixedRecordRepresentations.EntityTypeStruct;
import rpr2_d18.simpleDataRepresentations.unsignedInt16;

/**
 * JAVADOC_COMMENTS
 * semantics : -NULL-
 *
 * @author : auto generated by DRDC FOM Generator
 */
public class SilentAggregateStruct implements HLAfixedRecord {

    private EntityTypeStruct AggregateType;

    private unsignedInt16 NumberOfAggregatesOfThisType;

    /**
   * Constructor
   */
    public SilentAggregateStruct() throws RTIinternalError {
        AggregateType = new EntityTypeStruct();
        NumberOfAggregatesOfThisType = new unsignedInt16();
    }

    /**
   * Encodes this element into the specified ByteWrapper.
   * 
   * @param byteWrapper
   */
    public void encode(ByteWrapper byteWrapper) {
        AggregateType.encode(byteWrapper);
        NumberOfAggregatesOfThisType.encode(byteWrapper);
    }

    /**
   * Decodes this element from the ByteWrapper
   * 
   * @param byteWrapper
   */
    public void decode(ByteWrapper byteWrapper) throws DecoderException {
        AggregateType.decode(byteWrapper);
        NumberOfAggregatesOfThisType.decode(byteWrapper);
    }

    /**
   * Decodes this element from the byte array
   * 
   * @param byte array
   */
    public void decode(byte[] bytes) throws DecoderException {
        AggregateType.decode(bytes);
        NumberOfAggregatesOfThisType.decode(bytes);
    }

    /**
   * Returns the octet boundary of this element.
   * - not really relavent for data structures
   * - return the boundary of the first field
   * 
   * @return
   */
    public int getOctetBoundary() {
        return getEncodedLength() % 4;
    }

    /**
   * convert this data structure into a byte array
   * 
   */
    public byte[] toByteArray() {
        int size = getEncodedLength();
        byte[] result = new byte[size];
        byte[] temp;
        int pos = 0;
        temp = AggregateType.toByteArray();
        System.arraycopy(temp, 0, result, pos, AggregateType.getEncodedLength());
        temp = NumberOfAggregatesOfThisType.toByteArray();
        System.arraycopy(temp, 0, result, pos, NumberOfAggregatesOfThisType.getEncodedLength());
        return result;
    }

    /**
   * add an element to this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param DataElement dataElement
   */
    public void add(DataElement dataElement) {
    }

    /**
   * get the full size of this data structure
   * - add up the size of each member field
   * 
   */
    public int size() {
        return getEncodedLength();
    }

    /**
   * get an element from this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param int index
   */
    public DataElement get(int index) {
        return null;
    }

    /**
   * get an iterator for this data structure
   * - this should do nothing since this is a FIXED data structure
   * 
   * @param int index
   */
    public Iterator<DataElement> iterator() {
        return null;
    }

    /**
   * Returns the size in bytes of this element's encoding.
   * 
   * @return size
   */
    public int getEncodedLength() {
        int size = 0;
        size += AggregateType.getEncodedLength();
        size += NumberOfAggregatesOfThisType.getEncodedLength();
        return size;
    }

    public EntityTypeStruct getAggregateType() {
        return this.AggregateType;
    }

    public unsignedInt16 getNumberOfAggregatesOfThisType() {
        return this.NumberOfAggregatesOfThisType;
    }

    public void setAggregateType(EntityTypeStruct AggregateType) {
        this.AggregateType = AggregateType;
    }

    public void setNumberOfAggregatesOfThisType(unsignedInt16 NumberOfAggregatesOfThisType) {
        this.NumberOfAggregatesOfThisType = NumberOfAggregatesOfThisType;
    }
}
