package ejb.objectmodel.cataloguing.authorityFiles;

import javax.ejb.*;

/**
 * Created Aug 1, 2005 3:16:06 PM
 * Code generated by the Sun ONE Studio EJB Builder
 * @author Administrator
 */
public abstract class FormGenre_AFBean implements javax.ejb.EntityBean {

    private javax.ejb.EntityContext context;

    /**
     * @see javax.ejb.EntityBean#setEntityContext(javax.ejb.EntityContext)
     */
    public void setEntityContext(javax.ejb.EntityContext aContext) {
        context = aContext;
    }

    /**
     * @see javax.ejb.EntityBean#ejbActivate()
     */
    public void ejbActivate() {
    }

    /**
     * @see javax.ejb.EntityBean#ejbPassivate()
     */
    public void ejbPassivate() {
    }

    /**
     * @see javax.ejb.EntityBean#ejbRemove()
     */
    public void ejbRemove() {
    }

    /**
     * @see javax.ejb.EntityBean#unsetEntityContext()
     */
    public void unsetEntityContext() {
        context = null;
    }

    /**
     * @see javax.ejb.EntityBean#ejbLoad()
     */
    public void ejbLoad() {
    }

    /**
     * @see javax.ejb.EntityBean#ejbStore()
     */
    public void ejbStore() {
    }

    public abstract java.lang.Integer getFormGenre_Id();

    public abstract void setFormGenre_Id(java.lang.Integer formGenre_Id);

    public abstract java.lang.Integer getLibrary_Id();

    public abstract void setLibrary_Id(java.lang.Integer library_Id);

    public abstract java.lang.String getFormGenreName();

    public abstract void setFormGenreName(java.lang.String formGenreName);

    public abstract java.lang.String getNote();

    public abstract void setNote(java.lang.String note);

    public abstract java.lang.Integer getApprovers_Library_Id();

    public abstract void setApprovers_Library_Id(java.lang.Integer approvers_Library_Id);

    public abstract java.lang.String getApprovers_Patron_Id();

    public abstract void setApprovers_Patron_Id(java.lang.String approvers_Patron_Id);

    public ejb.objectmodel.cataloguing.authorityFiles.FormGenre_AFKey ejbCreateUsingMinimalFields(java.lang.Integer formGenre_Id, java.lang.Integer library_Id, java.lang.String formGenreName, java.lang.String note, java.lang.Integer approvers_Library_Id, java.lang.String approvers_Patron_Id) throws javax.ejb.CreateException {
        this.setFormGenre_Id(formGenre_Id);
        this.setLibrary_Id(library_Id);
        this.setFormGenreName(formGenreName);
        this.setNote(note);
        this.setApprovers_Library_Id(approvers_Library_Id);
        this.setApprovers_Patron_Id(approvers_Patron_Id);
        return null;
    }

    public void ejbPostCreateUsingMinimalFields(java.lang.Integer formGenre_Id, java.lang.Integer library_Id, java.lang.String formGenreName, java.lang.String note, java.lang.Integer approvers_Library_Id, java.lang.String approvers_Patron_Id) throws javax.ejb.CreateException {
    }

    public java.lang.String ejbHomeGetDisplayString(java.lang.String formGenreId, java.lang.String libraryId) {
        ejb.bprocess.util.Utility utility = ejb.bprocess.util.Utility.getInstance();
        String str = "", name = "", note = "";
        Integer nameId = new Integer(formGenreId.trim());
        Integer libId = new Integer(libraryId.trim());
        try {
            java.sql.Connection con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
            if (con != null) {
                java.sql.Statement st = con.createStatement();
                String query = "select FormGenreName,Note from  FormGenre_AF where  FormGenre_Id='" + nameId + "' and Library_Id='" + libId + "'";
                java.sql.ResultSet rs = st.executeQuery(query);
                if (rs.next()) {
                    name = utility.getTestedString(rs.getString(1));
                    note = utility.getTestedString(rs.getString(2));
                    if (!note.trim().equals("")) note = (new ejb.objectmodel.cataloguing.authorityFiles.FormGenreAFHandler()).noteXMLParser(note);
                    str = name + note;
                }
                rs.close();
                st.close();
            }
            if (con != null) con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return str;
    }
}
