package vizz3d_data.layouts.ccvisu;

import java.awt.Color;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.util.Date;

/*****************************************************************
 * Writer for layouts in SVG format (Scalable Vector Graphs, XML, W3C).
 * @version  $Revision: 1.14 $; $Date: 2005/08/22 12:30:56 $
 * @author   Dirk Beyer
 *****************************************************************/
public class WriterDataGraphicsSVG extends WriterDataGraphics {

    private PrintWriter out;

    private float scalePos;

    /**
   * Constructor.
   * @param graph       Graph representation, contains the positions of the vertices.
   * @param out         Output stream writer.
   * @param hideSource  If true, draw only vertices that are not source of an edge.
   *                    In co-change graphs, all change-transaction vertices 
   *                    are source vertices.
   * @param minVert     Diameter of the smallest vertex.
   * @param fontSize    Font size of vertex annotations.
   * @param backColor   Background color.
   * @param blackCircle If true, draw black circle around each vertex.
   * @param scalePos    Scaling factor for the layout to adjust to drawing area.
   */
    public WriterDataGraphicsSVG(GraphData graph, PrintWriter out, boolean hideSource, float minVert, int fontSize, Color backColor, boolean blackCircle, float scalePos) {
        super(graph, hideSource, minVert, fontSize, backColor, blackCircle);
        this.out = out;
        this.scalePos = scalePos;
    }

    /*****************************************************************
   * Writes the layout in graphics format SVG.
   *****************************************************************/
    @Override
    public void write() {
        int size = (int) (1000 * scalePos);
        out.print("<?xml version=\"1.0\" standalone=\"no\"?>" + endl + " " + endl + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"" + endl + "  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">" + endl + " " + endl + "<!-- Generated by CCVisu, a tool for Co-Change Visualization" + endl + "     and general force-directed graph layout. " + endl + "     " + DateFormat.getDateTimeInstance().format(new Date()) + " -->" + endl + " " + endl + "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"" + endl + "     width=\"100%\" height=\"100%\"" + endl + "     viewBox=\"0 0 " + size + " " + size + "\">" + endl + " " + endl + " <title>Visualization</title>" + endl + " " + endl + " <script><![CDATA[ " + endl + "     " + endl + "  /* " + endl + "   * Returns the innermost SVG object that triggered the event " + endl + "   * and that has a non-null id attribute. This can be either the event's " + endl + "   * target itself, or its parent node, or the first ancestor of the target " + endl + "   * with a non-null id. " + endl + "   * " + endl + "   * Input Parameters: " + endl + "   *   evt - The JavaScript object describing the triggering event. " + endl + "   * Return Value: " + endl + "   *   The target node or first target's ancestor with a non-null id. " + endl + "   */ " + endl + "  function get_target(evt) { " + endl + "    var target = evt.getTarget(); " + endl + "    while (target && !target.getAttribute('id')) { " + endl + "      target = target.getParentNode(); " + endl + "    } " + endl + "    return target; " + endl + "  }  " + endl + "     " + endl + "  /* " + endl + "   * Adds or removes a duplicate of the text object that  " + endl + "   * corresponds to the circle that was clicked on / pointed to: " + endl + "   * The circle node is the evt.target. " + endl + "   * If the text node is already there, the node gets removed. " + endl + "   * Otherwise the text node is cloned. The cloned node's id is changed. " + endl + "   * The cloned node is appended to the 'contents' group. " + endl + "   * " + endl + "   * Input Parameters: " + endl + "   *   evt -     JavaScript object describing the triggering event. " + endl + "   *   postfix - String to distinguish between click and move. " + endl + "   */ " + endl + "  function annot_toggle(evt, postfix) { " + endl + "    // Retrieve node of object that was clicked on. " + endl + "    var target = get_target(evt); " + endl + "    var svgdoc = target.getOwnerDocument(); " + endl + "      " + endl + "    // Retrieve annotation node. " + endl + "    var annotNode = svgdoc.getElementById(target.getAttribute('id') " + endl + "                                          + '__text' + postfix); " + endl + "    // Check whether annotation is already set. " + endl + "    if (annotNode) { " + endl + "      // Remove object's node from its group node. " + endl + "      var groupnode = annotNode.getParentNode(); " + endl + "      groupnode.removeChild (annotNode); " + endl + "    } else { " + endl + "      // Clone the text object and set its attributes. " + endl + "      var text = svgdoc.getElementById(target.getAttribute('id') + '__text'); " + endl + "      annotNode = text.cloneNode(true); " + endl + "      annotNode.setAttribute('id', target.getAttribute('id') + '__text' + postfix); " + endl + "      // Retrieve the node for 'contents' group. " + endl + "      var contents = svgdoc.getElementById('contents'); " + endl + "      // Insert the cloned object into the contents group node. " + endl + "      contents.appendChild(annotNode); " + endl + "    } " + endl + "  } " + endl + "    " + endl + " ]]></script> " + endl + endl);
        writeGraphicsLayout(size);
        out.print("</svg> " + endl);
    }

    /**
   * Writes a vertex in SVG format.
   * @param curVertex  The vertex object, to access vertex attributes.
   * @param xPos       x coordinate of the vertex.
   * @param yPos       y coordinate of the vertex.
   * @param zPos       z coordinate of the vertex.
   * @param dia        Diameter of the vertex.
   */
    @Override
    public void writeVertex(GraphVertex curVertex, int xPos, int yPos, int zPos, int dia) {
        String colorStr = Integer.toHexString(curVertex.color.getRGB() & 0x00FFFFFF);
        colorStr = "000000" + colorStr;
        colorStr = colorStr.substring(colorStr.length() - 6, colorStr.length());
        Color textColor = new Color(0xffffffff - backColor.getRGB());
        String textColStr = Integer.toHexString(textColor.getRGB() & 0x00FFFFFF);
        textColStr = "000000" + textColStr;
        textColStr = textColStr.substring(textColStr.length() - 6, textColStr.length());
        out.print(" <defs>" + "  <text" + " id=\"" + curVertex.name + "__text\"" + " x=\"" + (xPos + dia / 2 + 3) + "\"" + " y=\"" + (yPos + 3) + "\"" + " style=\"font-size:" + fontSize + ";fill:#" + textColStr + "\"> " + curVertex.name + " </text>" + " </defs> " + endl);
        out.print(" <g id=\"contents\"> " + endl);
        String strokeString = "";
        if (blackCircle) {
            strokeString = " stroke=\"black\"";
        }
        out.print("  <circle" + " id=\"" + curVertex.name + "\"" + " cx=\"" + xPos + "\"" + " cy=\"" + yPos + "\"" + " r=\"" + dia / 2 + "\"" + " fill=\"#" + colorStr + "\"" + strokeString + " onmouseover=\"annot_toggle(evt, '_move')\"" + " onmouseout=\"annot_toggle(evt, '_move')\"" + " onclick=\"annot_toggle(evt, '_click')\"" + " /> " + endl);
        if (curVertex.showName) {
            out.print("  <text" + " id=\"" + curVertex.name + "__text_click\"" + " x=\"" + (xPos + dia / 2 + 3) + "\"" + " y=\"" + (yPos + 3) + "\"" + " style=\"font-size:" + fontSize + ";fill:#" + textColStr + "\"> " + curVertex.name + " </text> " + endl);
        }
        out.print(" </g> " + endl);
    }
}

;
