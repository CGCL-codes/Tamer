package tonieskelinen.mobilehulk;

/**
 *
 * @author Toni Eskelinen
 */
public class MissionInnerSanctum extends Mission {

    public int[][] getFloor() {
        int[][] tiles = { { 0, 0, 0, 0, 26, 17, 17, 17, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 18, 1, 1, 1, 21, 17, 17, 17, 17, 17, 17, 17, 17, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 18, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 18, 1, 1, 1, 20, 23, 1, 20, 19, 19, 19, 19, 19, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 27, 23, 1, 20, 24, 18, 1, 21, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 28, 16, 0, 0, 0, 0, 0 }, { 0, 0, 17, 17, 25, 18, 1, 16, 0, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 0, 0, 0, 0, 0 }, { 0, 0, 14, 1, 16, 18, 1, 16, 0, 27, 19, 19, 19, 19, 19, 19, 23, 1, 20, 19, 19, 19, 19, 19, 19, 19, 24, 0, 0, 0, 0, 0 }, { 0, 0, 23, 1, 16, 18, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 18, 1, 16, 18, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 18, 1, 16, 18, 1, 16, 0, 0, 0, 26, 17, 17, 17, 25, 18, 1, 16, 0, 0, 0, 0, 26, 17, 17, 17, 25, 0, 0, 0, 0 }, { 0, 0, 18, 1, 21, 22, 1, 16, 0, 0, 0, 18, 1, 1, 1, 21, 22, 1, 21, 17, 17, 17, 17, 22, 1, 1, 1, 16, 0, 0, 0, 0 }, { 0, 0, 18, 1, 1, 1, 1, 16, 0, 0, 0, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 0, 0, 0, 0 }, { 0, 0, 18, 1, 20, 23, 1, 16, 0, 0, 0, 18, 1, 1, 1, 20, 19, 19, 19, 19, 19, 19, 19, 23, 1, 1, 1, 16, 0, 0, 0, 0 }, { 0, 0, 18, 1, 16, 18, 1, 16, 0, 0, 0, 27, 23, 1, 20, 24, 0, 0, 0, 0, 0, 0, 0, 27, 23, 1, 20, 24, 0, 0, 0, 0 }, { 0, 0, 18, 1, 16, 18, 1, 16, 0, 0, 0, 26, 22, 1, 21, 25, 26, 17, 17, 17, 25, 0, 0, 0, 18, 1, 16, 0, 0, 0, 0, 0 }, { 0, 0, 18, 1, 21, 22, 1, 21, 17, 17, 17, 22, 1, 1, 1, 21, 22, 1, 1, 1, 21, 17, 17, 17, 22, 1, 21, 17, 17, 25, 0, 0 }, { 0, 0, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 0, 0 }, { 0, 0, 27, 19, 19, 23, 1, 20, 19, 19, 19, 23, 1, 1, 1, 20, 23, 1, 1, 1, 20, 19, 19, 19, 23, 1, 20, 23, 1, 16, 0, 0 }, { 0, 0, 0, 0, 0, 18, 1, 16, 0, 0, 0, 27, 19, 19, 19, 24, 27, 23, 1, 20, 24, 0, 0, 0, 18, 1, 16, 18, 1, 16, 0, 0 }, { 0, 0, 0, 0, 26, 22, 1, 21, 25, 0, 0, 0, 0, 0, 0, 0, 26, 22, 1, 21, 25, 0, 0, 0, 18, 1, 16, 18, 1, 16, 0, 0 }, { 0, 0, 0, 0, 18, 1, 1, 1, 21, 17, 17, 17, 17, 17, 17, 17, 22, 1, 1, 1, 16, 0, 0, 0, 18, 1, 21, 22, 1, 16, 0, 0 }, { 0, 0, 0, 0, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 0, 0, 0, 18, 1, 1, 1, 1, 16, 0, 0 }, { 0, 0, 0, 0, 18, 1, 1, 1, 20, 19, 19, 19, 19, 23, 1, 20, 23, 1, 1, 1, 16, 0, 0, 0, 18, 1, 20, 23, 1, 16, 0, 0 }, { 0, 0, 0, 0, 27, 19, 19, 19, 24, 0, 0, 0, 0, 18, 1, 16, 27, 19, 19, 19, 24, 0, 0, 0, 18, 1, 16, 18, 1, 16, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 16, 18, 1, 16, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 16, 18, 1, 21, 0, 0 }, { 0, 0, 0, 0, 0, 26, 17, 17, 17, 17, 17, 17, 17, 22, 1, 21, 17, 17, 17, 17, 17, 17, 25, 0, 18, 1, 16, 18, 1, 13, 0, 0 }, { 0, 0, 0, 0, 0, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 0, 18, 1, 16, 27, 19, 19, 0, 0 }, { 0, 0, 0, 0, 0, 18, 29, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 23, 1, 16, 26, 22, 1, 21, 25, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 17, 17, 17, 17, 17, 22, 1, 21, 22, 1, 1, 1, 16, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 16, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 19, 19, 19, 19, 19, 19, 19, 19, 23, 1, 1, 1, 16, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 19, 19, 19, 24, 0, 0, 0, 0 } };
        return tiles;
    }

    public int[][] getItems() {
        int[][] tiles = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 7, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 7, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 6, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 5, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 12, 12, 12, 6, 6, 12, 12, 12, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 12, 12, 12, 4, 4, 12, 12, 12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 12, 12, 8, 8, 12, 12, 12, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 7, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 5, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 5, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
        return tiles;
    }

    public int[][] getSections() {
        int[][] tiles = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 37, 40, 36, 41, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 47, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 36, 36, 36, 0, 39, 39, 43, 35, 0, 0, 37, 35, 0, 37, 35, 0, 0, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0 }, { 47, 47, 0, 0, 0, 39, 39, 39, 0, 0, 0, 37, 35, 0, 0, 37, 35, 0, 37, 35, 0, 0, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0 }, { 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 0, 37, 40, 36, 41, 35, 0, 0, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0 }, { 47, 47, 36, 36, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 36, 36, 36, 36, 36, 36, 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 39, 39, 43, 42, 39, 39, 0, 0, 0, 0, 0, 0, 0, 37, 42, 39, 43, 35, 0, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 37, 35, 0, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 36, 36, 41, 40, 36, 36, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 37, 35, 0, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 39, 39, 39, 39, 39, 39, 0, 0, 0, 0, 36, 36, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 36, 0, 0, 0, 0, 0 }, { 0, 0, 36, 36, 36, 36, 36, 36, 0, 0, 0, 0, 39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 0, 0, 0, 0, 0 }, { 0, 0, 39, 39, 43, 42, 39, 43, 35, 0, 37, 35, 0, 0, 0, 37, 35, 0, 0, 0, 37, 35, 0, 37, 42, 39, 43, 35, 0, 0, 0, 0 }, { 0, 0, 0, 0, 37, 35, 0, 37, 35, 0, 37, 35, 0, 0, 0, 37, 35, 0, 0, 0, 37, 35, 0, 37, 35, 0, 37, 35, 0, 0, 0, 0 }, { 0, 0, 0, 0, 37, 40, 36, 41, 35, 0, 37, 35, 0, 0, 0, 37, 35, 0, 0, 0, 37, 35, 0, 37, 40, 36, 41, 40, 36, 36, 0, 0 }, { 0, 0, 0, 0, 0, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 36, 0, 0, 0, 0, 39, 39, 39, 39, 39, 39, 0, 0 }, { 0, 0, 0, 0, 0, 39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 39, 39, 0, 0, 0, 0, 36, 36, 36, 36, 36, 36, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 0, 37, 35, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0, 39, 39, 43, 42, 39, 39, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 0, 37, 35, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 0, 37, 40, 36, 41, 35, 0, 0, 0, 0, 0, 0, 0, 36, 36, 41, 40, 36, 36, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 39, 39, 39, 39, 39, 39, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 36, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 39, 39, 47, 47 }, { 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 0, 0, 37, 42, 39, 43, 35, 0, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47 }, { 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 0, 0, 37, 35, 0, 37, 35, 0, 0, 37, 35, 0, 0, 0, 36, 36, 36, 0, 0, 0, 47, 47 }, { 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 0, 0, 37, 35, 0, 37, 35, 0, 0, 37, 40, 36, 36, 0, 39, 39, 39, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 42, 39, 43, 35, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 47, 47, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 37, 35, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
        return tiles;
    }

    public void init(HulkGameCanvas game) {
        int heading = PieceWithHeading.HEADING_LEFT;
        game.addMarine(Marine.TYPE_SERGEANT, 12, 2, heading);
        game.addMarine(Marine.TYPE_FLAMERMARINE, 13, 2, heading);
        game.addMarine(Marine.TYPE_MARINE, 14, 2, heading);
        game.addMarine(Marine.TYPE_MARINE, 15, 2, heading);
        game.addMarine(Marine.TYPE_MARINE, 16, 2, heading);
        heading = PieceWithHeading.HEADING_RIGHT;
        game.addMarine(Marine.TYPE_SERGEANT, 19, 30, heading);
        game.addMarine(Marine.TYPE_FLAMERMARINE, 18, 30, heading);
        game.addMarine(Marine.TYPE_MARINE, 17, 30, heading);
        game.addMarine(Marine.TYPE_MARINE, 16, 30, heading);
        game.addMarine(Marine.TYPE_MARINE, 15, 30, heading);
        Blip blip1 = game.addBlip(13, 11);
        blip1.setFirstTurnOnBoard(false);
        blip1.setAP(6);
        Blip blip2 = game.addBlip(13, 16);
        blip2.setFirstTurnOnBoard(false);
        blip2.setAP(6);
        Blip blip3 = game.addBlip(18, 16);
        blip3.setFirstTurnOnBoard(false);
        blip3.setAP(6);
    }

    public int getHeadingForBlip(Coordinate blip) {
        if (blip.getX() < 15) {
            if (blip.getY() < 15) {
                return PieceWithHeading.HEADING_RIGHT;
            } else {
                return PieceWithHeading.HEADING_UP;
            }
        } else {
            if (blip.getY() < 15) {
                return PieceWithHeading.HEADING_DOWN;
            } else {
                return PieceWithHeading.HEADING_LEFT;
            }
        }
    }

    public Coordinate[] getDormantBlipsToBeConverted(HulkGameCanvas game) {
        return null;
    }

    public int getEntryAreaX(Coordinate c) {
        if (c.getX() < 15) {
            if (c.getY() < 15) {
                return 2;
            } else {
                return 6;
            }
        } else {
            if (c.getY() < 15) {
                return 25;
            } else {
                return 29;
            }
        }
    }

    public int getEntryAreaY(Coordinate c) {
        if (c.getX() < 15) {
            if (c.getY() < 15) {
                return 6;
            } else {
                return 28;
            }
        } else {
            if (c.getY() < 15) {
                return 4;
            } else {
                return 26;
            }
        }
    }

    public Coordinate[] getReinforcementLocations(HulkGameCanvas game) {
        switch(game.currentTurn) {
            case 1:
            case 3:
            case 5:
            case 7:
            case 9:
            case 11:
                return new Coordinate[] { new Location(2, 6), new Location(25, 3) };
            case 2:
            case 4:
            case 6:
            case 8:
            case 10:
            case 12:
                return new Coordinate[] { new Location(6, 28), new Location(30, 26) };
            default:
                throw new InternalException(this, "getReinforcementLocations", "Illegal turn: " + game.currentTurn);
        }
    }

    public boolean isMissionOver(HulkGameCanvas game) {
        if (game.currentTurn >= 12) {
            return true;
        }
        if (!hasInfectedFloors(game)) {
            return true;
        }
        for (int i = 0; i < game.marines.length; i++) {
            if (game.marines[i].getType() == Marine.TYPE_FLAMERMARINE) {
                return false;
            }
        }
        return true;
    }

    public String getBriefing() {
        return "Cleanse infected rooms with Flamers before the end of turn 12.";
    }

    public String getDebriefing(HulkGameCanvas game) {
        if (hasInfectedFloors(game)) {
            if (game.currentTurn >= 12) {
                return "You failed to cleanse infected rooms within 12 turns.";
            } else {
                return "You failed to protect your Flamer Marines until all infected rooms are cleansed.";
            }
        } else {
            return "Congratulations! You cleansed infected rooms in " + game.currentTurn + " turns.";
        }
    }

    private boolean hasInfectedFloors(HulkGameCanvas game) {
        Coordinate[] rooms = new Location[] { new Location(12, 10), new Location(13, 10), new Location(14, 10), new Location(12, 11), new Location(13, 11), new Location(14, 11), new Location(12, 12), new Location(13, 12), new Location(14, 12), new Location(12, 15), new Location(13, 15), new Location(14, 15), new Location(12, 16), new Location(13, 16), new Location(14, 16), new Location(12, 17), new Location(13, 17), new Location(14, 17), new Location(17, 15), new Location(18, 15), new Location(19, 15), new Location(17, 16), new Location(18, 16), new Location(19, 16), new Location(17, 17), new Location(18, 17), new Location(19, 17) };
        if (game.currentTurn == 1) {
            for (int i = 0; i < rooms.length; i++) {
                if (game.getItem(rooms[i]) != ITEM_INFECTION) {
                    throw new InternalException(this, "hasInfectedFloors", "Sanity check fail");
                }
            }
        }
        for (int i = 0; i < rooms.length; i++) {
            if (game.getItem(rooms[i]) == ITEM_INFECTION) {
                return true;
            }
        }
        return false;
    }
}
