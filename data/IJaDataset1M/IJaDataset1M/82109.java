package org.tolk.ui;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.tolk.ApplicationContextFactory;
import org.tolk.Tolk;
import org.tolk.ipico.io.impl.HHDemoUiDataSource;
import org.tolk.util.TolkUiUtils;

/**
 * TolkUI
 */
public class TolkSinglePanelUi extends JFrame implements ActionListener, ItemListener {

    private static final String RES = "res/";

    private static final String DEFAULT_CONTEXT_FILE = "applicationContextFile";

    private static final String TOLK_UI_PROPERTIES = "tolkUi.properties";

    private static final String FAILED_TO_START_TOLK_TITLE = "Failed to start Tolk";

    private static final String FAILED_TO_START_TOLK_MESSAGE = "Failed to start Tolk. See system log.";

    private static final String TOLK_UI = "IPICO Mobile Reader Demo";

    private static final String APPLICATION_CONTEXT_FILE = "Application Context File";

    private static final String XML = "xml";

    private JPanel contentPane;

    private JPanel mainPanel;

    private String contextFilePath;

    /**
     * @return the contextFilePath
     */
    public String getContextFilePath() {
        return contextFilePath;
    }

    /**
     * @param contextFilePath
     *            the contextFilePath to set
     */
    public void setContextFilePath(String contextFilePath) {
        this.contextFilePath = contextFilePath;
    }

    private Tolk tolk;

    /**
     * Default Constructor
     */
    public TolkSinglePanelUi() {
        super();
        this.setContextFilePath(DEFAULT_CONTEXT_FILE);
        this.startStopTolk();
        initializeComponent();
        this.setVisible(true);
    }

    /**
     * Constructor with context file specified
     */
    public TolkSinglePanelUi(String contextFilePath) {
        super();
        this.setContextFilePath(contextFilePath);
        this.startStopTolk();
        initializeComponent();
        this.setVisible(true);
    }

    /**
     * Performs actions when TolkUi is destroyed.
     * 
     * Saves preferences to property file.
     */
    public void destroy() {
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Windows Form Designer. Otherwise, retrieving design might not work properly. Tip: If
     * you must revise this method, please backup this GUI file for JFrameBuilder to retrieve your design properly in future, before
     * revising this method.
     */
    private void initializeComponent() {
        this.contentPane = (JPanel) this.getContentPane();
        this.contentPane.add(((HHDemoUiDataSource) ApplicationContextFactory.getBean("hhDemoUiDataSource")).getDataSourcePanel());
        this.setTitle(TOLK_UI);
        this.setLocation(new Point(0, 0));
        this.setSize(new Dimension(527, 700));
    }

    /**
     * Main methodTolkUiUtils
     * 
     * @param args
     */
    public static void main(String[] args) {
        TolkUiUtils.setLookAndFeel();
        final TolkSinglePanelUi tolkUI = new TolkSinglePanelUi(args[0]);
        tolkUI.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                tolkUI.destroy();
                System.exit(0);
            }
        });
    }

    /**
     * @see org.tolk.ui.TolkUIController#actionPerformed(java.awt.event.ActionEvent)
     */
    public void actionPerformed(ActionEvent e) {
    }

    /**
     * = new Properties()
     * 
     * @see org.tolk.ui.TolkUIController#itemStateChanged(java.awt.event.ItemEvent)
     */
    public void itemStateChanged(ItemEvent e) {
    }

    /**
     * Starts or stops Tolk
     * 
     * @param e
     */
    private void startStopTolk() {
        try {
            if (this.tolk == null) {
                this.tolk = new Tolk(this.getContextFilePath());
                initializeUiFromContext();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, FAILED_TO_START_TOLK_MESSAGE, FAILED_TO_START_TOLK_TITLE, JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    /**
     * Initializes UI components based on newly loaded Spring application context.
     */
    private void initializeUiFromContext() {
    }
}
