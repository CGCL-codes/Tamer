package fr.aliacom.dbmjui;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.Properties;
import org.apache.log4j.Logger;
import com.sap.dbtech.powertoys.DBM;
import fr.aliacom.dbmjui.beans.InstanceInformations;
import fr.aliacom.dbmjui.driver.DriverException;

/**
 * Most of the dbm code should be moved elsewhere
 * 
 * @author tom
 *
 * (c) 2001, 2003 Thomas Cataldo
 */
public final class DbInstance {

    private DbmCredential creds;

    private String version;

    private String fullName;

    private String name;

    private DatabaseServer dbs;

    private Properties connectionParams;

    private transient InstanceInformations infos;

    private PropertyChangeSupport changes;

    private static final Logger logger = Logger.getLogger(DbInstance.class);

    /**
	 * Creates a new instance on the given server
	 * 
	 * @param dbs
	 */
    public DbInstance(DatabaseServer dbs) {
        this.dbs = dbs;
        infos = new InstanceInformations();
    }

    private final PropertyChangeSupport getChanges() {
        if (changes == null) {
            changes = new PropertyChangeSupport(this);
        }
        return changes;
    }

    /**
	 * Add a listener on a given property
	 * 
	 * @param prop the property changes you want to be notified of.
	 * @param l the listener notified of the property change
	 */
    public void addPropertyChangeListener(String prop, PropertyChangeListener l) {
        getChanges().addPropertyChangeListener(prop, l);
    }

    /**
	 * @return the kernel version running on the given server
	 */
    public String getVersion() {
        return version;
    }

    /**
	 * Removes a listener on a given property
	 * 
	 * @param prop
	 * @param l
	 * 
	 */
    public void removePropertyChangeListener(String prop, PropertyChangeListener l) {
        getChanges().removePropertyChangeListener(prop, l);
    }

    /**
	 * @return the server hosting this instance
	 */
    public DatabaseServer getServer() {
        return dbs;
    }

    String getDbmLogin() {
        return creds.getLogin();
    }

    String getDbmPassword() {
        return creds.getPassword();
    }

    /**
	 * Defines DBM login/password to create connections
	 * to the database
	 * 
	 * @param creds
	 * @throws DBMLoginException
	 */
    public void setDbmCredential(DbmCredential creds) throws DBMLoginException {
        try {
            this.creds = creds;
            Properties props = new Properties();
            props.put("host", dbs.getHost());
            props.put("dbname", infos.getName());
            props.put("user", creds.getLogin() + "," + creds.getPassword());
            DBM aDbm = new DBM(props);
            logger.debug("Logging in...");
            aDbm.cmd("user_logon " + props.get("user"));
            logger.debug("logger in");
            connectionParams = props;
            aDbm.release();
            infos = HelperFactory.getInstance().getInstanceHelper(this).updateInformations(this);
        } catch (Exception e) {
            logger.fatal("Exception occured while checking credentials", e);
            throw new DBMLoginException(e.toString());
        }
    }

    /**
	 * Get a DBM connection. The user given at registration time
	 * is already logged on.
	 * 
	 * Error generated by commands executed with the returned connection
	 * will be reported in the UI.
	 * 
	 * @return a dbm connection
	 */
    public DBM getDbmConnection() {
        DBM aDbm = null;
        try {
            aDbm = new JuiDbmConnection(connectionParams);
            aDbm.cmd("user_logon " + connectionParams.get("user"));
        } catch (Exception e) {
            logger.fatal("user login failed", e);
            throw new RuntimeException("user_logon failed !");
        }
        return aDbm;
    }

    /**
	 * Get a DBM connection. The user given at registration time
	 * is already logged on.
	 * 
	 * Error generated by commands executed with the returned connection
	 * will not be reported in the UI.
	 * 
	 * @return a dbm connection
	 */
    public DBM getPlainDbmConnection() {
        DBM aDbm = null;
        try {
            aDbm = new DBM(connectionParams);
            aDbm.cmd("user_logon " + connectionParams.get("user"));
        } catch (Exception e) {
            logger.fatal("user login failed", e);
            throw new RuntimeException("user_logon failed !");
        }
        return aDbm;
    }

    /**
	 * @param listener
	 */
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        getChanges().addPropertyChangeListener(listener);
    }

    /**
	 * @param listener
	 */
    public void removePropertyChangeListener(PropertyChangeListener listener) {
        getChanges().removePropertyChangeListener(listener);
    }

    /**
	 * @return the cached informations about the instance
	 */
    public InstanceInformations getInformations() {
        return infos;
    }

    /**
	 * @param infos
	 */
    public void setInformations(InstanceInformations infos) {
        this.infos = infos;
        infos.setDbi(this);
    }

    /**
	 * Recheck the instance state
	 * 
	 * @throws DriverException
	 */
    public void reloadState() throws DriverException {
        infos = HelperFactory.getInstance().getInstanceHelper(this).updateInformations(this);
        infos.setDbi(this);
    }

    /**
	 * @return the name used to display the instance
	 */
    public String getFullName() {
        return fullName;
    }

    /**
	 * @param string
	 */
    public void setFullName(String string) {
        fullName = string;
        infos.setFullName(fullName);
    }

    /**
	 * @return the instance name
	 */
    public String getName() {
        return name;
    }

    /**
	 * @param string
	 */
    public void setName(String string) {
        name = string;
        infos.setName(name);
    }
}
