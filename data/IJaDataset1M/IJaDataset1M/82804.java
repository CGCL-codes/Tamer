package edu.ycp.cs.dh.acegwt.client.ace;

import com.google.gwt.core.client.JavaScriptObject;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.HTML;

/**
 * A GWT widget for the Ajax.org Code Editor (ACE).
 * 
 * @see <a href="http://ace.ajax.org/">Ajax.org Code Editor</a>
 */
public class AceEditor extends Composite {

    private static int nextId = 0;

    private String elementId;

    private JavaScriptObject editor;

    /**
	 * Constructor.
	 */
    public AceEditor() {
        elementId = "_aceGWT" + nextId;
        nextId++;
        HTML html = new HTML("<div style=\"width: 100%; height: 100%;\" id=\"" + elementId + "\"></div>");
        initWidget(html);
    }

    /**
	 * Call this method to start the editor.
	 * Make sure that the widget has been attached to the DOM tree
	 * before calling this method.
	 */
    public native void startEditor();

    /**
	 * Set the theme.
	 * 
	 * @param theme the theme (one of the values in the {@link AceEditorTheme}
	 *              enumeration)
	 */
    public void setTheme(AceEditorTheme theme) {
        setThemeByName(theme.getName());
    }

    /**
	 * Set the theme by name.
	 * 
	 * @param themeName the theme name (e.g., "twilight")
	 */
    public native void setThemeByName(String themeName);

    /**
	 * Set the mode.
	 * 
	 * @param mode the mode (one of the values in the
	 *             {@link AceEditorMode} enumeration)
	 */
    public void setMode(AceEditorMode mode) {
        setModeByName(mode.getName());
    }

    /**
	 * Set the mode by name.
	 * 
	 * @param shortModeName name of mode (e.g., "eclipse")
	 */
    public native void setModeByName(String shortModeName);

    /**
	 * Register a handler for change events generated by the editor.
	 * 
	 * @param callback the change event handler
	 */
    public native void addOnChangeHandler(AceEditorCallback callback);

    /**
	 * Register a handler for cursor position change events generated by the editor.
	 * 
	 * @param callback the cursor position change event handler
	 */
    public native void addOnCursorPositionChangeHandler(AceEditorCallback callback);

    /**
	 * Set font size.
	 */
    public native void setFontSize(String fontSize);

    /**
	 * Get the complete text in the editor as a String.
	 * 
	 * @return the text in the editor
	 */
    public native String getText();

    /**
	 * Set the complete text in the editor from a String.
	 * 
	 * @param text the text to set in the editor
	 */
    public native void setText(String text);

    /**
	 * Insert given text at the cursor.
	 * 
	 * @param text text to insert at the cursor
	 */
    public native void insertAtCursor(String text);

    /**
	 * Get the current cursor position.
	 * 
	 * @return the current cursor position
	 */
    public native AceEditorCursorPosition getCursorPosition();

    private AceEditorCursorPosition getCursorPositionImpl(double row, double column) {
        return new AceEditorCursorPosition((int) row, (int) column);
    }

    /**
	 * Set whether or not soft tabs should be used.
	 * 
	 * @param useSoftTabs true if soft tabs should be used, false otherwise
	 */
    public native void setUseSoftTabs(boolean useSoftTabs);

    /**
	 * Set tab size.  (Default is 4.)
	 * 
	 * @param tabSize the tab size to set
	 */
    public native void setTabSize(int tabSize);

    /**
	 * Go to given line.
	 * 
	 * @param line the line to go to
	 */
    public native void gotoLine(int line);

    /**
	 * Set whether or not the horizontal scrollbar is always visible.
	 * 
	 * @param hScrollBarAlwaysVisible true if the horizontal scrollbar is always
	 *                                visible, false if it is hidden when not needed
	 */
    public native void setHScrollBarAlwaysVisible(boolean hScrollBarAlwaysVisible);

    /**
	 * Se whether or not the gutter is shown.
	 * 
	 * @param showGutter true if the gutter should be shown, false if it should be hidden
	 */
    public native void setShowGutter(boolean showGutter);

    /**
	 * Set or unset read-only mode.
	 * 
	 * @param readOnly true if editor should be set to readonly, false if the
	 *                 editor should be set to read-write
	 */
    public native void setReadOnly(boolean readOnly);

    /**
	 * Set or unset the visibility of the print margin.
	 * 
	 * @param showPrintMargin true if the print margin should be shown, false otherwise
	 */
    public native void setShowPrintMargin(boolean showPrintMargin);
}
