package it.xtypes.example.fj.typesystem.fjtests;

import it.xtypes.example.fj.typesystem.fjtests.rules.*;
import it.xtypes.runtime.RuleFailedException;
import it.xtypes.runtime.RuntimeRule;
import it.xtypes.runtime.RuntimeRules;
import it.xtypes.runtime.RuntimeTypeSystem;
import it.xtypes.runtime.TypeSystemResult;
import it.xtypes.runtime.TypeSystemResultPair;
import it.xtypes.runtime.TypingJudgmentEnvironment;
import it.xtypes.example.fj.fj.FjPackage;

/**
 * Automatically generated by XTypeS, http://xtypes.sourceforge.net
 * Do not modify it.
 * This class should be instantiated with Google Guide injector.
 */
public class FJTestsTypeSystemDefinition extends RuntimeTypeSystem {

    protected FjPackage basicPackage = FjPackage.eINSTANCE;

    public FJTestsTypeSystemDefinition() {
        RuntimeRules rules = new RuntimeRules();
        rules.add(new TStringTypeRule());
        rules.add(new TCastToTypeRule());
        rules.add(new TExistsTypeRule());
        rules.add(new TForEachTypeRule());
        rules.add(new TForAllTypeRule());
        rules.add(new TEnvAssignTypeRule());
        rules.add(new TAssignTypeRule());
        rules.add(new TOrTypeRule());
        rules.add(new TNewNameTypeRule());
        rules.add(new TTestReturnTypedElementTypeRule());
        rules.add(new TTestExpectParameterTypeRule());
        rules.add(new WithExplicitFailureTypeRule());
        rules.add(new WithExplicitFailure2TypeRule());
        rules.add(new EnvUnionTestTypeRule());
        rules.add(new RuleWithIntConstantTypeRule());
        setRules(rules);
    }

    public TypeSystemResult<String> typeAsString(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class object) {
        return tryToApply(environment, "|-", "::", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), object);
    }

    public TypeSystemResult<String> typeAsString(it.xtypes.example.fj.fj.Class object) {
        return typeAsString(null, object);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Class, String> type(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class left, String right) {
        return tryToApplyPair(environment, "|-", "::", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), left, right);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Class, String> type(it.xtypes.example.fj.fj.Class left, String right) {
        return type(null, left, right);
    }

    public TypeSystemResult<Boolean> checkType(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class left, String right) {
        return tryToApply(environment, "|-", "::", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), left, right);
    }

    public TypeSystemResult<Boolean> checkType(it.xtypes.example.fj.fj.Class left, String right) {
        return checkType(null, left, right);
    }

    public TypeSystemResult<it.xtypes.example.fj.fj.Parameter> typeAsParameter(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Field object) {
        return tryToApply(environment, "|-", "::", createEClassifierType(basicPackage.getField()), createEClassifierType(basicPackage.getParameter()), object);
    }

    public TypeSystemResult<it.xtypes.example.fj.fj.Parameter> typeAsParameter(it.xtypes.example.fj.fj.Field object) {
        return typeAsParameter(null, object);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Field, it.xtypes.example.fj.fj.Parameter> type(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Field left, it.xtypes.example.fj.fj.Parameter right) {
        return tryToApplyPair(environment, "|-", "::", createEClassifierType(basicPackage.getField()), createEClassifierType(basicPackage.getParameter()), left, right);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Field, it.xtypes.example.fj.fj.Parameter> type(it.xtypes.example.fj.fj.Field left, it.xtypes.example.fj.fj.Parameter right) {
        return type(null, left, right);
    }

    public TypeSystemResult<Boolean> checkType(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Field left, it.xtypes.example.fj.fj.Parameter right) {
        return tryToApply(environment, "|-", "::", createEClassifierType(basicPackage.getField()), createEClassifierType(basicPackage.getParameter()), left, right);
    }

    public TypeSystemResult<Boolean> checkType(it.xtypes.example.fj.fj.Field left, it.xtypes.example.fj.fj.Parameter right) {
        return checkType(null, left, right);
    }

    public RuntimeRule applyTypeRule(TypingJudgmentEnvironment environment, Object left, Object right) throws RuleFailedException {
        return applyRule(environment, "|-", "::", left, right);
    }

    public RuntimeRule applyTypeRule(Object left, Object right) throws RuleFailedException {
        return applyTypeRule(null, left, right);
    }

    public TypeSystemResult<it.xtypes.example.fj.fj.TypedElement> type2AsTypedElement(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Field object) {
        return tryToApply(environment, "||-", ":", createEClassifierType(basicPackage.getField()), createEClassifierType(basicPackage.getTypedElement()), object);
    }

    public TypeSystemResult<it.xtypes.example.fj.fj.TypedElement> type2AsTypedElement(it.xtypes.example.fj.fj.Field object) {
        return type2AsTypedElement(null, object);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Field, it.xtypes.example.fj.fj.TypedElement> type2(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Field left, it.xtypes.example.fj.fj.TypedElement right) {
        return tryToApplyPair(environment, "||-", ":", createEClassifierType(basicPackage.getField()), createEClassifierType(basicPackage.getTypedElement()), left, right);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Field, it.xtypes.example.fj.fj.TypedElement> type2(it.xtypes.example.fj.fj.Field left, it.xtypes.example.fj.fj.TypedElement right) {
        return type2(null, left, right);
    }

    public TypeSystemResult<Boolean> checkType2(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Field left, it.xtypes.example.fj.fj.TypedElement right) {
        return tryToApply(environment, "||-", ":", createEClassifierType(basicPackage.getField()), createEClassifierType(basicPackage.getTypedElement()), left, right);
    }

    public TypeSystemResult<Boolean> checkType2(it.xtypes.example.fj.fj.Field left, it.xtypes.example.fj.fj.TypedElement right) {
        return checkType2(null, left, right);
    }

    public TypeSystemResult<String> type2AsString(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class object) {
        return tryToApply(environment, "||-", ":", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), object);
    }

    public TypeSystemResult<String> type2AsString(it.xtypes.example.fj.fj.Class object) {
        return type2AsString(null, object);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Class, String> type2(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class left, String right) {
        return tryToApplyPair(environment, "||-", ":", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), left, right);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Class, String> type2(it.xtypes.example.fj.fj.Class left, String right) {
        return type2(null, left, right);
    }

    public TypeSystemResult<Boolean> checkType2(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class left, String right) {
        return tryToApply(environment, "||-", ":", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), left, right);
    }

    public TypeSystemResult<Boolean> checkType2(it.xtypes.example.fj.fj.Class left, String right) {
        return checkType2(null, left, right);
    }

    public RuntimeRule applyType2Rule(TypingJudgmentEnvironment environment, Object left, Object right) throws RuleFailedException {
        return applyRule(environment, "||-", ":", left, right);
    }

    public RuntimeRule applyType2Rule(Object left, Object right) throws RuleFailedException {
        return applyType2Rule(null, left, right);
    }

    public TypeSystemResult<String> typefailureAsString(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class object) {
        return tryToApply(environment, "|-", "::--::", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), object);
    }

    public TypeSystemResult<String> typefailureAsString(it.xtypes.example.fj.fj.Class object) {
        return typefailureAsString(null, object);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Class, String> typefailure(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class left, String right) {
        return tryToApplyPair(environment, "|-", "::--::", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), left, right);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Class, String> typefailure(it.xtypes.example.fj.fj.Class left, String right) {
        return typefailure(null, left, right);
    }

    public TypeSystemResult<Boolean> checkTypefailure(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class left, String right) {
        return tryToApply(environment, "|-", "::--::", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), left, right);
    }

    public TypeSystemResult<Boolean> checkTypefailure(it.xtypes.example.fj.fj.Class left, String right) {
        return checkTypefailure(null, left, right);
    }

    public TypeSystemResult<String> typefailureAsString(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Parameter object) {
        return tryToApply(environment, "|-", "::--::", createEClassifierType(basicPackage.getParameter()), createBasicType("String"), object);
    }

    public TypeSystemResult<String> typefailureAsString(it.xtypes.example.fj.fj.Parameter object) {
        return typefailureAsString(null, object);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Parameter, String> typefailure(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Parameter left, String right) {
        return tryToApplyPair(environment, "|-", "::--::", createEClassifierType(basicPackage.getParameter()), createBasicType("String"), left, right);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Parameter, String> typefailure(it.xtypes.example.fj.fj.Parameter left, String right) {
        return typefailure(null, left, right);
    }

    public TypeSystemResult<Boolean> checkTypefailure(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Parameter left, String right) {
        return tryToApply(environment, "|-", "::--::", createEClassifierType(basicPackage.getParameter()), createBasicType("String"), left, right);
    }

    public TypeSystemResult<Boolean> checkTypefailure(it.xtypes.example.fj.fj.Parameter left, String right) {
        return checkTypefailure(null, left, right);
    }

    public RuntimeRule applyTypefailureRule(TypingJudgmentEnvironment environment, Object left, Object right) throws RuleFailedException {
        return applyRule(environment, "|-", "::--::", left, right);
    }

    public RuntimeRule applyTypefailureRule(Object left, Object right) throws RuleFailedException {
        return applyTypefailureRule(null, left, right);
    }

    public TypeSystemResult<String> envtestAsString(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class object) {
        return tryToApply(environment, "||-", ":~:", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), object);
    }

    public TypeSystemResult<String> envtestAsString(it.xtypes.example.fj.fj.Class object) {
        return envtestAsString(null, object);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Class, String> envtest(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class left, String right) {
        return tryToApplyPair(environment, "||-", ":~:", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), left, right);
    }

    public TypeSystemResultPair<it.xtypes.example.fj.fj.Class, String> envtest(it.xtypes.example.fj.fj.Class left, String right) {
        return envtest(null, left, right);
    }

    public TypeSystemResult<Boolean> checkEnvtest(TypingJudgmentEnvironment environment, it.xtypes.example.fj.fj.Class left, String right) {
        return tryToApply(environment, "||-", ":~:", createEClassifierType(basicPackage.getClass_()), createBasicType("String"), left, right);
    }

    public TypeSystemResult<Boolean> checkEnvtest(it.xtypes.example.fj.fj.Class left, String right) {
        return checkEnvtest(null, left, right);
    }

    public RuntimeRule applyEnvtestRule(TypingJudgmentEnvironment environment, Object left, Object right) throws RuleFailedException {
        return applyRule(environment, "||-", ":~:", left, right);
    }

    public RuntimeRule applyEnvtestRule(Object left, Object right) throws RuleFailedException {
        return applyEnvtestRule(null, left, right);
    }
}
