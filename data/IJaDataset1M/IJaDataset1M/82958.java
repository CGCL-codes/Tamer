package gate.wiki.antlr;

import java.io.*;
import java.util.Vector;
import java.util.Hashtable;
import java.util.Date;
import java.util.regex.Pattern;

/** XHTML target */
public class XHTMLTarget extends NOPTarget {

    protected static boolean inContents = false;

    /**
   * Collects the contents of the Table of Contents
   */
    protected static StringBuffer tableOfContents = new StringBuffer("<h2>Contents</h2>\n");

    /**
   * Collects the output from the file so that the table of contents can be added
   * before the rest of the output.
   */
    protected static StringBuffer fileContents = new StringBuffer("");

    /**
   *  The depth of titles in an HTML file, for examp1e <h1> ... <h10>
   */
    public static int HEADING_DEPTH = 10;

    /**
   *  Keeps track of the heading numbering
   */
    protected static int[] headingCount = new int[HEADING_DEPTH];

    /** Used by the c() method*/
    protected static Hashtable HTML_map = new Hashtable();

    static {
        HTML_map.put("rarrow", "&rarr;");
        HTML_map.put("larrow", "&larr;");
        HTML_map.put("element", "&#8712;");
        HTML_map.put("psubset", "&#8834;");
        HTML_map.put("derives", "&#8658;");
        HTML_map.put("union", "&#8746;");
        HTML_map.put("alpha", "&alpha;");
        HTML_map.put("beta", "&beta;");
        HTML_map.put("gamma", "&gamma;");
        HTML_map.put("epsilon", "&epsilon;");
    }

    public XHTMLTarget() {
        this(new BufferedWriter(new OutputStreamWriter(System.out)));
    }

    public XHTMLTarget(Writer out) {
        this.out = out;
    }

    public String getTargetLanguage() {
        return Tool.XHTML;
    }

    protected void write(String s) {
        try {
            if (inContents) {
                fileContents.append(s);
            } else {
                out.write(s);
            }
            String c = extractLastCommand(s);
            if (c != null) {
                lastCommand = c;
            }
        } catch (IOException ioe) {
            System.err.println("Problem writing output");
            ioe.printStackTrace(System.err);
        }
    }

    /** insert head.html if found */
    public void begin() {
        writeln("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        writeln("<!-- AUTOGENERATED FILE: ALL EDITS WILL BE LOST!!! -->");
        writeln("<!DOCTYPE html\n" + "  PUBLIC \"//W3C//DTD XHTML 1.0 Transitional//EN\"\n" + "  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
        writeln("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
        writeln("<head>");
    }

    /** insert tail.html if found */
    public void end() {
        writeln("</body>");
        writeln("</html>");
        if (inContents) {
            inContents = false;
            write(tableOfContents.toString());
            write(fileContents.toString());
            resetContents();
        }
        try {
            out.flush();
        } catch (IOException ioe) {
            System.err.println("Problem writing HTML output");
            ioe.printStackTrace(System.err);
        }
    }

    protected String extractLastCommand(String text) {
        if (text == null) {
            return null;
        }
        int i = text.lastIndexOf("<");
        if (i < 0) {
            return null;
        }
        int begin = i;
        i++;
        int end = 0;
        while (i < text.length() && text.charAt(i) != '>') {
            i++;
        }
        if (i >= text.length()) {
            return null;
        }
        end = i;
        return text.substring(begin, end);
    }

    public void text(String t) {
        write(angleBracketsEscape(t));
    }

    public void bold(String t) {
        write("<strong>" + angleBracketsEscape(t) + "</strong>");
    }

    public void italic(String t) {
        write("<em>" + angleBracketsEscape(t) + "</em>");
    }

    public void tt(String t) {
        write("<tt>" + angleBracketsEscape(t) + "</tt>");
    }

    public void beginListItem(int level) {
        write("<li>\n");
    }

    public void endListItem(int level) {
        writeln("</li>");
    }

    public void begin_ul(int level) {
        write("<ul>\n");
    }

    public void end_ul(int level) {
        write("</ul>\n");
    }

    public void begin_ol(int level) {
        write("<ol>\n");
    }

    public void end_ol(int level) {
        write("</ol>\n");
    }

    public void paragraph() {
        write("\n<p/>\n");
    }

    public void linebreak() {
        write("<br/>\n");
    }

    public void blankline() {
        write("<br/>\n<br/>\n");
    }

    public void code(String c) {
        write("\n<pre>");
        write(angleBracketsEscape(c));
        write("</pre>\n\n");
    }

    public void verbatim(String rawOutput) {
        write("<![CDATA[" + rawOutput + "]]>");
    }

    public void blockquote(String q) {
        write("<blockquote>\n");
        write("" + angleBracketsEscape(q) + "");
        write("\n</blockquote>\n\n");
    }

    public void link(String url, String title) {
        if (title == null) {
            title = url;
        }
        title = angleBracketsEscape(title);
        write("<a href=\"" + url + "\">" + title + "</a>");
    }

    public void anchor(String name) {
        write("<a name=\"" + name + "\"></a>");
    }

    public void title(String title) {
        title = angleBracketsEscape(title);
        writeln("<title>" + strip(title) + "</title>");
        writeln("<style type=\"text/css\">");
        writeln("<!--");
        writeln("html, body {");
        writeln("  background: #fff;");
        writeln("  color: #000;");
        writeln("  font-family: sans-serif;");
        writeln("}");
        writeln("h1,h2,h3,h4,h5,p,ul,ol { font-family: sans-serif; }");
        writeln("pre { font-family: monospace; }");
        writeln("h3.navhead {");
        writeln("  font-size: 100%;");
        writeln("}");
        writeln("div.banner {");
        writeln("  border: none;");
        writeln("  margin-right: 0px;");
        writeln("  margin-left: 0px;");
        writeln("  padding: 0.09em;");
        writeln("  text-align: center;");
        writeln("  font-weight: bold; ");
        writeln("}");
        writeln("div.banner a:link, div.banner {");
        writeln("  background: #A0D0F0;");
        writeln("  color: #000000;");
        writeln("}");
        writeln("div.banner a:active {");
        writeln("  background: #000000;");
        writeln("  color: #FFFFFF;");
        writeln("}");
        writeln("div.banner a:hover {");
        writeln("  background: #000000;");
        writeln("  color: #FFFFFF;");
        writeln("-->");
        writeln("</style>");
        writeln("</head>");
        writeln("<body bgcolor=\"#FFFFFF\" text=\"#000000\">");
        writeln("<h1>" + title + "</h1>");
        headingCount[1] = 1;
    }

    public void beginSection(String title, int level) {
        String hC = "";
        String indent = "";
        ++level;
        headingCount[level] += 1;
        for (int i = 2; i < HEADING_DEPTH; ++i) {
            if (i <= level) {
                hC += Integer.toString(headingCount[i]) + ".";
                indent += "&#160;&#160;&#160;&#160;";
            } else {
                headingCount[i] = 0;
            }
        }
        if (inContents) {
            tableOfContents.append(indent);
            tableOfContents.append("<a href=\"#" + hC + "\">" + hC + " " + title + "</a><br>");
            write("<a name=\"" + hC + "\"><h" + (level) + ">");
            title = angleBracketsEscape(title);
            write(hC + " " + title);
            write("</h" + (level) + "></a>\n");
        } else {
            write("<h" + (level) + ">");
            title = angleBracketsEscape(title);
            write(hC + " " + title);
            write("</h" + (level) + ">\n");
        }
    }

    public void begin_table() {
        write("\n<table cellspacing=\"0\" border=\"1\">\n");
        write("<tr><td>");
    }

    public void end_table() {
        write("</td></tr>\n");
        write("</table>\n");
    }

    public void col() {
        write("</td><td>");
    }

    public void row() {
        write("</td>\n</tr>\n<tr>\n<td>");
    }

    protected String strip(String s) {
        s = s.replaceAll("</.*>", "");
        s = s.replaceAll("<.*>", "");
        return s;
    }

    protected String angleBracketsEscape(String q) {
        q = q.replaceAll("<", "&lt;");
        q = q.replaceAll(">", "&gt;");
        return q;
    }

    public void hr() {
        write("\n<hr/>");
    }

    public String beginEM() {
        return ("<em>");
    }

    public String endEM() {
        return ("</em>");
    }

    public String beginTT() {
        return ("<tt>");
    }

    public String endTT() {
        return ("</tt>");
    }

    public String beginBF() {
        return ("<b>");
    }

    public String endBF() {
        return ("</b>");
    }

    public void longdash() {
        write("&#151;");
    }

    public void contents() {
        inContents = true;
    }

    /** Former plugins were turned into methods */
    public void image(YAMContext context, Vector args) {
        super.image(context, args);
        String imageName = (String) args.elementAt(0);
        String width = "";
        String height = "";
        if (args.size() > 1) {
            width = (String) args.elementAt(1);
            if (args.size() > 2) {
                height = (String) args.elementAt(2);
            }
        }
        if (width != "") {
            String[] w = Pattern.compile("([a-z]+)").split(width, 3);
            width = w[0];
            width = "width = \"" + width + "%\"";
        }
        if (height != "") {
            String[] w = Pattern.compile("([a-z]+)").split(height, 3);
            height = w[0];
            height = "height = \"" + height + "%\"";
        }
        write("<img src=\"" + imageName + "\" " + width + " " + height + ">");
    }

    public void cite(YAMContext context, Vector args) {
        super.cite(context, args);
        StringBuffer result = new StringBuffer("\n");
        for (int i = 0; i < args.size(); i++) {
            result.append("<a href=http://gate.ac.uk/sale/bib/main.html#X");
            result.append(args.get(i));
            result.append(">");
            result.append(args.get(i));
            result.append("</a>");
            if (i < (args.size() - 1)) result.append(", ");
        }
        write(result.toString());
    }

    public void box(YAMContext context, Vector args) {
        super.box(context, args);
        String tml = (String) args.elementAt(0);
        write("\n<table border=\"1\"><tr><td>" + tml.toString() + "</td></tr></table>\n\n");
    }

    public void c(YAMContext context, Vector args) {
        super.c(context, args);
        String charName = (String) args.elementAt(0);
        String html = (String) HTML_map.get(charName);
        if (html == null) {
            write(charName);
        }
        write("<<" + html + ">>");
    }

    public void date(YAMContext context, Vector args) {
        super.date(context, args);
    }

    public void delete(YAMContext context, Vector args) {
        super.delete(context, args);
    }

    public void eps(YAMContext context, Vector args) {
        super.eps(context, args);
        String imageName = (String) args.elementAt(0);
        String scalex = "1.0";
        String scaley = "1.0";
        if (args.size() > 1) {
            if (args.size() != 3) {
                System.err.println("Missing EPS arg(s); line " + context.getLine());
                return;
            }
            scalex = (String) args.elementAt(1);
            scaley = (String) args.elementAt(2);
        }
        write("\n[Image " + imageName + "]\n");
    }

    public void footnote(YAMContext context, Vector args) {
        super.footnote(context, args);
        String tml = (String) args.elementAt(0);
        String ret = "";
        ret = "<em>" + tml.toString() + "</em>";
        write(ret);
    }

    public void notes(YAMContext context, Vector args) {
        super.notes(context, args);
        String notes = (String) args.elementAt(0);
        write("<!-- " + notes + " -->\n");
    }

    public void syndiag(YAMContext context, Vector args) {
        super.syndiag(context, args);
        String grammarSpec = (String) args.elementAt(0);
        write("\n<<\n" + grammarSpec + ">>\n");
    }

    public void tree(YAMContext context, Vector args) {
        super.tree(context, args);
        String treeSpec = (String) args.elementAt(0);
        write(treeSpec);
    }

    /**
   * This function NEEDS to be here. If Tool.run is invoked from
   * the same class more than once in a row all the static variables 
   * retain their values, so they need to be reset
   *
   */
    protected void resetContents() {
        fileContents = null;
        fileContents = new StringBuffer("");
        headingCount = null;
        headingCount = new int[HEADING_DEPTH];
        tableOfContents = null;
        tableOfContents = new StringBuffer("<h2>Contents</h2>\n");
    }
}
