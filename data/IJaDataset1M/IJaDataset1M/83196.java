package hci.gnomex.controller;

import hci.framework.control.Command;
import hci.framework.control.RollBackCommandException;
import hci.framework.model.DetailObject;
import hci.gnomex.security.InvalidSecurityAdvisorException;
import hci.gnomex.security.SecurityAdvisor;
import hci.gnomex.utility.HibernateSession;
import java.io.Serializable;
import java.sql.SQLException;
import java.util.jar.Attributes;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.jdom.Document;
import org.jdom.output.XMLOutputter;

/**
 *
 *@author
 *@created
 *@version    1.0
 * Generated by the CommandBuilder tool - Kirt Henrie
 */
public class CreateSecurityAdvisor extends GNomExCommand implements Serializable {

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(CreateSecurityAdvisor.class);

    private SecurityAdvisor secAdvisor;

    private String launchAction;

    /**
   *  The method in which you can do any final validation and add any additional
   *  validation entries into the invalidField hashmap, this should be called in
   *  the loadCommand prior to setting the response jsp
   */
    public void validate() {
    }

    /**
   *  The callback method in which any pre-processing of the command takes place
   *  before the execute method is called. This method is where you would want
   *  to load objects from the HttpServletRequest (passed in), do form
   *  validation, etc. The HttpSession is also available in this method in case
   *  any session data is necessary.
   *
   *@param  request  The HttpServletRequest object
   *@param  session  The HttpSession object
   */
    public void loadCommand(HttpServletRequest request, HttpSession session) {
        this.validate();
        launchAction = (String) request.getParameter("launchAction");
        if (isValid()) {
            setResponsePage(this.SUCCESS_JSP);
        } else {
            setResponsePage(this.ERROR_JSP);
        }
    }

    /**
   *  The callback method where your business logic should be placed. This
   *  method is either called from the FrontController servlet or from the
   *  RequestProcessor Session Bean (if EJB is used). Any data resulting from
   *  the execution of this method should be put into instance variables in this
   *  class.
   *
   *@return                               Returns this command with the results
   *      of the execute method
   *@exception  RollBackCommandException  Description of the Exception
   */
    public Command execute() throws RollBackCommandException {
        try {
            Session sess = HibernateSession.currentSession(this.getUsername());
            secAdvisor = SecurityAdvisor.create(sess, this.getUsername());
            String filename = this.getClass().getProtectionDomain().getCodeSource().getLocation().getFile();
            JarFile jarfile = new JarFile(filename);
            Manifest manifest = jarfile.getManifest();
            Attributes value = (Attributes) manifest.getEntries().get("gnomex");
            secAdvisor.setVersion(value.getValue("Implementation-Version"));
            Document doc = secAdvisor.toXMLDocument(null, DetailObject.DATE_OUTPUT_SQL);
            XMLOutputter out = new org.jdom.output.XMLOutputter();
            this.xmlResult = out.outputString(doc);
        } catch (InvalidSecurityAdvisorException e) {
            this.addInvalidField("invalid permission", e.getMessage());
        } catch (HibernateException ex) {
            log.error("Hibernate exception while trying to Create Security Advisor: " + ex);
            throw new RollBackCommandException();
        } catch (SQLException ex) {
            log.error("SQL exception while trying to Create Security Advisor: " + ex);
            throw new RollBackCommandException();
        } catch (Exception ex) {
            ex.printStackTrace();
            log.fatal(ex.getClass().toString() + " occurred in CreateSecurityAdvisor " + ex);
            throw new RollBackCommandException();
        } finally {
            try {
                HibernateSession.closeSession();
            } catch (Exception ex) {
                log.error("Exception trying to close the Hibernate session: " + ex);
            }
        }
        if (isValid()) {
            if (launchAction != null && !launchAction.equals("")) {
                setResponsePage(launchAction);
            } else {
                setResponsePage(this.SUCCESS_JSP);
            }
        } else {
            setResponsePage(this.ERROR_JSP);
        }
        return this;
    }

    /**
   *  The callback method called after the loadCommand and execute methods
   *  allowing you to do any post-execute processing of the HttpSession. Should
   *  be used to add/remove session data resulting from the execution of this
   *  command
   *
   *@param  session  The HttpSession
   *@return          The processed HttpSession
   */
    public HttpSession setSessionState(HttpSession session) {
        session.setAttribute(SecurityAdvisor.SECURITY_ADVISOR_SESSION_KEY, secAdvisor);
        return session;
    }
}
