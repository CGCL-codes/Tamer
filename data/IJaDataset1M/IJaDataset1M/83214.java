package org.didicero.base.entity;

/**
 * Autogenerated POJO EJB class for Content containing the 
 * bulk of the entity implementation.
 *
 * This is autogenerated by AndroMDA using the EJB3
 * cartridge.
 *
 * DO NOT MODIFY this class.
 *
 * <p>
 * <html>
 * </p>
 * <p>
 * <head>
 * </p>
 * <p>
 * </head>
 * </p>
 * <p>
 * <body>
 * </p>
 * <p>
 * <p>
 * </p>
 * <p>
 * Content is a non empty set of <a
 * href="mdel://_9_5_1_25e60543_1263562167062_475851_51">paragraphs</a>
 * </p>
 * <p>
 * or <a
 * href="mdel://_9_5_1_25e60543_1263220623000_32190_10560">phrases</a>
 * </p>
 * <p>
 * </p>
 * </p>
 * <p>
 * </body>
 * </p>
 * <p>
 * </html>
 * </p>
 *
 */
@javax.persistence.Entity
@javax.persistence.DiscriminatorValue("C")
@javax.persistence.NamedQuery(name = "Content.findAll", query = "select content from Content AS content")
public class Content extends org.didicero.base.entity.TextNode implements java.io.Serializable {

    private static final long serialVersionUID = 3512278465291654817L;

    private java.util.Set<org.didicero.base.entity.Paragraph> paragraphs = new java.util.TreeSet<org.didicero.base.entity.Paragraph>();

    /**
     * Default empty constructor
     */
    public Content() {
    }

    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this class to the values provided by 
     * the parameters.
     *
     * @param text Value for the text property
     * @param lang Value for the lang property
     * @param guid Value for the guid property
     */
    public Content(java.lang.String text, org.didicero.base.entity.Language lang, java.lang.Long guid) {
        setText(text);
        setLang(lang);
        setGuid(guid);
    }

    /**
     * Constructor with all POJO attribute values and CMR relations.
     *
     * @param text Value for the text property
     * @param lang Value for the lang property
     * @param guid Value for the guid property
     * @param paragraphs Value for the paragraphs relation
     */
    public Content(java.lang.String text, org.didicero.base.entity.Language lang, java.lang.Long guid, java.util.Set<org.didicero.base.entity.Paragraph> paragraphs) {
        setText(text);
        setLang(lang);
        setGuid(guid);
        setParagraphs(paragraphs);
    }

    /**
     * Cloneable implementation with all POJO attribute values and CMR relations.
     * @throws CloneNotSupportedException 
     */
    @Override
    public Object clone() throws CloneNotSupportedException {
        Content aClone = new Content(this.getText(), this.getLang(), this.getGuid());
        aClone.setId(this.getId());
        if (this.isCascadeClone()) {
            for (org.didicero.base.entity.Paragraph element : this.getParagraphs()) {
                aClone.getParagraphs().add((org.didicero.base.entity.Paragraph) element.clone());
            }
        }
        return aClone;
    }

    /**
     * Get the paragraphs Collection
     *
     * @return java.util.Set<org.didicero.base.entity.Paragraph>
     */
    @javax.persistence.OneToMany(fetch = javax.persistence.FetchType.EAGER)
    @javax.persistence.JoinTable(name = "HAS_PARAGRAPHS", joinColumns = { @javax.persistence.JoinColumn(name = "CONTENT_ID_FK", referencedColumnName = "ID") }, inverseJoinColumns = { @javax.persistence.JoinColumn(name = "PARAGRAPHS_ID_FK", referencedColumnName = "ID") })
    public java.util.Set<org.didicero.base.entity.Paragraph> getParagraphs() {
        return this.paragraphs;
    }

    /**
     * Set the paragraphs
     *
     * @param paragraphs
     */
    public void setParagraphs(java.util.Set<org.didicero.base.entity.Paragraph> paragraphs) {
        this.paragraphs = paragraphs;
    }

    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof Content)) {
            return false;
        }
        final Content that = (Content) object;
        if (this.getId() == null || that.getId() == null || !this.getId().equals(that.getId())) {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode() {
        int hashCode = super.hashCode();
        hashCode = 29 * hashCode + (getId() == null ? 0 : getId().hashCode());
        return hashCode;
    }

    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString() {
        return super.toString();
    }
}
