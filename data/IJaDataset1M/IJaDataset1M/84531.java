package com.xmultra.processor.digest;

import java.io.File;
import java.util.ArrayList;
import org.apache.xerces.dom.DocumentImpl;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import com.xmultra.log.Logger;
import com.xmultra.log.MessageLogEntry;
import com.xmultra.processor.net.GetMessageConfig;
import com.xmultra.util.DOMPrinter;
import com.xmultra.util.FileUtils;
import com.xmultra.util.InitMapHolder;
import com.xmultra.util.Strings;
import com.xmultra.util.XmlParseUtils;

/**
 * Contains constants and methods for creating the GetMessage (XML command) to
 * HttpGetProcessor. This message tells HttpGetProcessor where to retrieve the
 * digest entry and what to insert into the retrieved document.
 *
 * @version   $Revision: #1 $
 * @author Wayne W. Weber, Mei-chen Hung
 */
class DigestEntryGetMessage {

    public static final String VERSION = "@version $Revision: #1 $";

    /** URL pattern used to validate URL and parse out components. */
    static final String URL_PATTERN = "(http://[^/]+)/(.*/)?([^/]+(?!/))";

    static final String DELETE_AFTER_VAL = "No";

    static final String DOC_TYPE_TAG = "<!DOCTYPE GetMessage SYSTEM \"";

    static final String MIN_FILE_AGE_UNITS_VAL = "Seconds";

    static final String MIN_FILE_AGE_VAL = "0";

    static final String XML_DOC_HEAD = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>";

    private DocumentImpl docImpl = new DocumentImpl();

    private FileUtils fileUtils = null;

    private Logger logger = null;

    private MessageLogEntry msgEntry = null;

    private Strings strings = null;

    private XmlParseUtils xmlParseUtils = null;

    /**
     * Constructor.
     *
     * @param xmlParseUtils Has utilities that are used to parse out the
     *                      config file.
     */
    DigestEntryGetMessage(InitMapHolder imh, Strings strings) {
        InitMapHolder initMapHolder = imh;
        this.strings = strings;
        logger = (Logger) initMapHolder.getEntry(InitMapHolder.LOGGER);
        msgEntry = new MessageLogEntry(this, VERSION);
        this.xmlParseUtils = (XmlParseUtils) initMapHolder.getEntry(InitMapHolder.XML_PARSE_UTILS);
        fileUtils = (FileUtils) initMapHolder.getEntry(InitMapHolder.FILE_UTILS);
    }

    /**
     * Builds the command file that is sent to HttpGetProcessor. This
     * command does the following:<P>
     *
     * - Specifies the URL, directory, and file name of the document to
     * be retrieved.<P>
     *
     * - Specifies data (usually metatags) that is to be inserted into the
     * document retrieved by HttpGetProcessor. Also specifies the point
     * in the retrieved document where is data should be inserted.<P>
     *
     * The URL, directory, and filename are derived from the link in the
     * digest entry. If the link is not a partial or relative URL, then
     * the fully-qualified absolute path is derived from the "LinkHrefSearch"
     * and "LinkHrefReplace" attributes in the Digest element of the config
     * file.<P>
     *
     * The inserted data is generated by searching/replacing patterns in the
     * "InsertionValueFormat" attribute of the Digest element in the config
     * file. For example, the following would be a typical
     * "InsertionValueFormat" entry: <P>
     *
     * &lt;meta name ="%COMPONENT_NAME%" content="%COMPONENT_VALUE%"&gt;           <P>
     *
     * This is a metatag that would be inserted into the retrieved HTML
     * document and would inserted after the "head" element of the HTML
     * document. This method searches for the string "%COMPONENT_NAME%" and
     * replaces it with the name of the component, for example SiteID,
     * Category (fields) in the config file) and Link and Headline could
     * all be inserted in the retrieved document. This information may be
     * useful in the processing of the document.<P>
     *
     * The "%COMPONENT_VALUE%" is also searched for and the value of that
     * attribute (SiteID, Category) or entry component (Link, Headline) is
     * replaced.<P>
     *
     * The metatag is then inserted into the retrieved document specified by
     * the "InsertionPositionPattern" attribute in the Head element of the
     * config file.<P>
     *
     * @param newListOfEntryComponentContentLists List of the lists of content
     *                                            from each component in each
     *                                            entry. If only retrieving
     *                                            "NewEntriesOnly", this list
     *                                            does not have previously
     *                                            retrieved digest entries.
     *
     * @param listOfEntryComponentsChildNodes     List of all EntryComponent
     *                                            child nodes in this config
     *                                            file.
     *
     * @param digestNode                          The Digest element from the
     *                                            config file.
     *
     * @param Digestmessage                       A unique code to identify a
     *                                            site or publication.
     *
     * @param categoryOfDigest
     *
     * @param destLocationFile                    The location where the XML
     *                                            command file will be written.
     */
    void buildXmlCommandDoc(ArrayList newListOfEntryComponentContentLists, ArrayList listOfEntryComponentsChildNodes, Node digestNode, DigestMessage digestMesg, File destLocationFile) {
        Element docElement = null;
        String insertPattern = ((Element) digestNode).getAttribute(DigestProcessorConfig.INSERT_POSITION_PATTERN);
        String insertValue = ((Element) digestNode).getAttribute(DigestProcessorConfig.INSERT_VALUE_FORMAT);
        String categoryOfDigest = digestMesg.getCategory();
        String typeOfDigest = digestMesg.getType();
        String destDir = ((Element) digestNode).getAttribute(DigestProcessorConfig.DEST_LOCATION);
        String siteId = digestMesg.getId();
        for (int i = 0; i < newListOfEntryComponentContentLists.size(); i++) {
            docElement = createXmlDocHeader(i, typeOfDigest, siteId);
            Element messageInsertsEl = docImpl.createElement(GetMessageConfig.MESSAGE_INSERTS_ELEMENT);
            docElement.appendChild(messageInsertsEl);
            messageInsertsEl = appendMessageInsertElement(insertValue, DigestProcessorConfig.DIGEST_SOURCE, digestMesg.getSource(), insertPattern, messageInsertsEl);
            messageInsertsEl = appendMessageInsertElement(insertValue, DigestProcessorConfig.SITE_ID, siteId, insertPattern, messageInsertsEl);
            messageInsertsEl = appendMessageInsertElement(insertValue, DigestProcessorConfig.DIGEST_TYPE, typeOfDigest, insertPattern, messageInsertsEl);
            messageInsertsEl = appendMessageInsertElement(insertValue, DigestProcessorConfig.CATEGORY, categoryOfDigest, insertPattern, messageInsertsEl);
            Integer numOfEntry = new Integer(i + 1);
            messageInsertsEl = appendMessageInsertElement(insertValue, DigestProcessorConfig.ENTRY_NUMBER, numOfEntry.toString(), insertPattern, messageInsertsEl);
            String link = "";
            for (int j = 0; j < listOfEntryComponentsChildNodes.size(); j++) {
                ArrayList anEntryComponentList = (ArrayList) newListOfEntryComponentContentLists.get(i);
                Node componentNode = (Node) (listOfEntryComponentsChildNodes.get(j));
                String componentNodeName = componentNode.getNodeName();
                String componentValue = "";
                if (j < anEntryComponentList.size()) {
                    componentValue = (String) anEntryComponentList.get(j);
                    if (componentNodeName.equals(DigestProcessorConfig.LINK)) {
                        Element mesgElement = appendGetLocations(docElement, componentValue, destDir);
                        link = componentValue;
                        if (mesgElement == null) {
                            msgEntry.setAppContext("buildXmlCommandDoc()");
                            msgEntry.setMessageText("bad url" + componentValue);
                            logger.logWarning(msgEntry);
                            continue;
                        }
                    }
                }
                messageInsertsEl = appendMessageInsertElement(insertValue, componentNodeName, componentValue, insertPattern, messageInsertsEl);
            }
            writeXmlDoc(docElement, typeOfDigest, siteId, destLocationFile, link);
        }
    }

    /**
     * Appends a MessageInsert element to the passed in parent, MessageInserts
     * element. These elements are part of the XML command file generated by
     * DigestProcessor and sent to HttpGetProcessor. <P>
     *
     * The MessageInsert element describes what to insert into the document
     * retrieved by HttpGetProcessor and where to insert it.<P>
     *
     * See {@link #buildXmlCommandDoc} for a description of the MessageInserts
     * generation.
     *
     * @param nameValuePattern      The string which contains the patterns of
     *                              places where the "name" and "value"
     *                              parameters are pluged into.
     *
     * @param name                  The name of the component that will get
     *                              plugged into the nameValuePattern parameter.
     *
     * @param value                 The value of the component that will get
     *                              plugged into the nameValuePattern parameter.
     *
     * @param insertionPattern      The pattern which describes where the message
     *                              will be inserted in the retrieved story by
     *                              HttpGetProcessor.
     *
     * @param messageInsertsElement The MessageInsert element will be appended
     *                              to this element.
     *
     * @return The MessageInserts element with the MessageInsert appended.
     */
    private Element appendMessageInsertElement(String nameValuePattern, String name, String value, String insertionPattern, Element messageInsertsElement) {
        Element messageInsertElement = docImpl.createElement(GetMessageConfig.MESSAGE_INSERT_ELEMENT);
        String substitutedNameValue = strings.substitute(DigestProcessorConfig.REPLACE_COMPONENT_NAME, name, nameValuePattern);
        substitutedNameValue = strings.substitute(DigestProcessorConfig.REPLACE_COMPONENT_VALUE, value, substitutedNameValue);
        substitutedNameValue = xmlParseUtils.conditionAttributeValue(substitutedNameValue, true);
        messageInsertElement.setAttribute(DigestProcessorConfig.MSG_INSERT_VALUE_TAG, substitutedNameValue);
        messageInsertElement.setAttribute(DigestProcessorConfig.MSG_INSERT_NAME_TAG, insertionPattern);
        messageInsertElement.setAttribute(DigestProcessorConfig.MSG_INSERT_POS_CASE_SENSITIVE, "No");
        messageInsertsElement.appendChild(messageInsertElement);
        return messageInsertsElement;
    }

    /**
     * Set the GetMessage root's attributes
     *
     * @param categoryOfDigest
     *                   value of category
     * @return ouput xml header element
     */
    private Element createXmlDocHeader(int entryNo, String categoryOfDigest, String siteID) {
        Element rootElements = docImpl.createElement(GetMessageConfig.GET_MESSAGE_ELEMENT);
        if (rootElements.hasChildNodes()) {
            Node rootNode = rootElements.removeChild(rootElements);
            rootElements = (Element) rootNode;
        }
        String message = "Retrieving: SiteID=" + siteID + "  Category=" + categoryOfDigest + "  Entry number=" + entryNo;
        rootElements.setAttribute(GetMessageConfig.MESSAGE_ATTRIBUTE, message);
        rootElements.setAttribute(GetMessageConfig.DELETE_AFTER_RETRIEVAL_ATTRIBUTE, DELETE_AFTER_VAL);
        rootElements.setAttribute(GetMessageConfig.MIN_FILE_AGE_UNITS_ATTRIBUTE, MIN_FILE_AGE_UNITS_VAL);
        rootElements.setAttribute(GetMessageConfig.MIN_FILE_AGE_ATTRIBUTE, MIN_FILE_AGE_VAL);
        return rootElements;
    }

    /**
     * Writes the XML command out to a file.
     *
     * @param docElements      The elements of the XML command document.
     *
     * @param typeOfDigest    The Category of digest
     *
     * @param siteID           An identifier for this site.
     *
     * @param destLocationFile The location where the XML command file will
     *                         be written.
     */
    private void writeXmlDoc(Element docElements, String typeOfDigest, String siteId, File destLocationFile, String link) {
        String docTypeTagWithRoot = DOC_TYPE_TAG + fileUtils.addRoot(GetMessageConfig.GET_MESSAGE_DTD_FILE) + "\">";
        DOMPrinter domPrinter = new DOMPrinter();
        String docStr = domPrinter.printToString(docElements, XML_DOC_HEAD, docTypeTagWithRoot);
        String xmlDocStr = strings.substitute("&amp;((amp;)?#?\\w+;)", "&$1", docStr);
        String uniqueName = strings.substitute("(\\S+/)?(\\S+?)(\\.\\S+)?", "$2", link);
        if (uniqueName.endsWith("/")) {
            uniqueName = uniqueName.substring(0, uniqueName.length() - 1);
        }
        uniqueName = siteId + "-" + typeOfDigest + "_" + uniqueName + ".xml";
        File uniqueFile = new File(destLocationFile, uniqueName);
        uniqueFile = fileUtils.addRoot(uniqueFile);
        fileUtils.writeFile(uniqueFile, xmlDocStr);
    }

    /**
     * Adds the SourceLocation and DestionationLocation elements to the
     * GetLocations element and then adds the GetLocations element to the
     * passed in "parentElement." The "parentElement" is the root of the
     * XML command file generated by the DigestProcessor and sent to the
     * HttpGetProcessor.
     *
     * @param parentElement The root or GetMessage element of the XML
     *                      command file.
     *
     * @param linkUrl       The Url of the link.
     *
     * @return "parentElement" with the GetLocations element appended.
     */
    private Element appendGetLocations(Element parentElement, String linkUrl, String destDir) {
        String domain = null;
        String directory = null;
        String filename = null;
        Element getLocation = docImpl.createElement(GetMessageConfig.GET_LOCATIONS_ELEMENT);
        Node firstChild = ((Node) parentElement).getFirstChild();
        parentElement.insertBefore(getLocation, firstChild);
        if (strings.matchesIgnoreCase(URL_PATTERN, linkUrl)) {
            if ((domain = strings.getGroup(1)) == null) domain = "";
            if ((directory = strings.getGroup(2)) == null) directory = "";
            if ((filename = strings.getGroup(3)) == null) filename = "";
        } else return null;
        Element getSrcLocation = docImpl.createElement(GetMessageConfig.GET_SRC_LOCATION_ELEMENT);
        getSrcLocation.setAttribute(GetMessageConfig.ADDRESS_ATTRIBUTE, domain);
        getSrcLocation.setAttribute(GetMessageConfig.SRC_DIR_ATTRIBUTE, directory);
        getSrcLocation.setAttribute(GetMessageConfig.SRC_FILE_ATTRIBUTE, filename);
        getLocation.appendChild(getSrcLocation);
        Element getDstLocation = docImpl.createElement(GetMessageConfig.GET_DST_LOCATION_ELEMENT);
        getDstLocation.setAttribute(GetMessageConfig.DST_DIR_ATTRIBUTE, destDir);
        getLocation.appendChild(getDstLocation);
        return parentElement;
    }
}
