package com.volantis.mps.channels;

import our.apache.commons.httpclient.HttpClient;
import our.apache.commons.httpclient.HttpMethod;
import java.io.IOException;
import com.volantis.mps.localization.LocalizationFactory;
import com.volantis.synergetics.log.LogDispatcher;
import com.volantis.synergetics.localization.ExceptionLocalizer;

/**
 * This is a utility that provides objects that use it with some generic HTTP
 * related operations.  This code makes use of the
 * <a href="http://jakarta.apache.org/commons/httpclient/" title="HttpClient">Apache Jakarta Commons HttpClient</a>
 * library.  All code that uses this helper will need to use similar classes
 * and interfaces.
 */
public class HTTPHelper {

    /**
     * The copyright statement.
     */
    private static String mark = "(c) Volantis Systems Ltd 2004.";

    /**
     * The logger to use
     */
    private static final LogDispatcher logger = LocalizationFactory.createLogger(HTTPHelper.class);

    /**
     * The message localiser for this class.
     */
    private static ExceptionLocalizer localizer = LocalizationFactory.createExceptionLocalizer(HTTPHelper.class);

    public HTTPHelper() {
    }

    /**
     * The default HTTP helper instance.  This can be changed using the
     * {@link #setDefaultInstance} method.
     */
    private static HTTPHelper defaultInstance = new HTTPHelper();

    /**
     * Get the default instance of the HTTP helper.
     *
     * @return The default instance of the HTTP helper.
     */
    public static HTTPHelper getDefaultInstance() {
        return defaultInstance;
    }

    /**
     * Set the default <code>HTTPHelper</code> instance.
     *
     * @param helper The new default HTTPHelper.
     *
     * @return The previous version.
     */
    public static HTTPHelper setDefaultInstance(HTTPHelper helper) {
        if (helper == null) {
            throw new IllegalStateException("Default HTTPHelper may not be null");
        }
        HTTPHelper old = defaultInstance;
        defaultInstance = helper;
        return old;
    }

    /**
     * Execute a given request as specified by the method.  The method can be
     * either a GET or a POST request as no specific processing is done.  It
     * is assumed the method has been set-up appropriately prior to calling
     * this method.
     *
     * @param method  The method that should be executed as the request on the
     *                client.
     * @param fullURL The URL that is the focus of the request.
     *
     * @return The status code generated by the execution of this request.
     *         This will be a HTTP status code.  The full response of the
     *         request will be in the method.
     *
     * @throws IOException If there is a problem in making the request.
     */
    public int executeRequest(HttpMethod method, String fullURL) throws IOException {
        HttpClient client = new HttpClient();
        client.setConnectionTimeout(15000);
        client.setTimeout(30000);
        int statusCode = -1;
        int attempt = 0;
        while ((statusCode == -1) && (attempt < 3)) {
            statusCode = client.executeMethod(method);
            attempt++;
        }
        if (statusCode == -1) {
            final String messageKey = "connection-failure-to";
            logger.error(messageKey, fullURL);
            throw new IOException(localizer.format(messageKey, fullURL));
        }
        return statusCode;
    }
}
