package org.jz.envelope.printer.russian.test.swing;

import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.Insets;
import java.awt.Toolkit;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import org.jz.envelope.printer.russian.factory.DocumentEnvelopeFactory;
import org.jz.envelope.printer.russian.Envelope;
import org.jz.envelope.printer.russian.EnvelopePrinter;
import org.jz.envelope.printer.russian.EnvelopeFactory;
import org.jz.envelope.printer.russian.factory.DefaultEnvelopePrinter;
import org.jz.envelope.printer.russian.templates.TemplateHelper;

/**
 * Окно для интерактивного текстирования библиотеки печати конвертов.
 * Имеет поля для ввода реквизитов отправителя и получателя,
 * возможность выбора принтера и шаблона конверта и кнопку печати.
 * @author Сергей Жезняковский - 2011-02-27 13:46:51
 */
public class EnvelopePrinterSwingFrame extends javax.swing.JFrame {

    /** Размер отступа границ окна от края экрана */
    public static final int BORDER_INDENT = 20;

    /** Список доступных сервисов печати */
    private PrintService[] services;

    /**
     * Конструктор. Инициализирует пользовательский интерфейс,
     * начальные значения полей ввода и список доступных сервисов печати.
     */
    public EnvelopePrinterSwingFrame() {
        initComponents();
        fillSampleData();
        fillPrinterList();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        groupTemplates = new javax.swing.ButtonGroup();
        panelLayout = new javax.swing.JPanel();
        panelSender = new javax.swing.JPanel();
        labelFromWho = new javax.swing.JLabel();
        textFromWho = new javax.swing.JTextField();
        labelFromWhere = new javax.swing.JLabel();
        textFromWhere = new javax.swing.JTextField();
        labelFromPostalCode = new javax.swing.JLabel();
        textFromPostalCode = new javax.swing.JTextField();
        panelTemplates = new javax.swing.JPanel();
        rbDLcomplete = new javax.swing.JRadioButton();
        rbC5complete = new javax.swing.JRadioButton();
        rbC6complete = new javax.swing.JRadioButton();
        panelServices = new javax.swing.JPanel();
        scrollPrinters = new javax.swing.JScrollPane();
        tablePrinters = new javax.swing.JTable();
        buttonPrint = new javax.swing.JButton();
        panelRecipient = new javax.swing.JPanel();
        textToPostalCode = new javax.swing.JTextField();
        textToWhere = new javax.swing.JTextField();
        textToWho = new javax.swing.JTextField();
        labelToWho = new javax.swing.JLabel();
        labelToWhere = new javax.swing.JLabel();
        labelToPostalCode = new javax.swing.JLabel();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Тестирование печати конвертов");
        panelLayout.setLayout(new java.awt.GridLayout(0, 2));
        panelSender.setBorder(javax.swing.BorderFactory.createTitledBorder(" Отправитель "));
        panelSender.setLayout(new java.awt.GridBagLayout());
        labelFromWho.setText("От кого:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 14, 4, 4);
        panelSender.add(labelFromWho, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 14);
        panelSender.add(textFromWho, gridBagConstraints);
        labelFromWhere.setText("Откуда:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 14, 4, 4);
        panelSender.add(labelFromWhere, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 14);
        panelSender.add(textFromWhere, gridBagConstraints);
        labelFromPostalCode.setText("Индекс:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 14, 4, 4);
        panelSender.add(labelFromPostalCode, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 14);
        panelSender.add(textFromPostalCode, gridBagConstraints);
        panelLayout.add(panelSender);
        panelTemplates.setBorder(javax.swing.BorderFactory.createTitledBorder(" Шаблоны "));
        panelTemplates.setLayout(new java.awt.GridBagLayout());
        groupTemplates.add(rbDLcomplete);
        rbDLcomplete.setSelected(true);
        rbDLcomplete.setText("DL полный");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        panelTemplates.add(rbDLcomplete, gridBagConstraints);
        groupTemplates.add(rbC5complete);
        rbC5complete.setText("C5 полный");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        panelTemplates.add(rbC5complete, gridBagConstraints);
        groupTemplates.add(rbC6complete);
        rbC6complete.setText("C6 полный");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 2.0;
        panelTemplates.add(rbC6complete, gridBagConstraints);
        panelLayout.add(panelTemplates);
        panelServices.setBorder(javax.swing.BorderFactory.createTitledBorder(" Принтеры "));
        panelServices.setLayout(new java.awt.GridBagLayout());
        scrollPrinters.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tablePrinters.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        scrollPrinters.setViewportView(tablePrinters);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 14, 4, 14);
        panelServices.add(scrollPrinters, gridBagConstraints);
        buttonPrint.setText("Печать");
        buttonPrint.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 14, 14, 14);
        panelServices.add(buttonPrint, gridBagConstraints);
        panelLayout.add(panelServices);
        panelRecipient.setBorder(javax.swing.BorderFactory.createTitledBorder(" Получатель "));
        panelRecipient.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 14);
        panelRecipient.add(textToPostalCode, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 14);
        panelRecipient.add(textToWhere, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 14);
        panelRecipient.add(textToWho, gridBagConstraints);
        labelToWho.setText("Кому:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 14, 4, 4);
        panelRecipient.add(labelToWho, gridBagConstraints);
        labelToWhere.setText("Куда:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 14, 4, 4);
        panelRecipient.add(labelToWhere, gridBagConstraints);
        labelToPostalCode.setText("Индекс:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 14, 4, 4);
        panelRecipient.add(labelToPostalCode, gridBagConstraints);
        panelLayout.add(panelRecipient);
        getContentPane().add(panelLayout, java.awt.BorderLayout.CENTER);
        pack();
    }

    private void buttonPrintActionPerformed(java.awt.event.ActionEvent evt) {
        printEnvelope();
    }

    /** Кнопка начала печати */
    private javax.swing.JButton buttonPrint;

    /** Группа кнопок для выбора шаблона конверта */
    private javax.swing.ButtonGroup groupTemplates;

    /** Метка "Индекс отправителя" */
    private javax.swing.JLabel labelFromPostalCode;

    /** Метка "Откуда" */
    private javax.swing.JLabel labelFromWhere;

    /** Метка "От кого" */
    private javax.swing.JLabel labelFromWho;

    /** Метка "Индекс получателя" */
    private javax.swing.JLabel labelToPostalCode;

    /** Метка "Куда" */
    private javax.swing.JLabel labelToWhere;

    /** Метка "Кому" */
    private javax.swing.JLabel labelToWho;

    /** Корневой контейнер */
    private javax.swing.JPanel panelLayout;

    /** Контейнер реквизитов получателя */
    private javax.swing.JPanel panelRecipient;

    /** Контейнер с реквизитами отправителя */
    private javax.swing.JPanel panelSender;

    /** Контейнер со списком принтеров */
    private javax.swing.JPanel panelServices;

    /** Контейнер со списком шаблонов */
    private javax.swing.JPanel panelTemplates;

    /** Кнопка выбора полного шаблона C5 */
    private javax.swing.JRadioButton rbC5complete;

    /** Кнопка выбора полного шаблона C6 */
    private javax.swing.JRadioButton rbC6complete;

    /** Кнопка выбора полного шаблона DL */
    private javax.swing.JRadioButton rbDLcomplete;

    /** Панель прокрутки для таблицы со списком принтеров */
    private javax.swing.JScrollPane scrollPrinters;

    /** Таблица со списком принтеров */
    private javax.swing.JTable tablePrinters;

    /** Поле "Индекс отправителя" */
    private javax.swing.JTextField textFromPostalCode;

    /** Поле "Откуда" */
    private javax.swing.JTextField textFromWhere;

    /** Поле "От кого" */
    private javax.swing.JTextField textFromWho;

    /** Поле индекса получателя */
    private javax.swing.JTextField textToPostalCode;

    /** Поле "Куда" */
    private javax.swing.JTextField textToWhere;

    /** Поле "Кому" */
    private javax.swing.JTextField textToWho;

    /**
     * Размещение окна на экране.
     */
    public void arrangeOnScreen() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Insets screenInsets = Toolkit.getDefaultToolkit().getScreenInsets(GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration());
        this.setSize(screenSize.width - screenInsets.right - screenInsets.left - BORDER_INDENT - BORDER_INDENT, screenSize.height - screenInsets.top - screenInsets.bottom - BORDER_INDENT - BORDER_INDENT);
        this.setLocation(screenInsets.left + BORDER_INDENT, screenInsets.top + BORDER_INDENT);
    }

    /**
     * Начальное заполнение текстовых полей.
     */
    private void fillSampleData() {
        textFromWho.setText("Жезняковский Сергей Александрович");
        textFromWhere.setText("пр.Мира, д.20/38, кв.50, г. Великий Новгород, Российская Федерация");
        textFromPostalCode.setText("173025");
        textToWho.setText("Новгородский Государственный Педагогический институт");
        textToWhere.setText("НГПИ, Антоново, г. Великий Новгород, Российская Федерация");
        textToPostalCode.setText("173012");
        textFromWho.setCaretPosition(0);
        textFromWhere.setCaretPosition(0);
        textFromPostalCode.setCaretPosition(0);
        textToWho.setCaretPosition(0);
        textToWhere.setCaretPosition(0);
        textToPostalCode.setCaretPosition(0);
    }

    /**
     * Запуск печати конверта в соответствии с настройками.
     */
    private void printEnvelope() {
        try {
            int serviceIndex = tablePrinters.getSelectedRow();
            if (serviceIndex < 0) {
                throw new Exception("Не выбран принтер");
            } else {
                PrintService selectedService = services[serviceIndex];
                String templateName = null;
                if (rbDLcomplete.isSelected()) {
                    templateName = TemplateHelper.TEMPLATE_DL_COMPLETE;
                } else if (rbC5complete.isSelected()) {
                    templateName = TemplateHelper.TEMPLATE_C5_COMPLETE;
                } else if (rbC6complete.isSelected()) {
                    templateName = TemplateHelper.TEMPLATE_C6_COMPLETE;
                } else {
                    throw new Exception("Не выбран шаблон");
                }
                EnvelopeFactory envelopeFactory = new DocumentEnvelopeFactory(TemplateHelper.parseTemplate(templateName));
                Envelope envelope = envelopeFactory.produceEnvelope();
                envelope.setTextValue("to-index", textToPostalCode.getText().trim());
                envelope.setTextValue("to-person", textToWho.getText().trim());
                envelope.setTextValue("to-place", textToWhere.getText().trim());
                envelope.setTextValue("from-index", textFromPostalCode.getText().trim());
                envelope.setTextValue("from-person", textFromWho.getText().trim());
                envelope.setTextValue("from-place", textFromWhere.getText().trim());
                envelope.setPostalIndex(textToPostalCode.getText().trim());
                EnvelopePrinter printer = new DefaultEnvelopePrinter();
                printer.setEnvelope(envelope);
                printer.printEnvelope(selectedService);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getClass().getName() + " : " + ex.getMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Заполнение списка доступных печатающих устройств.
     */
    private void fillPrinterList() {
        services = PrintServiceLookup.lookupPrintServices(null, null);
        AbstractTableModel tableModel = new AbstractTableModel() {

            public int getRowCount() {
                return services.length;
            }

            public int getColumnCount() {
                return 1;
            }

            public Object getValueAt(int rowIndex, int columnIndex) {
                return services[rowIndex].getName();
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }

            @Override
            public String getColumnName(int column) {
                return "Принтер";
            }
        };
        tablePrinters.setModel(tableModel);
        tablePrinters.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tablePrinters.setRowHeight((int) (1.3 * tablePrinters.getRowHeight()));
        PrintService defaultService = PrintServiceLookup.lookupDefaultPrintService();
        for (int i = 0; i < services.length; i++) {
            if (services[i].getName().equals(defaultService.getName())) {
                tablePrinters.getSelectionModel().setSelectionInterval(i, i);
            }
        }
    }
}
