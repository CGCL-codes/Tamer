package com.sun.org.apache.xalan.internal.xsltc.compiler;

import java.util.Stack;
import java.util.Vector;
import java.io.StringReader;
import com.sun.java_cup.internal.runtime.*;
import com.sun.org.apache.xml.internal.dtm.DTM;
import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xml.internal.dtm.Axis;
import com.sun.org.apache.xalan.internal.xsltc.runtime.Operators;
import com.sun.org.apache.xalan.internal.xsltc.compiler.util.ErrorMsg;

/** CUP v0.10j generated parser.
  * @version Thu Oct 06 10:09:26 PDT 2005
  */
public class XPathParser extends com.sun.java_cup.internal.runtime.lr_parser {

    /** Default constructor. */
    public XPathParser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public XPathParser(com.sun.java_cup.internal.runtime.Scanner s) {
        super(s);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\215\000\002\002\004\000\002\003\004\000\002\003" + "\004\000\002\036\003\000\002\036\005\000\002\037\003" + "\000\002\037\004\000\002\037\003\000\002\037\005\000" + "\002\037\005\000\002\037\004\000\002\037\003\000\002" + "\035\006\000\002\035\010\000\002\040\006\000\002\041" + "\003\000\002\041\005\000\002\041\005\000\002\042\003" + "\000\002\042\004\000\002\042\003\000\002\042\004\000" + "\002\042\004\000\002\042\005\000\002\042\004\000\002" + "\042\005\000\002\043\003\000\002\043\003\000\002\043" + "\003\000\002\043\003\000\002\043\003\000\002\044\003" + "\000\002\044\003\000\002\054\003\000\002\054\004\000" + "\002\054\004\000\002\045\003\000\002\045\004\000\002" + "\007\005\000\002\004\003\000\002\012\003\000\002\012" + "\005\000\002\013\003\000\002\013\005\000\002\014\003" + "\000\002\014\005\000\002\014\005\000\002\015\003\000" + "\002\015\005\000\002\015\005\000\002\015\005\000\002" + "\015\005\000\002\016\003\000\002\016\005\000\002\016" + "\005\000\002\017\003\000\002\017\005\000\002\017\005" + "\000\002\017\005\000\002\020\003\000\002\020\004\000" + "\002\024\003\000\002\024\005\000\002\025\003\000\002" + "\025\003\000\002\025\005\000\002\025\005\000\002\006" + "\003\000\002\006\003\000\002\027\003\000\002\027\005" + "\000\002\027\003\000\002\031\003\000\002\031\004\000" + "\002\031\003\000\002\030\005\000\002\032\004\000\002" + "\011\003\000\002\011\004\000\002\011\005\000\002\011" + "\004\000\002\011\003\000\002\053\004\000\002\053\003" + "\000\002\052\003\000\002\052\003\000\002\052\003\000" + "\002\052\003\000\002\052\003\000\002\052\003\000\002" + "\052\003\000\002\052\003\000\002\052\003\000\002\052" + "\003\000\002\052\003\000\002\052\003\000\002\052\003" + "\000\002\026\003\000\002\026\003\000\002\010\003\000" + "\002\010\004\000\002\023\003\000\002\023\005\000\002" + "\023\003\000\002\023\003\000\002\023\003\000\002\023" + "\003\000\002\021\004\000\002\022\005\000\002\022\006" + "\000\002\046\003\000\002\046\005\000\002\050\003\000" + "\002\051\003\000\002\005\003\000\002\033\003\000\002" + "\033\003\000\002\033\003\000\002\033\003\000\002\033" + "\006\000\002\033\003\000\002\034\003\000\002\034\003" + "\000\002\047\003\000\002\047\003\000\002\047\003\000" + "\002\047\003\000\002\047\003\000\002\047\003\000\002" + "\047\003\000\002\047\003\000\002\047\003\000\002\047" + "\003\000\002\047\003\000\002\047\003\000\002\047\003" + "\000\002\047\003\000\002\047\003\000\002\047\003\000" + "\002\047\003\000\002\047\003" });

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\307\000\006\066\006\067\005\001\002\000\004\002" + "\311\001\002\000\110\004\061\005\111\011\071\013\103" + "\015\134\016\066\017\106\021\070\031\075\032\031\033" + "\040\034\057\035\034\036\113\037\141\040\142\041\145" + "\044\063\045\062\046\065\047\115\050\123\051\136\052" + "\077\053\143\054\131\055\125\056\116\057\104\060\140" + "\061\067\062\060\063\127\064\132\065\072\001\002\000" + "\070\004\013\013\027\016\020\021\023\032\031\033\040" + "\035\034\036\033\037\046\040\047\041\051\044\015\045" + "\014\046\016\047\036\050\037\051\044\052\025\053\050" + "\054\043\055\041\056\035\057\030\060\045\061\021\062" + "\012\063\042\001\002\000\006\002￾\010\306\001\002" + "\000\004\002\000\001\002\000\014\002￧\004￧\006" + "￧\010￧\021￧\001\002\000\054\002ｺ\004ｺ" + "\006ｺ\007ｺ\010ｺ\012ｺ\013ｺ\014ｺ\021" + "ｺ\022ｺ\023ｺ\024ｺ\025ｺ\026ｺ\027ｺ" + "\030ｺ\031ｺ\032ｺ\033ｺ\042ｺ\043ｺ\001" + "\002\000\070\002￼\010￼\013\027\016\020\032\031" + "\033\040\035\034\036\113\037\141\040\047\041\051\044" + "\015\045\014\046\016\047\036\050\037\051\044\052\025" + "\053\050\054\043\055\041\056\035\057\030\060\045\061" + "\021\062\012\063\042\001\002\000\014\002￣\004￣" + "\006￣\010￣\021￣\001\002\000\014\002￤\004" + "￤\006￤\010￤\021￤\001\002\000\004\011\302" + "\001\002\000\012\002￺\004\277\010￺\021\276\001" + "\002\000\062\013￠\032￠\033￠\035￠\036￠" + "\037￠\040￠\041￠\044￠\045￠\046￠\047" + "￠\050￠\051￠\052￠\053￠\054￠\055￠" + "\056￠\057￠\060￠\061￠\062￠\063￠\001" + "\002\000\054\002ｻ\004ｻ\006ｻ\007ｻ\010ｻ" + "\012ｻ\013ｻ\014ｻ\021ｻ\022ｻ\023ｻ\024" + "ｻ\025ｻ\026ｻ\027ｻ\030ｻ\031ｻ\032ｻ" + "\033ｻ\042ｻ\043ｻ\001\002\000\062\013\027\032" + "\031\033\040\035\034\036\113\037\141\040\047\041\051" + "\044\015\045\014\046\016\047\036\050\037\051\044\052" + "\170\053\166\054\043\055\041\056\035\057\030\060\045" + "\061\021\062\012\063\042\001\002\000\064\013\027\016" + "\020\032\031\033\040\035\034\036\113\037\141\040\047" + "\041\051\044\015\045\014\046\016\047\036\050\037\051" + "\044\052\025\053\050\054\043\055\041\056\035\057\030" + "\060\045\061\021\062\012\063\042\001\002\000\012\002" + "￲\004\266\010￲\021\265\001\002\000\016\002ｿ" + "\004ｿ\006ｿ\010ｿ\020\264\021ｿ\001\002\000" + "\006\002￶\010￶\001\002\000\014\002￢\004￢" + "\006￢\010￢\021￢\001\002\000\054\002ｽ\004" + "ｽ\006ｽ\007ｽ\010ｽ\012ｽ\013ｽ\014ｽ" + "\021ｽ\022ｽ\023ｽ\024ｽ\025ｽ\026ｽ\027" + "ｽ\030ｽ\031ｽ\032ｽ\033ｽ\042ｽ\043ｽ" + "\001\002\000\056\002ﾅ\004ﾅ\006ﾅ\007ﾅ\010" + "ﾅ\011ﾅ\012ﾅ\013ﾅ\014ﾅ\021ﾅ\022ﾅ" + "\023ﾅ\024ﾅ\025ﾅ\026ﾅ\027ﾅ\030ﾅ\031" + "ﾅ\032ﾅ\033ﾅ\042ﾅ\043ﾅ\001\002\000\014" + "\002￭\004￭\006\055\010￭\021￭\001\002\000" + "\016\002ｵ\004ｵ\006ｵ\010ｵ\011\260\021ｵ" + "\001\002\000\056\002ﾆ\004ﾆ\006ﾆ\007ﾆ\010" + "ﾆ\011ﾆ\012ﾆ\013ﾆ\014ﾆ\021ﾆ\022ﾆ" + "\023ﾆ\024ﾆ\025ﾆ\026ﾆ\027ﾆ\030ﾆ\031" + "ﾆ\032ﾆ\033ﾆ\042ﾆ\043ﾆ\001\002\000\054" + "\002ｾ\004ｾ\006ｾ\007ｾ\010ｾ\012ｾ\013" + "ｾ\014ｾ\021ｾ\022ｾ\023ｾ\024ｾ\025ｾ" + "\026ｾ\027ｾ\030ｾ\031ｾ\032ｾ\033ｾ\042" + "ｾ\043ｾ\001\002\000\054\002ｷ\004ｷ\006ｷ" + "\007ｷ\010ｷ\012ｷ\013ｷ\014ｷ\021ｷ\022" + "ｷ\023ｷ\024ｷ\025ｷ\026ｷ\027ｷ\030ｷ" + "\031ｷ\032ｷ\033ｷ\042ｷ\043ｷ\001\002\000" + "\054\002ｶ\004ｶ\006ｶ\007ｶ\010ｶ\012ｶ" + "\013ｶ\014ｶ\021ｶ\022ｶ\023ｶ\024ｶ\025" + "ｶ\026ｶ\027ｶ\030ｶ\031ｶ\032ｶ\033ｶ" + "\042ｶ\043ｶ\001\002\000\056\002ﾄ\004ﾄ\006" + "ﾄ\007ﾄ\010ﾄ\011ﾄ\012ﾄ\013ﾄ\014ﾄ" + "\021ﾄ\022ﾄ\023ﾄ\024ﾄ\025ﾄ\026ﾄ\027" + "ﾄ\030ﾄ\031ﾄ\032ﾄ\033ﾄ\042ﾄ\043ﾄ" + "\001\002\000\054\002ﾁ\004ﾁ\006ﾁ\007ﾁ\010" + "ﾁ\012ﾁ\013ﾁ\014ﾁ\021ﾁ\022ﾁ\023ﾁ" + "\024ﾁ\025ﾁ\026ﾁ\027ﾁ\030ﾁ\031ﾁ\032" + "ﾁ\033ﾁ\042ﾁ\043ﾁ\001\002\000\054\002ｸ" + "\004ｸ\006ｸ\007ｸ\010ｸ\012ｸ\013ｸ\014" + "ｸ\021ｸ\022ｸ\023ｸ\024ｸ\025ｸ\026ｸ" + "\027ｸ\030ｸ\031ｸ\032ｸ\033ｸ\042ｸ\043" + "ｸ\001\002\000\054\002ﾂ\004ﾂ\006ﾂ\007ﾂ" + "\010ﾂ\012ﾂ\013ﾂ\014ﾂ\021ﾂ\022ﾂ\023" + "ﾂ\024ﾂ\025ﾂ\026ﾂ\027ﾂ\030ﾂ\031ﾂ" + "\032ﾂ\033ﾂ\042ﾂ\043ﾂ\001\002\000\054\002" + "ｹ\004ｹ\006ｹ\007ｹ\010ｹ\012ｹ\013ｹ" + "\014ｹ\021ｹ\022ｹ\023ｹ\024ｹ\025ｹ\026" + "ｹ\027ｹ\030ｹ\031ｹ\032ｹ\033ｹ\042ｹ" + "\043ｹ\001\002\000\054\002ｼ\004ｼ\006ｼ\007" + "ｼ\010ｼ\012ｼ\013ｼ\014ｼ\021ｼ\022ｼ" + "\023ｼ\024ｼ\025ｼ\026ｼ\027ｼ\030ｼ\031" + "ｼ\032ｼ\033ｼ\042ｼ\043ｼ\001\002\000\016" + "\002ﾃ\004ﾃ\006ﾃ\010ﾃ\011\253\021ﾃ\001" + "\002\000\014\002￥\004￥\006￥\010￥\021￥" + "\001\002\000\016\002ﾀ\004ﾀ\006ﾀ\010ﾀ\020" + "\252\021ﾀ\001\002\000\014\002￦\004￦\006￦" + "\010￦\021￦\001\002\000\014\002￡\004￡\006" + "￡\010￡\021￡\001\002\000\014\002￯\004￯" + "\006\055\010￯\021￯\001\002\000\054\002￝\004" + "￝\006\055\007￝\010￝\012￝\013￝\014￝" + "\021￝\022￝\023￝\024￝\025￝\026￝\027" + "￝\030￝\031￝\032￝\033￝\042￝\043￝" + "\001\002\000\110\004\061\005\111\011\071\013\103\015" + "\134\016\066\017\106\021\070\031\075\032\031\033\040" + "\034\057\035\034\036\113\037\141\040\142\041\145\044" + "\063\045\062\046\065\047\115\050\123\051\136\052\077" + "\053\143\054\131\055\125\056\116\057\104\060\140\061" + "\067\062\060\063\127\064\132\065\072\001\002\000\012" + "\002￮\004￮\010￮\021￮\001\002\000\054\002" + "ﾚ\004ﾚ\006ﾚ\007ﾚ\010ﾚ\012ﾚ\013ﾚ" + "\014ﾚ\021ﾚ\022ﾚ\023ﾚ\024ﾚ\025ﾚ\026" + "ﾚ\027ﾚ\030ﾚ\031ﾚ\032ﾚ\033ﾚ\042ﾚ" + "\043ﾚ\001\002\000\060\002ｺ\004ｺ\006ｺ\007" + "ｺ\010ｺ\011ｺ\012ｺ\013ｺ\014ｺ\020ﾥ" + "\021ｺ\022ｺ\023ｺ\024ｺ\025ｺ\026ｺ\027" + "ｺ\030ｺ\031ｺ\032ｺ\033ｺ\042ｺ\043ｺ" + "\001\002\000\126\002ﾹ\005\111\007ﾹ\010ﾹ\012" + "ﾹ\013\103\014ﾹ\016\066\017\106\022ﾹ\023ﾹ" + "\024ﾹ\025ﾹ\026ﾹ\027ﾹ\030ﾹ\031ﾹ\032" + "\031\033\040\035\034\036\113\037\141\040\142\041\145" + "\042ﾹ\043ﾹ\044\063\045\062\046\065\047\115\050" + "\123\051\136\052\077\053\143\054\131\055\125\056\116" + "\057\104\060\140\061\067\062\060\063\127\001\002\000" + "\054\002ﾉ\004ﾉ\006ﾉ\007ﾉ\010ﾉ\012ﾉ" + "\013ﾉ\014ﾉ\021ﾉ\022ﾉ\023ﾉ\024ﾉ\025" + "ﾉ\026ﾉ\027ﾉ\030ﾉ\031ﾉ\032ﾉ\033ﾉ" + "\042ﾉ\043ﾉ\001\002\000\054\002ﾋ\004ﾋ\006" + "ﾋ\007ﾋ\010ﾋ\012ﾋ\013ﾋ\014ﾋ\021ﾋ" + "\022ﾋ\023ﾋ\024ﾋ\025ﾋ\026ﾋ\027ﾋ\030" + "ﾋ\031ﾋ\032ﾋ\033ﾋ\042ﾋ\043ﾋ\001\002" + "\000\032\002ￕ\007ￕ\012ￕ\014ￕ\022ￕ\023" + "ￕ\024\221\025\222\026\223\027\224\042ￕ\043ￕ" + "\001\002\000\004\011\245\001\002\000\062\013ﾮ\032" + "ﾮ\033ﾮ\035ﾮ\036ﾮ\037ﾮ\040ﾮ\041ﾮ" + "\044ﾮ\045ﾮ\046ﾮ\047ﾮ\050ﾮ\051ﾮ\052" + "ﾮ\053ﾮ\054ﾮ\055ﾮ\056ﾮ\057ﾮ\060ﾮ" + "\061ﾮ\062ﾮ\063ﾮ\001\002\000\060\002ｻ\004" + "ｻ\006ｻ\007ｻ\010ｻ\011ｻ\012ｻ\013ｻ" + "\014ｻ\020ﾦ\021ｻ\022ｻ\023ｻ\024ｻ\025" + "ｻ\026ｻ\027ｻ\030ｻ\031ｻ\032ｻ\033ｻ" + "\042ｻ\043ｻ\001\002\000\070\005\111\013\103\016" + "\066\017\106\032\031\033\040\035\034\036\113\037\141" + "\040\142\041\145\044\063\045\062\046\065\047\115\050" + "\123\051\136\052\077\053\143\054\131\055\125\056\116" + "\057\104\060\140\061\067\062\060\063\127\001\002\000" + "\110\004\061\005\111\011\071\013\103\015\134\016\066" + "\017\106\021\070\031\075\032\031\033\040\034\057\035" + "\034\036\113\037\141\040\142\041\145\044\063\045\062" + "\046\065\047\115\050\123\051\136\052\077\053\143\054" + "\131\055\125\056\116\057\104\060\140\061\067\062\060" + "\063\127\064\132\065\072\001\002\000\054\002ﾙ\004" + "ﾙ\006ﾙ\007ﾙ\010ﾙ\012ﾙ\013ﾙ\014ﾙ" + "\021ﾙ\022ﾙ\023ﾙ\024ﾙ\025ﾙ\026ﾙ\027" + "ﾙ\030ﾙ\031ﾙ\032ﾙ\033ﾙ\042ﾙ\043ﾙ" + "\001\002\000\046\002ﾷ\007ﾷ\010ﾷ\012ﾷ\013" + "ﾷ\014ﾷ\022ﾷ\023ﾷ\024ﾷ\025ﾷ\026ﾷ" + "\027ﾷ\030ﾷ\031ﾷ\032ﾷ\033ﾷ\042ﾷ\043" + "ﾷ\001\002\000\054\002ﾗ\004ﾗ\006ﾗ\007ﾗ" + "\010ﾗ\012ﾗ\013ﾗ\014ﾗ\021ﾗ\022ﾗ\023" + "ﾗ\024ﾗ\025ﾗ\026ﾗ\027ﾗ\030ﾗ\031ﾗ" + "\032ﾗ\033ﾗ\042ﾗ\043ﾗ\001\002\000\110\004" + "\061\005\111\011\071\013\103\015\134\016\066\017\106" + "\021\070\031\075\032\031\033\040\034\057\035\034\036" + "\113\037\141\040\142\041\145\044\063\045\062\046\065" + "\047\115\050\123\051\136\052\077\053\143\054\131\055" + "\125\056\116\057\104\060\140\061\067\062\060\063\127" + "\064\132\065\072\001\002\000\016\002￙\007￙\012" + "￙\014￙\042￙\043\234\001\002\000\060\002ｿ" + "\004ｿ\006ｿ\007ｿ\010ｿ\011ｿ\012ｿ\013" + "ｿ\014ｿ\020ﾪ\021ｿ\022ｿ\023ｿ\024ｿ" + "\025ｿ\026ｿ\027ｿ\030ｿ\031ｿ\032ｿ\033" + "ｿ\042ｿ\043ｿ\001\002\000\062\013\103\032\031" + "\033\040\035\034\036\113\037\141\040\142\041\145\044" + "\063\045\062\046\065\047\036\050\037\051\044\052\170" + "\053\166\054\043\055\041\056\035\057\030\060\045\061" + "\021\062\012\063\042\001\002\000\004\020\236\001\002" + "\000\014\002ￚ\007ￚ\012ￚ\014ￚ\042\232\001" + "\002\000\054\002ﾈ\004ﾈ\006ﾈ\007ﾈ\010ﾈ" + "\012ﾈ\013ﾈ\014ﾈ\021ﾈ\022ﾈ\023ﾈ\024" + "ﾈ\025ﾈ\026ﾈ\027ﾈ\030ﾈ\031ﾈ\032ﾈ" + "\033ﾈ\042ﾈ\043ﾈ\001\002\000\060\002ｽ\004" + "ｽ\006ｽ\007ｽ\010ｽ\011ｽ\012ｽ\013ｽ" + "\014ｽ\020ﾨ\021ｽ\022ｽ\023ｽ\024ｽ\025" + "ｽ\026ｽ\027ｽ\030ｽ\031ｽ\032ｽ\033ｽ" + "\042ｽ\043ｽ\001\002\000\022\002ￗ\007ￗ\012" + "ￗ\014ￗ\022\216\023\217\042ￗ\043ￗ\001\002" + "\000\052\002ﾟ\004ﾟ\007ﾟ\010ﾟ\012ﾟ\013" + "ﾟ\014ﾟ\021ﾟ\022ﾟ\023ﾟ\024ﾟ\025ﾟ" + "\026ﾟ\027ﾟ\030ﾟ\031ﾟ\032ﾟ\033ﾟ\042" + "ﾟ\043ﾟ\001\002\000\054\002ﾴ\004ﾴ\006\055" + "\007ﾴ\010ﾴ\012ﾴ\013ﾴ\014ﾴ\021ﾴ\022" + "ﾴ\023ﾴ\024ﾴ\025ﾴ\026ﾴ\027ﾴ\030ﾴ" + "\031ﾴ\032ﾴ\033ﾴ\042ﾴ\043ﾴ\001\002\000" + "\046\002ﾽ\007ﾽ\010ﾽ\012ﾽ\013ﾽ\014ﾽ" + "\022ﾽ\023ﾽ\024ﾽ\025ﾽ\026ﾽ\027ﾽ\030" + "ﾽ\031ﾽ\032ﾽ\033ﾽ\042ﾽ\043ﾽ\001\002" + "\000\052\002ﾠ\004ﾠ\007ﾠ\010ﾠ\012ﾠ\013" + "ﾠ\014ﾠ\021ﾠ\022ﾠ\023ﾠ\024ﾠ\025ﾠ" + "\026ﾠ\027ﾠ\030ﾠ\031ﾠ\032ﾠ\033ﾠ\042" + "ﾠ\043ﾠ\001\002\000\036\002ￒ\007ￒ\012ￒ" + "\014ￒ\022ￒ\023ￒ\024ￒ\025ￒ\026ￒ\027" + "ￒ\030\211\031\212\042ￒ\043ￒ\001\002\000\056" + "\002ｵ\004ｵ\006ｵ\007ｵ\010ｵ\011ｵ\012" + "ｵ\013ｵ\014ｵ\021ｵ\022ｵ\023ｵ\024ｵ" + "\025ｵ\026ｵ\027ｵ\030ｵ\031ｵ\032ｵ\033" + "ｵ\042ｵ\043ｵ\001\002\000\044\002ￊ\007ￊ" + "\012ￊ\013ￊ\014ￊ\022ￊ\023ￊ\024ￊ\025" + "ￊ\026ￊ\027ￊ\030ￊ\031ￊ\032ￊ\033ￊ" + "\042ￊ\043ￊ\001\002\000\060\002ｷ\004ｷ\006" + "ｷ\007ｷ\010ｷ\011ｷ\012ｷ\013ｷ\014ｷ" + "\020ﾢ\021ｷ\022ｷ\023ｷ\024ｷ\025ｷ\026" + "ｷ\027ｷ\030ｷ\031ｷ\032ｷ\033ｷ\042ｷ" + "\043ｷ\001\002\000\060\002ｾ\004ｾ\006ｾ\007" + "ｾ\010ｾ\011ｾ\012ｾ\013ｾ\014ｾ\020ﾩ" + "\021ｾ\022ｾ\023ｾ\024ｾ\025ｾ\026ｾ\027" + "ｾ\030ｾ\031ｾ\032ｾ\033ｾ\042ｾ\043ｾ" + "\001\002\000\004\011\201\001\002\000\052\002ﾼ\004" + "ﾼ\007ﾼ\010ﾼ\012ﾼ\013ﾼ\014ﾼ\021ﾼ" + "\022ﾼ\023ﾼ\024ﾼ\025ﾼ\026ﾼ\027ﾼ\030" + "ﾼ\031ﾼ\032ﾼ\033ﾼ\042ﾼ\043ﾼ\001\002" + "\000\046\002ￂ\007ￂ\010ￂ\012ￂ\013ￂ\014" + "ￂ\022ￂ\023ￂ\024ￂ\025ￂ\026ￂ\027ￂ" + "\030ￂ\031ￂ\032ￂ\033ￂ\042ￂ\043ￂ\001" + "\002\000\054\002ﾞ\004ﾞ\006\055\007ﾞ\010ﾞ" + "\012ﾞ\013ﾞ\014ﾞ\021ﾞ\022ﾞ\023ﾞ\024" + "ﾞ\025ﾞ\026ﾞ\027ﾞ\030ﾞ\031ﾞ\032ﾞ" + "\033ﾞ\042ﾞ\043ﾞ\001\002\000\060\002ｶ\004" + "ｶ\006ｶ\007ｶ\010ｶ\011ｶ\012ｶ\013ｶ" + "\014ｶ\020ﾡ\021ｶ\022ｶ\023ｶ\024ｶ\025" + "ｶ\026ｶ\027ｶ\030ｶ\031ｶ\032ｶ\033ｶ" + "\042ｶ\043ｶ\001\002\000\046\002ￄ\007ￄ\010" + "\176\012ￄ\013ￄ\014ￄ\022ￄ\023ￄ\024ￄ" + "\025ￄ\026ￄ\027ￄ\030ￄ\031ￄ\032ￄ\033" + "ￄ\042ￄ\043ￄ\001\002\000\060\002ﾁ\004ﾁ" + "\006ﾁ\007ﾁ\010ﾁ\011ﾁ\012ﾁ\013ﾁ\014" + "ﾁ\020ﾬ\021ﾁ\022ﾁ\023ﾁ\024ﾁ\025ﾁ" + "\026ﾁ\027ﾁ\030ﾁ\031ﾁ\032ﾁ\033ﾁ\042" + "ﾁ\043ﾁ\001\002\000\054\002ﾜ\004ﾜ\006ﾜ" + "\007ﾜ\010ﾜ\012ﾜ\013ﾜ\014ﾜ\021ﾜ\022" + "ﾜ\023ﾜ\024ﾜ\025ﾜ\026ﾜ\027ﾜ\030ﾜ" + "\031ﾜ\032ﾜ\033ﾜ\042ﾜ\043ﾜ\001\002\000" + "\060\002ｸ\004ｸ\006ｸ\007ｸ\010ｸ\011ｸ" + "\012ｸ\013ｸ\014ｸ\020ﾣ\021ｸ\022ｸ\023" + "ｸ\024ｸ\025ｸ\026ｸ\027ｸ\030ｸ\031ｸ" + "\032ｸ\033ｸ\042ｸ\043ｸ\001\002\000\052\002" + "￁\004\173\007￁\010￁\012￁\013￁\014￁" + "\021\172\022￁\023￁\024￁\025￁\026￁\027" + "￁\030￁\031￁\032￁\033￁\042￁\043￁" + "\001\002\000\060\002ﾂ\004ﾂ\006ﾂ\007ﾂ\010" + "ﾂ\011ﾂ\012ﾂ\013ﾂ\014ﾂ\020ﾭ\021ﾂ" + "\022ﾂ\023ﾂ\024ﾂ\025ﾂ\026ﾂ\027ﾂ\030" + "ﾂ\031ﾂ\032ﾂ\033ﾂ\042ﾂ\043ﾂ\001\002" + "\000\054\002ﾘ\004ﾘ\006ﾘ\007ﾘ\010ﾘ\012" + "ﾘ\013ﾘ\014ﾘ\021ﾘ\022ﾘ\023ﾘ\024ﾘ" + "\025ﾘ\026ﾘ\027ﾘ\030ﾘ\031ﾘ\032ﾘ\033" + "ﾘ\042ﾘ\043ﾘ\001\002\000\004\007\171\001\002" + "\000\046\032\031\033\040\035\034\036\113\037\141\047" + "\036\050\037\051\044\052\170\053\166\054\043\055\041" + "\056\035\057\030\060\045\061\021\062\012\063\042\001" + "\002\000\052\002ﾺ\004ﾺ\007ﾺ\010ﾺ\012ﾺ" + "\013ﾺ\014ﾺ\021ﾺ\022ﾺ\023ﾺ\024ﾺ\025" + "ﾺ\026ﾺ\027ﾺ\030ﾺ\031ﾺ\032ﾺ\033ﾺ" + "\042ﾺ\043ﾺ\001\002\000\060\002ｹ\004ｹ\006" + "ｹ\007ｹ\010ｹ\011ｹ\012ｹ\013ｹ\014ｹ" + "\020ﾤ\021ｹ\022ｹ\023ｹ\024ｹ\025ｹ\026" + "ｹ\027ｹ\030ｹ\031ｹ\032ｹ\033ｹ\042ｹ" + "\043ｹ\001\002\000\052\002ﾰ\004ﾰ\007ﾰ\010" + "ﾰ\012ﾰ\013ﾰ\014ﾰ\021ﾰ\022ﾰ\023ﾰ" + "\024ﾰ\025ﾰ\026ﾰ\027ﾰ\030ﾰ\031ﾰ\032" + "ﾰ\033ﾰ\042ﾰ\043ﾰ\001\002\000\060\002ｼ" + "\004ｼ\006ｼ\007ｼ\010ｼ\011ｼ\012ｼ\013" + "ｼ\014ｼ\020ﾧ\021ｼ\022ｼ\023ｼ\024ｼ" + "\025ｼ\026ｼ\027ｼ\030ｼ\031ｼ\032ｼ\033" + "ｼ\042ｼ\043ｼ\001\002\000\056\002ﾃ\004ﾃ" + "\006ﾃ\007ﾃ\010ﾃ\011ﾃ\012ﾃ\013ﾃ\014" + "ﾃ\021ﾃ\022ﾃ\023ﾃ\024ﾃ\025ﾃ\026ﾃ" + "\027ﾃ\030ﾃ\031ﾃ\032ﾃ\033ﾃ\042ﾃ\043" + "ﾃ\001\002\000\054\002ﾌ\004ﾌ\006ﾌ\007ﾌ" + "\010ﾌ\012ﾌ\013ﾌ\014ﾌ\021ﾌ\022ﾌ\023" + "ﾌ\024ﾌ\025ﾌ\026ﾌ\027ﾌ\030ﾌ\031ﾌ" + "\032ﾌ\033ﾌ\042ﾌ\043ﾌ\001\002\000\060\002" + "ﾀ\004ﾀ\006ﾀ\007ﾀ\010ﾀ\011ﾀ\012ﾀ" + "\013ﾀ\014ﾀ\020ﾫ\021ﾀ\022ﾀ\023ﾀ\024" + "ﾀ\025ﾀ\026ﾀ\027ﾀ\030ﾀ\031ﾀ\032ﾀ" + "\033ﾀ\042ﾀ\043ﾀ\001\002\000\044\002ￆ\007" + "ￆ\012ￆ\013ￆ\014ￆ\022ￆ\023ￆ\024ￆ" + "\025ￆ\026ￆ\027ￆ\030ￆ\031ￆ\032ￆ\033" + "ￆ\042ￆ\043ￆ\001\002\000\054\002ﾍ\004ﾍ" + "\006ﾍ\007ﾍ\010ﾍ\012ﾍ\013ﾍ\014ﾍ\021" + "ﾍ\022ﾍ\023ﾍ\024ﾍ\025ﾍ\026ﾍ\027ﾍ" + "\030ﾍ\031ﾍ\032ﾍ\033ﾍ\042ﾍ\043ﾍ\001" + "\002\000\044\002ￍ\007ￍ\012ￍ\013\160\014ￍ" + "\022ￍ\023ￍ\024ￍ\025ￍ\026ￍ\027ￍ\030" + "ￍ\031ￍ\032\161\033\157\042ￍ\043ￍ\001\002" + "\000\052\002ﾾ\004\153\007ﾾ\010ﾾ\012ﾾ\013" + "ﾾ\014ﾾ\021\152\022ﾾ\023ﾾ\024ﾾ\025ﾾ" + "\026ﾾ\027ﾾ\030ﾾ\031ﾾ\032ﾾ\033ﾾ\042" + "ﾾ\043ﾾ\001\002\000\054\002ﾎ\004ﾎ\006ﾎ" + "\007ﾎ\010ﾎ\012ﾎ\013ﾎ\014ﾎ\021ﾎ\022" + "ﾎ\023ﾎ\024ﾎ\025ﾎ\026ﾎ\027ﾎ\030ﾎ" + "\031ﾎ\032ﾎ\033ﾎ\042ﾎ\043ﾎ\001\002\000" + "\056\002ﾇ\004ﾇ\006ﾇ\007ﾇ\010ﾇ\011ﾑ" + "\012ﾇ\013ﾇ\014ﾇ\021ﾇ\022ﾇ\023ﾇ\024" + "ﾇ\025ﾇ\026ﾇ\027ﾇ\030ﾇ\031ﾇ\032ﾇ" + "\033ﾇ\042ﾇ\043ﾇ\001\002\000\070\005\111\013" + "\103\016\066\017\106\032\031\033\040\035\034\036\113" + "\037\141\040\142\041\145\044\063\045\062\046\065\047" + "\115\050\123\051\136\052\077\053\143\054\131\055\125" + "\056\116\057\104\060\140\061\067\062\060\063\127\001" + "\002\000\070\005\111\013\103\016\066\017\106\032\031" + "\033\040\035\034\036\113\037\141\040\142\041\145\044" + "\063\045\062\046\065\047\115\050\123\051\136\052\077" + "\053\143\054\131\055\125\056\116\057\104\060\140\061" + "\067\062\060\063\127\001\002\000\054\002ﾇ\004ﾇ" + "\006ﾇ\007ﾇ\010ﾇ\012ﾇ\013ﾇ\014ﾇ\021" + "ﾇ\022ﾇ\023ﾇ\024ﾇ\025ﾇ\026ﾇ\027ﾇ" + "\030ﾇ\031ﾇ\032ﾇ\033ﾇ\042ﾇ\043ﾇ\001" + "\002\000\052\002ﾻ\004ﾻ\007ﾻ\010ﾻ\012ﾻ" + "\013ﾻ\014ﾻ\021ﾻ\022ﾻ\023ﾻ\024ﾻ\025" + "ﾻ\026ﾻ\027ﾻ\030ﾻ\031ﾻ\032ﾻ\033ﾻ" + "\042ﾻ\043ﾻ\001\002\000\052\002ﾶ\004ﾶ\007" + "ﾶ\010ﾶ\012ﾶ\013ﾶ\014ﾶ\021ﾶ\022ﾶ" + "\023ﾶ\024ﾶ\025ﾶ\026ﾶ\027ﾶ\030ﾶ\031" + "ﾶ\032ﾶ\033ﾶ\042ﾶ\043ﾶ\001\002\000\110" + "\004\061\005\111\011\071\013\103\015\134\016\066\017" + "\106\021\070\031\075\032\031\033\040\034\057\035\034" + "\036\113\037\141\040\142\041\145\044\063\045\062\046" + "\065\047\115\050\123\051\136\052\077\053\143\054\131" + "\055\125\056\116\057\104\060\140\061\067\062\060\063" + "\127\064\132\065\072\001\002\000\110\004\061\005\111" + "\011\071\013\103\015\134\016\066\017\106\021\070\031" + "\075\032\031\033\040\034\057\035\034\036\113\037\141" + "\040\142\041\145\044\063\045\062\046\065\047\115\050" + "\123\051\136\052\077\053\143\054\131\055\125\056\116" + "\057\104\060\140\061\067\062\060\063\127\064\132\065" + "\072\001\002\000\110\004\061\005\111\011\071\013\103" + "\015\134\016\066\017\106\021\070\031\075\032\031\033" + "\040\034\057\035\034\036\113\037\141\040\142\041\145" + "\044\063\045\062\046\065\047\115\050\123\051\136\052" + "\077\053\143\054\131\055\125\056\116\057\104\060\140" + "\061\067\062\060\063\127\064\132\065\072\001\002\000" + "\044\002￈\007￈\012￈\013￈\014￈\022￈" + "\023￈\024￈\025￈\026￈\027￈\030￈\031" + "￈\032￈\033￈\042￈\043￈\001\002\000\044" + "\002￉\007￉\012￉\013￉\014￉\022￉\023" + "￉\024￉\025￉\026￉\027￉\030￉\031￉" + "\032￉\033￉\042￉\043￉\001\002\000\044\002" + "ￇ\007ￇ\012ￇ\013ￇ\014ￇ\022ￇ\023ￇ" + "\024ￇ\025ￇ\026ￇ\027ￇ\030ￇ\031ￇ\032" + "ￇ\033ￇ\042ￇ\043ￇ\001\002\000\054\002ﾐ" + "\004ﾐ\006ﾐ\007ﾐ\010ﾐ\012ﾐ\013ﾐ\014" + "ﾐ\021ﾐ\022ﾐ\023ﾐ\024ﾐ\025ﾐ\026ﾐ" + "\027ﾐ\030ﾐ\031ﾐ\032ﾐ\033ﾐ\042ﾐ\043" + "ﾐ\001\002\000\054\002ﾀ\004ﾀ\006ﾀ\007ﾀ" + "\010ﾀ\012ﾀ\013ﾀ\014ﾀ\021ﾀ\022ﾀ\023" + "ﾀ\024ﾀ\025ﾀ\026ﾀ\027ﾀ\030ﾀ\031ﾀ" + "\032ﾀ\033ﾀ\042ﾀ\043ﾀ\001\002\000\054\002" + "ﾖ\004ﾖ\006ﾖ\007ﾖ\010ﾖ\012ﾖ\013ﾖ" + "\014ﾖ\021ﾖ\022ﾖ\023ﾖ\024ﾖ\025ﾖ\026" + "ﾖ\027ﾖ\030ﾖ\031ﾖ\032ﾖ\033ﾖ\042ﾖ" + "\043ﾖ\001\002\000\054\002ｿ\004ｿ\006ｿ\007" + "ｿ\010ｿ\012ｿ\013ｿ\014ｿ\021ｿ\022ｿ" + "\023ｿ\024ｿ\025ｿ\026ｿ\027ｿ\030ｿ\031" + "ｿ\032ｿ\033ｿ\042ｿ\043ｿ\001\002\000\054" + "\002ￛ\004ￛ\006ￛ\007ￛ\010ￛ\012ￛ\013" + "ￛ\014ￛ\021ￛ\022ￛ\023ￛ\024ￛ\025ￛ" + "\026ￛ\027ￛ\030ￛ\031ￛ\032ￛ\033ￛ\042" + "ￛ\043ￛ\001\002\000\070\005\111\013\103\016\066" + "\017\106\032\031\033\040\035\034\036\113\037\141\040" + "\142\041\145\044\063\045\062\046\065\047\115\050\123" + "\051\136\052\077\053\143\054\131\055\125\056\116\057" + "\104\060\140\061\067\062\060\063\127\001\002\000\070" + "\005\111\013\103\016\066\017\106\032\031\033\040\035" + "\034\036\113\037\141\040\142\041\145\044\063\045\062" + "\046\065\047\115\050\123\051\136\052\077\053\143\054" + "\131\055\125\056\116\057\104\060\140\061\067\062\060" + "\063\127\001\002\000\052\002￀\004\153\007￀\010" + "￀\012￀\013￀\014￀\021\152\022￀\023￀" + "\024￀\025￀\026￀\027￀\030￀\031￀\032" + "￀\033￀\042￀\043￀\001\002\000\052\002﾿" + "\004\153\007﾿\010﾿\012﾿\013﾿\014﾿\021" + "\152\022﾿\023﾿\024﾿\025﾿\026﾿\027﾿" + "\030﾿\031﾿\032﾿\033﾿\042﾿\043﾿\001" + "\002\000\106\004\061\005\111\011\071\013\103\015\134" + "\016\066\017\106\021\070\032\031\033\040\034\057\035" + "\034\036\113\037\141\040\142\041\145\044\063\045\062" + "\046\065\047\115\050\123\051\136\052\077\053\143\054" + "\131\055\125\056\116\057\104\060\140\061\067\062\060" + "\063\127\064\132\065\072\001\002\000\044\002ￃ\007" + "ￃ\012ￃ\013ￃ\014ￃ\022ￃ\023ￃ\024ￃ" + "\025ￃ\026ￃ\027ￃ\030ￃ\031ￃ\032ￃ\033" + "ￃ\042ￃ\043ￃ\001\002\000\052\002ﾝ\004ﾝ" + "\007ﾝ\010ﾝ\012ﾝ\013ﾝ\014ﾝ\021ﾝ\022" + "ﾝ\023ﾝ\024ﾝ\025ﾝ\026ﾝ\027ﾝ\030ﾝ" + "\031ﾝ\032ﾝ\033ﾝ\042ﾝ\043ﾝ\001\002\000" + "\112\004\061\005\111\011\071\012\202\013\103\015\134" + "\016\066\017\106\021\070\031\075\032\031\033\040\034" + "\057\035\034\036\113\037\141\040\142\041\145\044\063" + "\045\062\046\065\047\115\050\123\051\136\052\077\053" + "\143\054\131\055\125\056\116\057\104\060\140\061\067" + "\062\060\063\127\064\132\065\072\001\002\000\054\002" + "ﾕ\004ﾕ\006ﾕ\007ﾕ\010ﾕ\012ﾕ\013ﾕ" + "\014ﾕ\021ﾕ\022ﾕ\023ﾕ\024ﾕ\025ﾕ\026" + "ﾕ\027ﾕ\030ﾕ\031ﾕ\032ﾕ\033ﾕ\042ﾕ" + "\043ﾕ\001\002\000\006\012ﾓ\014\207\001\002\000" + "\006\012ﾏ\014ﾏ\001\002\000\004\012\206\001\002" + "\000\054\002ﾔ\004ﾔ\006ﾔ\007ﾔ\010ﾔ\012" + "ﾔ\013ﾔ\014ﾔ\021ﾔ\022ﾔ\023ﾔ\024ﾔ" + "\025ﾔ\026ﾔ\027ﾔ\030ﾔ\031ﾔ\032ﾔ\033" + "ﾔ\042ﾔ\043ﾔ\001\002\000\110\004\061\005\111" + "\011\071\013\103\015\134\016\066\017\106\021\070\031" + "\075\032\031\033\040\034\057\035\034\036\113\037\141" + "\040\142\041\145\044\063\045\062\046\065\047\115\050" + "\123\051\136\052\077\053\143\054\131\055\125\056\116" + "\057\104\060\140\061\067\062\060\063\127\064\132\065" + "\072\001\002\000\004\012ﾒ\001\002\000\110\004\061" + "\005\111\011\071\013\103\015\134\016\066\017\106\021" + "\070\031\075\032\031\033\040\034\057\035\034\036\113" + "\037\141\040\142\041\145\044\063\045\062\046\065\047" + "\115\050\123\051\136\052\077\053\143\054\131\055\125" + "\056\116\057\104\060\140\061\067\062\060\063\127\064" + "\132\065\072\001\002\000\110\004\061\005\111\011\071" + "\013\103\015\134\016\066\017\106\021\070\031\075\032" + "\031\033\040\034\057\035\034\036\113\037\141\040\142" + "\041\145\044\063\045\062\046\065\047\115\050\123\051" + "\136\052\077\053\143\054\131\055\125\056\116\057\104" + "\060\140\061\067\062\060\063\127\064\132\065\072\001" + "\002\000\044\002ￋ\007ￋ\012ￋ\013\160\014ￋ" + "\022ￋ\023ￋ\024ￋ\025ￋ\026ￋ\027ￋ\030" + "ￋ\031ￋ\032\161\033\157\042ￋ\043ￋ\001\002" + "\000\044\002ￌ\007ￌ\012ￌ\013\160\014ￌ\022" + "ￌ\023ￌ\024ￌ\025ￌ\026ￌ\027ￌ\030ￌ" + "\031ￌ\032\161\033\157\042ￌ\043ￌ\001\002\000" + "\052\002ﾳ\004ﾳ\007ﾳ\010ﾳ\012ﾳ\013ﾳ" + "\014ﾳ\021ﾳ\022ﾳ\023ﾳ\024ﾳ\025ﾳ\026" + "ﾳ\027ﾳ\030ﾳ\031ﾳ\032ﾳ\033ﾳ\042ﾳ" + "\043ﾳ\001\002\000\110\004\061\005\111\011\071\013" + "\103\015\134\016\066\017\106\021\070\031\075\032\031" + "\033\040\034\057\035\034\036\113\037\141\040\142\041" + "\145\044\063\045\062\046\065\047\115\050\123\051\136" + "\052\077\053\143\054\131\055\125\056\116\057\104\060" + "\140\061\067\062\060\063\127\064\132\065\072\001\002" + "\000\110\004\061\005\111\011\071\013\103\015\134\016" + "\066\017\106\021\070\031\075\032\031\033\040\034\057" + "\035\034\036\113\037\141\040\142\041\145\044\063\045" + "\062\046\065\047\115\050\123\051\136\052\077\053\143" + "\054\131\055\125\056\116\057\104\060\140\061\067\062" + "\060\063\127\064\132\065\072\001\002\000\032\002ￓ" + "\007ￓ\012ￓ\014ￓ\022ￓ\023ￓ\024\221\025" + "\222\026\223\027\224\042ￓ\043ￓ\001\002\000\110" + "\004\061\005\111\011\071\013\103\015\134\016\066\017" + "\106\021\070\031\075\032\031\033\040\034\057\035\034" + "\036\113\037\141\040\142\041\145\044\063\045\062\046" + "\065\047\115\050\123\051\136\052\077\053\143\054\131" + "\055\125\056\116\057\104\060\140\061\067\062\060\063" + "\127\064\132\065\072\001\002\000\110\004\061\005\111" + "\011\071\013\103\015\134\016\066\017\106\021\070\031" + "\075\032\031\033\040\034\057\035\034\036\113\037\141" + "\040\142\041\145\044\063\045\062\046\065\047\115\050" + "\123\051\136\052\077\053\143\054\131\055\125\056\116" + "\057\104\060\140\061\067\062\060\063\127\064\132\065" + "\072\001\002\000\110\004\061\005\111\011\071\013\103" + "\015\134\016\066\017\106\021\070\031\075\032\031\033" + "\040\034\057\035\034\036\113\037\141\040\142\041\145" + "\044\063\045\062\046\065\047\115\050\123\051\136\052" + "\077\053\143\054\131\055\125\056\116\057\104\060\140" + "\061\067\062\060\063\127\064\132\065\072\001\002\000" + "\110\004\061\005\111\011\071\013\103\015\134\016\066" + "\017\106\021\070\031\075\032\031\033\040\034\057\035" + "\034\036\113\037\141\040\142\041\145\044\063\045\062" + "\046\065\047\115\050\123\051\136\052\077\053\143\054" + "\131\055\125\056\116\057\104\060\140\061\067\062\060" + "\063\127\064\132\065\072\001\002\000\036\002ￎ\007" + "ￎ\012ￎ\014ￎ\022ￎ\023ￎ\024ￎ\025ￎ" + "\026ￎ\027ￎ\030\211\031\212\042ￎ\043ￎ\001" + "\002\000\036\002ￏ\007ￏ\012ￏ\014ￏ\022ￏ" + "\023ￏ\024ￏ\025ￏ\026ￏ\027ￏ\030\211\031" + "\212\042ￏ\043ￏ\001\002\000\036\002￐\007￐" + "\012￐\014￐\022￐\023￐\024￐\025￐\026" + "￐\027￐\030\211\031\212\042￐\043￐\001\002" + "\000\036\002￑\007￑\012￑\014￑\022￑\023" + "￑\024￑\025￑\026￑\027￑\030\211\031\212" + "\042￑\043￑\001\002\000\032\002ￔ\007ￔ\012" + "ￔ\014ￔ\022ￔ\023ￔ\024\221\025\222\026\223" + "\027\224\042ￔ\043ￔ\001\002\000\110\004\061\005" + "\111\011\071\013\103\015\134\016\066\017\106\021\070" + "\031\075\032\031\033\040\034\057\035\034\036\113\037" + "\141\040\142\041\145\044\063\045\062\046\065\047\115" + "\050\123\051\136\052\077\053\143\054\131\055\125\056" + "\116\057\104\060\140\061\067\062\060\063\127\064\132" + "\065\072\001\002\000\016\002￘\007￘\012￘\014" + "￘\042￘\043\234\001\002\000\110\004\061\005\111" + "\011\071\013\103\015\134\016\066\017\106\021\070\031" + "\075\032\031\033\040\034\057\035\034\036\113\037\141" + "\040\142\041\145\044\063\045\062\046\065\047\115\050" + "\123\051\136\052\077\053\143\054\131\055\125\056\116" + "\057\104\060\140\061\067\062\060\063\127\064\132\065" + "\072\001\002\000\022\002ￖ\007ￖ\012ￖ\014ￖ" + "\022\216\023\217\042ￖ\043ￖ\001\002\000\062\013" + "ﾯ\032ﾯ\033ﾯ\035ﾯ\036ﾯ\037ﾯ\040ﾯ" + "\041ﾯ\044ﾯ\045ﾯ\046ﾯ\047ﾯ\050ﾯ\051" + "ﾯ\052ﾯ\053ﾯ\054ﾯ\055ﾯ\056ﾯ\057ﾯ" + "\060ﾯ\061ﾯ\062ﾯ\063ﾯ\001\002\000\054\002" + "ﾱ\004ﾱ\006\055\007ﾱ\010ﾱ\012ﾱ\013ﾱ" + "\014ﾱ\021ﾱ\022ﾱ\023ﾱ\024ﾱ\025ﾱ\026" + "ﾱ\027ﾱ\030ﾱ\031ﾱ\032ﾱ\033ﾱ\042ﾱ" + "\043ﾱ\001\002\000\052\002ﾲ\004ﾲ\007ﾲ\010" + "ﾲ\012ﾲ\013ﾲ\014ﾲ\021ﾲ\022ﾲ\023ﾲ" + "\024ﾲ\025ﾲ\026ﾲ\027ﾲ\030ﾲ\031ﾲ\032" + "ﾲ\033ﾲ\042ﾲ\043ﾲ\001\002\000\044\002ￅ" + "\007ￅ\012ￅ\013ￅ\014ￅ\022ￅ\023ￅ\024" + "ￅ\025ￅ\026ￅ\027ￅ\030ￅ\031ￅ\032ￅ" + "\033ￅ\042ￅ\043ￅ\001\002\000\004\012\243\001" + "\002\000\054\002ﾛ\004ﾛ\006ﾛ\007ﾛ\010ﾛ" + "\012ﾛ\013ﾛ\014ﾛ\021ﾛ\022ﾛ\023ﾛ\024" + "ﾛ\025ﾛ\026ﾛ\027ﾛ\030ﾛ\031ﾛ\032ﾛ" + "\033ﾛ\042ﾛ\043ﾛ\001\002\000\052\002ﾵ\004" + "\153\007ﾵ\010ﾵ\012ﾵ\013ﾵ\014ﾵ\021\152" + "\022ﾵ\023ﾵ\024ﾵ\025ﾵ\026ﾵ\027ﾵ\030" + "ﾵ\031ﾵ\032ﾵ\033ﾵ\042ﾵ\043ﾵ\001\002" + "\000\004\034\246\001\002\000\004\012\247\001\002\000" + "\054\002ﾊ\004ﾊ\006ﾊ\007ﾊ\010ﾊ\012ﾊ" + "\013ﾊ\014ﾊ\021ﾊ\022ﾊ\023ﾊ\024ﾊ\025" + "ﾊ\026ﾊ\027ﾊ\030ﾊ\031ﾊ\032ﾊ\033ﾊ" + "\042ﾊ\043ﾊ\001\002\000\052\002ﾸ\004\153\007" + "ﾸ\010ﾸ\012ﾸ\013ﾸ\014ﾸ\021\152\022ﾸ" + "\023ﾸ\024ﾸ\025ﾸ\026ﾸ\027ﾸ\030ﾸ\031" + "ﾸ\032ﾸ\033ﾸ\042ﾸ\043ﾸ\001\002\000\052" + "\002ￜ\004ￜ\007ￜ\010ￜ\012ￜ\013ￜ\014" + "ￜ\021ￜ\022ￜ\023ￜ\024ￜ\025ￜ\026ￜ" + "\027ￜ\030ￜ\031ￜ\032ￜ\033ￜ\042ￜ\043" + "ￜ\001\002\000\062\013￞\032￞\033￞\035￞" + "\036￞\037￞\040￞\041￞\044￞\045￞\046" + "￞\047￞\050￞\051￞\052￞\053￞\054￞" + "\055￞\056￞\057￞\060￞\061￞\062￞\063" + "￞\001\002\000\004\034\254\001\002\000\004\014\255" + "\001\002\000\004\034\256\001\002\000\004\012\257\001" + "\002\000\012\002￴\004￴\010￴\021￴\001\002" + "\000\004\034\261\001\002\000\004\012\262\001\002\000" + "\012\002￵\004￵\010￵\021￵\001\002\000\012" + "\002￬\004￬\010￬\021￬\001\002\000\062\013" + "￟\032￟\033￟\035￟\036￟\037￟\040￟" + "\041￟\044￟\045￟\046￟\047￟\050￟\051" + "￟\052￟\053￟\054￟\055￟\056￟\057￟" + "\060￟\061￟\062￟\063￟\001\002\000\064\013" + "\027\016\020\032\031\033\040\035\034\036\113\037\141" + "\040\047\041\051\044\015\045\014\046\016\047\036\050" + "\037\051\044\052\025\053\050\054\043\055\041\056\035" + "\057\030\060\045\061\021\062\012\063\042\001\002\000" + "\064\013\027\016\020\032\031\033\040\035\034\036\113" + "\037\141\040\047\041\051\044\015\045\014\046\016\047" + "\036\050\037\051\044\052\025\053\050\054\043\055\041" + "\056\035\057\030\060\045\061\021\062\012\063\042\001" + "\002\000\006\002￱\010￱\001\002\000\006\002￰" + "\010￰\001\002\000\006\002￷\010￷\001\002\000" + "\014\002￩\004￩\006\055\010￩\021￩\001\002" + "\000\014\002￫\004￫\006\055\010￫\021￫\001" + "\002\000\012\002￪\004￪\010￪\021￪\001\002" + "\000\012\002￨\004￨\010￨\021￨\001\002\000" + "\064\013\027\016\020\032\031\033\040\035\034\036\113" + "\037\141\040\047\041\051\044\015\045\014\046\016\047" + "\036\050\037\051\044\052\025\053\050\054\043\055\041" + "\056\035\057\030\060\045\061\021\062\012\063\042\001" + "\002\000\064\013\027\016\020\032\031\033\040\035\034" + "\036\113\037\141\040\047\041\051\044\015\045\014\046" + "\016\047\036\050\037\051\044\052\025\053\050\054\043" + "\055\041\056\035\057\030\060\045\061\021\062\012\063" + "\042\001\002\000\006\002￹\010￹\001\002\000\006" + "\002￸\010￸\001\002\000\004\034\303\001\002\000" + "\004\012\304\001\002\000\014\002￳\004￳\006￳" + "\010￳\021￳\001\002\000\006\002￻\010￻\001" + "\002\000\070\004\013\013\027\016\020\021\023\032\031" + "\033\040\035\034\036\033\037\046\040\047\041\051\044" + "\015\045\014\046\016\047\036\050\037\051\044\052\025" + "\053\050\054\043\055\041\056\035\057\030\060\045\061" + "\021\062\012\063\042\001\002\000\004\002�\001\002" + "\000\004\002￿\001\002\000\004\002\001\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\307\000\004\003\003\001\001\000\002\001\001\000" + "\070\004\307\006\120\010\127\011\117\012\101\013\075" + "\014\104\015\063\016\111\017\145\020\113\021\125\022" + "\073\023\121\024\143\025\123\026\136\027\146\030\134" + "\031\107\032\072\033\106\034\147\047\150\050\116\052" + "\100\053\077\001\001\000\026\035\016\036\007\037\006" + "\040\031\041\025\042\023\043\052\044\010\047\051\054" + "\021\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\020\040\031\041\304\042" + "\023\043\052\044\010\047\051\054\021\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\012\040\271" + "\043\272\044\010\047\051\001\001\000\020\040\031\041" + "\270\042\023\043\052\044\010\047\051\054\021\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\006" + "\007\053\045\262\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\006\007\053\045\055\001\001" + "\000\006\007\053\045\250\001\001\000\070\004\132\006" + "\120\010\127\011\117\012\101\013\075\014\104\015\063" + "\016\111\017\145\020\113\021\125\022\073\023\121\024" + "\143\025\123\026\136\027\146\030\134\031\107\032\072" + "\033\106\034\147\047\150\050\116\052\100\053\077\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\024\011\117\026\136\027\247\030\134\033\106\034" + "\147\047\153\052\100\053\077\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\024\011\117\026\136" + "\027\243\030\134\033\106\034\147\047\153\052\100\053" + "\077\001\001\000\070\004\241\006\120\010\127\011\117" + "\012\101\013\075\014\104\015\063\016\111\017\145\020" + "\113\021\125\022\073\023\121\024\143\025\123\026\136" + "\027\146\030\134\031\107\032\072\033\106\034\147\047" + "\150\050\116\052\100\053\077\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\052\006\120\010" + "\127\011\117\020\240\021\125\022\073\023\121\024\143" + "\025\123\026\136\027\146\030\134\031\107\032\072\033" + "\106\034\147\047\150\050\116\052\100\053\077\001\001" + "\000\002\001\001\000\002\001\001\000\010\033\236\034" + "\147\047\153\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\006\007\053\045\214\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\006\007\053\045\177\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\006\047\164\051\166\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\020\011\155\026\136\033\106\034\147\047\153\052\100" + "\053\077\001\001\000\020\011\154\026\136\033\106\034" + "\147\047\153\052\100\053\077\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\052\006\120\010" + "\127\011\117\020\163\021\125\022\073\023\121\024\143" + "\025\123\026\136\027\146\030\134\031\107\032\072\033" + "\106\034\147\047\150\050\116\052\100\053\077\001\001" + "\000\052\006\120\010\127\011\117\020\162\021\125\022" + "\073\023\121\024\143\025\123\026\136\027\146\030\134" + "\031\107\032\072\033\106\034\147\047\150\050\116\052" + "\100\053\077\001\001\000\052\006\120\010\127\011\117" + "\020\161\021\125\022\073\023\121\024\143\025\123\026" + "\136\027\146\030\134\031\107\032\072\033\106\034\147" + "\047\150\050\116\052\100\053\077\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\024\011\117\026\136\027\174\030\134" + "\033\106\034\147\047\153\052\100\053\077\001\001\000" + "\024\011\117\026\136\027\173\030\134\033\106\034\147" + "\047\153\052\100\053\077\001\001\000\002\001\001\000" + "\002\001\001\000\050\006\120\010\127\011\117\021\125" + "\022\073\023\121\024\176\025\123\026\136\027\146\030" + "\134\031\107\032\072\033\106\034\147\047\150\050\116" + "\052\100\053\077\001\001\000\002\001\001\000\002\001" + "\001\000\074\004\203\005\202\006\120\010\127\011\117" + "\012\101\013\075\014\104\015\063\016\111\017\145\020" + "\113\021\125\022\073\023\121\024\143\025\123\026\136" + "\027\146\030\134\031\107\032\072\033\106\034\147\046" + "\204\047\150\050\116\052\100\053\077\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\074\004\203\005\202\006\120" + "\010\127\011\117\012\101\013\075\014\104\015\063\016" + "\111\017\145\020\113\021\125\022\073\023\121\024\143" + "\025\123\026\136\027\146\030\134\031\107\032\072\033" + "\106\034\147\046\207\047\150\050\116\052\100\053\077" + "\001\001\000\002\001\001\000\054\006\120\010\127\011" + "\117\017\213\020\113\021\125\022\073\023\121\024\143" + "\025\123\026\136\027\146\030\134\031\107\032\072\033" + "\106\034\147\047\150\050\116\052\100\053\077\001\001" + "\000\054\006\120\010\127\011\117\017\212\020\113\021" + "\125\022\073\023\121\024\143\025\123\026\136\027\146" + "\030\134\031\107\032\072\033\106\034\147\047\150\050" + "\116\052\100\053\077\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\060\006\120\010\127\011" + "\117\015\230\016\111\017\145\020\113\021\125\022\073" + "\023\121\024\143\025\123\026\136\027\146\030\134\031" + "\107\032\072\033\106\034\147\047\150\050\116\052\100" + "\053\077\001\001\000\060\006\120\010\127\011\117\015" + "\217\016\111\017\145\020\113\021\125\022\073\023\121" + "\024\143\025\123\026\136\027\146\030\134\031\107\032" + "\072\033\106\034\147\047\150\050\116\052\100\053\077" + "\001\001\000\002\001\001\000\056\006\120\010\127\011" + "\117\016\227\017\145\020\113\021\125\022\073\023\121" + "\024\143\025\123\026\136\027\146\030\134\031\107\032" + "\072\033\106\034\147\047\150\050\116\052\100\053\077" + "\001\001\000\056\006\120\010\127\011\117\016\226\017" + "\145\020\113\021\125\022\073\023\121\024\143\025\123" + "\026\136\027\146\030\134\031\107\032\072\033\106\034" + "\147\047\150\050\116\052\100\053\077\001\001\000\056" + "\006\120\010\127\011\117\016\225\017\145\020\113\021" + "\125\022\073\023\121\024\143\025\123\026\136\027\146" + "\030\134\031\107\032\072\033\106\034\147\047\150\050" + "\116\052\100\053\077\001\001\000\056\006\120\010\127" + "\011\117\016\224\017\145\020\113\021\125\022\073\023" + "\121\024\143\025\123\026\136\027\146\030\134\031\107" + "\032\072\033\106\034\147\047\150\050\116\052\100\053" + "\077\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\064\006" + "\120\010\127\011\117\013\232\014\104\015\063\016\111" + "\017\145\020\113\021\125\022\073\023\121\024\143\025" + "\123\026\136\027\146\030\134\031\107\032\072\033\106" + "\034\147\047\150\050\116\052\100\053\077\001\001\000" + "\002\001\001\000\062\006\120\010\127\011\117\014\234" + "\015\063\016\111\017\145\020\113\021\125\022\073\023" + "\121\024\143\025\123\026\136\027\146\030\134\031\107" + "\032\072\033\106\034\147\047\150\050\116\052\100\053" + "\077\001\001\000\002\001\001\000\002\001\001\000\006" + "\007\053\045\237\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\020\040\031\041\267\042\023\043\052\044\010\047\051" + "\054\021\001\001\000\020\040\031\041\266\042\023\043" + "\052\044\010\047\051\054\021\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\006\007\053\045" + "\274\001\001\000\006\007\053\045\273\001\001\000\002" + "\001\001\000\002\001\001\000\020\040\031\041\300\042" + "\023\043\052\044\010\047\051\054\021\001\001\000\020" + "\040\031\041\277\042\023\043\052\044\010\047\051\054" + "\021\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\026\035\016\036\306\037\006\040\031\041\025" + "\042\023\043\052\044\010\047\051\054\021\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$XPathParser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$XPathParser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public com.sun.java_cup.internal.runtime.Symbol do_action(int act_num, com.sun.java_cup.internal.runtime.lr_parser parser, java.util.Stack stack, int top) throws java.lang.Exception {
        return action_obj.CUP$XPathParser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }

    /**
     * Used by function calls with no args.
     */
    public static final Vector EmptyArgs = new Vector(0);

    /**
     * Reference to non-existing variable.
     */
    public static final VariableRef DummyVarRef = null;

    /**
     * Reference to the Parser class.
     */
    private Parser _parser;

    private XSLTC _xsltc;

    /**
     * String representation of the expression being parsed.
     */
    private String _expression;

    /**
     * Line number where this expression/pattern was declared.
     */
    private int _lineNumber = 0;

    /**
     * Reference to the symbol table.
     */
    public SymbolTable _symbolTable;

    public XPathParser(Parser parser) {
        _parser = parser;
        _xsltc = parser.getXSLTC();
        _symbolTable = parser.getSymbolTable();
    }

    public int getLineNumber() {
        return _lineNumber;
    }

    public QName getQNameIgnoreDefaultNs(String name) {
        return _parser.getQNameIgnoreDefaultNs(name);
    }

    public QName getQName(String namespace, String prefix, String localname) {
        return _parser.getQName(namespace, prefix, localname);
    }

    public void setMultiDocument(boolean flag) {
        _xsltc.setMultiDocument(flag);
    }

    public void setCallsNodeset(boolean flag) {
        _xsltc.setCallsNodeset(flag);
    }

    public void setHasIdCall(boolean flag) {
        _xsltc.setHasIdCall(flag);
    }

    /**
     * This method is similar to findNodeType(int, Object) except that it
     * creates a StepPattern instead of just returning a node type. It also 
     * differs in the way it handles "{uri}:*" and "{uri}:@*". The last two 
     * patterns are expanded as "*[namespace-uri() = 'uri']" and 
     * "@*[namespace-uri() = 'uri']", respectively. This expansion considerably 
     * simplifies the grouping of patterns in the Mode class. For this
     * expansion to be correct, the priority of the pattern/template must be
     * set to -0.25 (when no other predicates are present).
     */
    public StepPattern createStepPattern(int axis, Object test, Vector predicates) {
        int nodeType;
        if (test == null) {
            nodeType = (axis == Axis.ATTRIBUTE) ? NodeTest.ATTRIBUTE : (axis == Axis.NAMESPACE) ? -1 : NodeTest.ELEMENT;
            return new StepPattern(axis, nodeType, predicates);
        } else if (test instanceof Integer) {
            nodeType = ((Integer) test).intValue();
            return new StepPattern(axis, nodeType, predicates);
        } else {
            QName name = (QName) test;
            boolean setPriority = false;
            if (axis == Axis.NAMESPACE) {
                nodeType = (name.toString().equals("*")) ? -1 : _xsltc.registerNamespacePrefix(name);
                ;
            } else {
                final String uri = name.getNamespace();
                final String local = name.getLocalPart();
                final QName namespace_uri = _parser.getQNameIgnoreDefaultNs("namespace-uri");
                if (uri != null && (local.equals("*") || local.equals("@*"))) {
                    if (predicates == null) {
                        predicates = new Vector(2);
                    }
                    setPriority = (predicates.size() == 0);
                    predicates.add(new Predicate(new EqualityExpr(Operators.EQ, new NamespaceUriCall(namespace_uri), new LiteralExpr(uri))));
                }
                if (local.equals("*")) {
                    nodeType = (axis == Axis.ATTRIBUTE) ? NodeTest.ATTRIBUTE : NodeTest.ELEMENT;
                } else if (local.equals("@*")) {
                    nodeType = NodeTest.ATTRIBUTE;
                } else {
                    nodeType = (axis == Axis.ATTRIBUTE) ? _xsltc.registerAttribute(name) : _xsltc.registerElement(name);
                }
            }
            final StepPattern result = new StepPattern(axis, nodeType, predicates);
            if (setPriority) {
                result.setPriority(-0.25);
            }
            return result;
        }
    }

    public int findNodeType(int axis, Object test) {
        if (test == null) {
            return (axis == Axis.ATTRIBUTE) ? NodeTest.ATTRIBUTE : (axis == Axis.NAMESPACE) ? -1 : NodeTest.ELEMENT;
        } else if (test instanceof Integer) {
            return ((Integer) test).intValue();
        } else {
            QName name = (QName) test;
            if (axis == Axis.NAMESPACE) {
                return (name.toString().equals("*")) ? -1 : _xsltc.registerNamespacePrefix(name);
            }
            if (name.getNamespace() == null) {
                final String local = name.getLocalPart();
                if (local.equals("*")) {
                    return (axis == Axis.ATTRIBUTE) ? NodeTest.ATTRIBUTE : NodeTest.ELEMENT;
                } else if (local.equals("@*")) {
                    return NodeTest.ATTRIBUTE;
                }
            }
            return (axis == Axis.ATTRIBUTE) ? _xsltc.registerAttribute(name) : _xsltc.registerElement(name);
        }
    }

    /**
     * Parse the expression passed to the current scanner. If this
     * expression contains references to local variables and it will be 
     * compiled in an external module (not in the main class) request 
     * the current template to create a new variable stack frame.
     *
     * @param lineNumber Line where the current expression is defined.
     * @param external   Set to <tt>true</tt> if this expression is
     *                   compiled in a separate module.
     * 
     */
    public Symbol parse(String expression, int lineNumber) throws Exception {
        try {
            _expression = expression;
            _lineNumber = lineNumber;
            return super.parse();
        } catch (IllegalCharException e) {
            ErrorMsg err = new ErrorMsg(ErrorMsg.ILLEGAL_CHAR_ERR, lineNumber, e.getMessage());
            _parser.reportError(Constants.FATAL, err);
        }
        return null;
    }

    /**
     * Lookup a variable or parameter in the symbol table given its name. 
     *
     * @param name Name of the symbol being looked up.
     */
    final SyntaxTreeNode lookupName(QName name) {
        final SyntaxTreeNode result = _parser.lookupVariable(name);
        if (result != null) return (result); else return (_symbolTable.lookupName(name));
    }

    public final void addError(ErrorMsg error) {
        _parser.reportError(Constants.ERROR, error);
    }

    public void report_error(String message, Object info) {
        final ErrorMsg err = new ErrorMsg(ErrorMsg.SYNTAX_ERR, _lineNumber, _expression);
        _parser.reportError(Constants.FATAL, err);
    }

    public void report_fatal_error(String message, Object info) {
    }

    public RelativeLocationPath insertStep(Step step, RelativeLocationPath rlp) {
        if (rlp instanceof Step) {
            return new ParentLocationPath(step, (Step) rlp);
        } else if (rlp instanceof ParentLocationPath) {
            final ParentLocationPath plp = (ParentLocationPath) rlp;
            final RelativeLocationPath newrlp = insertStep(step, plp.getPath());
            return new ParentLocationPath(newrlp, plp.getStep());
        } else {
            addError(new ErrorMsg(ErrorMsg.INTERNAL_ERR, "XPathParser.insertStep"));
            return rlp;
        }
    }

    /**
     * Returns true if the axis applies to elements only. The axes
     * child, attribute, namespace, descendant result in non-empty
     * nodesets only if the context node is of type element.
     */
    public boolean isElementAxis(int axis) {
        return (axis == Axis.CHILD || axis == Axis.ATTRIBUTE || axis == Axis.NAMESPACE || axis == Axis.DESCENDANT);
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$XPathParser$actions {

    private final XPathParser parser;

    /** Constructor */
    CUP$XPathParser$actions(XPathParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final com.sun.java_cup.internal.runtime.Symbol CUP$XPathParser$do_action(int CUP$XPathParser$act_num, com.sun.java_cup.internal.runtime.lr_parser CUP$XPathParser$parser, java.util.Stack CUP$XPathParser$stack, int CUP$XPathParser$top) throws java.lang.Exception {
        com.sun.java_cup.internal.runtime.Symbol CUP$XPathParser$result;
        switch(CUP$XPathParser$act_num) {
            case 140:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("id");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 139:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("self");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 138:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("preceding-sibling");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 137:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("preceding");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 136:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("parent");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 135:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("namespace");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 134:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("following-sibling");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 133:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("following");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 132:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("decendant-or-self");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 131:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("decendant");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 130:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("child");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 129:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("attribute");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 128:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("ancestor-or-self");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 127:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("child");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 126:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("key");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 125:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("mod");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 124:
                {
                    QName RESULT = null;
                    RESULT = parser.getQNameIgnoreDefaultNs("div");
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 123:
                {
                    QName RESULT = null;
                    int qnameleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int qnameright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    String qname = (String) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = parser.getQNameIgnoreDefaultNs(qname);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(37, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 122:
                {
                    Object RESULT = null;
                    int qnleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int qnright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    QName qn = (QName) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = qn;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(26, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 121:
                {
                    Object RESULT = null;
                    RESULT = null;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(26, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 120:
                {
                    Object RESULT = null;
                    RESULT = new Integer(NodeTest.PI);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(25, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 119:
                {
                    Object RESULT = null;
                    int lleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int lright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    String l = (String) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    QName name = parser.getQNameIgnoreDefaultNs("name");
                    Expression exp = new EqualityExpr(Operators.EQ, new NameCall(name), new LiteralExpr(l));
                    Vector predicates = new Vector();
                    predicates.addElement(new Predicate(exp));
                    RESULT = new Step(Axis.CHILD, NodeTest.PI, predicates);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(25, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 3)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 118:
                {
                    Object RESULT = null;
                    RESULT = new Integer(NodeTest.COMMENT);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(25, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 117:
                {
                    Object RESULT = null;
                    RESULT = new Integer(NodeTest.TEXT);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(25, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 116:
                {
                    Object RESULT = null;
                    RESULT = new Integer(NodeTest.ANODE);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(25, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 115:
                {
                    Object RESULT = null;
                    int ntleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ntright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Object nt = (Object) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = nt;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(25, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 114:
                {
                    Expression RESULT = null;
                    int exleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int exright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ex = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = ex;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(3, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 113:
                {
                    QName RESULT = null;
                    int vnameleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int vnameright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    QName vname = (QName) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = vname;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(39, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 112:
                {
                    QName RESULT = null;
                    int fnameleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int fnameright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    QName fname = (QName) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = fname;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(38, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 111:
                {
                    Vector RESULT = null;
                    int argleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int argright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression arg = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int arglleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int arglright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Vector argl = (Vector) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    argl.insertElementAt(arg, 0);
                    RESULT = argl;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(36, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 110:
                {
                    Vector RESULT = null;
                    int argleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int argright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression arg = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    Vector temp = new Vector();
                    temp.addElement(arg);
                    RESULT = temp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(36, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 109:
                {
                    Expression RESULT = null;
                    int fnameleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 3)).left;
                    int fnameright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 3)).right;
                    QName fname = (QName) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 3)).value;
                    int arglleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int arglright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Vector argl = (Vector) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    if (fname == parser.getQNameIgnoreDefaultNs("concat")) {
                        RESULT = new ConcatCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("number")) {
                        RESULT = new NumberCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("document")) {
                        parser.setMultiDocument(true);
                        RESULT = new DocumentCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("string")) {
                        RESULT = new StringCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("boolean")) {
                        RESULT = new BooleanCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("name")) {
                        RESULT = new NameCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("generate-id")) {
                        RESULT = new GenerateIdCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("not")) {
                        RESULT = new NotCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("format-number")) {
                        RESULT = new FormatNumberCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("unparsed-entity-uri")) {
                        RESULT = new UnparsedEntityUriCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("key")) {
                        RESULT = new KeyCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("id")) {
                        RESULT = new KeyCall(fname, argl);
                        parser.setHasIdCall(true);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("ceiling")) {
                        RESULT = new CeilingCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("round")) {
                        RESULT = new RoundCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("floor")) {
                        RESULT = new FloorCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("contains")) {
                        RESULT = new ContainsCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("string-length")) {
                        RESULT = new StringLengthCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("starts-with")) {
                        RESULT = new StartsWithCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("function-available")) {
                        RESULT = new FunctionAvailableCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("element-available")) {
                        RESULT = new ElementAvailableCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("local-name")) {
                        RESULT = new LocalNameCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("lang")) {
                        RESULT = new LangCall(fname, argl);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("namespace-uri")) {
                        RESULT = new NamespaceUriCall(fname, argl);
                    } else if (fname == parser.getQName(Constants.TRANSLET_URI, "xsltc", "cast")) {
                        RESULT = new CastCall(fname, argl);
                    } else if (fname.getLocalPart().equals("nodeset") || fname.getLocalPart().equals("node-set")) {
                        parser.setCallsNodeset(true);
                        RESULT = new FunctionCall(fname, argl);
                    } else {
                        RESULT = new FunctionCall(fname, argl);
                    }
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(16, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 3)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 108:
                {
                    Expression RESULT = null;
                    int fnameleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int fnameright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    QName fname = (QName) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    if (fname == parser.getQNameIgnoreDefaultNs("current")) {
                        RESULT = new CurrentCall(fname);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("number")) {
                        RESULT = new NumberCall(fname, parser.EmptyArgs);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("string")) {
                        RESULT = new StringCall(fname, parser.EmptyArgs);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("concat")) {
                        RESULT = new ConcatCall(fname, parser.EmptyArgs);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("true")) {
                        RESULT = new BooleanExpr(true);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("false")) {
                        RESULT = new BooleanExpr(false);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("name")) {
                        RESULT = new NameCall(fname);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("generate-id")) {
                        RESULT = new GenerateIdCall(fname, parser.EmptyArgs);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("string-length")) {
                        RESULT = new StringLengthCall(fname, parser.EmptyArgs);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("position")) {
                        RESULT = new PositionCall(fname);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("last")) {
                        RESULT = new LastCall(fname);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("local-name")) {
                        RESULT = new LocalNameCall(fname);
                    } else if (fname == parser.getQNameIgnoreDefaultNs("namespace-uri")) {
                        RESULT = new NamespaceUriCall(fname);
                    } else {
                        RESULT = new FunctionCall(fname, parser.EmptyArgs);
                    }
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(16, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 107:
                {
                    Expression RESULT = null;
                    int varNameleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int varNameright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    QName varName = (QName) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    SyntaxTreeNode node = parser.lookupName(varName);
                    if (node != null) {
                        if (node instanceof Variable) {
                            RESULT = new VariableRef((Variable) node);
                        } else if (node instanceof Param) {
                            RESULT = new ParameterRef((Param) node);
                        } else {
                            RESULT = new UnresolvedRef(varName);
                        }
                    }
                    if (node == null) {
                        RESULT = new UnresolvedRef(varName);
                    }
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(15, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 106:
                {
                    Expression RESULT = null;
                    int fcleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int fcright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression fc = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = fc;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(17, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 105:
                {
                    Expression RESULT = null;
                    int numleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int numright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Double num = (Double) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new RealExpr(num.doubleValue());
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(17, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 104:
                {
                    Expression RESULT = null;
                    int numleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int numright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Long num = (Long) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    long value = num.longValue();
                    if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {
                        RESULT = new RealExpr(value);
                    } else {
                        if (num.doubleValue() == -0) RESULT = new RealExpr(num.doubleValue()); else if (num.intValue() == 0) RESULT = new IntExpr(num.intValue()); else if (num.doubleValue() == 0.0) RESULT = new RealExpr(num.doubleValue()); else RESULT = new IntExpr(num.intValue());
                    }
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(17, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 103:
                {
                    Expression RESULT = null;
                    int stringleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int stringright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    String string = (String) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    String namespace = null;
                    final int index = string.lastIndexOf(':');
                    if (index > 0) {
                        final String prefix = string.substring(0, index);
                        namespace = parser._symbolTable.lookupNamespace(prefix);
                    }
                    RESULT = (namespace == null) ? new LiteralExpr(string) : new LiteralExpr(string, namespace);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(17, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 102:
                {
                    Expression RESULT = null;
                    int exleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int exright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Expression ex = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    RESULT = ex;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(17, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 101:
                {
                    Expression RESULT = null;
                    int vrleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int vrright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression vr = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = vr;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(17, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 100:
                {
                    Expression RESULT = null;
                    int primaryleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int primaryright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Expression primary = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    int ppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Vector pp = (Vector) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new FilterExpr(primary, pp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(6, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 99:
                {
                    Expression RESULT = null;
                    int primaryleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int primaryright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression primary = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = primary;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(6, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 98:
                {
                    Expression RESULT = null;
                    RESULT = new Step(Axis.PARENT, NodeTest.ANODE, null);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(20, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 97:
                {
                    Expression RESULT = null;
                    RESULT = new Step(Axis.SELF, NodeTest.ANODE, null);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(20, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 96:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.SELF);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 95:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.PRECEDINGSIBLING);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 94:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.PRECEDING);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 93:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.PARENT);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 92:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.NAMESPACE);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 91:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.FOLLOWINGSIBLING);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 90:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.FOLLOWING);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 89:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.DESCENDANTORSELF);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 88:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.DESCENDANT);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 87:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.CHILD);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 86:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.ATTRIBUTE);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 85:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.ANCESTORORSELF);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 84:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.ANCESTOR);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(40, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 83:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.ATTRIBUTE);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(41, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 82:
                {
                    Integer RESULT = null;
                    int anleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int anright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Integer an = (Integer) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    RESULT = an;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(41, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 81:
                {
                    Expression RESULT = null;
                    int abbrevleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int abbrevright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression abbrev = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = abbrev;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(7, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 80:
                {
                    Expression RESULT = null;
                    int axisleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int axisright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Integer axis = (Integer) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    int ntestleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ntestright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Object ntest = (Object) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new Step(axis.intValue(), parser.findNodeType(axis.intValue(), ntest), null);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(7, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 79:
                {
                    Expression RESULT = null;
                    int axisleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int axisright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Integer axis = (Integer) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int ntestleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int ntestright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Object ntest = (Object) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    int ppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Vector pp = (Vector) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new Step(axis.intValue(), parser.findNodeType(axis.intValue(), ntest), pp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(7, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 78:
                {
                    Expression RESULT = null;
                    int ntestleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int ntestright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Object ntest = (Object) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    int ppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Vector pp = (Vector) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    if (ntest instanceof Step) {
                        Step step = (Step) ntest;
                        step.addPredicates(pp);
                        RESULT = (Step) ntest;
                    } else {
                        RESULT = new Step(Axis.CHILD, parser.findNodeType(Axis.CHILD, ntest), pp);
                    }
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(7, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 77:
                {
                    Expression RESULT = null;
                    int ntestleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ntestright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Object ntest = (Object) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    if (ntest instanceof Step) {
                        RESULT = (Step) ntest;
                    } else {
                        RESULT = new Step(Axis.CHILD, parser.findNodeType(Axis.CHILD, ntest), null);
                    }
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(7, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 76:
                {
                    Expression RESULT = null;
                    int rlpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rlpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression rlp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    int nodeType = DOM.NO_TYPE;
                    if (rlp instanceof Step && parser.isElementAxis(((Step) rlp).getAxis())) {
                        nodeType = DTM.ELEMENT_NODE;
                    }
                    final Step step = new Step(Axis.DESCENDANTORSELF, nodeType, null);
                    RESULT = new AbsoluteLocationPath(parser.insertStep(step, (RelativeLocationPath) rlp));
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(24, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 75:
                {
                    Expression RESULT = null;
                    int rlpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int rlpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression rlp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int stepleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int stepright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression step = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    final Step right = (Step) step;
                    final int axis = right.getAxis();
                    final int type = right.getNodeType();
                    final Vector predicates = right.getPredicates();
                    if ((axis == Axis.CHILD) && (type != NodeTest.ATTRIBUTE)) {
                        if (predicates == null) {
                            right.setAxis(Axis.DESCENDANT);
                            if (rlp instanceof Step && ((Step) rlp).isAbbreviatedDot()) {
                                RESULT = right;
                            } else {
                                RelativeLocationPath left = (RelativeLocationPath) rlp;
                                RESULT = new ParentLocationPath(left, right);
                            }
                        } else {
                            if (rlp instanceof Step && ((Step) rlp).isAbbreviatedDot()) {
                                Step left = new Step(Axis.DESCENDANTORSELF, DTM.ELEMENT_NODE, null);
                                RESULT = new ParentLocationPath(left, right);
                            } else {
                                RelativeLocationPath left = (RelativeLocationPath) rlp;
                                Step mid = new Step(Axis.DESCENDANTORSELF, DTM.ELEMENT_NODE, null);
                                ParentLocationPath ppl = new ParentLocationPath(mid, right);
                                RESULT = new ParentLocationPath(left, ppl);
                            }
                        }
                    } else if ((axis == Axis.ATTRIBUTE) || (type == NodeTest.ATTRIBUTE)) {
                        RelativeLocationPath left = (RelativeLocationPath) rlp;
                        Step middle = new Step(Axis.DESCENDANTORSELF, DTM.ELEMENT_NODE, null);
                        ParentLocationPath ppl = new ParentLocationPath(middle, right);
                        RESULT = new ParentLocationPath(left, ppl);
                    } else {
                        RelativeLocationPath left = (RelativeLocationPath) rlp;
                        Step middle = new Step(Axis.DESCENDANTORSELF, DOM.NO_TYPE, null);
                        ParentLocationPath ppl = new ParentLocationPath(middle, right);
                        RESULT = new ParentLocationPath(left, ppl);
                    }
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(22, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 74:
                {
                    Expression RESULT = null;
                    int aalpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int aalpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression aalp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = aalp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(23, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 73:
                {
                    Expression RESULT = null;
                    int rlpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rlpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression rlp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new AbsoluteLocationPath(rlp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(23, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 72:
                {
                    Expression RESULT = null;
                    RESULT = new AbsoluteLocationPath();
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(23, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 71:
                {
                    Expression RESULT = null;
                    int arlpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int arlpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression arlp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = arlp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(21, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 70:
                {
                    Expression RESULT = null;
                    int rlpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int rlpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression rlp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int stepleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int stepright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression step = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    if (rlp instanceof Step && ((Step) rlp).isAbbreviatedDot()) {
                        RESULT = step;
                    } else if (((Step) step).isAbbreviatedDot()) {
                        RESULT = rlp;
                    } else {
                        RESULT = new ParentLocationPath((RelativeLocationPath) rlp, step);
                    }
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(21, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 69:
                {
                    Expression RESULT = null;
                    int stepleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int stepright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression step = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = step;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(21, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 68:
                {
                    Expression RESULT = null;
                    int alpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int alpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression alp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = alp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(4, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 67:
                {
                    Expression RESULT = null;
                    int rlpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rlpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression rlp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = rlp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(4, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 66:
                {
                    Expression RESULT = null;
                    int fexpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int fexpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression fexp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int rlpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rlpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression rlp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    int nodeType = DOM.NO_TYPE;
                    if (rlp instanceof Step && parser.isElementAxis(((Step) rlp).getAxis())) {
                        nodeType = DTM.ELEMENT_NODE;
                    }
                    final Step step = new Step(Axis.DESCENDANTORSELF, nodeType, null);
                    FilterParentPath fpp = new FilterParentPath(fexp, step);
                    fpp = new FilterParentPath(fpp, rlp);
                    if (fexp instanceof KeyCall == false) {
                        fpp.setDescendantAxis();
                    }
                    RESULT = fpp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(19, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 65:
                {
                    Expression RESULT = null;
                    int fexpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int fexpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression fexp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int rlpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rlpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression rlp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new FilterParentPath(fexp, rlp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(19, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 64:
                {
                    Expression RESULT = null;
                    int fexpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int fexpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression fexp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = fexp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(19, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 63:
                {
                    Expression RESULT = null;
                    int lpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int lpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression lp = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = lp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(19, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 62:
                {
                    Expression RESULT = null;
                    int peleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int peright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression pe = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int restleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int restright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression rest = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new UnionPathExpr(pe, rest);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(18, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 61:
                {
                    Expression RESULT = null;
                    int peleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int peright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression pe = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = pe;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(18, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 60:
                {
                    Expression RESULT = null;
                    int ueleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ueright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ue = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new UnaryOpExpr(ue);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(14, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 59:
                {
                    Expression RESULT = null;
                    int ueleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ueright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ue = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = ue;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(14, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 58:
                {
                    Expression RESULT = null;
                    int meleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int meright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression me = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int ueleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ueright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ue = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new BinOpExpr(BinOpExpr.MOD, me, ue);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(13, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 57:
                {
                    Expression RESULT = null;
                    int meleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int meright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression me = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int ueleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ueright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ue = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new BinOpExpr(BinOpExpr.DIV, me, ue);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(13, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 56:
                {
                    Expression RESULT = null;
                    int meleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int meright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression me = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int ueleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ueright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ue = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new BinOpExpr(BinOpExpr.TIMES, me, ue);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(13, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 55:
                {
                    Expression RESULT = null;
                    int ueleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ueright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ue = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = ue;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(13, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 54:
                {
                    Expression RESULT = null;
                    int aeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int aeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression ae = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int meleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int meright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression me = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new BinOpExpr(BinOpExpr.MINUS, ae, me);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(12, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 53:
                {
                    Expression RESULT = null;
                    int aeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int aeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression ae = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int meleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int meright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression me = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new BinOpExpr(BinOpExpr.PLUS, ae, me);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(12, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 52:
                {
                    Expression RESULT = null;
                    int meleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int meright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression me = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = me;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(12, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 51:
                {
                    Expression RESULT = null;
                    int releft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int reright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression re = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int aeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int aeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ae = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new RelationalExpr(Operators.GE, re, ae);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(11, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 50:
                {
                    Expression RESULT = null;
                    int releft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int reright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression re = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int aeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int aeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ae = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new RelationalExpr(Operators.LE, re, ae);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(11, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 49:
                {
                    Expression RESULT = null;
                    int releft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int reright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression re = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int aeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int aeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ae = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new RelationalExpr(Operators.GT, re, ae);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(11, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 48:
                {
                    Expression RESULT = null;
                    int releft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int reright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression re = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int aeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int aeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ae = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new RelationalExpr(Operators.LT, re, ae);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(11, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 47:
                {
                    Expression RESULT = null;
                    int aeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int aeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ae = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = ae;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(11, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 46:
                {
                    Expression RESULT = null;
                    int eeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int eeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression ee = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int releft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int reright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression re = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new EqualityExpr(Operators.NE, ee, re);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(10, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 45:
                {
                    Expression RESULT = null;
                    int eeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int eeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression ee = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int releft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int reright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression re = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new EqualityExpr(Operators.EQ, ee, re);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(10, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 44:
                {
                    Expression RESULT = null;
                    int releft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int reright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression re = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = re;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(10, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 43:
                {
                    Expression RESULT = null;
                    int aeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int aeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression ae = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int eeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int eeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ee = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new LogicalExpr(LogicalExpr.AND, ae, ee);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(9, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 42:
                {
                    Expression RESULT = null;
                    int eleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int eright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression e = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = e;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(9, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 41:
                {
                    Expression RESULT = null;
                    int oeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int oeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Expression oe = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int aeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int aeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ae = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new LogicalExpr(LogicalExpr.OR, oe, ae);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(8, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 40:
                {
                    Expression RESULT = null;
                    int aeleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int aeright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ae = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = ae;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(8, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 39:
                {
                    Expression RESULT = null;
                    int exleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int exright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression ex = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = ex;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(2, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 38:
                {
                    Expression RESULT = null;
                    int eleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int eright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Expression e = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    RESULT = new Predicate(e);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(5, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 37:
                {
                    Vector RESULT = null;
                    int pleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int pright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Expression p = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    int ppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Vector pp = (Vector) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    pp.insertElementAt(p, 0);
                    RESULT = pp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(35, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 36:
                {
                    Vector RESULT = null;
                    int pleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int pright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression p = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    Vector temp = new Vector();
                    temp.addElement(p);
                    RESULT = temp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(35, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 35:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.ATTRIBUTE);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(42, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 34:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.CHILD);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(42, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 33:
                {
                    Integer RESULT = null;
                    RESULT = new Integer(Axis.ATTRIBUTE);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(42, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 32:
                {
                    Object RESULT = null;
                    int qnleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int qnright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    QName qn = (QName) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = qn;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(34, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 31:
                {
                    Object RESULT = null;
                    RESULT = null;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(34, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 30:
                {
                    Object RESULT = null;
                    RESULT = new Integer(NodeTest.PI);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(33, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 29:
                {
                    Object RESULT = null;
                    RESULT = new Integer(NodeTest.COMMENT);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(33, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 28:
                {
                    Object RESULT = null;
                    RESULT = new Integer(NodeTest.TEXT);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(33, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 27:
                {
                    Object RESULT = null;
                    RESULT = new Integer(NodeTest.ANODE);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(33, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 26:
                {
                    Object RESULT = null;
                    int ntleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ntright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Object nt = (Object) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = nt;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(33, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 25:
                {
                    StepPattern RESULT = null;
                    int axisleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int axisright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Integer axis = (Integer) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int pipleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int pipright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    StepPattern pip = (StepPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    int ppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Vector pp = (Vector) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = (ProcessingInstructionPattern) pip.setPredicates(pp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(32, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 24:
                {
                    StepPattern RESULT = null;
                    int axisleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int axisright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Integer axis = (Integer) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    int pipleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int pipright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    StepPattern pip = (StepPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = pip;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(32, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 23:
                {
                    StepPattern RESULT = null;
                    int axisleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int axisright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Integer axis = (Integer) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int ntleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int ntright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Object nt = (Object) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    int ppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Vector pp = (Vector) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = parser.createStepPattern(axis.intValue(), nt, pp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(32, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 22:
                {
                    StepPattern RESULT = null;
                    int axisleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int axisright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Integer axis = (Integer) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    int ntleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ntright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Object nt = (Object) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = parser.createStepPattern(axis.intValue(), nt, null);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(32, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 21:
                {
                    StepPattern RESULT = null;
                    int pipleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int pipright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    StepPattern pip = (StepPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    int ppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Vector pp = (Vector) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = (ProcessingInstructionPattern) pip.setPredicates(pp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(32, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 20:
                {
                    StepPattern RESULT = null;
                    int pipleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int pipright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    StepPattern pip = (StepPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = pip;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(32, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 19:
                {
                    StepPattern RESULT = null;
                    int ntleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int ntright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    Object nt = (Object) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    int ppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Vector pp = (Vector) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = parser.createStepPattern(Axis.CHILD, nt, pp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(32, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 18:
                {
                    StepPattern RESULT = null;
                    int ntleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ntright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Object nt = (Object) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = parser.createStepPattern(Axis.CHILD, nt, null);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(32, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 17:
                {
                    RelativePathPattern RESULT = null;
                    int spleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int spright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    StepPattern sp = (StepPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int rppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    RelativePathPattern rpp = (RelativePathPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new AncestorPattern(sp, rpp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(31, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 16:
                {
                    RelativePathPattern RESULT = null;
                    int spleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int spright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    StepPattern sp = (StepPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int rppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    RelativePathPattern rpp = (RelativePathPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new ParentPattern(sp, rpp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(31, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 15:
                {
                    RelativePathPattern RESULT = null;
                    int spleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int spright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    StepPattern sp = (StepPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = sp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(31, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 14:
                {
                    StepPattern RESULT = null;
                    int lleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int lright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    String l = (String) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    RESULT = new ProcessingInstructionPattern(l);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(30, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 3)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 13:
                {
                    IdKeyPattern RESULT = null;
                    int l1left = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 3)).left;
                    int l1right = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 3)).right;
                    String l1 = (String) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 3)).value;
                    int l2left = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int l2right = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    String l2 = (String) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    RESULT = new KeyPattern(l1, l2);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(27, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 5)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 12:
                {
                    IdKeyPattern RESULT = null;
                    int lleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int lright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    String l = (String) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    RESULT = new IdPattern(l);
                    parser.setHasIdCall(true);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(27, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 3)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 11:
                {
                    Pattern RESULT = null;
                    int rppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    RelativePathPattern rpp = (RelativePathPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = rpp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(29, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 10:
                {
                    Pattern RESULT = null;
                    int rppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    RelativePathPattern rpp = (RelativePathPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new AncestorPattern(rpp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(29, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 9:
                {
                    Pattern RESULT = null;
                    int ikpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int ikpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    IdKeyPattern ikp = (IdKeyPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int rppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    RelativePathPattern rpp = (RelativePathPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new AncestorPattern(ikp, rpp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(29, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 8:
                {
                    Pattern RESULT = null;
                    int ikpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int ikpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    IdKeyPattern ikp = (IdKeyPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int rppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    RelativePathPattern rpp = (RelativePathPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new ParentPattern(ikp, rpp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(29, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 7:
                {
                    Pattern RESULT = null;
                    int ikpleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int ikpright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    IdKeyPattern ikp = (IdKeyPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = ikp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(29, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 6:
                {
                    Pattern RESULT = null;
                    int rppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int rppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    RelativePathPattern rpp = (RelativePathPattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new AbsolutePathPattern(rpp);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(29, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 5:
                {
                    Pattern RESULT = null;
                    RESULT = new AbsolutePathPattern(null);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(29, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 4:
                {
                    Pattern RESULT = null;
                    int lppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left;
                    int lppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).right;
                    Pattern lpp = (Pattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).value;
                    int pleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int pright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Pattern p = (Pattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = new AlternativePattern(lpp, p);
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(28, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 2)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 3:
                {
                    Pattern RESULT = null;
                    int lppleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int lppright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Pattern lpp = (Pattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = lpp;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(28, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 2:
                {
                    SyntaxTreeNode RESULT = null;
                    int exprleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int exprright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Expression expr = (Expression) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = expr;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(1, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 1:
                {
                    SyntaxTreeNode RESULT = null;
                    int patternleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).left;
                    int patternright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right;
                    Pattern pattern = (Pattern) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).value;
                    RESULT = pattern;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(1, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                return CUP$XPathParser$result;
            case 0:
                {
                    Object RESULT = null;
                    int start_valleft = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left;
                    int start_valright = ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).right;
                    SyntaxTreeNode start_val = (SyntaxTreeNode) ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).value;
                    RESULT = start_val;
                    CUP$XPathParser$result = new com.sun.java_cup.internal.runtime.Symbol(0, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 1)).left, ((com.sun.java_cup.internal.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top - 0)).right, RESULT);
                }
                CUP$XPathParser$parser.done_parsing();
                return CUP$XPathParser$result;
            default:
                throw new Exception("Invalid action number found in internal parse table");
        }
    }
}
