package net.sourceforge.gateway.sstp.databases.tables;

import java.io.Serializable;
import java.util.Calendar;
import java.util.UUID;
import java.net.InetAddress;
import org.apache.log4j.Logger;

/**
 * Represents a generic message that one would store in a database via hibernate
 */
public class BaseDTO implements Serializable {

    /**
     * Logging Facility
     */
    protected static final Logger LOG = Logger.getLogger("net.sourceforge.gateway");

    /**
     * Version UID for Serialization
     */
    private static final long serialVersionUID = 1;

    /**
     * Identity is generated by DB. From 0-BIGINT.
     */
    private String identity;

    /**
     * This is usually the TransmissionId.
     */
    private String id;

    /**
     * The SSTPID or CSPID of the person sending us the file.
     */
    private String transmitter;

    /**
     * The date we created this object.
     */
    private Calendar timestamp;

    /**
     * The content of the data (usually the transmission XML or VIRCS SQL).
     */
    private String data;

    /**
     * The hostname of the server on which the object was created.
     */
    private String createdonhostname;

    /**
     * The schema version
     */
    private String version;

    /**
     * Flag indicating if the record has been processed. For transmissions, a
     * true value means that the data was extracted and an ack was created. For
     * acks, a true value means that the ack has been picked up.
     */
    private boolean processed;

    /**
     * Default Constructor
     */
    public BaseDTO() {
        id = null;
        transmitter = null;
        timestamp = null;
        data = null;
        processed = false;
        try {
            createdonhostname = InetAddress.getLocalHost().getHostName();
        } catch (Exception e) {
            createdonhostname = null;
            LOG.error("Cannot resolve my own hostname.", e);
        }
        identity = UUID.randomUUID().toString();
    }

    /**
     * Full Constructor
     */
    public BaseDTO(String theId, String theTransmitter, Calendar theTimestamp, String theData, String theVersion, boolean theProcessed) {
        this.id = theId;
        this.transmitter = theTransmitter;
        if (theTimestamp == null) {
            this.timestamp = null;
        } else {
            this.timestamp = (Calendar) theTimestamp.clone();
        }
        this.data = theData;
        this.version = theVersion;
        try {
            createdonhostname = InetAddress.getLocalHost().getHostName();
        } catch (Exception e) {
            createdonhostname = null;
            LOG.error("Cannot resolve my own hostname.", e);
        }
        this.processed = theProcessed;
        identity = UUID.randomUUID().toString();
    }

    public void setProcessed(boolean newProcessed) {
        this.processed = newProcessed;
    }

    public boolean getProcessed() {
        return this.processed;
    }

    public boolean isProcessed() {
        return this.processed;
    }

    /**
     * Mutator method for 'id'
     * 
     * @param newId
     *        the TransmissionId or other some similar Id depending on the
     *        context
     */
    public void setId(String newId) {
        this.id = newId;
    }

    /**
     * Accessor method for 'id'
     * 
     * @return the TransmissionId or other some similar Id depending on the
     *         context
     */
    public String getId() {
        return this.id;
    }

    /**
     * Mutator method for 'transmitter'
     * 
     * @param newTransmitter
     *        the TransmitterId
     */
    public void setTransmitter(String newTransmitter) {
        this.transmitter = newTransmitter;
    }

    /**
     * Accessor method for 'transmitter'
     * 
     * @return the TransmitterId
     */
    public String getTransmitter() {
        return this.transmitter;
    }

    /**
     * Mutator method for 'timestamp'
     * 
     * @param newTimestamp
     *        the Calendar/time the message was created / last changed
     */
    public void setTimestamp(Calendar newTimestamp) {
        if (newTimestamp == null) {
            this.timestamp = null;
        } else {
            this.timestamp = (Calendar) newTimestamp.clone();
        }
    }

    /**
     * Accessor method for 'timestamp'
     * 
     * @return the Calendar/time the message was created / last changed
     */
    public Calendar getTimestamp() {
        if (this.timestamp == null) {
            return null;
        }
        return (Calendar) this.timestamp.clone();
    }

    /**
     * Mutator method for 'data'
     * 
     * @param newData
     *        the message data (usually XML or SQL)
     */
    public void setData(String newData) {
        this.data = newData;
    }

    /**
     * Accessor method for 'data'
     * 
     * @return the message data (usually XML or SQL)
     */
    public String getData() {
        return this.data;
    }

    /**
     * Mutator method for 'createdOnHostname'. This field is set in the
     * constructor, so you should never have to set it yourself. This method
     * only exists for hibernate.
     * 
     * @param newCreatedOnHostname
     *        the hostname of the server that stores the object
     */
    public void setCreatedonhostname(String newCreatedOnHostname) {
        this.createdonhostname = newCreatedOnHostname;
    }

    /**
     * Accessor method for 'createdOnHostname'.
     * 
     * @return the hostname of the server that created the object
     */
    public String getCreatedonhostname() {
        return this.createdonhostname;
    }

    /**
     * Deep Equality Test
     * 
     * @param o
     *        the object to test against this object
     * @return true if o is equivalent to this object.
     */
    public boolean equals(Object o) {
        if (o == null) {
            return false;
        }
        if (!(o instanceof BaseDTO)) {
            return false;
        }
        if (this == o) {
            return true;
        }
        BaseDTO that = (BaseDTO) o;
        if (this.getCreatedonhostname() != null && !(this.getCreatedonhostname().equals(that.getCreatedonhostname()))) {
            return false;
        }
        if (this.getData() != null && !(this.getData().equals(that.getData()))) {
            return false;
        }
        if (this.getTimestamp() != null && !(this.getTimestamp().equals(that.getTimestamp()))) {
            return false;
        }
        if (this.getId() != null && !(this.getId().equals(that.getId()))) {
            return false;
        }
        if (this.getTransmitter() != null && !(this.getTransmitter().equals(that.getTransmitter()))) {
            return false;
        }
        if (this.getVersion() != null && !(this.getVersion().equals(that.getVersion()))) {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code value for the object.
     * 
     * @return a hash code value for this object.
     */
    public int hashCode() {
        int hash = 7;
        if (this.getData() == null) {
            hash *= 3;
        } else {
            hash *= this.getData().hashCode();
        }
        if (this.getIdentity() == null) {
            hash *= 5;
        } else {
            hash *= this.getIdentity().hashCode();
        }
        if (this.getCreatedonhostname() == null) {
            hash *= 7;
        } else {
            hash *= this.getCreatedonhostname().hashCode();
        }
        if (this.getTimestamp() == null) {
            hash *= 11;
        } else {
            hash *= this.getTimestamp().hashCode();
        }
        if (this.getTransmitter() == null) {
            hash *= 13;
        } else {
            hash *= this.getTransmitter().hashCode();
        }
        if (this.getVersion() == null) {
            hash *= 17;
        } else {
            hash *= this.getVersion().hashCode();
        }
        return hash;
    }

    /**
     * Accessor: Identity is generated by DB. From 0-BIGINT.
     * 
     * @return identity
     */
    public String getIdentity() {
        return this.identity;
    }

    /**
     * Mutator: Identity is generated by DB. From 0-BIGINT.
     * 
     * @param sequenceNumber
     *        identity
     */
    public void setIdentity(String sequenceNumber) {
        this.identity = sequenceNumber;
    }

    /**
     * Accessor: return the schema version
     * 
     * @return version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Mutator: set the schema version
     * 
     * @param version
     */
    public void setVersion(String version) {
        this.version = version;
    }
}
