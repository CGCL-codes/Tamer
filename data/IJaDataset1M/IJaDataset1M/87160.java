package jquantum;

import java.util.Properties;
import javax.swing.*;
import org.mathIT.util.FunctionParser;

/**
 * This class enables to input of an arbitrary function for function evaluation to be
 * added to a quantum circuit.
 * @author  Andreas de Vries
 * @version 1.3
 */
public class FunctionDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1748297568;

    private Properties bundle;

    /** The specified function.*/
    public FunctionParser function;

    /** Flag indicating whether the cancel button has been pressed.*/
    public boolean cancelButtonClicked = false;

    /** Creates new form InitDialog */
    public FunctionDialog(java.awt.Frame parent, boolean modal, Properties bundle) {
        super(parent, modal);
        this.bundle = bundle;
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            if (UIManager.getSystemLookAndFeelClassName().equals("javax.swing.plaf.metal.MetalLookAndFeel")) {
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
            }
        } catch (Exception e) {
        }
        initComponents();
        questionLabel.setText(bundle.getProperty("FunctionDialog.questionLabel.text"));
        okButton.setText(bundle.getProperty("okButton.text"));
        cancelButton.setText(bundle.getProperty("cancelButton.text"));
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width - getSize().width) / 2, (screenSize.height - getSize().height) / 2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        headPanel = new javax.swing.JPanel();
        questionLabel = new javax.swing.JLabel();
        inputPanel = new javax.swing.JPanel();
        functionLabel = new javax.swing.JLabel();
        functionTextField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        questionLabel.setText("Input the function to be evaluated:");
        headPanel.add(questionLabel);
        getContentPane().add(headPanel, java.awt.BorderLayout.NORTH);
        functionLabel.setText("<html><i>f</i>(<i>x</i>) = ");
        inputPanel.add(functionLabel);
        functionTextField.setColumns(10);
        functionTextField.setText("z^x mod 15");
        functionTextField.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionTextFieldActionPerformed(evt);
            }
        });
        inputPanel.add(functionTextField);
        getContentPane().add(inputPanel, java.awt.BorderLayout.CENTER);
        okButton.setText(" OK ");
        okButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);
        cancelButton.setText(" Cancel ");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);
        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);
        pack();
    }

    private void functionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        setValues();
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonClicked = true;
        setVisible(false);
        removeAll();
        dispose();
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
        setValues();
    }

    /**
     * Returns the specified function.
     * @return the specified function
     */
    public FunctionParser getFunction() {
        return function;
    }

    private void setValues() {
        cancelButtonClicked = false;
        try {
            String input = functionTextField.getText();
            if (!FunctionParser.checkSyntax(input)) throw new IllegalArgumentException("Function syntax wrong: " + input);
            function = new FunctionParser(input);
            setVisible(false);
        } catch (Exception e) {
            String title = bundle.getProperty("errorMessage.title.text");
            String output = "<html><h3 style=\"color:red\">";
            output += bundle.getProperty("FunctionDialog.errorMessage") + "!";
            output += "</h3><table border=\"0\" style=\"text-align:center\" valign=\"top\">";
            output += "<tr><td>";
            output += "<table border=\"1\" style=\"text-align:center\">";
            output += "<tr><th colspan=\"2\" style=\"text-align:left\">";
            output += bundle.getProperty("constants.text");
            output += "</th></tr>";
            for (int i = 0; i < FunctionParser.constantName.length; i++) {
                output += "<tr><td>";
                output += FunctionParser.constantName[i];
                output += "</td><td>";
                output += FunctionParser.constantValue[i];
                output += "</td></tr>";
            }
            output += "</table>";
            output += "</td><td>";
            output += "<table border=\"1\" style=\"text-align:center\">";
            output += "<tr><th colspan=\"5\" style=\"text-align:left\">";
            output += bundle.getProperty("functions.text");
            output += "</th></tr>";
            output += showOperators(1);
            output += "</td><td>";
            output += "<table border=\"1\" style=\"text-align:center\">";
            output += "<tr><th colspan=\"5\" style=\"text-align:left\">";
            output += bundle.getProperty("binaryOperators.text");
            output += "</th></tr>";
            output += showOperators(2);
            output += "</td><td>";
            output += "<table border=\"1\" style=\"text-align:center\">";
            output += "<tr><th colspan=\"5\" style=\"text-align:left\">";
            output += bundle.getProperty("ternaryOperators.text");
            output += "</th></tr>";
            output += showOperators(3);
            output += "</td></tr></table>";
            output += "</html>";
            JOptionPane.showMessageDialog(this, output, title, JOptionPane.PLAIN_MESSAGE);
        }
    }

    private String showOperators(int n) {
        if (FunctionParser.operator.length <= n) return "";
        String output = "";
        for (int i = 0; i < FunctionParser.operator[n].length; i++) {
            if (i % 5 == 0) {
                output += "<tr>";
            }
            output += "<td>";
            output += (FunctionParser.operator[n][i]).replaceAll("<", "&lt;");
            output += "</td>";
            if (i % 5 == 4) {
                output += "</tr>";
            }
        }
        output += "</table>";
        return output;
    }

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {
        cancelButtonClicked = true;
        setVisible(false);
        removeAll();
        dispose();
    }

    private javax.swing.JPanel buttonPanel;

    private javax.swing.JButton cancelButton;

    private javax.swing.JLabel functionLabel;

    private javax.swing.JTextField functionTextField;

    private javax.swing.JPanel headPanel;

    private javax.swing.JPanel inputPanel;

    private javax.swing.JButton okButton;

    private javax.swing.JLabel questionLabel;
}
