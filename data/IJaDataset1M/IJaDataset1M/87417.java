package net.sourceforge.fluxion.datapublisher.beangen;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * A dedicated writer class that is used to generate JavaBeans from a set of
 * {@link net.sourceforge.fluxion.datapublisher.beangen.BeanConfig} objects.  This is
 * basically a convenient way of allowing a user to generate some beans from a
 * database connection without having to write all the code to generate every
 * line of the bean.  Instead, a user can create some {@link
 * net.sourceforge.fluxion.datapublisher.beangen.BeanConfig}s, set some simple method names
 * and types, then invoke the BeanWriter on this set on {@link
 * net.sourceforge.fluxion.datapublisher.beangen.BeanConfig}s to do all the bog-standard
 * stuff.
 *
 * @author Tony Burdett
 * @version 0.2
 * @date 07-Mar-2006
 * @see net.sourceforge.fluxion.datapublisher.beangen.BeanConfig
 */
public class BeanWriter {

    private String databaseName;

    private File outputDirectory;

    private String pkg;

    private PrintWriter writer;

    public BeanWriter(File rootDirectory, String packageName) {
        this.pkg = packageName;
        this.outputDirectory = new File(rootDirectory, packageName.replace('.', File.separatorChar));
    }

    public void openFileStream(String className) throws FileNotFoundException {
        if (!outputDirectory.exists()) {
            outputDirectory.mkdirs();
        }
        File beanFile = new File(outputDirectory, className + ".java");
        writer = new PrintWriter(new FileOutputStream(beanFile));
    }

    public void closeFileStream() throws IOException {
        writer.flush();
        writer.close();
    }

    public void writeBeans(Set<BeanConfig> configs) throws BeanGenerationException {
        for (BeanConfig config : configs) {
            try {
                openFileStream(config.getClassName());
                makeBean(config);
                closeFileStream();
                openFileStream(config.getClassName() + "Filter");
                makeFilter(config);
                closeFileStream();
            } catch (FileNotFoundException e) {
                throw new BeanGenerationException("Unable to create a new bean: can't create File " + config.getClassName(), e);
            } catch (IOException e) {
                throw new BeanGenerationException("Unable to create a new bean: can't close File " + config.getClassName(), e);
            }
        }
        System.out.println("done");
    }

    public void writeManager(Class queryManager, String... params) throws BeanGenerationException {
        try {
            openFileStream("QueryManager");
            writer.println("package " + pkg + ";");
            writer.println();
            writer.println("import net.sourceforge.fluxion.datasource.filter.*;");
            writer.println("import net.sourceforge.fluxion.datasource.query.*;");
            writer.println("import " + queryManager.getName() + ";");
            writer.println();
            writer.println("/**");
            writer.println(" * A QueryManager for " + (databaseName != null ? "the database " + databaseName + "." : "a specific database."));
            writer.println(" *");
            writer.println(" * @author Autogenerated by Comparagrid schema2beans-plugin");
            writer.println(" */");
            writer.println();
            writer.println("public class QueryManager");
            writer.println("{");
            writer.println("  public static <F> Query<F> createQuery(Filter<F> filter) " + "throws QueryGenerationException");
            writer.println("  {");
            writer.print("    " + queryManager.getSimpleName() + " gen = new " + queryManager.getSimpleName() + "(");
            int i = 0;
            for (String s : params) {
                if (s == null) {
                    writer.print("\"\"");
                } else {
                    writer.print("\"" + s + "\"");
                }
                i++;
                if (i < params.length) {
                    writer.print(", ");
                }
            }
            writer.println(");");
            writer.println("    return gen.generateQuery(filter);");
            writer.println("  }");
            writer.println("}");
            closeFileStream();
        } catch (FileNotFoundException e) {
            throw new BeanGenerationException("Unable to create a new bean: can't create File QueryManager.java", e);
        } catch (IOException e) {
            throw new BeanGenerationException("Unable to create a new bean: can't close File QueryManager.java", e);
        }
    }

    public void writeManager(String queryManagerClassName, List<String> managerStatements) throws BeanGenerationException {
        try {
            openFileStream("QueryManager");
            writer.println("package " + pkg + ";");
            writer.println();
            writer.println("import net.sourceforge.fluxion.datasources.filter.*;");
            writer.println("import net.sourceforge.fluxion.datasource.query.*;");
            writer.println("import " + queryManagerClassName + ";");
            writer.println();
            writer.println("/**");
            writer.println(" * A QueryManager for " + (databaseName != null ? "the database " + databaseName + "." : "a specific database."));
            writer.println(" * Please note that it is legal for the createQuery method to " + "return null, if there is a failure in generating a query.");
            writer.println(" *");
            writer.println(" * @author Autogenerated by Fluxion, generate-beans-plugin");
            writer.println(" */");
            writer.println();
            writer.println("public class QueryManager");
            writer.println("{");
            writer.println("  public static <F> Query<F> createQuery(Filter<F> filter)");
            writer.println("  {");
            writer.println("    try {");
            for (String s : managerStatements) {
                writer.println("      " + s);
            }
            writer.println("    }");
            writer.println("    catch (QueryGenerationException e) {");
            writer.println("      System.out.println(\"Encountered an exception whilst " + "generating a query: this query will be aborted.\");");
            writer.println("      return null;");
            writer.println("    }");
            writer.println("  }");
            writer.println("}");
            closeFileStream();
        } catch (FileNotFoundException e) {
            throw new BeanGenerationException("Unable to create a new bean: can't create File QueryManager.java", e);
        } catch (IOException e) {
            throw new BeanGenerationException("Unable to create a new bean: can't close File QueryManager.java", e);
        }
    }

    private void makeBean(BeanConfig beanConfig) {
        if (writer == null) {
        }
        writer.println("package " + pkg + ";");
        writer.println();
        writer.println("import java.util.Set;");
        writer.println("import net.sourceforge.fluxion.annotations.*;");
        if (beanConfig.getMetaAnn() != null) {
            writer.println("import " + beanConfig.getMetaAnn().getPackage().getName() + ".*;");
        }
        writer.println();
        writer.println("/**");
        writer.println(" * A Bean representing the element " + beanConfig.getClassName() + " from " + (databaseName != null ? "the database " + databaseName + "." : "a specific database."));
        writer.println(" *");
        writer.println(" * @author Autogenerated by Fluxion, generate-beans-plugin");
        writer.println(" */");
        if (beanConfig.getEntityAnn() != null) {
            writer.println("@" + beanConfig.getEntityAnn().getSimpleName());
        }
        if (beanConfig.getSchemaNameAnn() != null) {
            writer.println("@SchemaNameAnn(\"" + beanConfig.getSchemaNameAnn() + "\")");
        }
        if (beanConfig.getTableNameAnn() != null) {
            writer.println("@TableNameAnn(\"" + beanConfig.getTableNameAnn() + "\")");
        }
        writer.println("@FilterAnn(\"" + pkg + "." + beanConfig.getClassName() + "Filter\")");
        if (beanConfig.getMetaAnn() != null) {
            writer.println("@TypeOfAnn(" + beanConfig.getMetaAnn().getSimpleName() + ".class)");
        }
        writer.println("public class " + beanConfig.getClassName());
        writer.println("{");
        for (String name : beanConfig.getMethods().keySet()) {
            if (!beanConfig.getMethods().get(name).matches("void")) {
                String objectName = beanConfig.getMethods().get(name);
                String instanceName = name.substring(3, name.length()).replaceFirst(name.substring(3, 4), name.substring(3, 4).toLowerCase());
                if (Keyword.isKeyword(instanceName)) {
                    instanceName = ("_").concat(instanceName);
                }
                writer.println("  private " + objectName + " " + instanceName + ";");
            }
        }
        writer.println();
        for (String name : beanConfig.getMethods().keySet()) {
            if (name.startsWith("set")) {
                String returnType = beanConfig.getMethods().get(name);
                String objectName = beanConfig.getMethods().get(name.replaceFirst("set", "get"));
                String uppercase = name.substring(3, name.length());
                String instanceName = uppercase.replaceFirst(uppercase.substring(0, 1), uppercase.substring(0, 1).toLowerCase());
                if (Keyword.isKeyword(instanceName)) {
                    instanceName = ("_").concat(instanceName);
                }
                if (beanConfig.getMethodAnnotations().containsKey(name)) {
                    for (String annot : beanConfig.getMethodAnnotations().get(name)) {
                        writer.println("  " + annot);
                    }
                }
                writer.println("  public " + returnType + " " + name + " (" + objectName + " " + instanceName + ")");
                writer.println("  {");
                writer.println("    this." + instanceName + " = " + instanceName + ";");
                writer.println("  }");
                writer.println();
            } else if (name.startsWith("get")) {
                String returnType = beanConfig.getMethods().get(name);
                String uppercase = name.substring(3, name.length());
                String instanceName = uppercase.replaceFirst(uppercase.substring(0, 1), uppercase.substring(0, 1).toLowerCase());
                if (Keyword.isKeyword(instanceName)) {
                    instanceName = ("_").concat(instanceName);
                }
                if (beanConfig.getMethodAnnotations().containsKey(name)) {
                    List<String> externalLinks = new ArrayList<String>();
                    for (String annot : beanConfig.getMethodAnnotations().get(name)) {
                        if (annot.contains("@ExternalLink")) {
                            externalLinks.add(annot);
                        } else {
                            writer.println("  " + annot);
                        }
                    }
                    if (externalLinks.size() > 0) {
                        writer.println("  @ExternalLinks({");
                        for (int i = 0; i < externalLinks.size() - 1; i++) {
                            writer.println("    " + externalLinks.get(i) + ",");
                        }
                        writer.println("    " + externalLinks.get(externalLinks.size() - 1));
                        writer.println("  })");
                    }
                }
                writer.println("  public " + returnType + " " + name + " ()");
                writer.println("  {");
                writer.println("    return this." + instanceName + ";");
                writer.println("  }");
                writer.println();
            } else {
                System.out.println("Can't create a method which isn't getter or setter");
            }
        }
        writer.println("}");
        System.out.print(".");
    }

    private void makeFilter(BeanConfig beanConfig) {
        if (writer == null) {
        }
        writer.println("package " + pkg + ";");
        writer.println();
        writer.println("import java.util.Set;");
        writer.println("import net.sourceforge.fluxion.annotations.*;");
        writer.println("import net.sourceforge.fluxion.datasource.filter.*;");
        writer.println();
        writer.println("/**");
        writer.println(" * A filter for querying against " + beanConfig.getClassName() + " beans from the model of " + (databaseName != null ? "the " + databaseName + " database." : "a specific database."));
        writer.println(" *");
        writer.println(" * @author Autogenerated by Fluxion, generate-beans-plugin");
        writer.println(" */");
        writer.println("@Bean(\"" + pkg + "." + beanConfig.getClassName() + "\")");
        writer.println("public class " + beanConfig.getClassName() + "Filter implements Filter<" + beanConfig.getClassName() + ">");
        writer.println("{");
        for (String name : beanConfig.getMethods().keySet()) {
            if (!beanConfig.getMethods().get(name).matches("void")) {
                String instanceName = name.substring(3, name.length()).replaceFirst(name.substring(3, 4), name.substring(3, 4).toLowerCase());
                writer.println("  private Filter " + instanceName + "Filter;");
            }
        }
        writer.println();
        writer.println("  public boolean accept(" + beanConfig.getClassName() + " bean)");
        writer.println("  {");
        writer.println("    boolean accepted = true;");
        writer.println();
        for (String method : beanConfig.getMethods().keySet()) {
            if (!beanConfig.getMethods().get(method).matches("void")) {
                writer.println("    if (!" + method + "Filter().accept(bean." + method + "())) accepted = false;");
            }
        }
        writer.println();
        writer.println("    return accepted;");
        writer.println("  }");
        writer.println();
        for (String name : beanConfig.getMethods().keySet()) {
            if (name.startsWith("set")) {
                String uppercase = name.substring(3, name.length());
                String instanceName = uppercase.replaceFirst(uppercase.substring(0, 1), uppercase.substring(0, 1).toLowerCase());
                writer.println("  @BeanMethod(\"" + name + "\")");
                writer.println("  public void " + name + "Filter (Filter " + instanceName + "Filter)");
                writer.println("  {");
                writer.println("    this." + instanceName + "Filter = " + instanceName + "Filter;");
                writer.println("  }");
                writer.println();
            } else if (name.startsWith("get")) {
                String uppercase = name.substring(3, name.length());
                String instanceName = uppercase.replaceFirst(uppercase.substring(0, 1), uppercase.substring(0, 1).toLowerCase());
                writer.println("  @BeanMethod(\"" + name + "\")");
                writer.println("  public Filter " + name + "Filter ()");
                writer.println("  {");
                writer.println("    return this." + instanceName + "Filter;");
                writer.println("  }");
                writer.println();
            } else {
                System.out.println("Can't create a method which isn't getter or setter");
            }
        }
        writer.println("}");
    }

    public String getDatabaseName() {
        return databaseName;
    }

    public void setDatabaseName(String databaseName) {
        this.databaseName = databaseName;
    }

    private enum Keyword {

        ABSTRACT("abstract"), ASSERT("assert"), BOOLEAN("boolean"), BREAK("break"), BYTE("byte"), CASE("case"), CATCH("catch"), CHAR("char"), CLASS("class"), CONST("const"), CONTINUE("continue"), DEFAULT("default"), DO("do"), DOUBLE("double"), ELSE("else"), ENUM("enum"), EXTENDS("extends"), FALSE("false"), FINAL("final"), FINALLY("finally"), FLOAT("float"), FOR("for"), GOTO("goto"), IF("if"), IMPLEMENTS("implements"), IMPORT("import"), INSTANCEOF("instanceof"), INT("int"), INTERFACE("interface"), LONG("long"), NATIVE("native"), NEW("new"), NULL("null"), PACKAGE("package"), PRIVATE("private"), PROTECTED("protected"), PUBLIC("public"), RETURN("return"), SHORT("short"), STATIC("static"), STRICTFP("strictfp"), SUPER("super"), SWITCH("switch"), SYNCHRONIZED("synchronized"), THIS("this"), THROW("throw"), THROWS("throws"), TRANSIENT("transient"), TRUE("true"), TRY("try"), VOID("void"), VOLATILE("volatile"), WHILE("while");

        private String keyword;

        Keyword(String keyword) {
            this.keyword = keyword;
        }

        public static boolean isKeyword(String phrase) {
            for (Keyword kw : Keyword.values()) {
                if (kw.keyword.matches(phrase)) {
                    return true;
                }
            }
            return false;
        }
    }
}
