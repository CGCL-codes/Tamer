package org.dmd.mvw.tools.mvwgenerator.generated.dmo;

import java.io.Serializable;
import java.util.*;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcNamedObjectIF;
import org.dmd.dmc.DmcSliceInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.types.CamelCaseName;
import org.dmd.dms.generated.dmo.MetaDMSAG;
import org.dmd.dms.generated.types.DmcTypeCamelCaseNameSV;
import org.dmd.dms.generated.types.DmcTypeModifierMV;
import org.dmd.dms.generated.types.DmcTypeStringSV;
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MenuDMO;
import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The MenuImplementationConfig is used to define the various classes that
 * will
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class MenuBarDMO extends MenuDMO implements DmcNamedObjectIF, Serializable {

    public static final String constructionClassName = "MenuBar";

    static Map<Integer, HashMap<String, DmcAttributeValidator>> _AvDmAp;

    static Map<String, DmcObjectValidator> _OvDmAp;

    static {
        _AvDmAp = new HashMap<Integer, HashMap<String, DmcAttributeValidator>>();
        _OvDmAp = new HashMap<String, DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(), MetaVCAG.__AttributeSetValidator);
    }

    public MenuBarDMO() {
        super("MenuBar");
    }

    protected MenuBarDMO(String oc) {
        super(oc);
    }

    protected Map<Integer, HashMap<String, DmcAttributeValidator>> getAttributeValidators() {
        return (_AvDmAp);
    }

    protected Map<String, DmcObjectValidator> getObjectValidators() {
        return (_OvDmAp);
    }

    @Override
    public MenuBarDMO getNew() {
        MenuBarDMO rc = new MenuBarDMO();
        return (rc);
    }

    @Override
    public MenuBarDMO getSlice(DmcSliceInfo info) {
        MenuBarDMO rc = new MenuBarDMO();
        populateSlice(rc, info);
        return (rc);
    }

    public MenuBarDMO(DmcTypeModifierMV mods) {
        super("MenuBar");
        modrec(true);
        setModifier(mods);
    }

    public MenuBarDMO getModificationRecorder() {
        MenuBarDMO rc = new MenuBarDMO();
        rc.setElementName(getElementName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return (rc);
    }

    public CamelCaseName getObjectName() {
        DmcAttribute<?> name = get(MvwDMSAG.__elementName);
        if (name != null) return ((CamelCaseName) name.getSV());
        return (null);
    }

    public DmcAttribute<?> getObjectNameAttribute() {
        DmcAttribute<?> name = get(MvwDMSAG.__elementName);
        return (name);
    }

    public boolean equals(Object obj) {
        if (obj instanceof MenuBarDMO) {
            return (getObjectName().equals(((MenuBarDMO) obj).getObjectName()));
        }
        return (false);
    }

    public int hashCode() {
        CamelCaseName objn = getObjectName();
        if (objn == null) return (0);
        return (objn.hashCode());
    }

    public String getUseImpl() {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(MvwDMSAG.__useImpl);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setUseImpl(String value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__useImpl);
        if (attr == null) attr = new DmcTypeStringSV(MvwDMSAG.__useImpl);
        try {
            attr.set(value);
            set(MvwDMSAG.__useImpl, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setUseImpl(Object value) throws DmcValueException {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(MvwDMSAG.__useImpl);
        if (attr == null) attr = new DmcTypeStringSV(MvwDMSAG.__useImpl);
        attr.set(value);
        set(MvwDMSAG.__useImpl, attr);
    }

    public void remUseImpl() {
        rem(MvwDMSAG.__useImpl);
    }

    public CamelCaseName getElementName() {
        DmcTypeCamelCaseNameSV attr = (DmcTypeCamelCaseNameSV) get(MvwDMSAG.__elementName);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setElementName(CamelCaseName value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__elementName);
        if (attr == null) attr = new DmcTypeCamelCaseNameSV(MvwDMSAG.__elementName);
        try {
            attr.set(value);
            set(MvwDMSAG.__elementName, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setElementName(Object value) throws DmcValueException {
        DmcTypeCamelCaseNameSV attr = (DmcTypeCamelCaseNameSV) get(MvwDMSAG.__elementName);
        if (attr == null) attr = new DmcTypeCamelCaseNameSV(MvwDMSAG.__elementName);
        attr.set(value);
        set(MvwDMSAG.__elementName, attr);
    }

    public void remElementName() {
        rem(MvwDMSAG.__elementName);
    }
}
