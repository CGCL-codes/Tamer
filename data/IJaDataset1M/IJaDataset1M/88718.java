package alice.tucson.tools;

import java.io.*;
import alice.logictuple.*;
import alice.tucson.api.*;

public class EditSpec extends javax.swing.JFrame {

    TupleCentreId tid;

    String specFileName = "default.rsp";

    alice.util.jedit.JEditTextArea inputSpec;

    TucsonContextSynch context;

    /** Creates new form GUIEditTheory */
    public EditSpec(TupleCentreId tid_) {
        initComponents();
        setTitle("Specification Tuples of tuple centre " + tid_.getName() + "@" + tid_.getNode());
        inputSpec = new alice.util.jedit.JEditTextArea(new RespectTextArea());
        inputSpec.setTokenMarker(new RespectTokenMarker());
        inputSpec.setPreferredSize(new java.awt.Dimension(400, 600));
        java.awt.GridBagConstraints gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.gridwidth = 2;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.weightx = 100.0;
        gridBagConstraints1.weighty = 95.0;
        getContentPane().add(inputSpec, gridBagConstraints1);
        inputSpec.addCaretListener(new javax.swing.event.CaretListener() {

            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                caretPosition.setText("line " + (inputSpec.getCaretLine() + 1) + "   ");
            }
        });
        pack();
        tid = tid_;
        try {
            context = new TucsonContextSynch(Tucson.getContext(new AgentId("inspector_edit_spec")));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        outputState = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        bLoad = new javax.swing.JButton();
        bSave = new javax.swing.JButton();
        bSaveAs = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        bCheck = new javax.swing.JButton();
        bOk = new javax.swing.JButton();
        bGet = new javax.swing.JButton();
        caretPosition = new javax.swing.JTextField();
        getContentPane().setLayout(new java.awt.GridBagLayout());
        setTitle("S Inspector");
        addComponentListener(new java.awt.event.ComponentAdapter() {

            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        outputState.setBackground(new java.awt.Color(224, 214, 163));
        outputState.setEditable(false);
        outputState.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        outputState.setMinimumSize(new java.awt.Dimension(2, 20));
        outputState.setPreferredSize(new java.awt.Dimension(2, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(outputState, gridBagConstraints);
        jPanel2.setLayout(new java.awt.GridBagLayout());
        jPanel1.setLayout(new java.awt.GridBagLayout());
        bLoad.setFont(new java.awt.Font("Arial", 0, 11));
        bLoad.setText("Load");
        bLoad.setToolTipText("load the specification from a file");
        bLoad.setFocusPainted(false);
        bLoad.setPreferredSize(new java.awt.Dimension(80, 30));
        bLoad.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLoadActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(bLoad, gridBagConstraints);
        bSave.setFont(new java.awt.Font("Arial", 0, 11));
        bSave.setText("Save");
        bSave.setToolTipText("save the specification to current specification file");
        bSave.setFocusPainted(false);
        bSave.setPreferredSize(new java.awt.Dimension(80, 30));
        bSave.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel1.add(bSave, gridBagConstraints);
        bSaveAs.setFont(new java.awt.Font("Arial", 0, 11));
        bSaveAs.setText("Save As");
        bSaveAs.setToolTipText("save the specification to a file");
        bSaveAs.setFocusPainted(false);
        bSaveAs.setPreferredSize(new java.awt.Dimension(80, 30));
        bSaveAs.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveAsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel1.add(bSaveAs, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jPanel1, gridBagConstraints);
        jPanel3.setLayout(new java.awt.GridBagLayout());
        bCheck.setFont(new java.awt.Font("Arial", 0, 11));
        bCheck.setText("Test");
        bCheck.setToolTipText("test the specification");
        bCheck.setFocusPainted(false);
        bCheck.setPreferredSize(new java.awt.Dimension(60, 30));
        bCheck.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCheckActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(bCheck, gridBagConstraints);
        bOk.setFont(new java.awt.Font("Arial", 0, 11));
        bOk.setText("Set");
        bOk.setToolTipText("set the specification to the tuple centre");
        bOk.setFocusPainted(false);
        bOk.setPreferredSize(new java.awt.Dimension(60, 30));
        bOk.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel3.add(bOk, gridBagConstraints);
        bGet.setFont(new java.awt.Font("Arial", 0, 11));
        bGet.setText("Get");
        bGet.setToolTipText("get the specification from the tuple centre");
        bGet.setActionCommand("bRefresh");
        bGet.setMaximumSize(new java.awt.Dimension(50, 30));
        bGet.setMinimumSize(new java.awt.Dimension(50, 30));
        bGet.setPreferredSize(new java.awt.Dimension(60, 30));
        bGet.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel3.add(bGet, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jPanel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 10.0;
        getContentPane().add(jPanel2, gridBagConstraints);
        caretPosition.setBackground(new java.awt.Color(228, 214, 188));
        caretPosition.setEditable(false);
        caretPosition.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        caretPosition.setMinimumSize(new java.awt.Dimension(80, 20));
        caretPosition.setPreferredSize(new java.awt.Dimension(80, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(caretPosition, gridBagConstraints);
    }

    private void bGetActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String spec = context.getSpec(tid);
            inputSpec.setText(spec);
            outputState.setText("Specification read.");
        } catch (Exception ex) {
            outputState.setText("Specification not available.");
        }
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {
        try {
            String spec = context.getSpec(tid);
            inputSpec.setText(spec);
            outputState.setText("Specification read.");
        } catch (Exception ex) {
            outputState.setText("Specification not available.");
        }
    }

    private void bCheckActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String spec = inputSpec.getText();
            LogicTuple t = alice.respect.RespectVM.checkReactionSpec(spec);
            if (t.getName().equals("valid")) {
                outputState.setText("Specification Test OK.");
            } else {
                outputState.setText("Specification Test failed: error at/before line " + t.getArg(0).intValue() + ".");
            }
        } catch (Exception ex) {
        }
    }

    private void bSaveAsActionPerformed(java.awt.event.ActionEvent evt) {
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = chooser.getSelectedFile();
            if (file != null) {
                String name = file.getAbsolutePath();
                try {
                    FileOutputStream out = new FileOutputStream(name);
                    out.write(inputSpec.getText().getBytes());
                    outputState.setText("Specification saved (file " + name + ").");
                    specFileName = name;
                } catch (Exception ex) {
                    outputState.setText("Specification save failure (file " + name + ").");
                }
            }
        }
    }

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            FileOutputStream out = new FileOutputStream(specFileName);
            out.write(inputSpec.getText().getBytes());
            outputState.setText("Specification saved (file " + specFileName + ").");
        } catch (Exception ex) {
            outputState.setText("Specification save failure (file " + specFileName + " ).");
        }
    }

    private void bLoadActionPerformed(java.awt.event.ActionEvent evt) {
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = chooser.getSelectedFile();
            if (file != null) {
                String name = file.getAbsolutePath();
                try {
                    FileInputStream in = new FileInputStream(name);
                    byte[] text = new byte[in.available()];
                    in.read(text);
                    inputSpec.setText(new String(text));
                    outputState.setText("Specification loaded (file " + name + ").");
                    specFileName = name;
                } catch (Exception ex) {
                    outputState.setText("Specificatioon load failure (file " + name + ").");
                }
            }
        }
    }

    private void bOkActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String spec = inputSpec.getText();
            context.setSpec(tid, spec);
            outputState.setText("Specification set.");
        } catch (Exception ex) {
            outputState.setText("Specification set failure (invalid specification).");
        }
    }

    private javax.swing.JButton bSave;

    private javax.swing.JPanel jPanel3;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JButton bLoad;

    private javax.swing.JButton bOk;

    private javax.swing.JButton bGet;

    private javax.swing.JButton bSaveAs;

    private javax.swing.JTextField outputState;

    private javax.swing.JTextField caretPosition;

    private javax.swing.JButton bCheck;
}
