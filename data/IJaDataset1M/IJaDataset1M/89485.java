package ch.unizh.ini.jaer.projects.gesture.vlccontrol;

import java.awt.event.KeyEvent;
import java.beans.*;
import java.io.IOException;
import java.util.*;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.logging.Logger;
import java.util.prefs.Preferences;

/**
 * Demo of controlling VLC from jAER project.
 * @author Tobi
 */
public class VLCControlApp extends javax.swing.JFrame implements PropertyChangeListener {

    VLCControl vlc = new VLCControl();

    public VLCControl getVLCControl() {
        return vlc;
    }

    static Logger log = Logger.getLogger("VLCControlApp");

    static Preferences prefs = Preferences.userNodeForPackage(VLCControlApp.class);

    ArrayList<String> hist = new ArrayList();

    final int MAX_CMDS = 20;

    int idx = 0;

    /** Creates new form VLCControlApp */
    public VLCControlApp() {
        initComponents();
        vlc.getSupport().addPropertyChangeListener(this);
        commandTF.setText(prefs.get("lastcommand", ""));
        putCmd("fastforward");
        putCmd("rewind");
        putCmd("volup 1");
        putCmd("voldown 1");
        putCmd("pause");
        putCmd(prefs.get("lastcommand", "pause"));
    }

    final void putCmd(String s) {
        if (s == null || s.isEmpty()) return;
        if (hist.size() > 0 && s.equals(hist.get(hist.size() - 1))) return;
        hist.add(s);
        idx++;
    }

    String prevCmd() {
        if (idx == 0) return hist.get(0);
        return hist.get(idx - 1);
    }

    String nextCmd() {
        if (idx == hist.size() - 1) return hist.get(hist.size() - 1);
        return hist.get(idx + 1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        commandTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        responseTA = new javax.swing.JTextArea();
        connectButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VLCControl");
        commandTF.setToolTipText("enter text commands here, e.g. pause, fastforward, rewind");
        commandTF.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandTFActionPerformed(evt);
            }
        });
        commandTF.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyReleased(java.awt.event.KeyEvent evt) {
                commandTFKeyReleased(evt);
            }

            public void keyTyped(java.awt.event.KeyEvent evt) {
                commandTFKeyTyped(evt);
            }
        });
        responseTA.setColumns(20);
        responseTA.setEditable(false);
        responseTA.setRows(5);
        responseTA.setToolTipText("shows the output from vlc here");
        jScrollPane1.setViewportView(responseTA);
        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        disconnectButton.setText("Disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addComponent(connectButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(disconnectButton)).addComponent(commandTF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(connectButton).addComponent(disconnectButton)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(commandTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE).addContainerGap()));
        pack();
    }

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (vlc.isConnected()) {
            return;
        }
        try {
            vlc.connect();
        } catch (IOException ex) {
            log.warning(ex.toString());
        }
    }

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (vlc.isConnected()) vlc.disconnect();
        } catch (IOException ex) {
            log.warning(ex.toString());
        }
    }

    private void commandTFActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String s = commandTF.getText();
            prefs.put("lastcommand", s);
            putCmd(s);
            vlc.sendCommand(s);
        } catch (IOException ex) {
            log.warning(ex.toString());
        }
    }

    private void commandTFKeyTyped(java.awt.event.KeyEvent evt) {
    }

    private void commandTFKeyReleased(java.awt.event.KeyEvent evt) {
        int code = evt.getKeyCode();
        switch(code) {
            case KeyEvent.VK_UP:
                if (idx > 0) {
                    idx--;
                    commandTF.setText(hist.get(idx));
                }
                break;
            case KeyEvent.VK_DOWN:
                if (idx < hist.size() - 1) {
                    idx++;
                    commandTF.setText(hist.get(idx));
                }
                break;
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new VLCControlApp().setVisible(true);
            }
        });
    }

    private javax.swing.JTextField commandTF;

    private javax.swing.JButton connectButton;

    private javax.swing.JButton disconnectButton;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JTextArea responseTA;

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName() == VLCControl.CLIENT_MESSAGE) {
            if (evt.getNewValue() != null) {
                String s = (String) evt.getNewValue();
                responseTA.append(s);
                responseTA.setCaretPosition(responseTA.getText().length());
            }
        }
    }
}
