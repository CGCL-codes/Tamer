package ejb.bprocess.administration;

import javax.ejb.*;

/**
 * Created Jun 26, 2003 4:04:13 PM
 * Code generated by the Sun ONE Studio EJB Builder
 * @author Administrator
 */
public class UniformTitleBean implements javax.ejb.SessionBean {

    private javax.ejb.SessionContext context;

    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context = aContext;
    }

    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {
    }

    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {
    }

    public java.lang.String getNamesSearchAsExactPhrase(java.lang.String searchString) {
        String xmlstr = "";
        try {
            java.util.Vector vall = ((ejb.objectmodel.administration.LocalUniform_Title_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF")).getNamesSearchAsExactPhrase(searchString);
            xmlstr = (new ejb.bprocess.administration.UniformTitleXMLGenerator()).getNamesSearchAsExactPhrase(vall);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
        }
        return xmlstr;
    }

    public java.lang.String compareWithWholeData(java.lang.String title, java.lang.String languageCode, java.lang.String version, java.lang.String dateOfWork, java.util.Vector partNames) {
        String xmlstr = "";
        try {
            java.util.Vector objarr = ((ejb.objectmodel.administration.LocalUniform_Title_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF")).homeCompareWithWholeDate(title, languageCode, version, dateOfWork);
            boolean flag = true;
            java.util.Vector vMatch = null;
            java.util.Vector vUnmatchSimilar = null;
            java.util.HashSet hs = null;
            if (objarr.size() > 0) {
                for (int i = 0; i < objarr.size(); i++) {
                    flag = true;
                    java.util.Vector pnaf = (java.util.Vector) objarr.elementAt(i);
                    Object[] objtitles = ((ejb.objectmodel.administration.LocalUniform_Title_Part_NameHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_Part_Name")).findByUniformTitleIdLibraryId(Integer.parseInt(pnaf.elementAt(0).toString()), Integer.parseInt(pnaf.elementAt(1).toString())).toArray();
                    hs = new java.util.HashSet();
                    for (int j = 0; j < objtitles.length; j++) {
                        ejb.objectmodel.administration.LocalUniform_Title_Part_Name nt = (ejb.objectmodel.administration.LocalUniform_Title_Part_Name) objtitles[j];
                        hs.add(nt.getPart_Name().trim());
                    }
                    if ((hs.size() == partNames.size()) || (partNames.size() < hs.size())) {
                        System.out.println("Entered here");
                        for (int j = 0; j < partNames.size(); j++) {
                            if (!hs.contains(partNames.get(j).toString().trim())) {
                                System.out.println("Flag faslse");
                                flag = false;
                            }
                        }
                    } else {
                        flag = false;
                    }
                    System.out.println("Flag status now: " + flag);
                    if (flag) {
                        vMatch = new java.util.Vector(1, 1);
                        vMatch.addElement(pnaf.elementAt(0));
                        vMatch.addElement(pnaf.elementAt(1));
                        vMatch.addElement(pnaf.elementAt(2));
                        vMatch.addElement(pnaf.elementAt(3));
                        vMatch.addElement(pnaf.elementAt(4));
                        vMatch.addElement(pnaf.elementAt(5));
                        vMatch.addElement(hs);
                        System.out.println("Vmatch: " + vMatch);
                        break;
                    } else {
                        continue;
                    }
                }
            } else {
                flag = false;
            }
            if (!flag) {
                xmlstr = this.getNamesSearchAsExactPhrase(title);
            } else {
                xmlstr = (new ejb.bprocess.administration.UniformTitleXMLGenerator()).getMatchedDetails(vMatch);
            }
        } catch (Exception exp) {
            exp.printStackTrace();
        }
        return xmlstr;
    }

    public java.lang.String saveUniformtitle(java.lang.String title, java.lang.String languageCode, java.lang.String version, java.lang.String dateOfWork, java.util.Vector partNames, java.lang.String entryId, java.lang.String libraryId) {
        String xmlstr = "";
        int returnCode = 2;
        try {
            java.util.Collection col = ((ejb.objectmodel.administration.LocalUniform_Title_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF")).findByCompareWithWholeData(title, languageCode, version, dateOfWork);
            Object[] objarr = col.toArray();
            boolean flag = true;
            java.util.Vector vMatch = null;
            java.util.Vector vUnmatchSimilar = null;
            java.util.HashSet hs = null;
            if (col.size() > 0) {
                for (int i = 0; i < objarr.length; i++) {
                    flag = true;
                    ejb.objectmodel.administration.LocalUniform_Title_AF pnaf = (ejb.objectmodel.administration.LocalUniform_Title_AF) objarr[i];
                    Object[] objtitles = ((ejb.objectmodel.administration.LocalUniform_Title_Part_NameHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_Part_Name")).findByUniformTitleIdLibraryId(Integer.parseInt(pnaf.getUniform_Title_Id().toString()), Integer.parseInt(pnaf.getLibrary_Id().toString())).toArray();
                    hs = new java.util.HashSet();
                    for (int j = 0; j < objtitles.length; j++) {
                        ejb.objectmodel.administration.LocalUniform_Title_Part_Name nt = (ejb.objectmodel.administration.LocalUniform_Title_Part_Name) objtitles[j];
                        hs.add(nt.getPart_Name().trim());
                    }
                    if ((hs.size() == partNames.size()) || (partNames.size() < hs.size())) {
                        System.out.println("Entered here");
                        for (int j = 0; j < partNames.size(); j++) {
                            if (!hs.contains(partNames.get(j).toString().trim())) {
                                System.out.println("Flag faslse");
                                flag = false;
                            }
                        }
                    } else {
                        flag = false;
                    }
                    System.out.println("Flag status now: " + flag);
                    if (flag) {
                        vMatch = new java.util.Vector(1, 1);
                        vMatch.addElement(pnaf.getUniform_Title_Id().toString());
                        vMatch.addElement(pnaf.getLibrary_Id().toString());
                        vMatch.addElement(pnaf.getTitle());
                        vMatch.addElement(pnaf.getLanguage_Code());
                        vMatch.addElement(pnaf.getVersion());
                        vMatch.addElement(pnaf.getDate_Of_Work());
                        vMatch.addElement(hs);
                        System.out.println("Vmatch: " + vMatch);
                        break;
                    } else {
                        continue;
                    }
                }
            } else {
                flag = false;
            }
            if (!flag) {
                Integer ownerlibraryid = new Integer(Integer.parseInt(libraryId));
                Integer nameid = new Integer(ejb.bprocess.util.Utility.getInstance().getUniformTitleID(ownerlibraryid.intValue()));
                ((ejb.objectmodel.administration.LocalUniform_Title_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF")).createUsingAllFields(nameid, ownerlibraryid, languageCode, title, version, dateOfWork, ownerlibraryid, entryId);
                for (int j = 0; j < partNames.size(); j++) {
                    ((ejb.objectmodel.administration.LocalUniform_Title_Part_NameHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_Part_Name")).createUsingAllFields(nameid, ownerlibraryid, partNames.elementAt(j).toString());
                }
                returnCode = 0;
            } else {
                returnCode = 1;
            }
        } catch (Exception exp) {
            exp.printStackTrace();
            this.context.setRollbackOnly();
            returnCode = 2;
        }
        return (new ejb.bprocess.util.NewGenXMLGenerator()).getReturnCodeXMLString(returnCode);
    }

    public java.lang.String modifyUniformTitle(java.lang.String title, java.lang.String languageCode, java.lang.String version, java.lang.String dateOfWork, java.util.Vector partNames, java.lang.String Id, java.lang.String libraryId, java.lang.String entryId, java.lang.String entryLibraryId) {
        Integer idInt = new Integer(Id);
        Integer libIdInt = new Integer(libraryId);
        int returnCode = 0;
        try {
            Object[] obx = ((ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CatalogueRecord")).findByUniformTitle(idInt, libIdInt).toArray();
            java.util.ArrayList alcatrecs = new java.util.ArrayList();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord scr = (ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord) obx[i];
                alcatrecs.add(scr.getCatalogueRecordId());
                alcatrecs.add(scr.getOwner_Library_Id());
            }
            obx = ((ejb.objectmodel.administration.LocalSubUniformTitle_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubUniformTitle_AF")).findByUniformTitle(idInt, libIdInt).toArray();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.administration.LocalSubUniformTitle_AF spf = (ejb.objectmodel.administration.LocalSubUniformTitle_AF) obx[i];
                Object[] oby = ((ejb.objectmodel.administration.LocalSearchable_UniformSH_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_UniformSH_Ass")).findBySubjectUniformTitle(spf.getSubUniformTitle_Id(), spf.getLibrary_Id()).toArray();
                for (int j = 0; j < oby.length; j++) {
                    ejb.objectmodel.administration.LocalSearchable_UniformSH_Ass psh = (ejb.objectmodel.administration.LocalSearchable_UniformSH_Ass) oby[j];
                    alcatrecs.add(psh.getCatalogueRecordId());
                    alcatrecs.add(psh.getOwner_Library_Id());
                }
            }
            obx = ((ejb.objectmodel.administration.LocalUniform_Title_Part_NameHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_Part_Name")).findByUniformTitleIdLibraryId(idInt.intValue(), libIdInt.intValue()).toArray();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.administration.LocalUniform_Title_Part_Name nt = (ejb.objectmodel.administration.LocalUniform_Title_Part_Name) obx[i];
                nt.remove();
            }
            ejb.objectmodel.administration.Uniform_Title_AFKey pkey = new ejb.objectmodel.administration.Uniform_Title_AFKey();
            pkey.uniform_Title_Id = idInt;
            pkey.library_Id = libIdInt;
            ejb.objectmodel.administration.LocalUniform_Title_AF pnf = ((ejb.objectmodel.administration.LocalUniform_Title_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF")).findByPrimaryKey(pkey);
            pnf.setTitle(title);
            pnf.setDate_Of_Work(dateOfWork);
            pnf.setLanguage_Code(languageCode);
            pnf.setVersion(version);
            for (int i = 0; i < partNames.size(); i++) {
                ((ejb.objectmodel.administration.LocalUniform_Title_Part_NameHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_Part_Name")).createUsingAllFields(idInt, libIdInt, partNames.elementAt(i).toString());
            }
            ejb.bprocess.cataloguing.LocalRegenerateISORecord recgen = ((ejb.bprocess.cataloguing.LocalRegenerateISORecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("RegenerateISORecord")).create();
            for (int i = 0; i < alcatrecs.size(); i += 2) {
                Integer catrecid = (Integer) alcatrecs.get(i);
                Integer ownlibid = (Integer) alcatrecs.get(i + 1);
                ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey skey = new ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey();
                skey.catalogueRecordId = catrecid;
                skey.owner_Library_Id = ownlibid;
                ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord scatrec = ((ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CatalogueRecord")).findByPrimaryKey(skey);
                String wholerec = scatrec.getWholeCatalogueRecord();
                String newwholerec = recgen.regeneateISORecordFromAF(wholerec, catrecid.toString(), ownlibid.toString());
                scatrec.setWholeCatalogueRecord(newwholerec);
            }
            returnCode = 0;
        } catch (Exception exp) {
            context.setRollbackOnly();
            exp.printStackTrace();
            returnCode = 2;
        }
        String retxml = (new ejb.bprocess.util.NewGenXMLGenerator()).getReturnCodeXMLString(returnCode);
        return retxml;
    }

    public java.lang.String deleteAuthorityFile(java.lang.String id, java.lang.String libId, java.lang.String replaceId, java.lang.String replaceLibId) {
        Integer idInt = new Integer(id);
        Integer libIdInt = new Integer(libId);
        Integer replaceIdInt = null;
        Integer replaceLibIdInt = null;
        int returnCode = 0;
        if (!replaceId.equals("")) {
            replaceIdInt = new Integer(replaceId);
            replaceLibIdInt = new Integer(replaceLibId);
        }
        try {
            Object[] obx = ((ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CatalogueRecord")).findByUniformTitle(idInt, libIdInt).toArray();
            java.util.ArrayList alcatrecs = new java.util.ArrayList();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord scr = (ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord) obx[i];
                if (replaceIdInt != null) {
                    scr.setUniform_Title_Id(replaceIdInt);
                    scr.setUniformTitle_Library_Id(replaceLibIdInt);
                } else {
                    scr.setUniform_Title_Id(null);
                    scr.setUniformTitle_Library_Id(null);
                }
                alcatrecs.add(scr.getCatalogueRecordId());
                alcatrecs.add(scr.getOwner_Library_Id());
            }
            obx = ((ejb.objectmodel.administration.LocalSubUniformTitle_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubUniformTitle_AF")).findByUniformTitle(idInt, libIdInt).toArray();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.administration.LocalSubUniformTitle_AF spf = (ejb.objectmodel.administration.LocalSubUniformTitle_AF) obx[i];
                if (replaceIdInt != null) {
                    spf.setUniform_Title_Id(replaceIdInt);
                    spf.setUniformTitle_Library_Id(replaceLibIdInt);
                } else {
                    Object[] oby = ((ejb.objectmodel.administration.LocalSearchable_UniformSH_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_UniformSH_Ass")).findBySubjectUniformTitle(spf.getSubUniformTitle_Id(), spf.getLibrary_Id()).toArray();
                    for (int j = 0; j < oby.length; j++) {
                        ejb.objectmodel.administration.LocalSearchable_UniformSH_Ass psh = (ejb.objectmodel.administration.LocalSearchable_UniformSH_Ass) oby[j];
                        psh.remove();
                        alcatrecs.add(psh.getCatalogueRecordId());
                        alcatrecs.add(psh.getOwner_Library_Id());
                    }
                    oby = ((ejb.objectmodel.administration.LocalSubUniformTitle_GeneralSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubUniformTitle_GeneralSD")).findBySubUniformTitleIdLibraryId(spf.getSubUniformTitle_Id().intValue(), spf.getLibrary_Id().intValue()).toArray();
                    for (int j = 0; j < oby.length; j++) {
                        ejb.objectmodel.administration.LocalSubUniformTitle_GeneralSD psh = (ejb.objectmodel.administration.LocalSubUniformTitle_GeneralSD) oby[j];
                        psh.remove();
                    }
                    oby = ((ejb.objectmodel.administration.LocalSubUniformTitle_FormSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubUniformTitle_FormSD")).findBySubUniformTitleIdLibraryId(spf.getSubUniformTitle_Id().intValue(), spf.getLibrary_Id().intValue()).toArray();
                    for (int j = 0; j < oby.length; j++) {
                        ejb.objectmodel.administration.LocalSubUniformTitle_FormSD psh = (ejb.objectmodel.administration.LocalSubUniformTitle_FormSD) oby[j];
                        psh.remove();
                    }
                    oby = ((ejb.objectmodel.administration.LocalSubUniformTitle_ChronologicalSHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubUniformTitle_ChronologicalS")).findBySubUniformTitleIdLibraryId(spf.getSubUniformTitle_Id().intValue(), spf.getLibrary_Id().intValue()).toArray();
                    for (int j = 0; j < oby.length; j++) {
                        ejb.objectmodel.administration.LocalSubUniformTitle_ChronologicalS psh = (ejb.objectmodel.administration.LocalSubUniformTitle_ChronologicalS) oby[j];
                        psh.remove();
                    }
                    oby = ((ejb.objectmodel.administration.LocalSubUniformTitle_GeographicSDHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("SubUniformTitle_GeographicSD")).findBySubUniformTitleIdLibraryId(spf.getSubUniformTitle_Id().intValue(), spf.getLibrary_Id().intValue()).toArray();
                    for (int j = 0; j < oby.length; j++) {
                        ejb.objectmodel.administration.LocalSubUniformTitle_GeographicSD psh = (ejb.objectmodel.administration.LocalSubUniformTitle_GeographicSD) oby[j];
                        psh.remove();
                    }
                    spf.remove();
                }
            }
            obx = ((ejb.objectmodel.administration.LocalUniform_Title_Part_NameHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_Part_Name")).findByUniformTitleIdLibraryId(idInt.intValue(), libIdInt.intValue()).toArray();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.administration.LocalUniform_Title_Part_Name nt = (ejb.objectmodel.administration.LocalUniform_Title_Part_Name) obx[i];
                nt.remove();
            }
            ejb.bprocess.cataloguing.LocalRegenerateISORecord recgen = ((ejb.bprocess.cataloguing.LocalRegenerateISORecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("RegenerateISORecord")).create();
            for (int i = 0; i < alcatrecs.size(); i += 2) {
                Integer catrecid = (Integer) alcatrecs.get(i);
                Integer ownlibid = (Integer) alcatrecs.get(i + 1);
                ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey skey = new ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey();
                skey.catalogueRecordId = catrecid;
                skey.owner_Library_Id = ownlibid;
                ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord scatrec = ((ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CatalogueRecord")).findByPrimaryKey(skey);
                String wholerec = scatrec.getWholeCatalogueRecord();
                String newwholerec = recgen.regeneateISORecordFromAF(wholerec, catrecid.toString(), ownlibid.toString());
                scatrec.setWholeCatalogueRecord(newwholerec);
            }
            java.sql.Connection con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
            java.sql.Statement stat = con.createStatement();
            stat.executeUpdate("delete from Uniform_title_af where uniform_title_id='" + idInt.toString() + "' and library_Id='" + libIdInt.toString() + "'");
            stat.close();
            con.close();
            returnCode = 0;
        } catch (Exception exp) {
            context.setRollbackOnly();
            exp.printStackTrace();
            returnCode = 2;
        }
        String retxml = (new ejb.bprocess.util.NewGenXMLGenerator()).getReturnCodeXMLString(returnCode);
        return retxml;
    }

    public java.lang.String searchSeeTerm(java.lang.String seeTerm) {
        ejb.bprocess.util.Utility utility = ejb.bprocess.util.Utility.getInstance();
        String xml = "";
        String note = "", series = "";
        seeTerm = ejb.bprocess.util.SqlStringProcessor.getInstance().processString(seeTerm);
        java.util.Vector v = new java.util.Vector();
        try {
            System.out.println("now in EJB COrporateNameTH");
            java.sql.Connection con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
            if (con != null) {
                java.sql.Statement st = con.createStatement();
                String query = "select  Uniform_Title_Id ,Library_Id ,See_Id  ,See_Term    from Uniform_Title_AF_See  where UPPER(See_Term)  like  UPPER('" + seeTerm + "%') order by See_Term";
                System.out.println("");
                java.sql.ResultSet rs = null;
                st.setMaxRows(2001);
                rs = st.executeQuery(query);
                System.out.println("EJB UniformTitleTH  at after ResultSet");
                while (rs.next() && rs != null) {
                    String cid = String.valueOf(rs.getLong("Uniform_Title_Id"));
                    String libId = String.valueOf(rs.getInt("Library_Id"));
                    String sid = String.valueOf(rs.getInt("See_Id"));
                    String sterm = utility.getTestedString(rs.getString("See_Term"));
                    System.out.println("in while loop in EJB ..." + cid + "..." + libId + "..." + sid + "......" + sterm + ".....");
                    v.addElement(cid);
                    v.addElement(libId);
                    v.addElement(sid);
                    v.addElement(sterm);
                }
                rs.close();
                st.close();
                java.util.Vector vec = new java.util.Vector();
                for (int j = 0; j < v.size(); j += 4) {
                    note = "";
                    series = "";
                    System.out.println("in second vector loop");
                    if (((String) v.get(j + 2)).equals("0")) {
                        long corpNmId = Long.parseLong((String) v.get(j));
                        String authrec = "", libId = "", name = "";
                        st = con.createStatement();
                        String authquery = "select  Library_Id,Title,Note,SERIES_STATUS  from Uniform_Title_AF where Uniform_Title_Id  ='" + corpNmId + "' ";
                        rs = st.executeQuery(authquery);
                        if (rs.next()) {
                            libId = String.valueOf(rs.getInt("Library_Id"));
                            name = utility.getTestedString(rs.getString("Title"));
                            note = utility.getTestedString(rs.getString("Note"));
                            series = utility.getTestedString(rs.getString("SERIES_STATUS"));
                            authrec = name + (new ejb.bprocess.administration.UniformTitleXMLGenerator()).getDisplayString(note);
                        }
                        rs.close();
                        st.close();
                        vec.addElement(v.get(j));
                        vec.addElement(libId);
                        vec.addElement(v.get(j + 2));
                        vec.addElement(authrec);
                        System.out.println("after adding to vector");
                    } else {
                        vec.addElement(v.get(j));
                        vec.addElement(v.get(j + 1));
                        vec.addElement(v.get(j + 2));
                        vec.addElement(v.get(j + 3));
                    }
                    vec.addElement("");
                    vec.addElement(note);
                    vec.addElement(series);
                    System.out.println("after adding note to vector");
                }
                con.close();
                v.removeAllElements();
                v = null;
                System.out.println("before going to XMLGenerator");
                xml = new ejb.bprocess.administration.UniformTitleXMLGenerator().searchSeeTermXML(vec);
                System.out.println("EJB XML...." + xml);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return xml;
    }

    public java.lang.String getAuthorisedHeadingDetails(java.lang.String uniformId) {
        String xmlStr = "";
        ejb.bprocess.util.Utility utility = ejb.bprocess.util.Utility.getInstance();
        java.util.Vector vec = new java.util.Vector();
        String authrec = "";
        try {
            java.sql.Connection con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
            if (con != null) {
                System.out.println("getAuthoriseDetails...." + uniformId);
                java.sql.Statement st = con.createStatement();
                long corpoID = Long.parseLong(uniformId);
                System.out.println("after converting to long..." + corpoID);
                String query = "select  Library_Id,Title,Note,SERIES_STATUS  from Uniform_Title_AF where Uniform_Title_Id  ='" + corpoID + "' ";
                java.sql.ResultSet rs = st.executeQuery(query);
                System.out.println("resultset..." + rs);
                String note = "", titleofwork = "", libId = "", authrec1 = "", series = "";
                if (rs.next()) {
                    libId = String.valueOf(rs.getInt("Library_Id"));
                    String cname = utility.getTestedString(rs.getString("Title"));
                    series = utility.getTestedString(rs.getString("SERIES_STATUS"));
                    note = utility.getTestedString(rs.getString("Note"));
                    authrec1 = cname + (new ejb.bprocess.administration.UniformTitleXMLGenerator()).getDisplayString(note);
                }
                vec.addElement(uniformId);
                vec.addElement(libId);
                vec.addElement("0");
                vec.addElement(authrec1);
                vec.addElement("");
                vec.addElement(note);
                vec.addElement(series);
                st.close();
                rs.close();
                con.close();
            }
            con.close();
            xmlStr = new ejb.bprocess.administration.UniformTitleXMLGenerator().searchSeeTermXML(vec);
            System.out.println("finally response..." + xmlStr);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return xmlStr;
    }

    public java.lang.String getSeeAlsoDetails(java.lang.String uniformId) {
        String xmlStr = "", series = "";
        System.out.println("personalID.." + uniformId);
        try {
            ejb.bprocess.util.Utility utility = ejb.bprocess.util.Utility.getInstance();
            java.util.Hashtable hashTab = new java.util.Hashtable();
            java.util.Vector vec = new java.util.Vector();
            java.util.Vector vecseealso = new java.util.Vector();
            java.sql.Connection con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
            if (con != null) {
                java.sql.Statement st = con.createStatement();
                long corporateid = Long.parseLong(uniformId);
                String query = "select  R_Uniform_Title_Id   , Type_Of_Relation   from Uniform_Title_AF_SeeAlso  where Uniform_Title_Id  ='" + corporateid + "' ";
                java.sql.ResultSet rs = st.executeQuery(query);
                System.out.println("before first ResultSet");
                while (rs.next() && rs != null) {
                    String relPerId = String.valueOf(rs.getLong("R_Uniform_Title_Id"));
                    String relation = utility.getTestedString(rs.getString("Type_Of_Relation"));
                    System.out.println("in first Rs.." + relPerId + ".." + relation);
                    hashTab.put(relPerId, relation);
                }
                rs.close();
                st.close();
                st = con.createStatement();
                String querySee = "select Uniform_Title_Id   ,Type_Of_Relation   from Uniform_Title_AF_SeeAlso where  R_Uniform_Title_Id ='" + corporateid + "' ";
                rs = st.executeQuery(querySee);
                System.out.println("second query");
                while (rs.next() && rs != null) {
                    String relperId = String.valueOf(rs.getLong("Uniform_Title_Id"));
                    String rel = utility.getTestedString(rs.getString("Type_Of_Relation"));
                    System.out.println("second rs loop.." + relperId + ".." + rel);
                    if (!hashTab.containsKey(relperId)) {
                        if (rel.equalsIgnoreCase("BT")) rel = "NT"; else if (rel.equalsIgnoreCase("NT")) rel = "BT";
                        hashTab.put(relperId, rel);
                        System.out.println("after entry in Hash");
                    }
                }
                rs.close();
                st.close();
                java.util.Enumeration enumkeys = hashTab.keys();
                while (enumkeys.hasMoreElements()) {
                    String perId = (String) enumkeys.nextElement();
                    String reltype = (String) hashTab.get(perId);
                    System.out.println("in enumeration.." + perId + ".." + reltype);
                    vec.addElement(perId);
                    vec.addElement(reltype);
                }
                hashTab.clear();
                for (int k = 0; k < vec.size(); k += 2) {
                    long personId = Long.parseLong((String) vec.get(k));
                    String query1 = "select  Library_Id,Title,Note,SERIES_STATUS  from Uniform_Title_AF where Uniform_Title_Id  ='" + personId + "' ";
                    st = con.createStatement();
                    rs = st.executeQuery(query1);
                    String authrecSeeAlso = "";
                    String note = "", libId = "";
                    if (rs.next() && rs != null) {
                        libId = String.valueOf(rs.getInt("Library_Id"));
                        String pname = utility.getTestedString(rs.getString("Title"));
                        series = utility.getTestedString(rs.getString("SERIES_STATUS"));
                        note = utility.getTestedString(rs.getString("Note"));
                        authrecSeeAlso = pname + (new ejb.bprocess.administration.UniformTitleXMLGenerator()).getDisplayString(note);
                    }
                    vecseealso.addElement((String) vec.get(k));
                    vecseealso.addElement(libId);
                    vecseealso.addElement("0");
                    vecseealso.addElement(authrecSeeAlso);
                    vecseealso.addElement((String) vec.get(k + 1));
                    vecseealso.addElement(note);
                    vecseealso.addElement(series);
                    rs.close();
                    st.close();
                }
                rs.close();
                st.close();
                con.close();
            }
            xmlStr = new ejb.bprocess.administration.UniformTitleXMLGenerator().searchSeeTermXML(vecseealso);
            System.out.println("getSeeAlso .." + xmlStr);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return xmlStr;
    }

    public java.lang.String createUniformTitleAuthorityRecord(java.lang.String xmlStr) {
        String success = "";
        boolean isExisted = false;
        String title = "";
        String libId = "";
        String entryId = "";
        String entrylibId = "";
        String recXml = "";
        String version = "";
        String language = "";
        String dateofwork = "";
        String series = "";
        int maxCorpId = 0;
        java.util.Vector vecTitle = new java.util.Vector();
        System.out.println("start.......after declaring variable..." + xmlStr);
        ejb.bprocess.util.Utility utility = ejb.bprocess.util.Utility.getInstance();
        try {
            System.out.println("starting in Bean ..." + xmlStr);
            org.jdom.input.SAXBuilder saxb = new org.jdom.input.SAXBuilder();
            org.jdom.Document doc = saxb.build(new java.io.StringReader(xmlStr));
            org.jdom.Element root = doc.getRootElement();
            org.jdom.Element rec = root.getChild("record");
            java.util.List childList = rec.getChildren();
            java.util.Vector vecSee = new java.util.Vector();
            java.util.Vector vecSeeAlso = new java.util.Vector();
            for (int df = 0; df < childList.size(); df++) {
                org.jdom.Element mostfreq = (org.jdom.Element) childList.get(df);
                if (mostfreq.getAttributeValue("tag").equals("130")) {
                    java.util.List perChild = mostfreq.getChildren();
                    for (int sub = 0; sub < perChild.size(); sub++) {
                        org.jdom.Element subfield = (org.jdom.Element) perChild.get(sub);
                        if (subfield.getAttributeValue("code").equals("a")) {
                            title = utility.getTestedString(subfield.getText());
                            vecSee.addElement(title);
                        }
                        if (subfield.getAttributeValue("code").equals("f")) {
                            dateofwork = (utility.getTestedString(subfield.getText()));
                        }
                        if (subfield.getAttributeValue("code").equals("s")) {
                            version = (utility.getTestedString(subfield.getText()));
                        }
                        if (subfield.getAttributeValue("code").equals("l")) {
                            language = (utility.getTestedString(subfield.getText()));
                        }
                        if (subfield.getAttributeValue("code").equals("series")) {
                            series = (utility.getTestedString(subfield.getText()));
                        }
                        if (subfield.getAttributeValue("code").equals("libid")) {
                            libId = utility.getTestedString(subfield.getText());
                        }
                        if (subfield.getAttributeValue("code").equals("entryid")) {
                            entryId = utility.getTestedString(subfield.getText());
                        }
                        if (subfield.getAttributeValue("code").equals("entrylibid")) {
                            entrylibId = utility.getTestedString(subfield.getText());
                        }
                    }
                }
                if (mostfreq.getAttributeValue("tag").equals("430")) {
                    String seeTerm = utility.getTestedString(mostfreq.getChildText("subfield"));
                    vecSee.addElement(seeTerm);
                }
                if (mostfreq.getAttributeValue("tag").equals("530")) {
                    String seeAlosName = utility.getTestedString(mostfreq.getChildText("subfield"));
                    String rPerId = utility.getTestedString(mostfreq.getAttributeValue("uniformid"));
                    String rlibId = utility.getTestedString(mostfreq.getAttributeValue("libid"));
                    String relation = utility.getTestedString(mostfreq.getAttributeValue("relation"));
                    System.out.println("r_perId.." + rPerId + "..rlibIdId.." + rlibId + "....relation.." + relation);
                    vecSeeAlso.addElement(rPerId);
                    vecSeeAlso.addElement(rlibId);
                    vecSeeAlso.addElement(relation);
                }
            }
            java.sql.Connection con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
            if (con != null) {
                java.sql.Statement st = con.createStatement();
                String queryMaxPerId = "select max(Uniform_Title_Id)  as maxPerID from Uniform_Title_AF";
                java.sql.ResultSet rs = st.executeQuery(queryMaxPerId);
                if (rs.next() && rs != null) maxCorpId = rs.getInt("maxPerID");
                maxCorpId += 1;
                st.close();
                rs.close();
                System.out.println("maxPerId........." + maxCorpId);
                con.close();
            }
            recXml = (new ejb.bprocess.administration.UniformTitleXMLGenerator()).noteXMLGenerator((org.jdom.Element) rec.clone());
            System.out.println("record XML....." + recXml + "perid..." + maxCorpId + ".........series.." + series);
            ((ejb.objectmodel.administration.LocalUniform_Title_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF")).createUsingAdvancedFields(new Integer(maxCorpId), new Integer(libId), language, title, version, dateofwork, recXml, new Integer(entrylibId), entryId, series);
            for (int k = 0; k < vecSee.size(); k++) {
                ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF_See")).createUsingMinimalFields(new Integer(maxCorpId), new Integer(libId), new Integer(k), (String) vecSee.get(k));
                System.out.println("after seee..." + k + "..." + vecSee.get(k));
            }
            for (int j = 0; j < vecSeeAlso.size(); j += 3) {
                System.out.println(".." + vecSeeAlso.get(j) + "........." + vecSeeAlso.get(j + 1) + "............" + vecSeeAlso.get(j + 2));
                ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeAlsoHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF_SeeAlso")).createUsingMinimalFields((new Integer(maxCorpId)), (new Integer(libId)), (new Integer((String) vecSeeAlso.get(j))), (new Integer((String) vecSeeAlso.get(j + 1))), ((String) vecSeeAlso.get(j + 2)));
            }
            success = "SuccessFully Entered";
        } catch (Exception e) {
            success = "Save Operation Failured";
            e.printStackTrace();
        }
        org.jdom.Element operation = new org.jdom.Element("Operation");
        org.jdom.Element res = new org.jdom.Element("CreateResponse");
        org.jdom.Element persId = new org.jdom.Element("UniformId");
        operation.addContent(res);
        operation.addContent(persId);
        res.setText(success);
        persId.setText(String.valueOf(maxCorpId));
        org.jdom.Document docres = new org.jdom.Document(operation);
        org.jdom.output.XMLOutputter outres = new org.jdom.output.XMLOutputter();
        String xmlRes = outres.outputString(docres);
        return xmlRes;
    }

    public java.lang.String modifyUniformTitle2(java.lang.String uniformTitleId, java.lang.String libraryId, java.lang.String xmlNote) {
        String xmlStr = "";
        String title = "";
        String datework = "";
        String lang = "";
        String ver = "";
        String entryId = "";
        String entrylibId = "";
        String recXml = "";
        System.out.println("in starting of ModifyPersonal...." + uniformTitleId + "...." + libraryId + "........." + xmlNote);
        ejb.bprocess.util.Utility utility = ejb.bprocess.util.Utility.getInstance();
        Integer nameId = new Integer(uniformTitleId);
        Integer libId = new Integer(libraryId);
        int returnCode = 0;
        try {
            Object[] obx = ((ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CatalogueRecord")).findByUniformTitle(nameId, libId).toArray();
            java.util.ArrayList alcatrecs = new java.util.ArrayList();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord scr = (ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord) obx[i];
                alcatrecs.add(scr.getCatalogueRecordId());
                alcatrecs.add(scr.getOwner_Library_Id());
            }
            System.out.println("siz of catvec.1." + alcatrecs.size());
            obx = ((ejb.objectmodel.administration.LocalSearchable_UniformSH_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_UniformSH_Ass")).findBySubjectUniformTitle(nameId, libId).toArray();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.administration.LocalSearchable_UniformSH_Ass pnae = (ejb.objectmodel.administration.LocalSearchable_UniformSH_Ass) obx[i];
                alcatrecs.add(pnae.getCatalogueRecordId());
                alcatrecs.add(pnae.getOwner_Library_Id());
            }
            System.out.println("siz of catvec.2." + alcatrecs.size());
            obx = ((ejb.objectmodel.administration.LocalSearchable_UniformTitleSAE_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_UniformTitleSAE_Ass")).findByUniformTitleId(nameId, libId).toArray();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.administration.LocalSearchable_UniformTitleSAE_Ass pnae = (ejb.objectmodel.administration.LocalSearchable_UniformTitleSAE_Ass) obx[i];
                alcatrecs.add(pnae.getCatalogueRecordId());
                alcatrecs.add(pnae.getOwner_Library_Id());
            }
            System.out.println("siz of catvec.3." + alcatrecs.size());
            obx = ((ejb.objectmodel.cataloguing.authorityFiles.LocalSearchable_Series_Name_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_Series_Name_Ass")).findBySeriesNameId(nameId, libId).toArray();
            for (int i = 0; i < obx.length; i++) {
                ejb.objectmodel.cataloguing.authorityFiles.LocalSearchable_Series_Name_Ass pnae = (ejb.objectmodel.cataloguing.authorityFiles.LocalSearchable_Series_Name_Ass) obx[i];
                alcatrecs.add(pnae.getCatalogueRecordId());
                alcatrecs.add(pnae.getOwner_Library_Id());
            }
            System.out.println("siz of catvec.4." + alcatrecs.size());
            Object[] orem = ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF_See")).findByUniformTitleId(nameId, libId).toArray();
            for (int i = 0; i < orem.length; i++) {
                ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_See) orem[i]).remove();
            }
            Object[] orem1 = ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeAlsoHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF_SeeAlso")).findUniformTitleId(nameId, libId).toArray();
            for (int i = 0; i < orem1.length; i++) {
                ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeAlso) orem1[i]).remove();
            }
            ejb.objectmodel.administration.Uniform_Title_AFKey pkey = new ejb.objectmodel.administration.Uniform_Title_AFKey();
            pkey.uniform_Title_Id = nameId;
            pkey.library_Id = libId;
            ejb.objectmodel.administration.LocalUniform_Title_AF pnf = ((ejb.objectmodel.administration.LocalUniform_Title_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF")).findByPrimaryKey(pkey);
            org.jdom.input.SAXBuilder saxb1 = new org.jdom.input.SAXBuilder();
            org.jdom.Document doc1 = saxb1.build(new java.io.StringReader(xmlNote));
            org.jdom.Element root1 = doc1.getRootElement();
            org.jdom.Element rec1 = root1.getChild("record");
            if (root1.getName().trim().equals("record")) rec1 = root1;
            recXml = (new ejb.bprocess.administration.UniformTitleXMLGenerator()).noteXMLGenerator((org.jdom.Element) root1.clone());
            java.util.Vector vecSee = new java.util.Vector(1, 1);
            java.util.Vector vecSeeAlso = new java.util.Vector();
            org.jdom.input.SAXBuilder saxb = new org.jdom.input.SAXBuilder();
            org.jdom.Document doc = saxb.build(new java.io.StringReader(xmlNote));
            org.jdom.Element root = doc.getRootElement();
            org.jdom.Element rec = null;
            if (root.getName().trim().equals("record")) rec = root; else rec = root.getChild("record");
            java.util.List childList = rec.getChildren();
            for (int df = 0; df < childList.size(); df++) {
                org.jdom.Element mostfreq = (org.jdom.Element) childList.get(df);
                if (mostfreq.getAttributeValue("tag").equals("130")) {
                    java.util.List perChild = mostfreq.getChildren();
                    for (int sub = 0; sub < perChild.size(); sub++) {
                        org.jdom.Element subfield = (org.jdom.Element) perChild.get(sub);
                        if (subfield.getAttributeValue("code").equals("a")) {
                            title = utility.getTestedString(subfield.getText());
                            vecSee.addElement(title);
                        }
                        if (subfield.getAttributeValue("code").equals("f")) {
                            datework = utility.getTestedString(subfield.getText());
                        }
                        if (subfield.getAttributeValue("code").equals("l")) {
                            lang = utility.getTestedString(subfield.getText());
                        }
                        if (subfield.getAttributeValue("code").equals("s")) {
                            ver = utility.getTestedString(subfield.getText());
                        }
                    }
                }
                if (mostfreq.getAttributeValue("tag").equals("430")) {
                    String seeTerm = utility.getTestedString(mostfreq.getChildText("subfield"));
                    vecSee.addElement(seeTerm);
                }
                if (mostfreq.getAttributeValue("tag").equals("530")) {
                    String seeAlosName = utility.getTestedString(mostfreq.getChildText("subfield"));
                    String rPerId = utility.getTestedString(mostfreq.getAttributeValue("uniformid"));
                    String rlibId = utility.getTestedString(mostfreq.getAttributeValue("libid"));
                    String relation = utility.getTestedString(mostfreq.getAttributeValue("relation"));
                    System.out.println("r_perId.." + rPerId + "..rlibIdId.." + rlibId + "....relation.." + relation);
                    vecSeeAlso.addElement(rPerId);
                    vecSeeAlso.addElement(rlibId);
                    vecSeeAlso.addElement(relation);
                }
            }
            for (int k = 0; k < vecSee.size(); k++) {
                ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF_See")).createUsingMinimalFields(nameId, libId, new Integer(k), (String) vecSee.get(k));
                System.out.println("after seee..." + k + "..." + vecSee.get(k));
            }
            for (int j = 0; j < vecSeeAlso.size(); j += 3) {
                System.out.println(".." + vecSeeAlso.get(j) + "........." + vecSeeAlso.get(j + 1) + "............" + vecSeeAlso.get(j + 2));
                ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeAlsoHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF_SeeAlso")).createUsingMinimalFields(nameId, libId, (new Integer((String) vecSeeAlso.get(j))), (new Integer((String) vecSeeAlso.get(j + 1))), ((String) vecSeeAlso.get(j + 2)));
            }
            pnf.setTitle(title.trim());
            pnf.setVersion(ver);
            pnf.setDate_Of_Work(datework);
            pnf.setLanguage_Code(lang);
            pnf.setNote(recXml);
            ejb.bprocess.cataloguing.LocalRegenerateISORecord recgen = ((ejb.bprocess.cataloguing.LocalRegenerateISORecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("RegenerateISORecord")).create();
            for (int i = 0; i < alcatrecs.size(); i += 2) {
                Integer catrecid = (Integer) alcatrecs.get(i);
                Integer ownlibid = (Integer) alcatrecs.get(i + 1);
                ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey skey = new ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey();
                skey.catalogueRecordId = catrecid;
                skey.owner_Library_Id = ownlibid;
                ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord scatrec = ((ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CatalogueRecord")).findByPrimaryKey(skey);
                String wholerec = scatrec.getWholeCatalogueRecord();
                String newwholerec = recgen.regeneateISORecordFromAF2(wholerec, catrecid.toString(), ownlibid.toString());
                scatrec.setWholeCatalogueRecord(newwholerec);
                String xmlWholerec = "";
                xmlWholerec = (new newgenlib.marccomponent.conversion.Converter()).marcToMarcXML(newwholerec);
                scatrec.setXml_WholeRecord(xmlWholerec);
                try {
                    ejb.bprocess.cataloguing.BuildFreeTextIndex bfti = new ejb.bprocess.cataloguing.BuildFreeTextIndex();
                    bfti.buildIndex(xmlWholerec, catrecid.toString(), ownlibid.toString());
                } catch (Exception exp) {
                }
            }
            returnCode = 0;
        } catch (Exception exp) {
            context.setRollbackOnly();
            exp.printStackTrace();
            returnCode = 2;
        }
        String retxml = (new ejb.bprocess.util.NewGenXMLGenerator()).getReturnCodeXMLString(returnCode);
        System.out.println("retxml in end of modify.." + retxml);
        return retxml;
    }

    public java.lang.String getSeeAlsoRecForModify(java.lang.String uniformId, java.lang.String libraryId) {
        String xmlStr = "";
        System.out.println("in getSeeAlsoRecModify....nameId..." + uniformId + ".....libId......" + libraryId);
        ejb.bprocess.util.Utility util = ejb.bprocess.util.Utility.getInstance();
        try {
            Integer nameId = new Integer(uniformId.trim());
            Integer libId = new Integer(libraryId.trim());
            System.out.println("integr..." + nameId + "........" + libId);
            java.sql.Connection con = ejb.bprocess.util.DBConnector.getInstance().getDBConnection();
            java.util.Vector vec = new java.util.Vector(1, 1);
            if (con != null) {
                java.sql.Statement st = con.createStatement();
                String query = "select  R_Uniform_Title_Id ,R_Library_Id  , Type_Of_Relation   from Uniform_Title_AF_SeeAlso  where Uniform_Title_Id  ='" + nameId + "'  and Library_Id='" + libId + "'";
                java.sql.ResultSet rs = st.executeQuery(query);
                while (rs.next()) {
                    vec.addElement(util.getTestedString(String.valueOf(rs.getLong(1))));
                    vec.addElement(util.getTestedString(String.valueOf(rs.getInt(2))));
                    vec.addElement(util.getTestedString(rs.getString(3)));
                }
                rs.close();
                st.close();
            }
            if (con != null) con.close();
            System.out.println("size of vector......." + vec.size());
            if (vec.size() > 0) {
                org.jdom.Element seeAl = new org.jdom.Element("SeeAlsoResponse");
                for (int i = 0; i < vec.size(); i += 3) {
                    String disp = "";
                    disp = ((ejb.objectmodel.administration.LocalUniform_Title_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF")).getDisplayString(vec.get(i).toString().trim(), vec.get(i + 1).toString().trim());
                    org.jdom.Element seerec = new org.jdom.Element("SeeAlsoRecord");
                    org.jdom.Element nameIdele = new org.jdom.Element("UniformId");
                    nameIdele.setText(vec.get(i).toString().trim());
                    org.jdom.Element libele = new org.jdom.Element("LibraryId");
                    libele.setText(vec.get(i + 1).toString().trim());
                    org.jdom.Element dispele = new org.jdom.Element("Display");
                    dispele.setText(disp);
                    org.jdom.Element rel = new org.jdom.Element("Relation");
                    rel.setText(vec.get(i + 2).toString().trim());
                    seerec.addContent(nameIdele);
                    seerec.addContent(libele);
                    seerec.addContent(dispele);
                    seerec.addContent(rel);
                    seeAl.addContent(seerec);
                }
                org.jdom.Document doc = new org.jdom.Document(seeAl);
                org.jdom.output.XMLOutputter out = new org.jdom.output.XMLOutputter();
                out.outputString("");
                out.setIndent(true);
                out.setNewlines(true);
                xmlStr = out.outputString(doc);
            } else {
                org.jdom.Element ele = new org.jdom.Element("SeeAlsoNoResponse");
                ele.setText("NoRecordFound");
                org.jdom.Document docerr = new org.jdom.Document(ele);
                org.jdom.output.XMLOutputter xmlout = new org.jdom.output.XMLOutputter();
                xmlStr = xmlout.outputString(docerr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("end od getSeeAlso For Modify..." + xmlStr);
        return xmlStr;
    }

    public java.lang.String deleteAuthorityFile2(java.lang.String deleteXml, java.lang.String deletionMode) {
        String xml = "";
        ejb.bprocess.util.Utility util = ejb.bprocess.util.Utility.getInstance();
        System.out.println("starting in Delete AF...." + deleteXml + ".......deletion Mode........" + deletionMode);
        try {
            String str = "";
            org.jdom.input.SAXBuilder sax = new org.jdom.input.SAXBuilder();
            org.jdom.Document doc = sax.build(new java.io.StringReader(deleteXml));
            org.jdom.Element root = doc.getRootElement();
            java.util.List deleList = root.getChildren();
            java.util.Vector vecDel = new java.util.Vector(1, 1);
            java.util.Vector vecRep = new java.util.Vector(1, 1);
            for (int i = 0; i < deleList.size(); i++) {
                org.jdom.Element delete = (org.jdom.Element) deleList.get(i);
                if (delete.getName().trim().equals("Delete")) {
                    String nameId = util.getTestedString(delete.getChildText("NameId"));
                    String libr = util.getTestedString(delete.getChildText("LibraryId"));
                    vecDel.addElement(nameId);
                    vecDel.addElement(libr);
                } else if (delete.getName().trim().equals("Replace")) {
                    String nameId = util.getTestedString(delete.getChildText("NameId"));
                    String libr = util.getTestedString(delete.getChildText("LibraryId"));
                    vecRep.addElement(nameId);
                    vecRep.addElement(libr);
                }
            }
            Integer replaceNameId = null, replaceLibId = null;
            if (deletionMode.trim().equals("DeleteAndReplace")) {
                replaceNameId = new Integer(vecRep.get(0).toString());
                replaceLibId = new Integer(vecRep.get(1).toString());
            }
            java.util.ArrayList alcatrecs = new java.util.ArrayList();
            for (int k = 0; k < vecDel.size(); k += 2) {
                Integer nameId = new Integer(vecDel.get(k).toString());
                Integer libId = new Integer(vecDel.get(k + 1).toString());
                Object[] obx = ((ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CatalogueRecord")).findByUniformTitle(nameId, libId).toArray();
                for (int i = 0; i < obx.length; i++) {
                    ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord scr = (ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord) obx[i];
                    alcatrecs.add(scr.getCatalogueRecordId());
                    alcatrecs.add(scr.getOwner_Library_Id());
                    ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey skey = new ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey();
                    skey.catalogueRecordId = scr.getCatalogueRecordId();
                    skey.owner_Library_Id = scr.getOwner_Library_Id();
                    ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord scatrec = ((ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CatalogueRecord")).findByPrimaryKey(skey);
                    if (deletionMode.trim().equals("Delete")) {
                        scatrec.setUniform_Title_Id(null);
                        scatrec.setUniformTitle_Library_Id(null);
                    } else if (deletionMode.trim().equals("DeleteAndReplace")) {
                        scatrec.setUniform_Title_Id(replaceNameId);
                        scatrec.setUniformTitle_Library_Id(replaceLibId);
                    }
                }
                obx = ((ejb.objectmodel.administration.LocalSearchable_UniformSH_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_UniformSH_Ass")).findBySubjectUniformTitle(nameId, libId).toArray();
                for (int i = 0; i < obx.length; i++) {
                    ejb.objectmodel.administration.LocalSearchable_UniformSH_Ass pnae = (ejb.objectmodel.administration.LocalSearchable_UniformSH_Ass) obx[i];
                    Integer nmId = pnae.getCatalogueRecordId();
                    Integer lbId = pnae.getOwner_Library_Id();
                    alcatrecs.add(pnae.getCatalogueRecordId());
                    alcatrecs.add(pnae.getOwner_Library_Id());
                    ((ejb.objectmodel.administration.LocalSearchable_UniformSH_Ass) obx[i]).remove();
                    if (deletionMode.trim().equals("DeleteAndReplace")) {
                        try {
                            ((ejb.objectmodel.administration.LocalSearchable_UniformSH_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_UniformSH_Ass")).createUsingAllFields(nmId, lbId, replaceLibId, replaceNameId);
                        } catch (Exception e) {
                            e.printStackTrace();
                            System.out.println("Duplicate Entry Exception...");
                        }
                    }
                }
                obx = ((ejb.objectmodel.administration.LocalSearchable_UniformTitleSAE_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_UniformTitleSAE_Ass")).findByUniformTitleId(nameId, libId).toArray();
                for (int i = 0; i < obx.length; i++) {
                    ejb.objectmodel.administration.LocalSearchable_UniformTitleSAE_Ass pnae = (ejb.objectmodel.administration.LocalSearchable_UniformTitleSAE_Ass) obx[i];
                    Integer nmId = pnae.getCatalogueRecordId();
                    Integer lbId = pnae.getOwner_Library_Id();
                    alcatrecs.add(pnae.getCatalogueRecordId());
                    alcatrecs.add(pnae.getOwner_Library_Id());
                    ((ejb.objectmodel.administration.LocalSearchable_UniformTitleSAE_Ass) obx[i]).remove();
                    if (deletionMode.trim().equals("DeleteAndReplace")) {
                        try {
                            ((ejb.objectmodel.administration.LocalSearchable_UniformTitleSAE_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_UniformTitleSAE_Ass")).createUsingAllFields(nmId, lbId, replaceNameId, replaceLibId);
                        } catch (Exception e) {
                            e.printStackTrace();
                            System.out.println("Duplicate Entry Exception...");
                        }
                    }
                }
                obx = ((ejb.objectmodel.cataloguing.authorityFiles.LocalSearchable_Series_Name_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_Series_Name_Ass")).findBySeriesNameId(nameId, libId).toArray();
                for (int i = 0; i < obx.length; i++) {
                    ejb.objectmodel.cataloguing.authorityFiles.LocalSearchable_Series_Name_Ass pnae = (ejb.objectmodel.cataloguing.authorityFiles.LocalSearchable_Series_Name_Ass) obx[i];
                    Integer nmId = pnae.getCatalogueRecordId();
                    Integer lbId = pnae.getOwner_Library_Id();
                    alcatrecs.add(pnae.getCatalogueRecordId());
                    alcatrecs.add(pnae.getOwner_Library_Id());
                    ((ejb.objectmodel.cataloguing.authorityFiles.LocalSearchable_Series_Name_Ass) obx[i]).remove();
                    if (deletionMode.trim().equals("DeleteAndReplace")) {
                        try {
                            ((ejb.objectmodel.cataloguing.authorityFiles.LocalSearchable_Series_Name_AssHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_Series_Name_Ass")).createUsingAllFields(nmId, lbId, replaceNameId, replaceLibId);
                        } catch (Exception e) {
                            e.printStackTrace();
                            System.out.println("Duplicate Entry Exception...");
                        }
                    }
                }
                Object[] orem = ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF_See")).findByUniformTitleId(nameId, libId).toArray();
                for (int i = 0; i < orem.length; i++) {
                    ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_See) orem[i]).remove();
                }
                Object[] orem1 = ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeAlsoHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF_SeeAlso")).findUniformTitleId(nameId, libId).toArray();
                for (int i = 0; i < orem1.length; i++) {
                    ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeAlso) orem1[i]).remove();
                }
                orem1 = ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeAlsoHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF_SeeAlso")).findByUniformTitleRelationId(nameId, libId).toArray();
                for (int i = 0; i < orem1.length; i++) {
                    ((ejb.objectmodel.cataloguing.authorityFiles.LocalUniform_Title_AF_SeeAlso) orem1[i]).remove();
                }
                ejb.objectmodel.administration.Uniform_Title_AFKey afkey = new ejb.objectmodel.administration.Uniform_Title_AFKey();
                afkey.uniform_Title_Id = nameId;
                afkey.library_Id = libId;
                ((ejb.objectmodel.administration.LocalUniform_Title_AFHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Uniform_Title_AF")).findByPrimaryKey(afkey).remove();
            }
            ejb.bprocess.cataloguing.LocalRegenerateISORecord recgen = ((ejb.bprocess.cataloguing.LocalRegenerateISORecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("RegenerateISORecord")).create();
            for (int i = 0; i < alcatrecs.size(); i += 2) {
                Integer catrecid = (Integer) alcatrecs.get(i);
                Integer ownlibid = (Integer) alcatrecs.get(i + 1);
                ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey skey = new ejb.objectmodel.cataloguing.Searchable_CatalogueRecordKey();
                skey.catalogueRecordId = catrecid;
                skey.owner_Library_Id = ownlibid;
                ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecord scatrec = ((ejb.objectmodel.cataloguing.LocalSearchable_CatalogueRecordHome) ejb.bprocess.util.HomeFactory.getInstance().getHome("Searchable_CatalogueRecord")).findByPrimaryKey(skey);
                String wholerec = scatrec.getWholeCatalogueRecord();
                String newwholerec = recgen.regeneateISORecordFromAF2(wholerec, catrecid.toString(), ownlibid.toString());
                scatrec.setWholeCatalogueRecord(newwholerec);
                String xmlWholerec = "";
                xmlWholerec = (new newgenlib.marccomponent.conversion.Converter()).marcToMarcXML(newwholerec);
                scatrec.setXml_WholeRecord(xmlWholerec);
                try {
                    ejb.bprocess.cataloguing.BuildFreeTextIndex bfti = new ejb.bprocess.cataloguing.BuildFreeTextIndex();
                    bfti.buildIndex(xmlWholerec, catrecid.toString(), ownlibid.toString());
                } catch (Exception exp) {
                }
            }
            org.jdom.Element succ = new org.jdom.Element("DeleteResponse");
            succ.setText("SuccessFullyDeleted");
            org.jdom.Document doc2 = new org.jdom.Document(succ);
            org.jdom.output.XMLOutputter xmlout = new org.jdom.output.XMLOutputter();
            xml = xmlout.outputString(doc2);
        } catch (Exception e) {
            e.printStackTrace();
            org.jdom.Element succ = new org.jdom.Element("DeleteResponse");
            succ.setText("Failure");
            org.jdom.Document doc2 = new org.jdom.Document(succ);
            org.jdom.output.XMLOutputter xmlout = new org.jdom.output.XMLOutputter();
            xml = xmlout.outputString(doc2);
        }
        return xml;
    }
}
