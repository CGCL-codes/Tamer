package org.dmd.dmp.shared.generated.dmo;

import java.io.Serializable;
import java.util.*;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcObjectName;
import org.dmd.dmc.DmcSliceInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.types.NameContainer;
import org.dmd.dmp.shared.generated.dmo.ResponseDMO;
import org.dmd.dmp.shared.generated.enums.ScopeEnum;
import org.dmd.dmp.shared.generated.types.DmcTypeScopeEnumSV;
import org.dmd.dms.generated.dmo.MetaDMSAG;
import org.dmd.dms.generated.types.DmcTypeModifierMV;
import org.dmd.dms.generated.types.DmcTypeNameContainerSV;
import org.dmd.dms.generated.types.DmcTypeStringSV;
import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The DenotifyResponse is sent as a result of a DenotifyRequest.
 * <P>
 * Generated from the dmp schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class DenotifyResponseDMO extends ResponseDMO implements Serializable {

    public static final String constructionClassName = "DenotifyResponse";

    static Map<Integer, HashMap<String, DmcAttributeValidator>> _AvDmAp;

    static Map<String, DmcObjectValidator> _OvDmAp;

    static {
        _AvDmAp = new HashMap<Integer, HashMap<String, DmcAttributeValidator>>();
        _OvDmAp = new HashMap<String, DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(), MetaVCAG.__AttributeSetValidator);
    }

    public DenotifyResponseDMO() {
        super("DenotifyResponse");
    }

    protected DenotifyResponseDMO(String oc) {
        super(oc);
    }

    protected Map<Integer, HashMap<String, DmcAttributeValidator>> getAttributeValidators() {
        return (_AvDmAp);
    }

    protected Map<String, DmcObjectValidator> getObjectValidators() {
        return (_OvDmAp);
    }

    @Override
    public DenotifyResponseDMO getNew() {
        DenotifyResponseDMO rc = new DenotifyResponseDMO();
        return (rc);
    }

    @Override
    public DenotifyResponseDMO getSlice(DmcSliceInfo info) {
        DenotifyResponseDMO rc = new DenotifyResponseDMO();
        populateSlice(rc, info);
        return (rc);
    }

    public DenotifyResponseDMO(DmcTypeModifierMV mods) {
        super("DenotifyResponse");
        modrec(true);
        setModifier(mods);
    }

    public DenotifyResponseDMO getModificationRecorder() {
        DenotifyResponseDMO rc = new DenotifyResponseDMO();
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return (rc);
    }

    public NameContainer getTarget() {
        DmcTypeNameContainerSV attr = (DmcTypeNameContainerSV) get(DmpDMSAG.__target);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setTarget(NameContainer value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__target);
        if (attr == null) attr = new DmcTypeNameContainerSV(DmpDMSAG.__target);
        try {
            attr.set(value);
            set(DmpDMSAG.__target, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setTarget(DmcObjectName value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__target);
        if (attr == null) attr = new DmcTypeNameContainerSV(DmpDMSAG.__target);
        try {
            attr.set(value);
            set(DmpDMSAG.__target, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The alternative type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setTarget(Object value) throws DmcValueException {
        DmcTypeNameContainerSV attr = (DmcTypeNameContainerSV) get(DmpDMSAG.__target);
        if (attr == null) attr = new DmcTypeNameContainerSV(DmpDMSAG.__target);
        attr.set(value);
        set(DmpDMSAG.__target, attr);
    }

    public void remTarget() {
        rem(DmpDMSAG.__target);
    }

    public ScopeEnum getScope() {
        DmcTypeScopeEnumSV attr = (DmcTypeScopeEnumSV) get(DmpDMSAG.__scope);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setScope(ScopeEnum value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__scope);
        if (attr == null) attr = new DmcTypeScopeEnumSV(DmpDMSAG.__scope);
        try {
            attr.set(value);
            set(DmpDMSAG.__scope, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setScope(Object value) throws DmcValueException {
        DmcTypeScopeEnumSV attr = (DmcTypeScopeEnumSV) get(DmpDMSAG.__scope);
        if (attr == null) attr = new DmcTypeScopeEnumSV(DmpDMSAG.__scope);
        attr.set(value);
        set(DmpDMSAG.__scope, attr);
    }

    public void remScope() {
        rem(DmpDMSAG.__scope);
    }

    public String getFilter() {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmpDMSAG.__filter);
        if (attr == null) return (null);
        return (attr.getSV());
    }

    public void setFilter(String value) {
        DmcAttribute<?> attr = get(DmpDMSAG.__filter);
        if (attr == null) attr = new DmcTypeStringSV(DmpDMSAG.__filter);
        try {
            attr.set(value);
            set(DmpDMSAG.__filter, attr);
        } catch (DmcValueException ex) {
            throw (new IllegalStateException("The type specific set() method shouldn't throw exceptions!", ex));
        }
    }

    public void setFilter(Object value) throws DmcValueException {
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmpDMSAG.__filter);
        if (attr == null) attr = new DmcTypeStringSV(DmpDMSAG.__filter);
        attr.set(value);
        set(DmpDMSAG.__filter, attr);
    }

    public void remFilter() {
        rem(DmpDMSAG.__filter);
    }
}
