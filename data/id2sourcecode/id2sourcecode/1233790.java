    private int write0(Buffer pkt, int blockNum, int stripeNum) throws IOException, DuplicatePacketException, BlockAlreadyDecodedException, FileAlreadyDecodedException {
        if (raf.getMode().equals("r")) {
            throw new FileAlreadyDecodedException("Attempted to write packet in read-only mode");
        }
        if (params.isPaddingPacket(blockNum, stripeNum)) {
            log.warn("You have attempted to write a padding packet which is " + "is already generated by this FECFile and shouldn't be " + "sent across the network.  Talk to Justin for more info. " + "blockNum=" + blockNum + ",stripeNum=" + stripeNum);
            throw new DuplicatePacketException("Attempted padding packet write. blockNum=" + blockNum + ",stripeNum=" + stripeNum, blockNum, stripeNum, -1);
        }
        if (pp.isBlockDecoded(blockNum)) {
            throw new BlockAlreadyDecodedException("Block already decoded : blockNum=" + blockNum + ",stripeNum=" + stripeNum, blockNum, stripeNum);
        }
        if (pp.getPacketIndex(blockNum, stripeNum) != -1) {
            int i = pp.getPacketIndex(blockNum, stripeNum);
            throw new DuplicatePacketException("Duplicate packet: blockNum=" + blockNum + "stripeNum=" + stripeNum + "index=" + i, blockNum, stripeNum, i);
        }
        int packetIndex = -1;
        int packetCount = -1;
        synchronized (pp) {
            packetIndex = pp.addPacketEntry(blockNum, stripeNum);
            packetCount = pp.getPacketCount(blockNum);
        }
        raf.seekAndWrite(packetIndex * packetSize, pkt.b, pkt.off, pkt.len);
        fire(new PacketWrittenEvent(this, blockNum, stripeNum, packetCount));
        return packetCount;
    }
