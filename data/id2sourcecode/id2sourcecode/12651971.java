    public void generateBaseMethods(Writer w) throws IOException {
        super.generateBaseMethods(w);
        w.write("\n /**\n" + "  * Retrieves the " + suffix + " value, with locking, for this \n" + "  * <code>" + table.suffix + "</code> <code>Persistent</code>.\n" + ((description != null) ? "  * Field description: \n" + DSD.javadocFormat(2, 3, description) : "") + "  * \n" + "  * @generator " + "org.melati.poem.prepro.AtomFieldDef" + "#generateBaseMethods \n" + "  * @throws AccessPoemException \n" + "  *         if the current <code>AccessToken</code> \n" + "  *         does not confer write access rights \n" + "  * @return the value of the field <code>" + suffix + "</code> for this \n" + "  *         <code>" + table.suffix + "</code> <code>Persistent</code>  \n" + "  */\n");
        w.write("\n" + "  public " + type + " get" + suffix + "()\n" + "      throws AccessPoemException {\n" + "    readLock();\n" + "    return get" + suffix + "_unsafe();\n" + "  }\n" + "\n");
        w.write("\n /**\n" + "  * Sets the <code>" + suffix + "</code> value, with checking, for this \n" + "  * <code>" + table.suffix + "</code> <code>Persistent</code>.\n" + (description != null ? "  * Field description: \n" + DSD.javadocFormat(2, 3, description) : "") + "  * \n" + "  * @generator " + "org.melati.poem.prepro.AtomFieldDef" + "#generateBaseMethods  \n" + "  * @param cooked  a validated <code>int</code> \n" + "  * @throws AccessPoemException \n" + "  *         if the current <code>AccessToken</code> \n" + "  *         does not confer write access rights\n" + "  * @throws ValidationPoemException \n" + "  *         if the value is not valid\n" + "  */\n");
        w.write("  public void set" + suffix + "(" + type + " cooked)\n" + "      throws AccessPoemException, ValidationPoemException {\n" + "    _" + tableAccessorMethod + "().get" + suffix + "Column().\n" + "      getType().assertValidCooked(cooked);\n" + "    writeLock();\n" + "    set" + suffix + "_unsafe(cooked);\n" + "  }\n");
    }
