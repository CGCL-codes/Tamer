    public void fill(String src, String dest, String user) throws IOException, DocumentException {
        PdfReader reader = new PdfReader(src);
        FileOutputStream writer = new FileOutputStream(dest);
        PdfStamper stamper = new PdfStamper(reader, writer);
        stamper.setEncryption(true, "", "Gu7ruc*YAWaStEbr", 0);
        AcroFields fields = stamper.getAcroFields();
        Font font = FontFactory.getFont(FontFactory.COURIER_BOLD);
        font.setSize((float) 20.2);
        BaseFont baseFont = font.getBaseFont();
        fields.setFieldProperty("RentalUse", "textsize", new Float(20.2), null);
        fields.setFieldProperty("RentalUse", "textfont", baseFont, null);
        fields.setField("RentalUse", this.get_RentalUse());
        fields.setFieldProperty("Secondary FirstName", "textsize", new Float(20.2), null);
        fields.setFieldProperty("Secondary FirstName", "textfont", baseFont, null);
        fields.setField("Secondary FirstName", this.get_Secondary_FirstName());
        fields.setFieldProperty("OwnedByRelatedFarmer", "textsize", new Float(20.2), null);
        fields.setFieldProperty("OwnedByRelatedFarmer", "textfont", baseFont, null);
        fields.setField("OwnedByRelatedFarmer", this.get_OwnedByRelatedFarmer());
        fields.setFieldProperty("LifeEstateHolder", "textsize", new Float(20.2), null);
        fields.setFieldProperty("LifeEstateHolder", "textfont", baseFont, null);
        fields.setField("LifeEstateHolder", this.get_LifeEstateHolder());
        fields.setFieldProperty("City", "textsize", new Float(20.2), null);
        fields.setFieldProperty("City", "textfont", baseFont, null);
        fields.setField("City", this.get_City());
        fields.setFieldProperty("CrossingTownBoundaries", "textsize", new Float(20.2), null);
        fields.setFieldProperty("CrossingTownBoundaries", "textfont", baseFont, null);
        fields.setField("CrossingTownBoundaries", this.get_CrossingTownBoundaries());
        fields.setFieldProperty("usechgdate", "textsize", new Float(20.2), null);
        fields.setFieldProperty("usechgdate", "textfont", baseFont, null);
        fields.setField("usechgdate", this.get_usechgdate());
        fields.setFieldProperty("hs131HomesteadLocation", "textsize", new Float(20.2), null);
        fields.setFieldProperty("hs131HomesteadLocation", "textfont", baseFont, null);
        fields.setField("hs131HomesteadLocation", this.get_hs131HomesteadLocation());
        fields.setFieldProperty("Secondary TaxpayerSSN", "textsize", new Float(20.2), null);
        fields.setFieldProperty("Secondary TaxpayerSSN", "textfont", baseFont, null);
        fields.setField("Secondary TaxpayerSSN", this.get_Secondary_TaxpayerSSN());
        fields.setFieldProperty("disc131", "textsize", new Float(20.2), null);
        fields.setFieldProperty("disc131", "textfont", baseFont, null);
        fields.setField("disc131", this.get_disc131());
        fields.setFieldProperty("BusinessRentUseImprovementsYes", "textsize", new Float(20.2), null);
        fields.setFieldProperty("BusinessRentUseImprovementsYes", "textfont", baseFont, null);
        fields.setField("BusinessRentUseImprovementsYes", this.get_BusinessRentUseImprovementsYes());
        fields.setFieldProperty("hs131StateofLegalResidence", "textsize", new Float(20.2), null);
        fields.setFieldProperty("hs131StateofLegalResidence", "textfont", baseFont, null);
        fields.setField("hs131StateofLegalResidence", this.get_hs131StateofLegalResidence());
        fields.setFieldProperty("FirstName", "textsize", new Float(20.2), null);
        fields.setFieldProperty("FirstName", "textfont", baseFont, null);
        fields.setField("FirstName", this.get_FirstName());
        fields.setFieldProperty("AddressLine1", "textsize", new Float(20.2), null);
        fields.setFieldProperty("AddressLine1", "textfont", baseFont, null);
        fields.setField("AddressLine1", this.get_AddressLine1());
        fields.setFieldProperty("RevocableTrust", "textsize", new Float(20.2), null);
        fields.setFieldProperty("RevocableTrust", "textfont", baseFont, null);
        fields.setField("RevocableTrust", this.get_RevocableTrust());
        fields.setFieldProperty("TaxpayerSSN", "textsize", new Float(20.2), null);
        fields.setFieldProperty("TaxpayerSSN", "textfont", baseFont, null);
        fields.setField("TaxpayerSSN", this.get_TaxpayerSSN());
        fields.setFieldProperty("hdbox", "textsize", new Float(20.2), null);
        fields.setFieldProperty("hdbox", "textfont", baseFont, null);
        fields.setField("hdbox", this.get_hdbox());
        fields.setFieldProperty("hs131TownCityLegalResidence", "textsize", new Float(20.2), null);
        fields.setFieldProperty("hs131TownCityLegalResidence", "textfont", baseFont, null);
        fields.setField("hs131TownCityLegalResidence", this.get_hs131TownCityLegalResidence());
        fields.setFieldProperty("State", "textsize", new Float(20.2), null);
        fields.setFieldProperty("State", "textfont", baseFont, null);
        fields.setField("State", this.get_State());
        fields.setFieldProperty("BusinessRentUseImprovementsNo", "textsize", new Float(20.2), null);
        fields.setFieldProperty("BusinessRentUseImprovementsNo", "textfont", baseFont, null);
        fields.setField("BusinessRentUseImprovementsNo", this.get_BusinessRentUseImprovementsNo());
        fields.setFieldProperty("ZIPCode", "textsize", new Float(20.2), null);
        fields.setFieldProperty("ZIPCode", "textfont", baseFont, null);
        fields.setField("ZIPCode", this.get_ZIPCode());
        fields.setFieldProperty("BusinessUse", "textsize", new Float(20.2), null);
        fields.setFieldProperty("BusinessUse", "textfont", baseFont, null);
        fields.setField("BusinessUse", this.get_BusinessUse());
        fields.setFieldProperty("hs131SpanNumber", "textsize", new Float(20.2), null);
        fields.setFieldProperty("hs131SpanNumber", "textfont", baseFont, null);
        fields.setField("hs131SpanNumber", this.get_hs131SpanNumber());
        fields.setFieldProperty("dobhs131", "textsize", new Float(20.2), null);
        fields.setFieldProperty("dobhs131", "textfont", baseFont, null);
        fields.setField("dobhs131", this.get_dobhs131());
        fields.setFieldProperty("Secondary LastName", "textsize", new Float(20.2), null);
        fields.setFieldProperty("Secondary LastName", "textfont", baseFont, null);
        fields.setField("Secondary LastName", this.get_Secondary_LastName());
        fields.setFieldProperty("usebx", "textsize", new Float(20.2), null);
        fields.setFieldProperty("usebx", "textfont", baseFont, null);
        fields.setField("usebx", this.get_usebx());
        fields.setFieldProperty("dateclose", "textsize", new Float(20.2), null);
        fields.setFieldProperty("dateclose", "textfont", baseFont, null);
        fields.setField("dateclose", this.get_dateclose());
        fields.setFieldProperty("hs131SchoolDistrict", "textsize", new Float(20.2), null);
        fields.setFieldProperty("hs131SchoolDistrict", "textfont", baseFont, null);
        fields.setField("hs131SchoolDistrict", this.get_hs131SchoolDistrict());
        fields.setFieldProperty("LastName", "textsize", new Float(20.2), null);
        fields.setFieldProperty("LastName", "textfont", baseFont, null);
        fields.setField("LastName", this.get_LastName());
        stamper.setFormFlattening(true);
        stamper.setFullCompression();
        for (int i = 0; i < reader.getNumberOfPages() + 1; i++) {
            PdfContentByte overContent = stamper.getOverContent(i);
            if (overContent != null) {
                overContent.beginText();
                font = FontFactory.getFont(FontFactory.TIMES_ITALIC);
                font.setColor(BaseColor.BLUE);
                baseFont = font.getBaseFont();
                overContent.setColorFill(BaseColor.BLUE);
                overContent.setFontAndSize(baseFont, 24);
                overContent.showTextAligned(Element.ALIGN_RIGHT | Element.ALIGN_TOP, "Electronically filed via Modernized eFile", 20, 175, 90);
                overContent.endText();
                overContent.beginText();
                font = FontFactory.getFont(FontFactory.TIMES);
                font.setColor(BaseColor.RED);
                baseFont = font.getBaseFont();
                overContent.setColorFill(BaseColor.RED);
                overContent.setFontAndSize(baseFont, 8);
                overContent.showTextAligned(Element.ALIGN_CENTER | Element.ALIGN_BOTTOM, "Retrieved by " + user + " on " + new Date().toString(), 220, 3, 0);
                overContent.endText();
            }
        }
        stamper.close();
        reader.close();
    }
