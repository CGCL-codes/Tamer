    public Object[][] getContents() {
        return (new Object[][] { { "textframe.button.dismiss", "丢失" }, { "appletviewer.tool.title", "Applet Viewer：{0}" }, { "appletviewer.menu.applet", "Applet" }, { "appletviewer.menuitem.restart", "重新启动" }, { "appletviewer.menuitem.reload", "重新加载" }, { "appletviewer.menuitem.stop", "停止" }, { "appletviewer.menuitem.save", "保存..." }, { "appletviewer.menuitem.start", "启动" }, { "appletviewer.menuitem.clone", "复制..." }, { "appletviewer.menuitem.tag", "标记..." }, { "appletviewer.menuitem.info", "信息..." }, { "appletviewer.menuitem.edit", "编辑" }, { "appletviewer.menuitem.encoding", "字符编码" }, { "appletviewer.menuitem.print", "打印..." }, { "appletviewer.menuitem.props", "属性..." }, { "appletviewer.menuitem.close", "关闭" }, { "appletviewer.menuitem.quit", "退出" }, { "appletviewer.label.hello", "Hello..." }, { "appletviewer.status.start", "正在启动 applet..." }, { "appletviewer.appletsave.filedialogtitle", "将 Applet 序列化为文件" }, { "appletviewer.appletsave.err1", "将 {0} 序列化为 {1}" }, { "appletviewer.appletsave.err2", "在 appletSave 中：{0}" }, { "appletviewer.applettag", "所显示的标记" }, { "appletviewer.applettag.textframe", "Applet HTML 标记" }, { "appletviewer.appletinfo.applet", "-无 applet 信息 --" }, { "appletviewer.appletinfo.param", "-无参数信息 --" }, { "appletviewer.appletinfo.textframe", "Applet 信息" }, { "appletviewer.appletprint.printjob", "打印 Applet" }, { "appletviewer.appletprint.fail", "打印失败。" }, { "appletviewer.appletprint.finish", "已完成打印。" }, { "appletviewer.appletprint.cancel", "打印被取消。" }, { "appletviewer.appletencoding", "字符编码： {0}" }, { "appletviewer.parse.warning.requiresname", "警告：<param name=... value=...> 标记需要名字属性。" }, { "appletviewer.parse.warning.paramoutside", "警告：<param> 标记在 <applet> ... </applet> 外部。" }, { "appletviewer.parse.warning.applet.requirescode", "警告： <applet> 标记需要代码属性。" }, { "appletviewer.parse.warning.applet.requiresheight", "警告：<applet> 标记需要高度属性。" }, { "appletviewer.parse.warning.applet.requireswidth", "警告： <applet> 标记需要宽度属性。" }, { "appletviewer.parse.warning.object.requirescode", "警告： <object> 标记需要代码属性。" }, { "appletviewer.parse.warning.object.requiresheight", "警告：<object> 标记需要高度属性。" }, { "appletviewer.parse.warning.object.requireswidth", "警告：<object> 标记需要宽度属性。" }, { "appletviewer.parse.warning.embed.requirescode", "警告： <embed> 标记需要代码属性。" }, { "appletviewer.parse.warning.embed.requiresheight", "警告： <embed> 标记需要高度属性。" }, { "appletviewer.parse.warning.embed.requireswidth", "警告： <embed> 标记需要宽度属性。" }, { "appletviewer.parse.warning.appnotLongersupported", "警告： 不再支持 <app> 标记，请使用 <applet> ：" }, { "appletviewer.usage", "用法： appletviewer [-debug] [-J<javaflag>] [-encoding <character encoding type> ] url|file ..." }, { "appletviewer.main.err.unsupportedopt", "不支持的选项：{0}" }, { "appletviewer.main.err.unrecognizedarg", "不可识别的参数：{0}" }, { "appletviewer.main.err.dupoption", "重复使用的选项：{0}" }, { "appletviewer.main.err.inputfile", "没有指定输入文件。" }, { "appletviewer.main.err.badurl", "URL 错误：{0} ( {1} )" }, { "appletviewer.main.err.io", "读 {0} 时引发 I/O 异常" }, { "appletviewer.main.err.readablefile", "确保 {0} 是一个文件并可读。" }, { "appletviewer.main.err.correcturl", "{0} 是否为正确的 URL？" }, { "appletviewer.main.prop.store", "为AppletViewer设置的用户指定的属性" }, { "appletviewer.main.err.prop.cantread", "用户的属性文件不可读：{0}" }, { "appletviewer.main.err.prop.cantsave", "用户的属性文件不能被保存：{0}" }, { "appletviewer.main.warn.nosecmgr", "警告：由于当前在调试器中的限制而取消安全控制" }, { "appletviewer.main.debug.cantfinddebug", "未发现调试器！" }, { "appletviewer.main.debug.cantfindmain", "在调试器中未发现主函数！" }, { "appletviewer.main.debug.exceptionindebug", "在调试器中发生异常！" }, { "appletviewer.main.debug.cantaccess", "不能访问调试器！" }, { "appletviewer.main.nosecmgr", "警告：没有安装安全管理器！" }, { "appletviewer.main.warning", "警告：没有启动 Applets。请确保输入中包含 <applet> 标记。" }, { "appletviewer.main.warning.prop.overwrite", "警告：应用户请求临时覆盖系统属性：关键字：{0} 旧值：{1} 新值：{2}" }, { "appletviewer.main.warning.cantreadprops", "警告：不能读取 AppletViewer 的属性文件：{0} 使用确省值。" }, { "appletioexception.loadclass.throw.interrupted", "类加载被中断：{0}" }, { "appletioexception.loadclass.throw.notloaded", "未加载类：{0}" }, { "appletclassloader.loadcode.verbose", "将流打开到 {0} 以获取 {1}" }, { "appletclassloader.filenotfound", "查找 {0} 时找不到文件" }, { "appletclassloader.fileformat", "加载 {0} 时引发文件格式异常" }, { "appletclassloader.fileioexception", "加载 {0} 时引发 I/O 异常" }, { "appletclassloader.fileexception", "加载 {1} 时引发 {0} 异常" }, { "appletclassloader.filedeath", "加载 {1} 时 {0} 被杀掉" }, { "appletclassloader.fileerror", "加载 {1} 时 {0} 出错" }, { "appletclassloader.findclass.verbose.findclass", "{0} 发现类 {1}" }, { "appletclassloader.findclass.verbose.openstream", "打开流到 {0} 以获取 {1}" }, { "appletclassloader.getresource.verbose.forname", "名字 {0} 的 AppletClassLoader.getResource " }, { "appletclassloader.getresource.verbose.found", "资源 {0} 被确定为系统资源" }, { "appletclassloader.getresourceasstream.verbose", "资源 {0} 被确定为系统资源" }, { "appletpanel.runloader.err", "对象或代码参数！" }, { "appletpanel.runloader.exception", "对 {0} 进行序列化恢复时引发异常" }, { "appletpanel.destroyed", "Applet 已被销毁。" }, { "appletpanel.loaded", "Applet 已被加载。" }, { "appletpanel.started", "Applet 已被启动。" }, { "appletpanel.inited", "Applet 已被初始化。" }, { "appletpanel.stopped", "Applet 已被停止。" }, { "appletpanel.disposed", "Applet 已被撤消。" }, { "appletpanel.nocode", "APPLET 标记丢失 CODE 参数。" }, { "appletpanel.notfound", "Load: 找不到类 {0}。" }, { "appletpanel.nocreate", "Load: 无法初始化 {0}。" }, { "appletpanel.noconstruct", "Load: {0} 不是 public 对象或没有共有构造函数。" }, { "appletpanel.death", "已关闭" }, { "appletpanel.exception", "异常： {0}。" }, { "appletpanel.exception2", "异常：{0}: {1}。" }, { "appletpanel.error", "错误：{0}。" }, { "appletpanel.error2", "错误：{0}: {1}。" }, { "appletpanel.notloaded", "Init: 未加载 applet。" }, { "appletpanel.notinited", "Start: 未初始化 applet。" }, { "appletpanel.notstarted", "Stop: 未启动 applet。" }, { "appletpanel.notstopped", "Destroy: 未停止 applet。" }, { "appletpanel.notdestroyed", "Dispose: 未摧毁 applet。" }, { "appletpanel.notdisposed", "Load: 未丢弃 applet。" }, { "appletpanel.bail", "中断：保释。" }, { "appletpanel.filenotfound", "查找 {0} 时找不到文件" }, { "appletpanel.fileformat", "加载 {0} 时引发文件格式异常" }, { "appletpanel.fileioexception", "加载 {0} 时引发 I/O 异常" }, { "appletpanel.fileexception", "加载 {1} 时引发 {0} 异常" }, { "appletpanel.filedeath", "加载 {1} 时关闭了 {0}" }, { "appletpanel.fileerror", "加载 {1} 时 {0} 出错" }, { "appletillegalargumentexception.objectinputstream", "AppletObjectInputStream 需要加载器" }, { "appletprops.title", "AppletViewer 属性" }, { "appletprops.label.http.server", "Http 代理服务器：" }, { "appletprops.label.http.proxy", "Http 代理端口：" }, { "appletprops.label.network", "网络访问：" }, { "appletprops.choice.network.item.none", "无" }, { "appletprops.choice.network.item.applethost", "Applet 主机" }, { "appletprops.choice.network.item.unrestricted", "无限制" }, { "appletprops.label.class", "类访问：" }, { "appletprops.choice.class.item.restricted", "有限制" }, { "appletprops.choice.class.item.unrestricted", "无限制" }, { "appletprops.label.unsignedapplet", "允许使用无签名 applets：" }, { "appletprops.choice.unsignedapplet.no", "否" }, { "appletprops.choice.unsignedapplet.yes", "是" }, { "appletprops.button.apply", "应用" }, { "appletprops.button.cancel", "取消" }, { "appletprops.button.reset", "重置" }, { "appletprops.apply.exception", "保存属性 {0} 时失败" }, { "appletprops.title.invalidproxy", "无效的项" }, { "appletprops.label.invalidproxy", "Proxy 的端口号必须是一个正的整型数。" }, { "appletprops.button.ok", "确定" }, { "appletprops.prop.store", "为AppletViewer设置的用户指定的属性" }, { "appletsecurityexception.checkcreateclassloader", "安全性异常：classloader" }, { "appletsecurityexception.checkaccess.thread", "安全性异常：thread " }, { "appletsecurityexception.checkaccess.threadgroup", "安全性异常： threadgroup: {0}" }, { "appletsecurityexception.checkexit", "安全性异常：exit: {0}" }, { "appletsecurityexception.checkexec", "安全性异常：exec: {0}" }, { "appletsecurityexception.checklink", "安全性异常：link: {0}" }, { "appletsecurityexception.checkpropsaccess", "安全性异常：properties" }, { "appletsecurityexception.checkpropsaccess.key", "安全性异常：properties access {0}" }, { "appletsecurityexception.checkread.exception1", "安全性异常：{0}, {1}" }, { "appletsecurityexception.checkread.exception2", "安全性异常：file.read: {0}" }, { "appletsecurityexception.checkread", "安全性异常：file.read: {0} == {1}" }, { "appletsecurityexception.checkwrite.exception", "安全性异常：{0}, {1}" }, { "appletsecurityexception.checkwrite", "安全性异常：file.write: {0} == {1}" }, { "appletsecurityexception.checkread.fd", "安全性异常：fd.read" }, { "appletsecurityexception.checkwrite.fd", "安全性异常：fd.write" }, { "appletsecurityexception.checklisten", "安全性异常：socket.listen: {0}" }, { "appletsecurityexception.checkaccept", "安全性异常：socket.accept: {0}:{1}" }, { "appletsecurityexception.checkconnect.networknone", "安全性异常：socket.connect: {0}->{1}" }, { "appletsecurityexception.checkconnect.networkhost1", "安全性异常：不能用 {1} 的源连到 {0}。" }, { "appletsecurityexception.checkconnect.networkhost2", "安全性异常：无法解析主机 {0} 或 {1} 的 IP。" }, { "appletsecurityexception.checkconnect.networkhost3", "安全性异常：无法解析主机 {0} 的 IP。参见属性 trustProxy。" }, { "appletsecurityexception.checkconnect", "安全性异常：connect: {0}->{1}" }, { "appletsecurityexception.checkpackageaccess", "安全性异常：无法访问包 {0}" }, { "appletsecurityexception.checkpackagedefinition", "安全性异常：无法定义包 {0}" }, { "appletsecurityexception.cannotsetfactory", "安全性异常：无法设置工厂" }, { "appletsecurityexception.checkmemberaccess", "安全性异常：检查成员访问" }, { "appletsecurityexception.checkgetprintjob", "安全性异常：getPrintJob" }, { "appletsecurityexception.checksystemclipboardaccess", "安全性异常：getSystemClipboard" }, { "appletsecurityexception.checkawteventqueueaccess", "安全性异常：getEventQueue" }, { "appletsecurityexception.checksecurityaccess", "安全性异常：安全操作 {0}" }, { "appletsecurityexception.getsecuritycontext.unknown", "未知的类加载器类型。无法检查 getContext" }, { "appletsecurityexception.checkread.unknown", "未知的类加载器类型。无法检查由检查读 {0} 而生成的结果" }, { "appletsecurityexception.checkconnect.unknown", "未知的类加载器类型。无法检查由检查连接而生成的结果" } });
    }
