    void printOptionsInEffect() {
        if (quiet) return;
        assert (grmFile != null);
        DispatchWriter optWriter = new DispatchWriter();
        optWriter.setOutputBuffer(report);
        optWriter.write("\nOptions in effect for ");
        optWriter.write(grmFile);
        optWriter.write(":\n\n");
        for (int i = 0, n = actionBlocks.numActionBlocks(); i < n; i++) {
            BlockSymbol block = actionBlocks.get(i);
            optWriter.write("    ");
            optWriter.write(block.kind().option.canonicalName);
            optWriter.write("=(\"");
            optWriter.write(block.actionFileSymbol().name());
            optWriter.write("\",\"");
            optWriter.write(block.blockBegin());
            optWriter.write("\",\"");
            optWriter.write(block.blockEnd());
            optWriter.write("\")");
            if (actionBlocks.isIgnoredBlock(block.blockBegin())) optWriter.write(" : IGNORED");
            optWriter.write('\n');
        }
        optWriter.write('\n');
        optWriter.beginAutoWrap();
        optWriter.setIndentSize(4);
        optWriter.setSeparatorSize(2);
        optWriter.write(allocateString(OptionEnum.AST_DIRECTORY, astDirectory));
        optWriter.write(allocateString(OptionEnum.AST_TYPE, astType));
        optWriter.write(allocateString(OptionEnum.ATTRIBUTES, attributes));
        optWriter.write(automaticAst == AutomaticAst.NONE ? allocateString(OptionEnum.AUTOMATIC_AST, false) : allocateString(OptionEnum.AUTOMATIC_AST, automaticAst));
        optWriter.write(allocateString(OptionEnum.BACKTRACK, backtrack));
        if (byteFlag) optWriter.write(allocateString(OptionEnum.BYTE, true));
        optWriter.write(allocateString(OptionEnum.CONFLICTS, conflicts));
        optWriter.write(allocateString(OptionEnum.DAT_DIRECTORY, datDirectory));
        optWriter.write(allocateString(OptionEnum.DAT_FILE, datFile));
        optWriter.write(allocateString(OptionEnum.DCL_FILE, dclFile));
        optWriter.write(allocateString(OptionEnum.DEBUG, debug));
        optWriter.write(allocateString(OptionEnum.DEF_FILE, defFile));
        optWriter.write(allocateString(OptionEnum.DIRECTORY_PREFIX, directoryPrefix));
        optWriter.write(allocateString(OptionEnum.EDIT, edit));
        optWriter.write(allocateString(OptionEnum.ERROR_MAPS, errorMaps));
        optWriter.write(allocateString(OptionEnum.ESCAPE, escape));
        optWriter.write(allocateString(OptionEnum.EXPORT_TERMINALS, "(\"" + expFile + "\",\"" + expPrefix + "\",\"" + expSuffix + "\")"));
        if (extendsParsetable == null) optWriter.write(allocateString(OptionEnum.EXTENDS_PARSETABLE, false)); else if (extendsParsetable.length() == 0) optWriter.write(allocateString(OptionEnum.EXTENDS_PARSETABLE, true)); else optWriter.write(allocateString(OptionEnum.EXTENDS_PARSETABLE, extendsParsetable));
        optWriter.write(allocateString(OptionEnum.FACTORY, factory));
        optWriter.write(allocateString(OptionEnum.FILE_PREFIX, filePrefix));
        if (filter != null) optWriter.write(allocateString(OptionEnum.FILTER, filter));
        optWriter.write(allocateString(OptionEnum.FIRST, first));
        optWriter.write(allocateString(OptionEnum.FOLLOW, follow));
        optWriter.write(allocateString(OptionEnum.GLR, glr));
        optWriter.write(allocateString(OptionEnum.GOTO_DEFAULT, gotoDefault));
        optWriter.write("GRM-FILE=\"" + grmFile + "\"");
        if (impFile != null) optWriter.write(allocateString(OptionEnum.IMP_FILE, impFile));
        if (importTerminals != null) optWriter.write(allocateString(OptionEnum.IMPORT_TERMINALS, importTerminals));
        optWriter.write(allocateString(OptionEnum.INCLUDE_DIRECTORY, includeDirectory));
        if (!slr) optWriter.write(allocateString(OptionEnum.LALR, lalrLevel));
        optWriter.write(allocateString(OptionEnum.LEGACY, legacy));
        optWriter.write(allocateString(OptionEnum.LIST, list));
        optWriter.write(allocateString(OptionEnum.MARGIN, margin));
        optWriter.write(allocateString(OptionEnum.MAX_CASES, maxCases));
        optWriter.write(allocateString(OptionEnum.NAMES, names));
        optWriter.write(allocateString(OptionEnum.NT_CHECK, ntCheck));
        optWriter.write(allocateString(OptionEnum.OR_MARKER, orMarker));
        optWriter.write(allocateString(OptionEnum.OUT_DIRECTORY, outDirectory));
        optWriter.write(allocateString(OptionEnum.PACKAGE, packageName));
        optWriter.write(allocateString(OptionEnum.PARENT_SAVED, parentSaved));
        if (parsetableInterfaces == null) optWriter.write(allocateString(OptionEnum.PARSETABLE_INTERFACES, false)); else if (parsetableInterfaces.length() == 0) optWriter.write(allocateString(OptionEnum.PARSETABLE_INTERFACES, true)); else optWriter.write(allocateString(OptionEnum.PARSETABLE_INTERFACES, parsetableInterfaces));
        optWriter.write(allocateString(OptionEnum.PREFIX, prefix));
        optWriter.write(allocateString(OptionEnum.PRIORITY, priority));
        optWriter.write(allocateString(OptionEnum.PROGRAMMING_LANGUAGE, programmingLanguage));
        optWriter.write(allocateString(OptionEnum.PROSTHESES, prostheses));
        optWriter.write(allocateString(OptionEnum.PRS_FILE, prsFile));
        optWriter.write(allocateString(OptionEnum.QUIET, quiet));
        optWriter.write(allocateString(OptionEnum.READ_REDUCE, readReduce));
        optWriter.write(allocateString(OptionEnum.REMAP_TERMINALS, remapTerminals));
        optWriter.write(allocateString(OptionEnum.SCOPES, scopes));
        optWriter.write(allocateString(OptionEnum.SERIALIZE, serialize));
        optWriter.write(allocateString(OptionEnum.SHIFT_DEFAULT, shiftDefault));
        if (!byteFlag) optWriter.write("SHORT");
        optWriter.write(allocateString(OptionEnum.SINGLE_PRODUCTIONS, singleProductions));
        if (slr) optWriter.write(allocateString(OptionEnum.SLR, true));
        optWriter.write(allocateString(OptionEnum.SOFT_KEYWORDS, softKeywords));
        optWriter.write(allocateString(OptionEnum.STATES, states));
        optWriter.write(allocateString(OptionEnum.SUFFIX, suffix));
        optWriter.write(allocateString(OptionEnum.SYM_FILE, symFile));
        optWriter.write(allocateString(OptionEnum.TAB_FILE, tabFile));
        optWriter.write(allocateString(OptionEnum.TABLE, table));
        optWriter.write(allocateString(OptionEnum.TEMPLATE, templateName));
        optWriter.write(trace == Trace.NONE ? allocateString(OptionEnum.TRACE, false) : allocateString(OptionEnum.TRACE, trace));
        optWriter.write(variables == Variables.NONE ? allocateString(OptionEnum.VARIABLES, false) : variables == Variables.BOTH ? allocateString(OptionEnum.VARIABLES, true) : allocateString(OptionEnum.VARIABLES, variables));
        optWriter.write(allocateString(OptionEnum.VERBOSE, verbose));
        optWriter.write(visitor == Visitor.NONE ? allocateString(OptionEnum.VISITOR, false) : allocateString(OptionEnum.VISITOR, visitor));
        optWriter.write(allocateString(OptionEnum.VISITOR_TYPE, visitorType));
        optWriter.write(allocateString(OptionEnum.WARNINGS, warnings));
        optWriter.write(allocateString(OptionEnum.XREFERENCE, xref));
        optWriter.endAutoWrap();
        optWriter.close();
    }
