    public void testSequence_01() throws Exception {
        EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/interop/schemaInformedGrammar/acceptance.xsd", getClass(), m_compilerErrors);
        Assert.assertEquals(0, m_compilerErrors.getTotalCount());
        GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS);
        String[] exiFiles = { "/interop/schemaInformedGrammar/declaredProductions/sequence-01.bitPacked", "/interop/schemaInformedGrammar/declaredProductions/sequence-01.byteAligned", "/interop/schemaInformedGrammar/declaredProductions/sequence-01.preCompress", "/interop/schemaInformedGrammar/declaredProductions/sequence-01.compress" };
        for (int i = 0; i < Alignments.length; i++) {
            AlignmentType alignment = Alignments[i];
            EXIDecoder decoder = new EXIDecoder();
            Scanner scanner;
            decoder.setAlignmentType(alignment);
            URL url = resolveSystemIdAsURL(exiFiles[i]);
            int n_events;
            decoder.setEXISchema(grammarCache);
            decoder.setInputStream(url.openStream());
            scanner = decoder.processHeader();
            ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>();
            EXIEvent exiEvent;
            n_events = 0;
            while ((exiEvent = scanner.nextEvent()) != null) {
                ++n_events;
                exiEventList.add(exiEvent);
            }
            Assert.assertEquals(19, n_events);
            EventType eventType;
            EventTypeList eventTypeList;
            int pos = 0;
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_SD, exiEvent.getEventVariety());
            eventType = exiEvent.getEventType();
            Assert.assertSame(exiEvent, eventType);
            Assert.assertEquals(0, eventType.getIndex());
            eventTypeList = eventType.getEventTypeList();
            Assert.assertEquals(1, eventTypeList.getLength());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety());
            Assert.assertEquals("A", exiEvent.getName());
            Assert.assertEquals("urn:foo", exiEvent.getURI());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety());
            Assert.assertEquals("AB", exiEvent.getName());
            Assert.assertEquals("urn:foo", exiEvent.getURI());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety());
            Assert.assertEquals("", exiEvent.getCharacters().makeString());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety());
            Assert.assertEquals("AC", exiEvent.getName());
            Assert.assertEquals("urn:foo", exiEvent.getURI());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety());
            Assert.assertEquals("", exiEvent.getCharacters().makeString());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety());
            Assert.assertEquals("AC", exiEvent.getName());
            Assert.assertEquals("urn:foo", exiEvent.getURI());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety());
            Assert.assertEquals("", exiEvent.getCharacters().makeString());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety());
            Assert.assertEquals("AD", exiEvent.getName());
            Assert.assertEquals("urn:foo", exiEvent.getURI());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety());
            Assert.assertEquals("", exiEvent.getCharacters().makeString());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety());
            Assert.assertEquals("AE", exiEvent.getName());
            Assert.assertEquals("urn:foo", exiEvent.getURI());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety());
            Assert.assertEquals("", exiEvent.getCharacters().makeString());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety());
            exiEvent = exiEventList.get(pos++);
            Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety());
        }
    }
