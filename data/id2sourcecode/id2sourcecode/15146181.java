    private void createSourceFile(File destination, File sourceTemplate, String className, List<String> deps) throws IOException, ProjectNotOpenException, PackageNotFoundException {
        Pattern classNamePattern = Pattern.compile(CLASS_NAME_STRING);
        Pattern packageNamePattern = Pattern.compile(PACKAGE_NAME);
        String output = "";
        Matcher matcher;
        ArrayList<String> deps2 = new ArrayList<String>(deps);
        FileInputStream fis = new FileInputStream(sourceTemplate);
        FileChannel fc = fis.getChannel();
        ByteBuffer bbuf = fc.map(FileChannel.MapMode.READ_ONLY, 0, (int) fc.size());
        CharBuffer cbuf = Charset.forName("8859_1").newDecoder().decode(bbuf);
        matcher = classNamePattern.matcher(cbuf);
        output = matcher.replaceAll(className);
        matcher = packageNamePattern.matcher(output);
        if (BlueJHandler.getInstance().getCurrentPackageName().compareTo("") != 0) {
            output = matcher.replaceAll("package " + BlueJHandler.getInstance().getCurrentPackageName() + ";");
        } else {
            output = matcher.replaceAll("");
        }
        if (!deps2.isEmpty()) {
            for (int i = 0; i < deps2.size(); i++) {
                String temp = DEPENDANT_CLASS.concat(deps2.get(i));
                Pattern classDepPat = Pattern.compile(temp);
                matcher = classDepPat.matcher(output);
                for (int t = 0; t < components.size(); t++) {
                    PatternClass temp2 = components.get(t);
                    String classDep = String.valueOf(temp2.getId());
                    if (deps2.get(i).compareTo(classDep) == 0) {
                        output = matcher.replaceAll(temp2.getName());
                    }
                }
            }
        }
        FileWriter out = new FileWriter(destination);
        String newOutput = output.concat("\n\n/*\n " + "*Source file generated by patternCoder for BlueJ Version " + PatternCoder.VERSION + ".\n " + "*For more info, please visit " + PatternCoder.EXT_URL + ".\n " + "*/");
        out.write(newOutput);
        fis.close();
        out.close();
        addClass(className);
    }
