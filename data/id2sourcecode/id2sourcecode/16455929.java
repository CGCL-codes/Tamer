    public void generateAdditionalCode() {
        TabPrintWriter writer = new TabPrintWriter(options.createFileInOutDir("LosslessStringWalker.java"), 2);
        options.outputPackageStatement(writer);
        copyFromResource(writer, "LosslessStringWalker.java", "package");
        writer.close();
        writer = options.createJavaSourceInOutDir(readerClassName);
        writer.startLine("/** A utility class for deserializing a node description generated by ");
        writer.startLine("  * serialize(java.io.Writer).");
        writer.startLine("  */");
        writer.startLine("@SuppressWarnings(\"unused\")");
        writer.startLine("public class " + readerClassName + " {");
        writer.indent();
        writer.println();
        String returnType;
        if (ast.topTypes().size() == 1) {
            returnType = IterUtil.first(ast.topTypes()).name();
        } else {
            returnType = "java.lang.Object";
        }
        writer.startLine("public static " + returnType + " read(java.lang.String s)");
        writer.print(" throws java.io.IOException {");
        writer.indent();
        writer.startLine("return read(new java.io.StringReader(s));");
        writer.unindent();
        writer.startLine("}");
        writer.println();
        writer.startLine("public static " + returnType + " read(java.io.Reader r)");
        writer.print(" throws java.io.IOException {");
        writer.indent();
        writer.startLine("return new " + readerClassName + "(new java.io.BufferedReader(r))." + nodeReaderName + "();");
        writer.unindent();
        writer.startLine("}");
        writer.println();
        writer.startLine("protected java.io.BufferedReader in;");
        writer.startLine("protected char currentChar=' ';");
        writer.println();
        writer.startLine("protected " + readerClassName + "(java.io.BufferedReader r) { in = r; }");
        writer.println();
        writer.startLine("public " + returnType + " " + nodeReaderName + "()");
        writer.print(" throws java.io.IOException {");
        writer.indent();
        writer.startLine("java.lang.String name = readWord();");
        writer.startLine("if (name.equals(\"_\")) return null;");
        for (NodeClass c : ast.classes()) {
            if (!c.isAbstract()) {
                writer.startLine("if (name.equals(\"" + c.name() + ":\"))");
                writer.print(" return read" + upperCaseFirst(c.name()) + "Body();");
            }
        }
        writer.startLine("throw error();");
        writer.unindent();
        writer.startLine("}");
        writer.println();
        for (NodeClass c : ast.classes()) {
            if (!c.isAbstract()) {
                generateReadMethod(c, writer);
            }
        }
        writer.println();
        for (TypeName t : helpers) {
            generateHelper(t, writer);
        }
        copyFromResource(writer, "ReaderMethods.txt", null);
        writer.unindent();
        writer.startLine("}");
        writer.println();
        writer.close();
    }
