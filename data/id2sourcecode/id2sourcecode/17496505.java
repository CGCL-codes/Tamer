    public void test(RepositoryStore repo) throws Exception {
        System.out.println("Repotest - Testing basic data");
        ContentName name = ContentName.fromNative("/repoTest/data1");
        ContentObject content = ContentObject.buildContentObject(name, "Here's my data!".getBytes());
        repo.saveContent(content);
        checkData(repo, name, "Here's my data!");
        repo.saveContent(content);
        System.out.println("Repotest - Testing multiple digests for same data");
        ContentObject digest2 = ContentObject.buildContentObject(name, "Testing2".getBytes());
        repo.saveContent(digest2);
        ContentName digestName = new ContentName(name, digest2.digest());
        checkDataWithDigest(repo, digestName, "Testing2");
        System.out.println("Repotest - Testing same digest for different data and/or publisher");
        KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
        kpg.initialize(512);
        KeyPair pair1 = kpg.generateKeyPair();
        PublisherPublicKeyDigest pubKey1 = new PublisherPublicKeyDigest(pair1.getPublic());
        KeyLocator kl = new KeyLocator(new ContentName(keyprefix, pubKey1.digest()));
        repo.saveContent(ContentObject.buildContentObject(kl.name().name(), pubKey1.digest()));
        SignedInfo si = new SignedInfo(pubKey1, kl);
        ContentObject digestSame1 = new ContentObject(name, si, "Testing2".getBytes(), pair1.getPrivate());
        repo.saveContent(digestSame1);
        KeyPair pair2 = kpg.generateKeyPair();
        PublisherPublicKeyDigest pubKey2 = new PublisherPublicKeyDigest(pair2.getPublic());
        kl = new KeyLocator(new ContentName(keyprefix, pubKey2.digest()));
        repo.saveContent(ContentObject.buildContentObject(kl.name().name(), pubKey2.digest()));
        SignedInfo si2 = new SignedInfo(pubKey2, kl);
        ContentObject digestSame2 = new ContentObject(name, si2, "Testing2".getBytes(), pair2.getPrivate());
        repo.saveContent(digestSame2);
        checkDataAndPublisher(repo, name, "Testing2", pubKey1);
        checkDataAndPublisher(repo, name, "Testing2", pubKey2);
        System.out.println("Repotest - Testing too long data");
        String tooLongName = "0123456789";
        for (int i = 0; i < 30; i++) tooLongName += "0123456789";
        longName = ContentName.fromNative("/repoTest/" + tooLongName);
        ContentObject co = ContentObject.buildContentObject(longName, "Long name!".getBytes());
        longNameDigest = co.digest();
        repo.saveContent(co);
        checkData(repo, longName, "Long name!");
        digest2 = ContentObject.buildContentObject(longName, "Testing2".getBytes());
        repo.saveContent(digest2);
        digestName = new ContentName(longName, digest2.digest());
        checkDataWithDigest(repo, digestName, "Testing2");
        String wayTooLongName = tooLongName;
        for (int i = 0; i < 30; i++) wayTooLongName += "0123456789";
        ContentName reallyLongName = ContentName.fromNative("/repoTest/" + wayTooLongName);
        repo.saveContent(ContentObject.buildContentObject(reallyLongName, "Really Long name!".getBytes()));
        checkData(repo, reallyLongName, "Really Long name!");
        byte[][] longNonASCIIBytes = new byte[2][];
        longNonASCIIBytes[0] = "repoTest".getBytes();
        longNonASCIIBytes[1] = new byte[300];
        for (int i = 0; i < 30; i++) {
            rand.nextBytes(longNonASCIIBytes[1]);
            ContentName lnab = new ContentName(longNonASCIIBytes);
            repo.saveContent(ContentObject.buildContentObject(lnab, ("Long and Non ASCII " + i).getBytes()));
            checkData(repo, lnab, "Long and Non ASCII " + i);
        }
        System.out.println("Repotest - Testing invalid characters in name");
        badCharName = ContentName.fromNative("/repoTest/" + "*x?y<z>u");
        repo.saveContent(ContentObject.buildContentObject(badCharName, "Funny characters!".getBytes()));
        checkData(repo, badCharName, "Funny characters!");
        badCharLongName = ContentName.fromNative("/repoTest/" + tooLongName + "*x?y<z>u");
        repo.saveContent(ContentObject.buildContentObject(badCharLongName, "Long and funny".getBytes()));
        checkData(repo, badCharLongName, "Long and funny");
        System.out.println("Repotest - Testing different kinds of interests");
        String prefix1 = "/repoTest/nextTest";
        ContentName name1 = ContentName.fromNative(prefix1 + "/aaa");
        ContentObject content1 = addRelativeTestContent(repo, prefix1, "");
        checkData(repo, Interest.next(new ContentName(name1, content1.digest()), 2, null), "bbb");
        checkData(repo, Interest.last(new ContentName(name1, content1.digest()), 2, null), "fff");
        checkData(repo, Interest.next(new ContentName(name1, content1.digest()), new Exclude(new byte[][] { "bbb".getBytes(), "ccc".getBytes() }), 2, null, null, null), "ddd");
        System.out.println("Repotest - Testing different kinds of interests in a mixture of encoded/standard data");
        ContentName nonLongName = ContentName.fromNative("/repoTestLong/nextTestLong/aaa");
        ContentObject nonLongContent = addRelativeTestContent(repo, "/repoTestLong/nextTestLong", "/" + tooLongName);
        checkData(repo, Interest.next(new ContentName(nonLongName, nonLongContent.digest()), 2, null), "bbb");
        checkData(repo, Interest.last(new ContentName(nonLongName, nonLongContent.digest()), 2, null), "fff");
        checkData(repo, Interest.next(new ContentName(nonLongName, nonLongContent.digest()), new Exclude(new byte[][] { "bbb".getBytes(), "ccc".getBytes() }), 2, null, null, null), "ddd");
        System.out.println("Test some unusual left and right searches that could break the prescanner");
        Exclude excludeEandF = new Exclude(new byte[][] { "eee".getBytes(), "fff".getBytes() });
        checkData(repo, Interest.last(new ContentName(name1, content1.digest()), excludeEandF, 2, null, null, null), "ddd");
        Interest handInterest = Interest.constructInterest(ContentName.fromNative("/repoTest/nextTest"), excludeEandF, Interest.CHILD_SELECTOR_RIGHT, null, null, null);
        checkData(repo, handInterest, "ddd");
        String prefix2 = "/repoTest/nextTest/bbb";
        ContentName name2 = ContentName.fromNative(prefix2 + "/aaa");
        ContentObject content2 = addRelativeTestContent(repo, prefix2, "");
        checkData(repo, Interest.next(new ContentName(name2, content2.digest()), 3, null), "bbb");
        checkData(repo, Interest.next(new ContentName(name2, content2.digest()), new Exclude(new byte[][] { "bbb".getBytes(), "ccc".getBytes() }), 3, null, null, null), "ddd");
        String prefix3 = "/repoTest/nextTest/ddd";
        ContentName name3 = ContentName.fromNative(prefix3 + "/aaa");
        ContentObject content3 = addRelativeTestContent(repo, prefix3, "");
        checkData(repo, Interest.last(new ContentName(name3, content3.digest()), excludeEandF, 3, null, null, null), "ddd");
        Interest handInterest1 = Interest.constructInterest(ContentName.fromNative(prefix3), excludeEandF, Interest.CHILD_SELECTOR_RIGHT, null, null, null);
        checkData(repo, handInterest1, "ddd");
        Exclude excludeAll = Exclude.uptoFactory("fff".getBytes());
        Interest excludeLeftInterest = Interest.next(name3, excludeAll, 2, null, null, null);
        ContentObject testScreenOut = repo.getContent(excludeLeftInterest);
        Assert.assertTrue(testScreenOut == null);
        System.out.println("Repotest - test that rightSearch iterates backwards through objects");
        repo.saveContent(new ContentObject(ContentName.fromNative(prefix1 + "/bbb"), si, "funnyRightSearch".getBytes(), pair1.getPrivate()));
        repo.saveContent(new ContentObject(ContentName.fromNative(prefix1 + "/aaa"), si, "wrongRightSearch".getBytes(), pair1.getPrivate()));
        ContentName name4 = ContentName.fromNative(prefix1 + "/aa");
        Interest rightSearch = Interest.last(name4, null, 2, null, null, pubKey1);
        checkData(repo, rightSearch, "funnyRightSearch");
        System.out.println("Repotest - test that rightSearch gives left branch of rightMost object");
        String prefix4 = "/repoTest/nextTest/fff";
        addRelativeTestContent(repo, prefix4, "");
        Interest rightInterest = Interest.last(name1, null, null);
        checkData(repo, rightInterest, "aaa");
        System.out.println("Repotest - testing version and segment files");
        versionedName = ContentName.fromNative("/repoTest/testVersion");
        versionedName = VersioningProfile.addVersion(versionedName);
        repo.saveContent(ContentObject.buildContentObject(versionedName, "version".getBytes()));
        checkData(repo, versionedName, "version");
        segmentedName1 = SegmentationProfile.segmentName(versionedName, 1);
        repo.saveContent(ContentObject.buildContentObject(segmentedName1, "segment1".getBytes()));
        checkData(repo, segmentedName1, "segment1");
        segmentedName223 = SegmentationProfile.segmentName(versionedName, 223);
        repo.saveContent(ContentObject.buildContentObject(segmentedName223, "segment223".getBytes()));
        checkData(repo, segmentedName223, "segment223");
        System.out.println("Repotest - storing sequence of objects for versioned stream read testing");
        versionedNameNormal = ContentName.fromNative("/testNameSpace/testVersionNormal");
        versionedNameNormal = VersioningProfile.addVersion(versionedNameNormal);
        repo.saveContent(ContentObject.buildContentObject(versionedNameNormal, "version-normal".getBytes()));
        checkData(repo, versionedNameNormal, "version-normal");
        byte[] finalBlockID = SegmentationProfile.getSegmentNumberNameComponent(4);
        for (Long i = SegmentationProfile.baseSegment(); i < 5; i++) {
            ContentName segmented = SegmentationProfile.segmentName(versionedNameNormal, i);
            String segmentContent = "segment" + new Long(i).toString();
            repo.saveContent(ContentObject.buildContentObject(segmented, segmentContent.getBytes(), null, null, finalBlockID));
            checkData(repo, segmented, segmentContent);
        }
        System.out.println("Repotest - testing min and max in retrieval");
        ContentName shortName = ContentName.fromNative("/repoTest/1/2");
        ContentName longName = ContentName.fromNative("/repoTest/1/2/3/4/5/6");
        ContentName middleName = ContentName.fromNative("/repoTest/1/2/3/4");
        repo.saveContent(ContentObject.buildContentObject(shortName, "short".getBytes()));
        repo.saveContent(ContentObject.buildContentObject(longName, "long".getBytes()));
        repo.saveContent(ContentObject.buildContentObject(middleName, "middle".getBytes()));
        Interest minInterest = new Interest(ContentName.fromNative("/repoTest/1"));
        minInterest.minSuffixComponents(4);
        checkData(repo, minInterest, "long");
        Interest maxInterest = new Interest(ContentName.fromNative("/repoTest/1"));
        maxInterest.maxSuffixComponents(3);
        checkData(repo, maxInterest, "short");
        Interest middleInterest = new Interest(ContentName.fromNative("/repoTest/1"));
        middleInterest.maxSuffixComponents(4);
        middleInterest.minSuffixComponents(3);
        checkData(repo, middleInterest, "middle");
        System.out.println("Repotest - testing fast name enumeration response");
        ContentName nerpre = ContentName.fromNative("/testFastNameEnumeration");
        ContentName ner = new ContentName(nerpre, "name1".getBytes());
        ContentName nername1 = ContentName.fromNative("/name1");
        ContentName ner2 = new ContentName(nerpre, "name2".getBytes());
        ContentName nername2 = ContentName.fromNative("/name2");
        ContentName ner3 = new ContentName(nerpre, "longer".getBytes());
        ner3 = new ContentName(ner3, "name3".getBytes());
        ContentName nername3 = ContentName.fromNative("/longer");
        NameEnumerationResponse neresponse = null;
        Interest interest = new Interest(new ContentName(nerpre, CommandMarker.COMMAND_MARKER_BASIC_ENUMERATION.getBytes()));
        ContentName responseName = new ContentName();
        Log.info("RFSTEST: Name enumeration prefix:{0}", interest.name());
        neresponse = repo.getNamesWithPrefix(interest, responseName);
        Assert.assertTrue(neresponse == null || neresponse.hasNames() == false);
        neresponse = repo.saveContent(ContentObject.buildContentObject(ner, "FastNameRespTest".getBytes()));
        Assert.assertTrue(neresponse == null || neresponse.hasNames() == false);
        neresponse = repo.getNamesWithPrefix(interest, responseName);
        Assert.assertTrue(neresponse.getNames().contains(nername1));
        Assert.assertTrue(neresponse.getPrefix().contains(CommandMarker.COMMAND_MARKER_BASIC_ENUMERATION.getBytes()));
        Assert.assertTrue(neresponse.getTimestamp() != null);
        interest = Interest.last(VersioningProfile.addVersion(neresponse.getPrefix(), neresponse.getTimestamp()), null, null);
        neresponse = repo.getNamesWithPrefix(interest, responseName);
        Assert.assertTrue(neresponse == null || neresponse.hasNames() == false);
        neresponse = repo.saveContent(ContentObject.buildContentObject(ner2, "FastNameRespTest".getBytes()));
        Assert.assertTrue(neresponse.getNames().contains(nername1));
        Assert.assertTrue(neresponse.getNames().contains(nername2));
        Assert.assertTrue(neresponse.getPrefix().contains(CommandMarker.COMMAND_MARKER_BASIC_ENUMERATION.getBytes()));
        Assert.assertTrue(neresponse.getTimestamp() != null);
        interest = Interest.last(VersioningProfile.addVersion(neresponse.getPrefix(), neresponse.getTimestamp()), null, null);
        neresponse = repo.getNamesWithPrefix(interest, responseName);
        Assert.assertTrue(neresponse == null || neresponse.hasNames() == false);
        neresponse = repo.saveContent(ContentObject.buildContentObject(ner3, "FastNameRespTest".getBytes()));
        Assert.assertTrue(neresponse.getNames().contains(nername1));
        Assert.assertTrue(neresponse.getNames().contains(nername2));
        Assert.assertTrue(neresponse.getNames().contains(nername3));
        Assert.assertTrue(neresponse.getPrefix().contains(CommandMarker.COMMAND_MARKER_BASIC_ENUMERATION.getBytes()));
        Assert.assertTrue(neresponse.getTimestamp() != null);
        repo.shutDown();
    }
