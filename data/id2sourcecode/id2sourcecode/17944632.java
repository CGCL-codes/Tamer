    @Test
    public void ReadlnStatementShouldGenerateCorrectASMCode() {
        String code = "var a; const z = 4; begin\nreadln a; while a < z do a := a + 1; end.";
        String expected = "DATA SEGMENT\nz_0 DW 4\na_1 DW 0\nDATA ENDS\n" + "\nSTACK SEGMENT\nDB 200 DUP(0)\nSTACK ENDS\n" + "\nCODE SEGMENT\nASSUME CS:CODE,DS:DATA,SS:STACK\n" + "MAIN PROC FAR\nMOV AX, DATA\nMOV DS, AX\n" + "PUSH 0000h\nPUSH 0001h\nCALL readln\nPOP AX\n" + "MOV a_1, AX\nLABEL_1: PUSH z_0\nPUSH a_1\n" + "POP AX\nPOP BX\nCMP AX, BX\nJNL LABEL_2\nPUSH 1\n" + "PUSH a_1\nPOP AX\nPOP BX\nADD AX, BX\nPUSH AX\n" + "POP a_1\nJMP LABEL_1\nLABEL_2: MOV AX, 4C00H\n" + "INT 21h\nMAIN ENDP\n\nDIG MACRO DIGBASE\n" + "CMP AL, digbase\nJL inicioread\nCMP AL, '9'\n" + "JG inicioread\nMOV AH, 0Eh\nINT 10h\n" + "MOV [BP-1], 03h\nMOV CL, AL\nSUB CL, 48\nMOV AX, SI\n" + "MOV BX, 000Ah\nMUL BX\nADD AX, CX\nMOV SI, AX\n" + "ENDM\nwriteBS MACRO\nMOV AH, 0Eh\nINT 10h\n" + "MOV AL, ' '\nINT 10h\nMOV AL, 08h\nINT 10h\n" + "ENDM\nreadln PROC NEAR\nPUSH  BP\nMOV BP, SP\n" + "SUB SP, 1\nSUB SP, 1\nPUSH AX\nPUSH  BX\nPUSH CX\n" + "PUSH DX\nPUSH SI\nMOV [BP-1], 00h\nMOV [BP-2], 00h\n" + "MOV SI, 0000h\nMOV BX, 0\nMOV CX, 0\ninicioread:\n" + "MOV AH, 0\nINT 16h\nCMP [BP-1], 00h\nJE estado0\n" + "CMP [BP-1], 01h\nJE estado1\nCMP [BP-1], 02h\n" + "JE estado2\nCMP [BP-1], 03h\nJE estado3\nestado0:\n" + "CMP AL, 0Dh\nJE inicioread\nCMP AL, '0'\n" + "JNE estado0a\nMOV [BP-1], 01h\nMOV AH, 0Eh\n" + "INT 10h\nJMP inicioread\nestado0a:\nCMP AL, '-'\n" + "JNE estado0b\nCMP [BP+4], 0000h\nJE inicioread\n" + "MOV [BP-1], 02h\nMOV [BP-2], 01h\nMOV AH, 0Eh\n" + "INT 10h\nJMP  inicioread\nestado0b:\nDIG '1'\n" + "JMP  inicioread\nestado1:\nCMP AL, 0Dh\nJE finread\n" + "CMP AL, 08h\nJNE inicioread\nwriteBS\nMOV [BP-1], 00h\n" + "JMP inicioread\nestado2:\nCMP AL, 0Dh\nJE inicioread\n" + "CMP AL, 08h\nJNE estado2a\nwriteBS\nMOV [BP-1], 00h\n" + "MOV [BP-2], 00h\nJMP inicioread\nestado2a:\nDIG '1'\n" + "JMP inicioread\nestado3:\nCMP AL, 0Dh\nJE finread\n" + "CMP AL, 08h\nJNE estado3a\nwriteBS\nMOV AX, SI\n" + "MOV dx, 0\nMOV BX, 000Ah\nDIV BX\nMOV SI, AX\n" + "CMP SI, 0\nJNE inicioread\nCMP [BP-2], 00h\n" + "JNE estado3bs1\nMOV [BP-1], 00h\nJMP inicioread\n" + "estado3bs1:\nMOV [BP-1], 02h\nJMP inicioread\n" + "estado3a:\nDIG '0'\nJMP inicioread\n\nfinread:\n" + "CMP [BP-2], 00h\nJE finread2\nNEG SI\nfinread2:\n" + "MOV [BP+6], SI\nPOP SI\nPOP DX\nPOP CX\nPOP BX\n" + "POP AX\nMOV SP, BP\nPOP BP\nRET 2\nreadln ENDP\n" + "CODE ENDS\n";
        String actual = "";
        Reader r = new StringReader(code);
        this.processor.proccess(r);
        Boolean status = this.processor.getStatus();
        if (status) actual = this.processor.getGeneratedCode();
        Assert.assertEquals(expected, actual);
    }
