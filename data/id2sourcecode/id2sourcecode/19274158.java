    public void compile(Report report, PrintStream output) {
        int headerRows = 0;
        int trailerRows = 0;
        Header header = report.getHeader();
        if (header != null) headerRows = header.getNumRows();
        Trailer trailer = report.getTrailer();
        if (trailer != null) trailerRows = trailer.getNumRows();
        if (trailerRows > 1) throw new RuntimeException("Unsupported number of trailer rows!");
        Details details = report.getDetails();
        output.println("#!/usr/bin/perl");
        output.println();
        output.println("#");
        output.println("# Generated by ParseCompiler at " + new Date() + ".");
        output.println("#");
        output.println("# ParseCompiler is part of the MogwaiDataTools. Please visit");
        output.println("# http://mogwai.sourceforge.net for more details about this tool.");
        output.println("#");
        output.println();
        output.println("#");
        output.println("# Check if a value is a valid number");
        output.println("#");
        output.println("sub isvalidnumber {");
        output.println();
        output.println("	my $value=$_[0];");
        output.println();
        output.println("	if (($value eq \"\") || (!($temp = ~ /^([+-]?)(?=\\d|\\.\\d)\\d*(\\.\\d*)?([Ee]([+-]?\\d+))?$/ ))) {");
        output.println("		return 0;");
        output.println("	}");
        output.println();
        output.println("	return 1;");
        output.println("}");
        output.println();
        output.println("#");
        output.println("# Fill a string with leading zeroes");
        output.println("#");
        output.println("sub fillup {");
        output.println();
        output.println("	my $data=$_[0];");
        output.println("	my $l=$_[1];");
        output.println();
        output.println("	while (length($data)<$l) {");
        output.println("		$data=\"0$data\";");
        output.println("	}");
        output.println();
        output.println("	return $data;");
        output.println("}");
        output.println();
        output.println("#");
        output.println("# Generate a unique identifier");
        output.println("#");
        output.println("sub uniqueidentifier {");
        output.println();
        output.println("	my $id=\"\";");
        output.println("	my $length=16;");
        output.println();
        output.println("	for($i=0 ; $i< $length ;) {");
        output.println();
        output.println("		$j = chr(int(rand(127)));");
        output.println();
        output.println("		if($j =~ /[a-zA-Z0-9]/) {");
        output.println("				$id .=$j;");
        output.println("				$i++;");
        output.println("		}");
        output.println("	}");
        output.println();
        output.println("	return $id;");
        output.println("}");
        output.println();
        output.println("#");
        output.println("# Returns the curren time as a timestamp");
        output.println("#");
        output.println("sub currenttimetostring {");
        output.println();
        output.println("	($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();");
        output.println("	$year+=1900;");
        output.println("	$mon+=1;");
        output.println("	$sec=fillup($sec,2);");
        output.println("	$min=fillup($min,2);");
        output.println("	$hour=fillup($hour,2);");
        output.println("	$mday=fillup($mday,2);");
        output.println("	$mon=fillup($mon,2);");
        output.println();
        output.println("	return $year.$mon.$sec.$hour.$min.$sec;");
        output.println("}");
        output.println();
        output.println("#");
        output.println("# Common logging funtion");
        output.println("#");
        output.println("sub writelog {");
        output.println();
        output.println("	($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();");
        output.println("	$year+=1900;");
        output.println("	$mon+=1;");
        output.println("	$sec=fillup($sec,2);");
        output.println("	$min=fillup($min,2);");
        output.println("	$hour=fillup($hour,2);");
        output.println("	$mday=fillup($mday,2);");
        output.println("	$mon=fillup($mon,2);");
        output.println("	print \"$year/$mon/$mday $hour:$min:$sec $_[0]\\n\";");
        output.println("}");
        output.println();
        output.println("# Start processing");
        output.println("writelog(\"Starting\");");
        output.println();
        output.println("# Generate a unique identifier for this process run");
        output.println("$uid=uniqueidentifier();");
        output.println("writelog(\"Unique identifier for this run is $uid\");");
        output.println();
        output.println("$recordcount=0;");
        output.println("$errorcount=0;");
        output.println("$totalrecordcount=0;");
        output.println("$totalerrorcount=0;");
        output.println();
        for (Iterator it = report.getTransformations(); it.hasNext(); ) {
            Transformation transformation = (Transformation) it.next();
            output.println("# Hash for transformation " + transformation.getName());
            output.println("%TRANSFORM_" + transformation.getName() + "=();");
        }
        output.println("# Gather the file names known in the searchname");
        output.println("writelog(\"Gathering files in " + report.getSearchName() + "\");");
        output.println();
        output.println("$processedfiles=0;");
        output.println("@filelist=glob(\"" + report.getSearchName() + "\");");
        output.println("$filecount=scalar @filelist;");
        output.println("writelog(\"$filecount file(s) to process\");");
        output.println("foreach $filename (@filelist) {");
        output.println();
        output.println("	# Verbose message about what is going on");
        output.println("	$processedfiles=$processedfiles+1;");
        output.println("	writelog(\"Processing file $filename ($processedfiles / $filecount)\");");
        output.println();
        output.println("	$currenttimestamp=currenttimetostring();");
        output.println();
        output.println("	# Reset the record counter");
        output.println("	$recordcount=0;");
        output.println();
        output.println("	# Read the file line by line");
        output.println("	open(INPUTFILE,$filename);");
        output.println("	$errorfilename=\"$filename.$currenttimestamp.errors\";");
        output.println("	open(ERRORFILE,\">$errorfilename\");");
        output.println("	while(<INPUTFILE>) {");
        output.println();
        output.println("		# Here goes the data");
        output.println("		$line=$_;");
        output.println();
        output.println("		# Strip the linefeed and linebreak");
        output.println("		chomp($line);");
        output.println();
        output.println("		if (1==0) {");
        output.println("		}");
        if (headerRows > 0) {
            output.println("		# Check if it's part of the header");
            output.println("		if ($recordcount < " + headerRows + ") {");
            output.println("			$no=$recordcount+1;");
            output.println("			writelog(\"Stripping row $no as it is part of the header\");");
            output.println("		} ");
            output.println();
        }
        if (trailerRows > 0) {
            output.println("		# Check if it's part of the Trailer");
            output.println("		# Only one row trailers are supported !!");
            output.println("		elsif (eof(INPUTFILE)) {");
            output.println("			$no=$recordcount+1;");
            output.println("			writelog(\"Stripping row $no as it is part of the trailer\");");
            if (trailer.getTokenCount() > 0) {
                StringBuffer tokenArray = new StringBuffer();
                for (int index = 1; index <= trailer.getTokenCount(); index++) {
                    Token token = trailer.getTokenByIndex(index);
                    if (token == null) throw new RuntimeException("Cannot retrieve token in trailer with index " + index);
                    if (index > 1) tokenArray.append(",");
                    tokenArray.append(token.getName());
                }
                output.println("			(" + tokenArray + ") = split /\\" + trailer.getSeparatoChar() + "/,$line;");
            }
            output.println("		} ");
            output.println();
        }
        output.println("		else {");
        output.println("			# Split the record into tokens");
        StringBuffer tokenArray = new StringBuffer();
        for (int index = 1; index <= details.getTokenCount(); index++) {
            Token token = details.getTokenByIndex(index);
            if (token == null) throw new RuntimeException("Cannot retrieve token in details with index " + index);
            if (index > 1) tokenArray.append(",");
            tokenArray.append(token.getName());
        }
        output.println("			(" + tokenArray + ") = split /\\" + details.getSeparatoChar() + "/,$line;");
        output.println();
        output.println("			# Do record error checking");
        output.println("			$error_in_record=0;");
        output.println();
        for (int index = 1; index <= details.getTokenCount(); index++) {
            Token token = details.getTokenByIndex(index);
            String def = token.getDefault();
            if ((def != null) && (def.length() > 0)) {
                output.println("			if (" + token.getName() + " eq \"\") {");
                output.println("				# The token is empty, apply the default to it");
                output.println("				" + token.getName() + "=\"" + def + "\";");
                output.println("			}");
                output.println();
            }
            if ("number".equals(token.getType())) {
                output.println("			# Checking token index " + index);
                output.println("			# Name of token is " + token.getName());
                output.println("			# Type of token is " + token.getType());
                output.println("			if (isvalidnumber(" + token.getName() + ")==0) {");
                String voe = token.getValueonerror();
                if ((voe == null) || (voe.length() == 0)) {
                    output.println("				# Reject the record as the number format is invalid");
                    output.println();
                    output.println("				$error_in_record=1;");
                    output.println("				$no=$recordcount+1;");
                    output.println("				writelog(\"Error in record $no. Token index " + index + " is not a valid number !\");");
                } else {
                    output.println("				# Apply the error code to the token as the number format is invalid");
                    output.println();
                    output.println("				" + token.getName() + "=\"" + voe + "\";");
                }
                output.println("			}");
                output.println();
            }
        }
        output.println("			if ($error_in_record==0) {");
        output.println();
        output.println("				# The records seems to be ok, so process it");
        output.println();
        for (Iterator it = report.getTransformations(); it.hasNext(); ) {
            Transformation transformation = (Transformation) it.next();
            output.println();
            output.println("				# handle transformation " + transformation.getName());
            output.println();
            output.println("				# Step one, build the key");
            StringBuffer keyArray = new StringBuffer();
            for (int index = 1; index <= transformation.getKeyCount(); index++) {
                Key key = transformation.getKeyByIndex(index);
                if (key == null) throw new RuntimeException("Cannot retrieve key in transformation " + transformation.getName() + " with index " + index);
                if (index > 1) keyArray.append(".\"" + details.getSeparatoChar() + "\".");
                keyArray.append(key.getExpression());
            }
            output.println("				$key=" + keyArray + ";");
            output.println("				# Step two, implement aggregate functions");
            for (int index = 1; index <= transformation.getAggregateCount(); index++) {
                Aggregate aggregate = transformation.getAggregateByIndex(index);
                if (aggregate == null) throw new RuntimeException("Cannot retrieve aggregate in transformation " + transformation.getName() + " with index " + index);
                output.println();
                output.println("				# Aggregate index " + index);
                output.println("				$old_add=$TRANSFORM_" + transformation.getName() + "{$key}{\"" + index + "\"};");
                if ("count".equals(aggregate.getType())) {
                    output.println("				if (!(" + aggregate.getExpression() + " eq \"\")) {");
                    output.println("					$old_add=$old_add+1;");
                    output.println("				}");
                }
                if ("sum".equals(aggregate.getType())) {
                    output.println("				$temp=" + aggregate.getExpression() + ";");
                    output.println("				if (!($temp eq \"\")) {");
                    output.println("					$old_add=$old_add+$temp;");
                    output.println("				}");
                }
                output.println("				$TRANSFORM_" + transformation.getName() + "{$key}{\"" + index + "\"}=$old_add;");
            }
            output.println();
        }
        output.println("			} else {");
        output.println("				# The record is erroreus");
        output.println("				$errorcount=$errorcount+1;");
        output.println("				print ERRORFILE \"$line\\n\";");
        output.println("			}");
        output.println("		}");
        output.println();
        output.println("		$recordcount=$recordcount+1;");
        output.println("		$totalrecordcount=$totalrecordcount+1;");
        output.println();
        output.println("	}");
        output.println("	writelog(\"Read total of $recordcount record(s) from file\");");
        output.println("	writelog(\"$errorcount record(s) where not processed due to error in format\");");
        output.println("	writelog(\"Total amount of read record(s) is $totalrecordcount\");");
        output.println("	close(INPUTFILE);");
        output.println("	close(ERRORFILE);");
        output.println();
        output.println("	# Remove the error file if the number of error records were 0");
        output.println("	if ($errorcount==0) {");
        output.println("		unlink($errorfilename);");
        output.println("	}");
        output.println();
        output.println("	# Increase the record counter");
        output.println("	$totalerrorcount=$totalerrorcount+$errorcount;");
        output.println("}");
        output.println();
        output.println("$currenttimestamp=currenttimetostring();");
        for (Iterator it = report.getTransformations(); it.hasNext(); ) {
            Transformation transformation = (Transformation) it.next();
            output.println();
            output.println("# Output verbose information");
            output.println("writelog(\"Generating output for transform " + transformation.getName() + "\");");
            output.println();
            output.println("$temp=0;");
            output.println("open(TRANSFILE,\">" + transformation.getName() + ".$currenttimestamp$uid.csv\");");
            output.println("while (($key,%value) = each (%TRANSFORM_" + transformation.getName() + ")) {");
            output.println();
            output.println("	$temp=$temp+1;");
            output.println("	print TRANSFILE $currenttimestamp;");
            output.println("	print TRANSFILE \"" + details.getSeparatoChar() + "\".$uid;");
            output.println("	print TRANSFILE \"" + details.getSeparatoChar() + "\".$key;");
            for (int index = 1; index <= transformation.getAggregateCount(); index++) {
                output.println("	print TRANSFILE \"" + details.getSeparatoChar() + "\".$TRANSFORM_" + transformation.getName() + "{$key}{\"" + index + "\"};");
            }
            output.println("	print TRANSFILE \"\n\";");
            output.println("}");
            output.println("close(TRANSFILE);");
            output.println();
            output.println("# Output verbose information");
            output.println("writelog(\"Found $temp grouping keys\");");
        }
        output.println();
        output.println("writelog(\"Finished with $totalrecordcount record(s)\");");
        output.println("writelog(\"$totalerrorcount record(s) where not processed due to error in format\");");
        output.println("writelog(\"$processedfiles file(s) were processed\");");
        output.println();
        output.println("exit 0;");
    }
