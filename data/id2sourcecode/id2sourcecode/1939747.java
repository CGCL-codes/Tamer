    private void createCDAheader() {
        mRootElement = mCDA.createElement("ClinicalDocument");
        mRootElement.setAttribute("xmlns", "urn:hl7-org:v3");
        mRootElement.setAttribute("xmlns:voc", "urn:hl7-org:v3/voc");
        mRootElement.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        mCDA.appendChild(mRootElement);
        mRootElement.appendChild(mCDA.createComment("******************************"));
        mRootElement.appendChild(mCDA.createComment("          CDA Header          "));
        mRootElement.appendChild(mCDA.createComment("******************************"));
        Element el = mCDA.createElement("typeId");
        el.setAttribute("root", "2.16.840.1.113883.1.3");
        el.setAttribute("extension", "POCD_HD000040");
        mRootElement.appendChild(el);
        mRootElement.appendChild(mCDA.createComment("CCD v1.0 Templates Root"));
        el = mCDA.createElement("templateId");
        el.setAttribute("root", "2.16.840.1.113883.10.20.1");
        mRootElement.appendChild(el);
        el = mCDA.createElement("templateId");
        el.setAttribute("root", "1.3.6.1.4.1.19376.1.5.3.1.1.2");
        mRootElement.appendChild(el);
        el = mCDA.createElement("templateId");
        el.setAttribute("root", "1.3.6.1.4.1.19376.1.5.3.1.1.5");
        mRootElement.appendChild(el);
        el = mCDA.createElement("id");
        el.setAttribute("root", UUID.randomUUID().toString());
        mRootElement.appendChild(el);
        el = mCDA.createElement("code");
        el.setAttribute("code", "34133-9");
        el.setAttribute("codeSystem", "2.16.840.1.113883.6.1");
        el.setAttribute("displayName", "Summarization of episode note");
        el.setAttribute("codeSystemName", "LOINC");
        mRootElement.appendChild(el);
        el = mCDA.createElement("title");
        el.setTextContent("Generated by MPOWER-ExportServices");
        mRootElement.appendChild(el);
        el = mCDA.createElement("effectiveTime");
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmssZ");
        mCurDate = cal.getTime();
        el.setAttribute("value", sdf.format(mCurDate));
        mRootElement.appendChild(el);
        el = mCDA.createElement("confidentialityCode");
        el.setAttribute("code", "N");
        el.setAttribute("codeSystem", "2.16.840.1.113883.5.25");
        mRootElement.appendChild(el);
        el = mCDA.createElement("languageCode");
        el.setAttribute("code", "en-US");
        mRootElement.appendChild(el);
        el = mCDA.createElement("recordTarget");
        mRootElement.appendChild(el);
        Element el2 = mCDA.createElement("patientRole");
        el.appendChild(el2);
        Element el3 = mCDA.createElement("id");
        el3.setAttribute("root", "2.16.840.1.113883.19.5");
        el2.appendChild(el3);
        el3 = mCDA.createElement("patient");
        el2.appendChild(el3);
        try {
            XPathExpression expression = mXPath.compile("/ns0:ContinuityOfCareRecord/ns0:Patient/ns0:ActorID");
            String patientID = (String) expression.evaluate(mCCR, XPathConstants.STRING);
            String patientXPath = "/ns0:ContinuityOfCareRecord/ns0:Actors/ns0:Actor[ns0:ActorObjectID = 'ActorID']/".replaceAll("ActorID", patientID);
            addPatientName(el3, patientXPath);
            Element el4 = mCDA.createElement("administrativeGenderCode");
            expression = mXPath.compile((new StringBuilder(String.valueOf(patientXPath))).append("/ns0:Person/ns0:Gender/ns0:Text").toString());
            String gender = (String) expression.evaluate(mCCR, XPathConstants.STRING);
            if (gender.trim().equalsIgnoreCase("Male")) el4.setAttribute("code", "M"); else if (gender.trim().equalsIgnoreCase("Female")) el4.setAttribute("code", "F"); else el4.setAttribute("code", "U");
            el4.setAttribute("codeSystem", "2.16.840.1.113883.5.1");
            el4.setAttribute("codeSystemName", "Gender:USA:HL7");
            el3.appendChild(el4);
            el4 = mCDA.createElement("birthTime");
            el3.appendChild(el4);
            expression = mXPath.compile((new StringBuilder(String.valueOf(patientXPath))).append("/ns0:Person/ns0:DateOfBirth/ns0:ExactDateTime").toString());
            SimpleDateFormat sdf_in = new SimpleDateFormat("yyyy-MM-dd");
            mPatientBirthDate = sdf_in.parse((String) expression.evaluate(mCCR, XPathConstants.STRING));
            SimpleDateFormat sdf_out = new SimpleDateFormat("yyyyMMdd");
            el4.setAttribute("value", sdf_out.format(Long.valueOf(mPatientBirthDate.getTime())));
            el = mCDA.createElement("author");
            mRootElement.appendChild(el);
            el2 = mCDA.createElement("time");
            sdf = new SimpleDateFormat("yyyyMMddHHmmssZ");
            el2.setAttribute("value", sdf.format(mCurDate));
            el.appendChild(el2);
            el2 = mCDA.createElement("assignedAuthor");
            el.appendChild(el2);
            el3 = mCDA.createElement("id");
            mAssignedAuthorId = UUID.randomUUID().toString();
            el3.setAttribute("root", mAssignedAuthorId);
            el2.appendChild(el3);
            el3 = mCDA.createElement("assignedAuthoringDevice");
            el2.appendChild(el3);
            el4 = mCDA.createElement("softwareName");
            el4.setTextContent("MPOWER-ExportServices 0.1");
            el3.appendChild(el4);
            el3 = mCDA.createElement("representedOrganization");
            el2.appendChild(el3);
            el4 = mCDA.createElement("id");
            el4.setAttribute("root", "2.16.840.1.113883.19.5");
            el3.appendChild(el4);
            el = mCDA.createElement("custodian");
            mRootElement.appendChild(el);
            el2 = mCDA.createElement("assignedCustodian");
            el.appendChild(el2);
            el3 = mCDA.createElement("representedCustodianOrganization");
            el2.appendChild(el3);
            el4 = mCDA.createElement("id");
            el4.setAttribute("root", "2.16.840.1.113883.19.5");
            el3.appendChild(el4);
            el = mCDA.createElement("documentationOf");
            mRootElement.appendChild(el);
            el2 = mCDA.createElement("serviceEvent");
            el2.setAttribute("classCode", "PCPR");
            el.appendChild(el2);
            el3 = mCDA.createElement("effectiveTime");
            el2.appendChild(el3);
            sdf = new SimpleDateFormat("yyyyMMdd");
            el4 = mCDA.createElement("low");
            sdf_out = new SimpleDateFormat("yyyyMMdd");
            el4.setAttribute("value", sdf_out.format(Long.valueOf(mPatientBirthDate.getTime())));
            el3.appendChild(el4);
            el4 = mCDA.createElement("high");
            el4.setAttribute("value", sdf.format(mCurDate));
            el3.appendChild(el4);
            el3 = mCDA.createElement("performer");
            el3.setAttribute("typeCode", "PRF");
            el2.appendChild(el3);
            el4 = mCDA.createElement("assignedEntity");
            el3.appendChild(el4);
            Element el5 = mCDA.createElement("id");
            el5.setAttribute("root", UUID.randomUUID().toString());
            el4.appendChild(el5);
            el5 = mCDA.createElement("representedOrganization");
            el4.appendChild(el5);
        } catch (XPathExpressionException exp) {
            exp.printStackTrace();
        } catch (ParseException exp) {
            exp.printStackTrace();
        }
    }
