    private String createCSVFile(MPSBoard board) throws java.sql.SQLException {
        StringWriter oStream = new StringWriter();
        oStream.write("#");
        oStream.write(board.getID());
        oStream.write(",");
        oStream.write(board.getChain().getID());
        String newLine = System.getProperty("line.separator");
        oStream.write(newLine);
        oStream.write("# Computer  generated file DO NOT HAND EDIT");
        oStream.write(newLine);
        oStream.write("# MODE MASK configuration file for ");
        oStream.write(board.getChassis().getID());
        oStream.write(newLine);
        oStream.write("#Config check fields:");
        oStream.write(newLine);
        oStream.write("#This value is compared to a string field in the database.");
        oStream.write(newLine);
        oStream.write("version,");
        oStream.write(mpsVersion);
        oStream.write(",");
        oStream.write(newLine);
        oStream.write("#The values below must match values read from the hardware");
        oStream.write(newLine);
        oStream.write("j1-j2,");
        String configuration = board.getFPARFastProtectLatchConfiguration();
        if (configuration.equals("16L")) oStream.write("2"); else if (configuration.equals("16FPAR")) oStream.write("1"); else if (configuration.equals("8L8AR")) oStream.write("3");
        oStream.write(",");
        oStream.write(newLine);
        oStream.write("maskJump,");
        int maskJump = board.getMaskJump();
        oStream.write(String.valueOf(maskJump));
        oStream.write(newLine);
        oStream.write("fpga,");
        int versionDateHalf = mpsVersionDate.length() / 2;
        oStream.write(mpsVersionDate.substring(0, versionDateHalf));
        oStream.write(",");
        oStream.write(mpsVersionDate.substring(versionDateHalf));
        oStream.write(newLine);
        oStream.write("chassis,");
        String currentSerialNumber = board.getSerialNumber();
        if (currentSerialNumber == null) throw new SQLException(board.getID() + " has a null serial number. Export failed.");
        int serialNumberHalf = currentSerialNumber.length() / 2;
        oStream.write(currentSerialNumber.substring(0, serialNumberHalf));
        oStream.write(",");
        oStream.write(currentSerialNumber.substring(serialNumberHalf));
        oStream.write(newLine);
        oStream.write("#modemasks");
        oStream.write(newLine);
        int[] checksums = new int[] { 0, 0, 0 };
        for (int i = 0; i < binaryColumnNames.length; i++) {
            oStream.write(String.valueOf(i));
            oStream.write(",");
            int[] currentBinaryValues = board.getModeMask(binaryColumnNames[i]);
            oStream.write(String.valueOf(currentBinaryValues[0]));
            oStream.write(",");
            oStream.write(String.valueOf(currentBinaryValues[1]));
            oStream.write(newLine);
            checksums[0] += i;
            checksums[1] += currentBinaryValues[0];
            checksums[2] += currentBinaryValues[1];
        }
        oStream.write(String.valueOf(checksums[0] * -1));
        oStream.write(",");
        oStream.write(String.valueOf(checksums[1]));
        oStream.write(",");
        oStream.write(String.valueOf(checksums[2]));
        oStream.flush();
        return oStream.getBuffer().toString();
    }
