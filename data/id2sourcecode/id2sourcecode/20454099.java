    public Object[][] getContents() {
        return new Object[][] { { "textframe.button.dismiss", "閉じる" }, { "appletviewer.tool.title", "アプレットビューア: {0}" }, { "appletviewer.menu.applet", "アプレット" }, { "appletviewer.menuitem.restart", "再起動" }, { "appletviewer.menuitem.reload", "再読込み" }, { "appletviewer.menuitem.stop", "中止" }, { "appletviewer.menuitem.save", "保存..." }, { "appletviewer.menuitem.start", "開始" }, { "appletviewer.menuitem.clone", "複製..." }, { "appletviewer.menuitem.tag", "タグ..." }, { "appletviewer.menuitem.info", "情報..." }, { "appletviewer.menuitem.edit", "編集" }, { "appletviewer.menuitem.encoding", "文字コード" }, { "appletviewer.menuitem.print", "印刷..." }, { "appletviewer.menuitem.props", "プロパティ..." }, { "appletviewer.menuitem.close", "閉じる" }, { "appletviewer.menuitem.quit", "終了" }, { "appletviewer.label.hello", "Hello..." }, { "appletviewer.status.start", "アプレットを開始します。" }, { "appletviewer.appletsave.filedialogtitle", "アプレットをファイルに直列化して書き込みます。" }, { "appletviewer.appletsave.err1", "{0} を {1} に直列化して書き込みます。" }, { "appletviewer.appletsave.err2", "アプレット保存: {0}" }, { "appletviewer.applettag", "タグ表示" }, { "appletviewer.applettag.textframe", "アプレットの HTML タグ" }, { "appletviewer.appletinfo.applet", "-- アプレット情報なし --" }, { "appletviewer.appletinfo.param", "-- パラメータ情報なし --" }, { "appletviewer.appletinfo.textframe", "アプレット情報" }, { "appletviewer.appletprint.printjob", "アプレットを印刷します。" }, { "appletviewer.appletprint.fail", "印刷に失敗しました。" }, { "appletviewer.appletprint.finish", "印刷が完了しました。" }, { "appletviewer.appletprint.cancel", "印刷は取り消されました。" }, { "appletviewer.appletencoding", "文字エンコーディング: {0}" }, { "appletviewer.parse.warning.requiresname", "警告: <param name=... value=...> タグに name 属性がありません。" }, { "appletviewer.parse.warning.paramoutside", "警告: <param> タグが <applet> ... </applet> の外にあります。" }, { "appletviewer.parse.warning.applet.requirescode", "警告: <applet> タグに code 属性がありません。" }, { "appletviewer.parse.warning.applet.requiresheight", "警告: <applet> タグに height 属性がありません。" }, { "appletviewer.parse.warning.applet.requireswidth", "警告: <applet> タグに width 属性がありません。" }, { "appletviewer.parse.warning.object.requirescode", "警告: <object> タグに code 属性がありません。" }, { "appletviewer.parse.warning.object.requiresheight", "警告: <object> タグに height 属性がありません。" }, { "appletviewer.parse.warning.object.requireswidth", "警告: <object> タグに width 属性がありません。" }, { "appletviewer.parse.warning.embed.requirescode", "警告: <embed> タグに code 属性がありません。" }, { "appletviewer.parse.warning.embed.requiresheight", "警告: <embed> タグに height 属性がありません。" }, { "appletviewer.parse.warning.embed.requireswidth", "警告: <embed> タグに width 属性がありません。" }, { "appletviewer.parse.warning.appnotLongersupported", "警告: <app> タグは現在はサポートされていません。代わりに <applet> を使ってください。" }, { "appletviewer.usage", "使い方: appletviewer <options> url(s)\n\n<options> には次のものがあります。\n  -debug                  Java デバッガでアプレットビューアを起動する\n  -encoding <encoding>    HTML ファイルで使用される文字エンコーディングを指定する\n  -J<runtime flag>        java インタプリタに引数を渡す\n\n-J オプションは標準ではなく、予告なしに変更される可能性があります。" }, { "appletviewer.main.err.unsupportedopt", "サポートされていないオプション: {0}" }, { "appletviewer.main.err.unrecognizedarg", "認識されない引数: {0}" }, { "appletviewer.main.err.dupoption", "オプションを重複して使用: {0}" }, { "appletviewer.main.err.inputfile", "入力ファイルが指定されていません。" }, { "appletviewer.main.err.badurl", "不正な URL: {0} ( {1} )" }, { "appletviewer.main.err.io", "{0} 読み込み中に入出力例外が発生しました。" }, { "appletviewer.main.err.readablefile", " {0} がファイルでかつ読み込み可能かどうかを確認してください。" }, { "appletviewer.main.err.correcturl", " {0} は正しい URL ですか？" }, { "appletviewer.main.prop.store", "AppletViewer のユーザ固有プロパティ" }, { "appletviewer.main.err.prop.cantread", "ユーザプロパティファイルが読み込まれません: {0}" }, { "appletviewer.main.err.prop.cantsave", "ユーザプロパティファイルを保存できません: {0}" }, { "appletviewer.main.warn.nosecmgr", "警告: デバッガでの現在の制限によりセキュリティを無効にしています。" }, { "appletviewer.main.debug.cantfinddebug", "デバッガが見つかりません。" }, { "appletviewer.main.debug.cantfindmain", "デバッガで main メソッドが見つかりません。" }, { "appletviewer.main.debug.exceptionindebug", "デバッガで例外が発生しました。" }, { "appletviewer.main.debug.cantaccess", "デバッガにアクセスできません。" }, { "appletviewer.main.nosecmgr", "警告: SecurityManager がインストールされていません。" }, { "appletviewer.main.warning", "警告: アプレットが起動しませんでした。入力に <applet> タグが含まれているかどうかを確認してください。" }, { "appletviewer.main.warn.prop.overwrite", "警告: ユーザの要求によりシステムプロパティを一時的に上書きしています: キー: {0} 古い値: {1} 新しい値: {2}" }, { "appletviewer.main.warn.cantreadprops", "警告: AppletViewer プロパティファイルが読み込まれません: {0} デフォルトを使用します。" }, { "appletioexception.loadclass.throw.interrupted", "クラスファイルの読み込みが中断されました: {0}" }, { "appletioexception.loadclass.throw.notloaded", "クラスファイルが読み込まれません: {0}" }, { "appletclassloader.loadcode.verbose", "{1} を取得するためのストリーム {0} をオープンできません" }, { "appletclassloader.filenotfound", "ファイルが見つかりません: {0}" }, { "appletclassloader.fileformat", "{0} 読み込み中にファイルフォーマット例外が発生しました。" }, { "appletclassloader.fileioexception", "{0} 読み込み中に入出力例外が発生しました。" }, { "appletclassloader.fileexception", "{1} 読み込み中に {0} の例外が発生しました。" }, { "appletclassloader.filedeath", "{1} 読み込み中に {0} が強制終了されました。" }, { "appletclassloader.fileerror", "{1} 読み込み中に {0} エラーが発生しました。" }, { "appletclassloader.findclass.verbose.findclass", "クラス {1} を見つける {0}}" }, { "appletclassloader.findclass.verbose.openstream", "{1} を取得するためのストリーム {0} をオープンできません" }, { "appletclassloader.getresource.verbose.forname", "名前用の AppletClassLoader.getResource: {0}" }, { "appletclassloader.getresource.verbose.found", "リソースが見つかりました: システムリソースとしての {0}" }, { "appletclassloader.getresourceasstream.verbose", "リソースが見つかりました: システムリソースとしての {0}" }, { "appletpanel.runloader.err", "object か code パラメータのどちらかが必要です！" }, { "appletpanel.runloader.exception", "{0} を再構成中に例外が発生しました。" }, { "appletpanel.destroyed", "アプレットが持つリソースを解放しました。" }, { "appletpanel.loaded", "アプレットが読み込まれました。" }, { "appletpanel.started", "アプレットが開始されました。" }, { "appletpanel.inited", "アプレットが初期化されました。" }, { "appletpanel.stopped", "アプレットが終了しました。" }, { "appletpanel.disposed", "アプレットが破棄されました。" }, { "appletpanel.nocode", "APLLET タグに CODE 属性がありません。" }, { "appletpanel.notfound", "load: クラス {0} が見つかりません。" }, { "appletpanel.nocreate", "load: {0} のインスタンスを生成できません。" }, { "appletpanel.noconstruct", "load: {0} は public ではありません。あるいは public なコンストラクタを持っていません。" }, { "appletpanel.death", "強制終了されました。" }, { "appletpanel.exception", "例外: {0}." }, { "appletpanel.exception2", "例外: {0}: {1}." }, { "appletpanel.error", "エラー: {0}." }, { "appletpanel.error2", "エラー: {0}: {1}." }, { "appletpanel.notloaded", "Init: アプレットは読み込まれていません。" }, { "appletpanel.notinited", "Start: アプレットは初期化されていません。" }, { "appletpanel.notstarted", "Stop: アプレットは開始されていません。" }, { "appletpanel.notstopped", "Destroy: アプレットは停止されていません。" }, { "appletpanel.notdestroyed", "Dispose: アプレットは破棄されていません。" }, { "appletpanel.notdisposed", "Load: アプレットは破棄されていません。" }, { "appletpanel.bail", "中断されました。" }, { "appletpanel.filenotfound", "ファイルが見つかりません: {0}" }, { "appletpanel.fileformat", "{0} 読み込み中にファイルフォーマット例外が発生しました。" }, { "appletpanel.fileioexception", "{0} 読み込み中に入出力例外が発生しました。" }, { "appletpanel.fileexception", "{1} 読み込み中に {0} の例外が発生しました。" }, { "appletpanel.filedeath", "{1} 読み込み中に {0} が強制終了されました。" }, { "appletpanel.fileerror", "{1} 読み込み中に {0} のエラーが発生しました。" }, { "appletillegalargumentexception.objectinputstream", "AppletObjectInputStream には null でないクラスローダが必要です。" }, { "appletprops.title", "アプレットビューアのプロパティ" }, { "appletprops.label.http.server", "Http プロクシサーバ:" }, { "appletprops.label.http.proxy", "Http プロクシのポート:" }, { "appletprops.label.network", "ネットワークアクセス:" }, { "appletprops.choice.network.item.none", "なし" }, { "appletprops.choice.network.item.applethost", "アプレットホストのみ" }, { "appletprops.choice.network.item.unrestricted", "制限なし" }, { "appletprops.label.class", "クラスアクセス:" }, { "appletprops.choice.class.item.restricted", "制限あり" }, { "appletprops.choice.class.item.unrestricted", "制限なし" }, { "appletprops.label.unsignedapplet", "署名のないアプレットを許可しますか:" }, { "appletprops.choice.unsignedapplet.no", "いいえ" }, { "appletprops.choice.unsignedapplet.yes", "はい" }, { "appletprops.button.apply", "適用" }, { "appletprops.button.cancel", "取消し" }, { "appletprops.button.reset", "リセット" }, { "appletprops.apply.exception", "プロパティの保存に失敗しました: {0}" }, { "appletprops.title.invalidproxy", "無効な入力" }, { "appletprops.label.invalidproxy", "プロクシのポート番号は正の整数でなければなりません。" }, { "appletprops.button.ok", "了解" }, { "appletprops.prop.store", "AppletViewer のユーザ固有プロパティ" }, { "appletsecurityexception.checkcreateclassloader", "セキュリティ例外が発生しました: classloader" }, { "appletsecurityexception.checkaccess.thread", "セキュリティ例外が発生しました: thread" }, { "appletsecurityexception.checkaccess.threadgroup", "セキュリティ例外が発生しました: threadgroup: {0}" }, { "appletsecurityexception.checkexit", "セキュリティ例外が発生しました: exit: {0}" }, { "appletsecurityexception.checkexec", "セキュリティ例外が発生しました: exec: {0}" }, { "appletsecurityexception.checklink", "セキュリティ例外が発生しました: link: {0}" }, { "appletsecurityexception.checkpropsaccess", "セキュリティ例外が発生しました: properties" }, { "appletsecurityexception.checkpropsaccess.key", "セキュリティ例外が発生しました: properties access {0}" }, { "appletsecurityexception.checkread.exception1", "セキュリティ例外が発生しました: {0}, {1}" }, { "appletsecurityexception.checkread.exception2", "セキュリティ例外が発生しました: file.read: {0}" }, { "appletsecurityexception.checkread", "セキュリティ例外が発生しました: file.read: {0} == {1}" }, { "appletsecurityexception.checkwrite.exception", "セキュリティ例外が発生しました: {0}, {1}" }, { "appletsecurityexception.checkwrite", "セキュリティ例外が発生しました: file.write: {0} == {1}" }, { "appletsecurityexception.checkread.fd", "セキュリティ例外が発生しました: fd.read" }, { "appletsecurityexception.checkwrite.fd", "セキュリティ例外が発生しました: fd.write" }, { "appletsecurityexception.checklisten", "セキュリティ例外が発生しました: socket.listen: {0}" }, { "appletsecurityexception.checkaccept", "セキュリティ例外が発生しました: socket.accept: {0}:{1}" }, { "appletsecurityexception.checkconnect.networknone", "セキュリティ例外が発生しました: socket.connect: {0}->{1}" }, { "appletsecurityexception.checkconnect.networkhost1", "セキュリティ例外が発生しました: {1} の元になる {0} に接続できません。" }, { "appletsecurityexception.checkconnect.networkhost2", "セキュリティ例外が発生しました: ホスト {0} または {1} の IP を解決できません。" }, { "appletsecurityexception.checkconnect.networkhost3", "セキュリティ例外が発生しました: ホスト {0} の IP を解決できません。 trustProxy プロパティを調べてください。" }, { "appletsecurityexception.checkconnect", "セキュリティ例外が発生しました: connect: {0}->{1}" }, { "appletsecurityexception.checkpackageaccess", "セキュリティ例外が発生しました: パッケージ {0} にアクセスできません。" }, { "appletsecurityexception.checkpackagedefinition", "セキュリティ例外が発生しました: パッケージ {0} を定義できません。" }, { "appletsecurityexception.cannotsetfactory", "セキュリティ例外が発生しました: ファクトリを設定できません。" }, { "appletsecurityexception.checkmemberaccess", "セキュリティ例外が発生しました: メンバアクセスをチェックしてください。" }, { "appletsecurityexception.checkgetprintjob", "セキュリティ例外が発生しました: getPrintJob" }, { "appletsecurityexception.checksystemclipboardaccess", "セキュリティ例外が発生しました: getSystemClipboard" }, { "appletsecurityexception.checkawteventqueueaccess", "セキュリティ例外が発生しました: getEventQueue" }, { "appletsecurityexception.checksecurityaccess", "セキュリティ例外が発生しました: security operation: {0}" }, { "appletsecurityexception.getsecuritycontext.unknown", "クラスローダタイプが不明です。getContext のチェックができません。" }, { "appletsecurityexception.checkread.unknown", "クラスローダタイプが不明です。{0} の読み込みチェックができません。" }, { "appletsecurityexception.checkconnect.unknown", "クラスローダタイプが不明です。接続チェックができません。" } };
    }
