    public Object[][] getContents() {
        return new Object[][] { { "textframe.button.dismiss", "Ignorieren" }, { "appletviewer.tool.title", "Applet-Ansicht: {0}" }, { "appletviewer.menu.applet", "Applet" }, { "appletviewer.menuitem.restart", "Neu starten" }, { "appletviewer.menuitem.reload", "Neu laden" }, { "appletviewer.menuitem.stop", "Abbrechen" }, { "appletviewer.menuitem.save", "Speichern..." }, { "appletviewer.menuitem.start", "Starten" }, { "appletviewer.menuitem.clone", "Klonen..." }, { "appletviewer.menuitem.tag", "Markieren..." }, { "appletviewer.menuitem.info", "Info..." }, { "appletviewer.menuitem.edit", "Bearbeiten" }, { "appletviewer.menuitem.encoding", "Zeichencodierung" }, { "appletviewer.menuitem.print", "Drucken..." }, { "appletviewer.menuitem.props", "Eigenschaften..." }, { "appletviewer.menuitem.close", "Schließen" }, { "appletviewer.menuitem.quit", "Beenden" }, { "appletviewer.label.hello", "Willkommen..." }, { "appletviewer.status.start", "Starte Applet..." }, { "appletviewer.appletsave.filedialogtitle", "Applet in Datei serialisieren" }, { "appletviewer.appletsave.err1", "Serialisiere {0} zu {1}" }, { "appletviewer.appletsave.err2", "In appletSave: {0}" }, { "appletviewer.applettag", "Angezeigte Marke" }, { "appletviewer.applettag.textframe", "Applet-HTML-Marke" }, { "appletviewer.appletinfo.applet", "-- Keine Applet-Info --" }, { "appletviewer.appletinfo.param", "-- Keine Parameter-Info --" }, { "appletviewer.appletinfo.textframe", "Applet-Info" }, { "appletviewer.appletprint.fail", "Drucken fehlgeschlagen" }, { "appletviewer.appletprint.finish", "Drucken beendet" }, { "appletviewer.appletprint.cancel", "Drucken abgebrochen" }, { "appletviewer.appletencoding", "Zeichencodierung: {0}" }, { "appletviewer.parse.warning.requiresname", "Warnung: <param name=... value=...>-Marke erfordert Namensattribut." }, { "appletviewer.parse.warning.paramoutside", "Warnung: <param>-Marke außerhalb <applet> ... </applet>." }, { "appletviewer.parse.warning.applet.requirescode", "Warnung: <applet>-Marke erfordert Code-Attribut." }, { "appletviewer.parse.warning.applet.requiresheight", "Warnung: <applet>-Marke erfordert Höhenattribut." }, { "appletviewer.parse.warning.applet.requireswidth", "Warnung: <applet>-Marke erfordert Breitenattribut." }, { "appletviewer.parse.warning.object.requirescode", "Warnung: <object>-Marke erfordert Code-Attribut." }, { "appletviewer.parse.warning.object.requiresheight", "Warnung: <object>-Marke erfordert Höhenattribut." }, { "appletviewer.parse.warning.object.requireswidth", "Warnung: <object>-Marke erfordert Breitenattribut." }, { "appletviewer.parse.warning.embed.requirescode", "Warnung: <embed>-Marke erfordert Code-Attribut." }, { "appletviewer.parse.warning.embed.requiresheight", "Warnung: <embed>-Marke erfordert Höhenattribut." }, { "appletviewer.parse.warning.embed.requireswidth", "Warnung: <embed>-Marke erfordert Breitenattribut." }, { "appletviewer.parse.warning.appnotLongersupported", "Warnung: <app>-Marke wird nicht mehr unterstützt, verwenden Sie statt dessen <applet>:" }, { "appletviewer.usage", "Syntax: appletviewer <Optionen> url(s)\n\nwobei zu den <Optionen> gehören:\n  -debug                  Starten des Applet-Viewers im Java-Debugger\n  -encoding <Codierung>    Angabe der von HTML-Dateien verwendeten Zeichencodierung\n  -J<Laufzeit-Flag>        Übergeben des Arguments an den Java-Interpreter\n\nDie Option -J ist keine Standardoption und kann Änderungen unterliegen." }, { "appletviewer.main.err.unsupportedopt", "Nicht unterstützte Option: {0}" }, { "appletviewer.main.err.unrecognizedarg", "Nicht erkanntes Argument: {0}" }, { "appletviewer.main.err.dupoption", "Doppelte Verwendung der Option: {0}" }, { "appletviewer.main.err.inputfile", "Keine Eingabedateien angegeben." }, { "appletviewer.main.err.badurl", "Fehlerhafte URL: {0} ( {1} )" }, { "appletviewer.main.err.io", "E/A-Ausnahme beim Lesen: {0}" }, { "appletviewer.main.err.readablefile", "Stellen Sie sicher, dass {0} eine lesbare Datei ist." }, { "appletviewer.main.err.correcturl", "Ist {0} die richtige URL?" }, { "appletviewer.main.prop.store", "Benutzerspezifische Eigenschaften für AppletViewer" }, { "appletviewer.main.err.prop.cantread", "Benutzereigenschaftendatei kann nicht gelesen werden: {0}" }, { "appletviewer.main.err.prop.cantsave", "Benutzereigenschaftendatei kann nicht gespeichert werden: {0}" }, { "appletviewer.main.warn.nosecmgr", "Warnung: Sicherheit wird deaktiviert." }, { "appletviewer.main.debug.cantfinddebug", "Der Debugger wurde nicht gefunden!" }, { "appletviewer.main.debug.cantfindmain", "Hauptmethode wurde nicht im Debugger gefunden!" }, { "appletviewer.main.debug.exceptionindebug", "Ausnahme im Debugger!" }, { "appletviewer.main.debug.cantaccess", "Zugriff auf den Debugger nicht möglich!" }, { "appletviewer.main.nosecmgr", "Warnung: SecurityManager nicht installiert!" }, { "appletviewer.main.warning", "Warnung: Es wurden keine Applets gestartet. Stellen Sie sicher, dass die Eingabe eine <applet>-Marke enthält." }, { "appletviewer.main.warn.prop.overwrite", "Warnung: Auf Anforderung des Benutzers wird die Systemeigenschaft vorübergehend überschrieben: Schlüssel: {0} alter Wert: {1} neuer Wert: {2}" }, { "appletviewer.main.warn.cantreadprops", "Warnung: AppletViewer-Eigenschaftendatei kann nicht gelesen werden: {0} Standardwerte werden verwendet." }, { "appletioexception.loadclass.throw.interrupted", "Laden von Klassen unterbrochen: {0}" }, { "appletioexception.loadclass.throw.notloaded", "Klasse nicht geladen: {0}" }, { "appletclassloader.loadcode.verbose", "Öffne Stream zu {0}, um {1} abzurufen." }, { "appletclassloader.filenotfound", "Datei beim Suchen nach {0} nicht gefunden" }, { "appletclassloader.fileformat", "Dateiformatausnahme beim Laden: {0}" }, { "appletclassloader.fileioexception", "E/A-Ausnahme beim Laden: {0}" }, { "appletclassloader.fileexception", "{0} Ausnahme beim Laden: {1}" }, { "appletclassloader.filedeath", "{0} gelöscht beim Laden: {1}" }, { "appletclassloader.fileerror", "{0} Fehler beim Laden: {1}" }, { "appletclassloader.findclass.verbose.findclass", "{0} sucht Klasse {1}" }, { "appletclassloader.findclass.verbose.openstream", "Öffne Stream zu {0}, um {1} abzurufen." }, { "appletclassloader.getresource.verbose.forname", "AppletClassLoader.getResource für Name: {0}" }, { "appletclassloader.getresource.verbose.found", "Ressource {0} als Systemressource gefunden" }, { "appletclassloader.getresourceasstream.verbose", "Ressource {0} als Systemressource gefunden" }, { "appletpanel.runloader.err", "Entweder Objekt oder Code-Parameter!" }, { "appletpanel.runloader.exception", "Ausnahme beim Deserialisieren von {0}" }, { "appletpanel.destroyed", "Applet vernichtet" }, { "appletpanel.loaded", "Applet geladen" }, { "appletpanel.started", "Applet gestartet" }, { "appletpanel.inited", "Applet initialisiert" }, { "appletpanel.stopped", "Applet gestoppt" }, { "appletpanel.disposed", "Applet abgelegt" }, { "appletpanel.nocode", "APPLET-Marke ohne CODE-Parameter" }, { "appletpanel.notfound", "Laden: Klasse {0} nicht gefunden" }, { "appletpanel.nocreate", "Laden: Instanz von {0} kann nicht erstellt werden." }, { "appletpanel.noconstruct", "Laden: {0} ist nicht öffentlich oder hat keinen öffentlichen Autor." }, { "appletpanel.death", "gelöscht" }, { "appletpanel.exception", "Ausnahme: {0}" }, { "appletpanel.exception2", "Ausnahme: {0}: {1}" }, { "appletpanel.error", "Fehler: {0}" }, { "appletpanel.error2", "Fehler: {0}: {1}" }, { "appletpanel.notloaded", "Initialisierung: Applet nicht geladen" }, { "appletpanel.notinited", "Start: Applet nicht initialisiert" }, { "appletpanel.notstarted", "Stopp: Applet nicht gestartet" }, { "appletpanel.notstopped", "Vernichten: Applet nicht gestoppt" }, { "appletpanel.notdestroyed", "Ablegen: Applet nicht vernichtet" }, { "appletpanel.notdisposed", "Laden: Applet nicht abgelegt" }, { "appletpanel.bail", "Unterbrochen: breche ab." }, { "appletpanel.filenotfound", "Datei beim Suchen nach {0} nicht gefunden" }, { "appletpanel.fileformat", "Dateiformatausnahme beim Laden von: {0}" }, { "appletpanel.fileioexception", "E/A-Ausnahme beim Laden von: {0}" }, { "appletpanel.fileexception", "{0} Ausnahme beim Laden von: {1}" }, { "appletpanel.filedeath", "{0} gelöscht beim Laden von: {1}" }, { "appletpanel.fileerror", "{0} Fehler beim Laden von: {1}" }, { "appletpanel.badattribute.exception", "HTML-Parsing: fehlerhafter Wert bei Attribut für Breite/Höhe" }, { "appletillegalargumentexception.objectinputstream", "AppletObjectInputStream erfordert Nicht-Null-Lader." }, { "appletprops.title", "AppletViewer-Eigenschaften" }, { "appletprops.label.http.server", "Http-Proxy-Server:" }, { "appletprops.label.http.proxy", "Http-Proxy-Port:" }, { "appletprops.label.network", "Netzwerkzugriff:" }, { "appletprops.choice.network.item.none", "Keiner" }, { "appletprops.choice.network.item.applethost", "Applet-Host" }, { "appletprops.choice.network.item.unrestricted", "Unbeschränkt" }, { "appletprops.label.class", "Klassenzugriff:" }, { "appletprops.choice.class.item.restricted", "Beschränkt" }, { "appletprops.choice.class.item.unrestricted", "Unbeschränkt" }, { "appletprops.label.unsignedapplet", "Unsignierte Applets zulassen:" }, { "appletprops.choice.unsignedapplet.no", "Nein" }, { "appletprops.choice.unsignedapplet.yes", "Ja" }, { "appletprops.button.apply", "Anwenden" }, { "appletprops.button.cancel", "Abbrechen" }, { "appletprops.button.reset", "Zurücksetzen" }, { "appletprops.apply.exception", "Konnte Eigenschaften nicht speichern: {0}" }, { "appletprops.title.invalidproxy", "Ungültiger Eintrag" }, { "appletprops.label.invalidproxy", "Proxy-Anschluss muss eine positive ganze Zahl sein." }, { "appletprops.button.ok", "OK" }, { "appletprops.prop.store", "Benutzerspezifische Eigenschaften für AppletViewer" }, { "appletsecurityexception.checkcreateclassloader", "Sicherheitsausnahme: classloader" }, { "appletsecurityexception.checkaccess.thread", "Sicherheitsausnahme: Thread" }, { "appletsecurityexception.checkaccess.threadgroup", "Sicherheitsausnahme: Thread-Gruppe: {0}" }, { "appletsecurityexception.checkexit", "Sicherheitsausnahme: beenden: {0}" }, { "appletsecurityexception.checkexec", "Sicherheitsausnahme: ausführen: {0}" }, { "appletsecurityexception.checklink", "Sicherheitsausnahme: verknüpfen: {0}" }, { "appletsecurityexception.checkpropsaccess", "Sicherheitsausnahme: Eigenschaften" }, { "appletsecurityexception.checkpropsaccess.key", "Sicherheitsausnahme: Eigenschaftenzugriff {0}" }, { "appletsecurityexception.checkread.exception1", "Sicherheitsausnahme: {0}, {1}" }, { "appletsecurityexception.checkread.exception2", "Sicherheitsausnahme: Datei.lesen: {0}" }, { "appletsecurityexception.checkread", "Sicherheitsausnahme: Datei.lesen: {0} == {1}" }, { "appletsecurityexception.checkwrite.exception", "Sicherheitsausnahme: {0}, {1}" }, { "appletsecurityexception.checkwrite", "Sicherheitsausnahme: Datei.schreiben: {0} == {1}" }, { "appletsecurityexception.checkread.fd", "Sicherheitsausnahme: fd.lesen" }, { "appletsecurityexception.checkwrite.fd", "Sicherheitsausnahme: fd.schreiben" }, { "appletsecurityexception.checklisten", "Sicherheitsausnahme: Socket.empfangen: {0}" }, { "appletsecurityexception.checkaccept", "Sicherheitsausnahme: Socket.bestätigen: {0}:{1}" }, { "appletsecurityexception.checkconnect.networknone", "Sicherheitsausnahme: Socket.verbinden: {0}->{1}" }, { "appletsecurityexception.checkconnect.networkhost1", "Sicherheitsausnahme: Konnte von {1} aus keine Verbindung mit {0} herstellen." }, { "appletsecurityexception.checkconnect.networkhost2", "Sicherheitsausnahme: Konnte IP für Host {0} oder {1} nicht auflösen." }, { "appletsecurityexception.checkconnect.networkhost3", "Sicherheitsausnahme: Konnte IP für Host {0} nicht auflösen. Siehe Eigenschaft trustProxy." }, { "appletsecurityexception.checkconnect", "Sicherheitsausnahme: verbinden: {0}->{1}" }, { "appletsecurityexception.checkpackageaccess", "Sicherheitsausnahme: Kann nicht auf Package zugreifen: {0}" }, { "appletsecurityexception.checkpackagedefinition", "Sicherheitsausnahme: Kann Package nicht definieren: {0}" }, { "appletsecurityexception.cannotsetfactory", "Sicherheitsausnahme: Kann Werkseinstellungen nicht setzen" }, { "appletsecurityexception.checkmemberaccess", "Sicherheitsausnahme: Mitgliedszugriff prüfen" }, { "appletsecurityexception.checkgetprintjob", "Sicherheitsausnahme: getPrintJob" }, { "appletsecurityexception.checksystemclipboardaccess", "Sicherheitsausnahme: getSystemClipboard" }, { "appletsecurityexception.checkawteventqueueaccess", "Sicherheitsausnahme: getEventQueue" }, { "appletsecurityexception.checksecurityaccess", "Sicherheitsausnahme: Sicherheitsoperation: {0}" }, { "appletsecurityexception.getsecuritycontext.unknown", "Unbekannter Klassenladertyp. Konnte nicht auf getContext prüfen." }, { "appletsecurityexception.checkread.unknown", "Unbekannter Klassenladertyp. Konnte Überprüfen des Lesevorgangs {0} nicht prüfen." }, { "appletsecurityexception.checkconnect.unknown", "Unbekannter Klassenladertyp. Konnte Überprüfen der Verbindung nicht prüfen." } };
    }
