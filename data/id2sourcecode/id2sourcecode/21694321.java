    public static void processFile(InputStream inStream, PublicKey pub_key, X509Certificate my_cert, PrivateKey my_private, SecureRandom sec_rand, File file_out) throws Exception {
        sec_rand = SecureRandom.getInstance("SHA1PRNG", "SUN");
        System.out.println("Generate key for AES at 128 bits");
        KeyGenerator key_gen = KeyGenerator.getInstance("AES", "BC");
        key_gen.init(128, sec_rand);
        Key aes_key = key_gen.generateKey();
        System.out.println("Set up cipher AES/CBC/PKCS7Padding");
        Cipher output_cipher = Cipher.getInstance("AES/CBC/PKCS7Padding", "BC");
        output_cipher.init(Cipher.ENCRYPT_MODE, aes_key, sec_rand);
        byte[] aes_key_enc = aes_key.getEncoded();
        byte[] aes_iv = output_cipher.getIV();
        byte[] lock = new byte[24];
        sec_rand.nextBytes(lock);
        System.out.println("Generate lock data to tie signature to file");
        Signature sig = Signature.getInstance("MD5withRSA", "BC");
        sig.initSign(my_private, sec_rand);
        sig.update(lock);
        System.out.println("Set up RSA with OAEPPadding (see PKCS1 V2)");
        Cipher rsa_eng = Cipher.getInstance("RSA/None/OAEPPadding", "BC");
        rsa_eng.init(Cipher.ENCRYPT_MODE, pub_key, sec_rand);
        FileOutputStream file_str = new FileOutputStream(file_out);
        SignatureOutputStream sig_str = new SignatureOutputStream(file_str, sig);
        DataOutputStream data_str = new DataOutputStream(sig_str);
        System.out.println(file_out.getName() + " >> file header");
        data_str.writeShort(FILE_HEADER);
        System.out.println(file_out.getName() + " >> Aes key enc with RSA");
        data_str.writeShort(KEY_BLOCK);
        byte[] tmp = rsa_eng.doFinal(aes_key_enc);
        data_str.writeInt(tmp.length);
        data_str.write(tmp);
        blank(tmp);
        System.out.println(file_out.getName() + " >> Aes IF enc with RSA (See note in source code)");
        data_str.writeShort(IV_BLOCK);
        tmp = rsa_eng.doFinal(aes_iv);
        data_str.writeInt(tmp.length);
        data_str.write(tmp);
        blank(tmp);
        System.out.println(file_out.getName() + " >> Signature lock data enc with AES");
        data_str.writeShort(LOCK_BLOCK);
        tmp = output_cipher.doFinal(lock);
        data_str.writeInt(tmp.length);
        data_str.write(tmp);
        blank(tmp);
        output_cipher.init(Cipher.ENCRYPT_MODE, aes_key, new IvParameterSpec(aes_iv));
        int l = 0;
        byte[] buf = new byte[8192];
        byte[] out = null;
        while ((l = inStream.read(buf)) > -1) {
            cat.debug("length - " + l);
            out = output_cipher.update(buf, 0, l);
            if (out != null) {
                cat.debug("out.length - " + out.length);
                data_str.writeShort(DATA_BLOCK);
                data_str.writeInt(out.length);
                data_str.write(out);
                System.out.println(file_out.getName() + " >> Encrypted " + out.length + " bytes output");
            }
        }
        out = output_cipher.doFinal();
        data_str.writeShort(FINAL_DATA_BLOCK);
        data_str.writeInt(out.length);
        data_str.write(out);
        System.out.println(file_out.getName() + " >> Final Encrypted " + out.length + " bytes output");
        blank(buf);
        buf = null;
        data_str.writeShort(CERT_BLOCK);
        tmp = my_cert.getEncoded();
        data_str.writeInt(tmp.length);
        data_str.write(tmp);
        System.out.println(file_out.getName() + " >> Write out Signature code block.");
        data_str.writeShort(SIG_BLOCK);
        data_str.flush();
        tmp = sig.sign();
        data_str.writeInt(tmp.length);
        data_str.write(tmp);
        blank(tmp);
        data_str.flush();
        data_str.close();
        System.out.println("Dispose of key material as best we can in java..");
        blank(aes_key_enc);
        aes_key_enc = null;
        aes_key = null;
        tmp = null;
        System.out.println("The End..");
    }
