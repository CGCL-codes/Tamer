    private void dumpEnumType(TypeDefinition td, String outdir) throws IOException {
        BufferedWriter out = FileUpdateManager.instance().getWriter(outdir, "DmcType" + td.getName().getNameString() + ".java");
        if (fileHeader != null) out.write(fileHeader);
        String schemaPackage = td.getDefinedIn().getSchemaPackage();
        out.write("package " + schemaPackage + ".generated.types;\n\n");
        out.write("import java.io.Serializable;\n");
        out.write("import org.dmd.dmc.DmcInputStreamIF;\n");
        out.write("import org.dmd.dmc.DmcOutputStreamIF;\n");
        out.write("import org.dmd.dmc.DmcAttribute;\n");
        out.write("import org.dmd.dmc.DmcAttributeInfo;\n");
        out.write("import org.dmd.dmc.DmcValueException;\n");
        out.write("import " + schemaPackage + ".generated.enums.*;\n\n");
        out.write("/**\n");
        out.write(" * This is the generated DmcAttribute derivative for values of type " + td.getName() + "\n");
        out.write(" * <P>\n");
        out.write(" * Generated from the " + td.getDefinedIn().getName() + " schema at version " + td.getDefinedIn().getVersion() + "\n");
        out.write(" * <P>\n");
        out.write(" * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!\n");
        out.write(" * Generated from: " + DebugInfo.getWhereWeAreNow() + "\n");
        out.write(" */\n");
        out.write("@SuppressWarnings(\"serial\")\n");
        out.write("abstract public class DmcType" + td.getName() + " extends DmcAttribute<" + td.getName() + "> implements Serializable {\n");
        out.write("\n");
        out.write("    public DmcType" + td.getName() + "(){\n");
        out.write("    }\n");
        out.write("\n");
        out.write("    public DmcType" + td.getName() + "(DmcAttributeInfo ai){\n");
        out.write("        super(ai);\n");
        out.write("    }\n");
        out.write("\n");
        out.write("    protected " + td.getName() + " typeCheck(Object value) throws DmcValueException {\n");
        out.write("        " + td.getName() + " rc = null;\n");
        out.write("\n");
        out.write("        if (value instanceof " + td.getName() + "){\n");
        out.write("            rc = (" + td.getName() + ")value;\n");
        out.write("        }\n");
        out.write("        else if (value instanceof String){\n");
        out.write("            rc = " + td.getName() + ".get((String)value);\n");
        out.write("        }\n");
        out.write("        else if (value instanceof Integer){\n");
        out.write("            rc = " + td.getName() + ".get((Integer)value);\n");
        out.write("        }\n");
        out.write("        else{\n");
        out.write("            throw(new DmcValueException(\"Object of class: \" + value.getClass().getName() + \" passed where object compatible with " + td.getName() + " expected.\"));\n");
        out.write("        }\n\n");
        out.write("        if (rc == null){\n");
        out.write("            throw(new DmcValueException(\"Value: \" + value.toString() + \" is not a valid " + td.getName() + " value.\"));\n");
        out.write("        }\n\n");
        out.write("        return(rc);\n");
        out.write("    }\n");
        out.write("\n");
        out.write("    /**\n");
        out.write("     * Returns a clone of a value associated with this type.\n");
        out.write("     */\n");
        out.write("    public " + td.getName() + " cloneValue(" + td.getName() + " val){\n");
        out.write("        return(val);\n");
        out.write("    }\n\n");
        out.write("    /**\n");
        out.write("     * Writes a " + td.getName() + ".\n");
        out.write("     */\n");
        out.write("    public void serializeValue(DmcOutputStreamIF dos, " + td.getName() + " value) throws Exception {\n");
        out.write("        dos.writeShort(value.intValue());\n");
        out.write("    }\n\n");
        out.write("    /**\n");
        out.write("     * Reads a " + td.getName() + ".\n");
        out.write("     */\n");
        out.write("    public " + td.getName() + " deserializeValue(DmcInputStreamIF dis) throws Exception {\n");
        out.write("        return(" + td.getName() + ".get(dis.readShort()));\n");
        out.write("    }\n\n");
        out.write("}\n");
        out.close();
        String tn = td.getName().getNameString();
        String primitiveImport = schemaPackage + ".generated.enums." + tn;
        GenUtility.dumpSVType(outdir, schemaPackage, null, tn, primitiveImport, null, null, null, "", false, td.getIsNameType(), td.getIsFilterType(), fileHeader, progress);
        GenUtility.dumpMVType(outdir, schemaPackage, null, tn, primitiveImport, null, null, "", false, fileHeader, progress);
        GenUtility.dumpSETType(outdir, schemaPackage, null, tn, primitiveImport, null, null, "", false, fileHeader, progress);
    }
