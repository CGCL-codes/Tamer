    private static void writeSafeValueToString(SymbolData sd, int baseIndent, String methodName) {
        String[] primitiveTypes = new String[] { "byte[]", "short[]", "char[]", "int[]", "long[]", "float[]", "double[]", "boolean[]" };
        boolean useGenerics = LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5);
        _writeToFileOut(newLine);
        _writeToFileOut(indentString(baseIndent, 1) + "/**" + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " * This method is automatically generated by the LanguageLevelConverter." + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " * As a helper to toString(), it recursively generates a string for any object," + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " * including nulls, arrays, and standard reference types." + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " */" + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + "private java.lang.String " + methodName + "(java.lang.Object o) {" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "class ArrayToString {" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 3) + "public String valueFor(java.lang.Object o) {" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "if (o instanceof java.lang.Object[]) {" + newLine);
        if (useGenerics) {
            _writeToFileOut(indentString(baseIndent, 5) + "return arrayToString((java.lang.Object[]) o, new java.util.HashSet<java.lang.Object[]>());" + newLine);
        } else {
            _writeToFileOut(indentString(baseIndent, 5) + "return arrayToString((java.lang.Object[]) o, new java.util.HashSet());" + newLine);
        }
        _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
        for (String type : primitiveTypes) {
            _writeToFileOut(indentString(baseIndent, 4) + "else if (o instanceof " + type + ") {" + newLine);
            _writeToFileOut(indentString(baseIndent, 5) + "return arrayToString((" + type + ") o);" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
        }
        _writeToFileOut(indentString(baseIndent, 4) + "else {" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "// o should be an array, but if not, toString() is called" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "return o.toString();" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 3) + "}" + newLine + newLine);
        for (String type : primitiveTypes) {
            _writeToFileOut(indentString(baseIndent, 3) + "public java.lang.String arrayToString(" + type + " array) {" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "java.lang.StringBuffer result = new java.lang.StringBuffer();" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "result.append(\"[\");" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "if (array.length > 0) { result.append(array[0]); }" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "for (int i = 1; i < array.length; i++) {" + newLine);
            _writeToFileOut(indentString(baseIndent, 5) + "result.append(\", \");" + newLine);
            _writeToFileOut(indentString(baseIndent, 5) + "result.append(array[i]);" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "result.append(\"]\");" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "return result.toString();" + newLine);
            _writeToFileOut(indentString(baseIndent, 3) + "}" + newLine + newLine);
        }
        if (useGenerics) {
            _writeToFileOut(indentString(baseIndent, 3) + "public java.lang.String arrayToString(java.lang.Object[] array, " + "java.util.HashSet<java.lang.Object[]> alreadyPrinted) {" + newLine);
        } else {
            _writeToFileOut(indentString(baseIndent, 3) + "public java.lang.String arrayToString(java.lang.Object[] array, " + "java.util.HashSet alreadyPrinted) {" + newLine);
        }
        _writeToFileOut(indentString(baseIndent, 4) + "if (alreadyPrinted.contains(array)) { return (\"[...]\"); }" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "else { alreadyPrinted.add(array); }" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "java.lang.StringBuffer result = new java.lang.StringBuffer();" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "result.append(\"[\");" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "boolean nonEmpty = false;" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "for (int i = 0; i < array.length; i++) {" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "if (nonEmpty) { result.append(\", \"); }" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "nonEmpty = true;" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "if (array[i] instanceof java.lang.Object[]) {" + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "result.append(arrayToString((java.lang.Object[]) array[i], alreadyPrinted));" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "else {" + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "result.append(" + methodName + "(array[i]));" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "result.append(\"]\");" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "alreadyPrinted.remove(array);" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "return result.toString();" + newLine);
        _writeToFileOut(indentString(baseIndent, 3) + "}" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "}" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "if (o == null) { return \"\" + null; }" + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "else if (o.getClass().isArray()) { return new ArrayToString().valueFor(o); }" + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "else { return o.toString(); }" + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + "}" + newLine);
    }
