    private static void writeSafeValueEquals(SymbolData sd, int baseIndent, String methodName) {
        String[] primitiveTypes = new String[] { "byte[]", "short[]", "char[]", "int[]", "long[]", "float[]", "double[]", "boolean[]" };
        boolean useGenerics = LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5);
        _writeToFileOut(newLine);
        _writeToFileOut(indentString(baseIndent, 1) + "/**" + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " * This method is automatically generated by the LanguageLevelConverter." + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " * As a helper to equals(Object), it recursively compares any two objects," + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " * including nulls, arrays, and standard reference types." + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " */" + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + "private boolean " + methodName + "(java.lang.Object o1, java.lang.Object o2) {" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "class ArrayEquals {" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 3) + "public boolean valueFor(java.lang.Object o1, java.lang.Object o2) {" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "if (o1 instanceof java.lang.Object[] && o2 instanceof java.lang.Object[]) {" + newLine);
        if (useGenerics) {
            _writeToFileOut(indentString(baseIndent, 5) + "return arrayEquals((java.lang.Object[]) o1, " + "(java.lang.Object[]) o2, new java.util.HashSet<java.lang.Object>());" + newLine);
        } else {
            _writeToFileOut(indentString(baseIndent, 5) + "return arrayEquals((java.lang.Object[]) o1, " + "(java.lang.Object[]) o2, new java.util.HashSet());" + newLine);
        }
        _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
        for (String type : primitiveTypes) {
            _writeToFileOut(indentString(baseIndent, 4) + "else if (o1 instanceof " + type + " && o2 instanceof " + type + ") {" + newLine);
            _writeToFileOut(indentString(baseIndent, 5) + "return arrayEquals((" + type + ") o1, (" + type + ") o2);" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
        }
        _writeToFileOut(indentString(baseIndent, 4) + "else {" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "// o1 and o2 should be arrays, but if not, " + "or if they have different types, equals(Object) is called" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "return o1.equals(o2);" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 3) + "}" + newLine + newLine);
        for (String type : primitiveTypes) {
            _writeToFileOut(indentString(baseIndent, 3) + "public boolean arrayEquals(" + type + " array1, " + type + " array2) {" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "if (array1.length != array2.length) { return false; }" + newLine + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "else {" + newLine);
            _writeToFileOut(indentString(baseIndent, 5) + "for (int i = 0; i < array1.length; i++) {" + newLine);
            _writeToFileOut(indentString(baseIndent, 6) + "if (array1[i] != array2[i]) { return false; }" + newLine);
            _writeToFileOut(indentString(baseIndent, 5) + "}" + newLine);
            _writeToFileOut(indentString(baseIndent, 5) + "return true;" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
            _writeToFileOut(indentString(baseIndent, 3) + "}" + newLine + newLine);
        }
        if (useGenerics) {
            _writeToFileOut(indentString(baseIndent, 3) + "public boolean arrayEquals(final java.lang.Object[] array1, " + "final java.lang.Object[] array2, java.util.HashSet<java.lang.Object> alreadyCompared) {" + newLine + newLine);
        } else {
            _writeToFileOut(indentString(baseIndent, 3) + "public boolean arrayEquals(final java.lang.Object[] array1," + " final java.lang.Object[] array2, java.util.HashSet alreadyCompared) {" + newLine + newLine);
        }
        _writeToFileOut(indentString(baseIndent, 4) + "class ArrayPair {" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "public java.lang.Object[] array1() { return array1; }" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "public java.lang.Object[] array2() { return array2; }" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "public boolean equals(java.lang.Object o) {" + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "if ((o == null) || ! (o instanceof ArrayPair)) { return false; }" + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "else { return (array1.equals(((ArrayPair) o).array1())) && " + "(array2.equals(((ArrayPair) o).array2())); }" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "public int hashCode() { return array1.hashCode() ^ (array2.hashCode() << 1); }" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "if (array1.length != array2.length) { return false; }" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "else {" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "ArrayPair currentPair = new ArrayPair();" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "if (alreadyCompared.contains(currentPair)) { return true; }" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "alreadyCompared.add(currentPair);" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "boolean result = true;" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "for (int i = 0; i < array1.length; i++) {" + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "if (array1[i] instanceof java.lang.Object[] && array2[i] instanceof java.lang.Object[]) {" + newLine);
        _writeToFileOut(indentString(baseIndent, 7) + "result = arrayEquals((java.lang.Object[]) array1[i], " + "(java.lang.Object[]) array2[i], alreadyCompared);" + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "else {" + newLine);
        _writeToFileOut(indentString(baseIndent, 7) + "result = " + methodName + "(array1[i], array2[i]);" + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "}" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "if (!result) { break; }" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "}" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "alreadyCompared.remove(currentPair);" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "return result;" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 3) + "}" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "}" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "if (o1 == null) { return o2 == null; }" + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "else if (o2 == null) { return false; }" + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "else if (o1.getClass().isArray() && o2.getClass().isArray()) " + "{ return new ArrayEquals().valueFor(o1, o2); }" + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "else { return o1.equals(o2); }" + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + "}" + newLine);
    }
