    private static void writeSafeValueHashCode(SymbolData sd, int baseIndent, String valueEqualsName, String methodName) {
        String[] primitiveTypes = new String[] { "byte[]", "short[]", "char[]", "int[]", "long[]", "float[]", "double[]", "boolean[]" };
        boolean useGenerics = LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5);
        _writeToFileOut(newLine);
        _writeToFileOut(indentString(baseIndent, 1) + "/**" + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " * This method is automatically generated by the LanguageLevelConverter." + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " * As a helper to hashCode(), it recursively generates a hash code for any object," + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " * including nulls, arrays, and standard reference types." + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + " */" + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + "private int " + methodName + "(java.lang.Object o) {" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "class ArrayHashCode {" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 3) + "public int valueFor(java.lang.Object o) {" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "if (o instanceof java.lang.Object[]) {" + newLine);
        if (useGenerics) {
            _writeToFileOut(indentString(baseIndent, 5) + "return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList<java.lang.Object>());" + newLine);
        } else {
            _writeToFileOut(indentString(baseIndent, 5) + "return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList());" + newLine);
        }
        _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
        for (String type : primitiveTypes) {
            _writeToFileOut(indentString(baseIndent, 4) + "else if (o instanceof " + type + ") {" + newLine);
            _writeToFileOut(indentString(baseIndent, 5) + "return arrayHashCode((" + type + ") o);" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
        }
        _writeToFileOut(indentString(baseIndent, 4) + "else {" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "// o should be an array, but if not, hashCode() is called" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "return o.hashCode();" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 3) + "}" + newLine + newLine);
        for (String type : primitiveTypes) {
            _writeToFileOut(indentString(baseIndent, 3) + "public int arrayHashCode(" + type + " array) {" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "int result = 0;" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "for (int i = 0; i < array.length; i++) {" + newLine);
            if (type.equals("boolean[]")) {
                _writeToFileOut(indentString(baseIndent, 5) + "result = (result << 1) ^ (array[i] ? 1 : 0);" + newLine);
            } else {
                _writeToFileOut(indentString(baseIndent, 5) + "result = (result << 1) ^ (int) array[i];" + newLine);
            }
            _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine);
            _writeToFileOut(indentString(baseIndent, 4) + "return result;" + newLine);
            _writeToFileOut(indentString(baseIndent, 3) + "}" + newLine + newLine);
        }
        if (useGenerics) {
            _writeToFileOut(indentString(baseIndent, 3) + "public int arrayHashCode(final java.lang.Object[] array, " + "final java.util.LinkedList<java.lang.Object> alreadyGenerated) {" + newLine + newLine);
        } else {
            _writeToFileOut(indentString(baseIndent, 3) + "public int arrayHashCode(final java.lang.Object[] array, " + "final java.util.LinkedList alreadyGenerated) {" + newLine + newLine);
        }
        _writeToFileOut(indentString(baseIndent, 4) + "class ArrayWrapper {" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "public java.lang.Object[] array() { return array; }" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "public boolean equals(java.lang.Object o) {" + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "return (o != null) && (o instanceof ArrayWrapper)  && " + valueEqualsName + "(array, ((ArrayWrapper) o).array());" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "public int hashCode() { return 0; } // This method should never be used -- " + "only here for consistency." + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "ArrayWrapper currentWrapper = new ArrayWrapper();" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "if (alreadyGenerated.contains(currentWrapper)) { return -1; }" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "alreadyGenerated.addLast(currentWrapper);" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "int result = 0;" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "for (int i = 0; i < array.length; i++) {" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "if (array[i] instanceof java.lang.Object[]) {" + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "result = (result << 1) ^ (arrayHashCode((java.lang.Object[]) array[i], alreadyGenerated) >> 1);" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "else {" + newLine);
        _writeToFileOut(indentString(baseIndent, 6) + "result = (result << 1) ^ " + methodName + "(array[i]);" + newLine);
        _writeToFileOut(indentString(baseIndent, 5) + "}" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "}" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "alreadyGenerated.removeLast();" + newLine);
        _writeToFileOut(indentString(baseIndent, 4) + "return result;" + newLine);
        _writeToFileOut(indentString(baseIndent, 3) + "}" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "}" + newLine + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "if (o == null) { return 0; }" + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "else if (o.getClass().isArray()) { return new ArrayHashCode().valueFor(o); }" + newLine);
        _writeToFileOut(indentString(baseIndent, 2) + "else { return o.hashCode(); }" + newLine);
        _writeToFileOut(indentString(baseIndent, 1) + "}" + newLine);
    }
