    @Test
    public void testExternalXmlSignature() throws Exception {
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        documentBuilderFactory.setNamespaceAware(true);
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document document = documentBuilder.newDocument();
        XMLSignature xmlSignature = new XMLSignature(document, "", XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA1, Canonicalizer.ALGO_ID_C14N_WITH_COMMENTS);
        Element signatureElement = xmlSignature.getElement();
        document.appendChild(signatureElement);
        ObjectContainer objectContainer = new ObjectContainer(document);
        objectContainer.appendChild(document.createTextNode("Test Message"));
        String id = "object-" + UUID.randomUUID().toString();
        objectContainer.setId(id);
        xmlSignature.appendObject(objectContainer);
        Transforms transforms = new Transforms(document);
        transforms.addTransform(Transforms.TRANSFORM_C14N_EXCL_WITH_COMMENTS);
        xmlSignature.addDocument("#" + id, transforms, MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA512, null, null);
        KeyPair keyPair = generateKeyPair();
        DateTime notBefore = new DateTime();
        DateTime notAfter = notBefore.plusYears(1);
        X509Certificate certificate = generateCertificate(keyPair.getPublic(), "CN=Test", notBefore, notAfter, null, keyPair.getPrivate(), true, 0, null, null, new KeyUsage(KeyUsage.nonRepudiation));
        xmlSignature.addKeyInfo(certificate);
        SignedInfo signedInfo = xmlSignature.getSignedInfo();
        signedInfo.generateDigestValues();
        byte[] octets = signedInfo.getCanonicalizedOctetStream();
        MessageDigest messageDigest = MessageDigest.getInstance("SHA1");
        byte[] digestValue = messageDigest.digest(octets);
        byte[] digestInfoValue = ArrayUtils.addAll(SHA1_DIGEST_INFO_PREFIX, digestValue);
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPrivate());
        byte[] signatureValue = cipher.doFinal(digestInfoValue);
        String encodedSignatureValue = Base64.encode(signatureValue);
        Element xmlSignatureElement = xmlSignature.getElement();
        Element signatureValueElement = (Element) XPathAPI.selectSingleNode(xmlSignatureElement, "ds:SignatureValue");
        signatureValueElement.setTextContent(encodedSignatureValue);
        xmlSignature = new XMLSignature(xmlSignatureElement, null);
        assertTrue(xmlSignature.checkSignatureValue(keyPair.getPublic()));
        Source source = new DOMSource(document);
        StringWriter stringWriter = new StringWriter();
        Result result = new StreamResult(stringWriter);
        Transformer xformer = TransformerFactory.newInstance().newTransformer();
        xformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        xformer.transform(source, result);
        String signedDocumentStr = stringWriter.getBuffer().toString();
        LOG.debug("signed document: " + signedDocumentStr);
        File tmpFile = File.createTempFile("signature-", ".xml");
        IOUtils.write(signedDocumentStr.getBytes(), new FileOutputStream(tmpFile));
        StringReader stringReader = new StringReader(signedDocumentStr);
        InputSource inputSource = new InputSource(stringReader);
        Document signedDocument = documentBuilder.parse(inputSource);
        signatureElement = (Element) XPathAPI.selectSingleNode(signedDocument, "ds:Signature");
        assertNotNull(signatureElement);
        xmlSignature = new XMLSignature(signatureElement, null);
        LOG.debug("tmp signature file: " + tmpFile.getAbsolutePath());
        boolean signatureResult = xmlSignature.checkSignatureValue(keyPair.getPublic());
        assertTrue(signatureResult);
    }
