    @Test
    public void testPreSignPostSign() throws Exception {
        KeyPair keyPair = generateKeyPair();
        DateTime notBefore = new DateTime();
        DateTime notAfter = notBefore.plusYears(1);
        X509Certificate certificate = generateCertificate(keyPair.getPublic(), "CN=Test", notBefore, notAfter, null, keyPair.getPrivate(), true, 0, null, null, new KeyUsage(KeyUsage.nonRepudiation));
        byte[] toBeSigned = "hello world".getBytes();
        MessageDigest messageDigest = MessageDigest.getInstance("SHA1");
        byte[] digestValue = messageDigest.digest(toBeSigned);
        List<DigestInfo> digestInfos = new LinkedList<DigestInfo>();
        digestInfos.add(new DigestInfo(digestValue, "SHA-1", "test-file-name"));
        HttpServletRequest mockHttpServletRequest = EasyMock.createMock(HttpServletRequest.class);
        HttpSession mockHttpSession = EasyMock.createMock(HttpSession.class);
        EasyMock.expect(mockHttpServletRequest.getSession()).andStubReturn(mockHttpSession);
        EasyMock.expect(mockHttpSession.getAttribute("signDigestAlgo")).andStubReturn("SHA-1");
        PolicyContextHandler handler = new PolicyContextTestHandler(mockHttpServletRequest);
        PolicyContext.registerHandler("javax.servlet.http.HttpServletRequest", handler, false);
        Capture<String> xmlDocumentCapture = new Capture<String>();
        mockHttpSession.setAttribute(EasyMock.eq("xmlDocument"), EasyMock.capture(xmlDocumentCapture));
        EasyMock.replay(mockHttpServletRequest, mockHttpSession);
        DigestInfo resultDigestInfo = this.testedInstance.preSign(digestInfos, null);
        EasyMock.verify(mockHttpServletRequest, mockHttpSession);
        assertNotNull(resultDigestInfo);
        assertNotNull(resultDigestInfo.digestValue);
        assertNotNull(resultDigestInfo.digestAlgo);
        assertNotNull(resultDigestInfo.description);
        LOG.debug("digest algo: " + resultDigestInfo.digestAlgo);
        LOG.debug("description: " + resultDigestInfo.description);
        byte[] digestInfoValue = ArrayUtils.addAll(SHA1_DIGEST_INFO_PREFIX, resultDigestInfo.digestValue);
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPrivate());
        byte[] signatureValue = cipher.doFinal(digestInfoValue);
        List<X509Certificate> signingCertificateChain = new LinkedList<X509Certificate>();
        signingCertificateChain.add(certificate);
        EasyMock.reset(mockHttpServletRequest, mockHttpSession);
        EasyMock.expect(mockHttpServletRequest.getSession()).andStubReturn(mockHttpSession);
        EasyMock.expect(mockHttpSession.getAttribute("xmlDocument")).andReturn(xmlDocumentCapture.getValue());
        mockHttpSession.setAttribute(EasyMock.eq("xmlDocument"), EasyMock.capture(xmlDocumentCapture));
        EasyMock.replay(mockHttpServletRequest, mockHttpSession);
        this.testedInstance.postSign(signatureValue, signingCertificateChain);
        EasyMock.verify(mockHttpServletRequest, mockHttpSession);
        String signedDocumentStr = xmlDocumentCapture.getValue();
        StringReader stringReader = new StringReader(signedDocumentStr);
        InputSource inputSource = new InputSource(stringReader);
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        documentBuilderFactory.setNamespaceAware(true);
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document signedDocument = documentBuilder.parse(inputSource);
        Element signatureElement = (Element) XPathAPI.selectSingleNode(signedDocument, "ds:Signature");
        assertNotNull(signatureElement);
        XMLSignature apacheXmlSignature = new XMLSignature(signatureElement, null);
        ResourceTestResolver resourceResolver = new ResourceTestResolver();
        resourceResolver.addResource("test-file-name", toBeSigned);
        apacheXmlSignature.addResourceResolver(resourceResolver);
        boolean signatureResult = apacheXmlSignature.checkSignatureValue(keyPair.getPublic());
        assertTrue(signatureResult);
        LOG.debug("XML signature: " + xmlDocumentCapture.getValue());
    }
