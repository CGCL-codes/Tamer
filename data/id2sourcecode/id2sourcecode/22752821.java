    private void createRunScript() throws IOException {
        FileWriter out3 = new FileWriter(getProject().getSourcePath() + File.separator + "runner.py");
        String script = "from TOSSIM import *\n" + "import sys\n" + "\n" + "maxValuesRead = 1000\n" + "\n" + "# Create simulation, configure output\n" + "t = Tossim([])\n";
        String script3 = "# Create topology\n" + "print \"Creating mote topology...\";\n" + "sys.stdout.flush()\n" + "r = t.radio()\n" + "f = open(\"topology.tmp\", \"r\")\n" + "lines = f.readlines()\n" + "for line in lines:\n" + "  s = line.strip().split(\" \")\n" + "  if (len(s) > 0):\n" + "    r.add(int(s[0]), int(s[1]), float(s[2]))\n" + "print \"Created mote topology.\";\n" + "sys.stdout.flush()\n" + "\n" + "# Add statistical noise model to nodes\n" + "print \"Creating noise models for the motes...\";\n" + "sys.stdout.flush()\n" + "noise = open(\"noise.tmp\", \"r\")\n" + "lines = noise.readlines()\n" + "valuesRead = 0\n" + "for line in lines:\n" + "  st = line.strip()\n" + "  if (st != \"\"):\n" + "    val = int(st)\n" + "    for i in range(0, numNodes):\n" + "      t.getNode(i).addNoiseTraceReading(val)\n" + "    valuesRead += 1\n" + "    if valuesRead >= maxValuesRead:\n" + "      break\n" + "print \"Data read preparing noise model\"\n" + "sys.stdout.flush()\n" + "for i in range(0, numNodes):\n" + "  t.getNode(i).createNoiseModel()\n" + "print \"Created noise models from\", valuesRead, \"trace readings.\";\n" + "sys.stdout.flush()\n" + "\n" + "# Run simulation\n" + "print \"Running the simulation...\";\n" + "t.runNextEvent()\n" + "time = t.time()\n" + "prev = t.time()\n" + "while True:\n" + "  if ( (t.time() - prev) > t.ticksPerSecond() ) :\n" + "        prev = t.time()\n" + "        print  \"TIME\", (t.time() / ( t.ticksPerSecond() / 1000) ) \n" + "        sys.stdout.flush()\n" + "  while times[0] * t.ticksPerSecond() <= t.time():\n" + "        print \"Running event with %f secs of delay\" % (times[0] - t.time() / t.ticksPerSecond() ) \n" + "        if events[0][0] == 0:\n" + "          print(\"DEBUG (\" + str(events[0][1]) + \"): Powering on node\")\n" + "          t.getNode(events[0][1]).turnOn()\n" + "          t.getNode(events[0][1]).bootAtTime(t.time() + 1)\n" + "        elif events[0][0] == 1:\n" + "          print(\"DEBUG (\" + str(events[0][1]) + \"): Powering off node\")\n" + "          t.getNode(events[0][1]).turnOff()\n" + "        elif events[0][0] == 2:\n" + "          print \"DEBUG (0): Stopping simulation\" \n" + "          exit(0)\n" + "        elif events[0][0] == 3:\n" + "          for i in range(0, numNodes):\n" + "              print(\"DEBUG (\" + str(i) + \"): Powering on node\")\n" + "              t.getNode(i).turnOn()\n" + "              t.getNode(i).bootAtTime(t.time() + 1)\n" + "        del times[0]\n" + "        del events[0]\n" + "        sys.stdout.flush()\n" + "  t.runNextEvent()\n" + "print \"Simulation over.\"\n" + "sys.stdout.flush()\n";
        out3.write(script);
        out3.write(createEvents());
        out3.write("numNodes = " + getProject().getLinkLayerModelParameters().getNumNodes() + "\n");
        for (int i = 0; i < getProject().getChannels().size(); i++) {
            out3.write("t.addChannel(\"" + getProject().getChannels().get(i) + "\", sys.stdout)\n");
        }
        out3.write(script3);
        out3.close();
    }
