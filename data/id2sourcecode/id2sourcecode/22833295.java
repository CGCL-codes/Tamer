    DBNode(Class<T> recordClass, DBNodeFactory factory) throws IntrospectionException {
        this.recordClass = recordClass;
        this.factory = factory;
        if (!recordClass.isAnnotationPresent(Table.class)) {
            throw new IllegalArgumentException("No table annotation found on class: " + recordClass);
        }
        final Table tableAnnotation = recordClass.getAnnotation(Table.class);
        tableName = tableAnnotation.name();
        final BeanInfo beanInfo = Introspector.getBeanInfo(recordClass);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        fieldDescriptors = new ArrayList<FieldDescriptor>(propertyDescriptors.length);
        descriptorMap = new HashMap<String, FieldDescriptor>(propertyDescriptors.length);
        keyFields = new ArrayList<FieldDescriptor>();
        autoGeneratedFields = new ArrayList<FieldDescriptor>();
        StringBuilder fieldList = new StringBuilder();
        StringBuilder updateList = new StringBuilder();
        StringBuilder insertParams = new StringBuilder();
        StringBuilder pkFieldList = new StringBuilder();
        StringBuilder pkCondition = new StringBuilder();
        StringBuilder autogeneratedFieldList = new StringBuilder();
        for (PropertyDescriptor descriptor : propertyDescriptors) {
            final Method readMethod = descriptor.getReadMethod();
            final Method writeMethod = descriptor.getWriteMethod();
            if (readMethod == null || writeMethod == null) continue;
            final Class<?> propertyType = descriptor.getPropertyType();
            final Field fieldAnnotation = readMethod.getAnnotation(Field.class);
            if (fieldAnnotation == null) continue;
            DBType dbType = fieldAnnotation.dbType();
            if (dbType == DBType.UNKNOWN) {
                dbType = DBType.getDefaultFromClass(propertyType);
            }
            if (!fieldDescriptors.isEmpty()) {
                fieldList.append(", ");
                insertParams.append(", ");
            }
            final String dbName = fieldAnnotation.dbName();
            fieldList.append(dbName);
            final boolean isPkField = fieldAnnotation.isPK();
            if (isPkField) {
                if (!keyFields.isEmpty()) {
                    pkFieldList.append(", ");
                    pkCondition.append(" and ");
                }
                pkFieldList.append(dbName);
                pkCondition.append(dbName).append(" = ?");
            } else {
                if (updateList.length() > 0) {
                    updateList.append(", ");
                }
                updateList.append(dbName).append(" = ?");
            }
            final String sequenceName = fieldAnnotation.sequenceName();
            boolean autogenerated = sequenceName.length() > 0;
            if (autogenerated) {
                if (!autoGeneratedFields.isEmpty()) {
                    autogeneratedFieldList.append(", ");
                }
                autogeneratedFieldList.append(factory.nextSyntax(sequenceName));
            }
            insertParams.append("?");
            final FieldDescriptor fieldDescriptor = new FieldDescriptor(propertyType, readMethod, writeMethod, dbType, dbName, isPkField, autogenerated);
            if (isPkField) {
                keyFields.add(fieldDescriptor);
            }
            if (autogenerated) {
                autoGeneratedFields.add(fieldDescriptor);
            }
            fieldDescriptors.add(fieldDescriptor);
            descriptorMap.put(descriptor.getName(), fieldDescriptor);
        }
        if (keyFields.isEmpty()) {
            throw new IllegalArgumentException("No primary key found in record class: " + recordClass);
        }
        StringBuilder insertSql = new StringBuilder("insert into ");
        insertSql.append(tableName).append("(").append(fieldList);
        insertSql.append(") values (").append(insertParams).append(")");
        INSERT_SQL = insertSql.toString();
        StringBuilder updateSql = new StringBuilder("update ");
        updateSql.append(tableName).append(" set ").append(updateList);
        updateSql.append(" where ").append(pkCondition);
        UPDATE_SQL = updateSql.toString();
        StringBuilder loadAutogeneratedFieldsSql = new StringBuilder("select ");
        loadAutogeneratedFieldsSql.append(autogeneratedFieldList);
        LOAD_AUTOGENERATED_FIELDS_SQL = loadAutogeneratedFieldsSql.toString();
        StringBuilder deleteSql = new StringBuilder("delete from ");
        deleteSql.append(tableName).append(" where ").append(pkCondition);
        DELETE_SQL = deleteSql.toString();
        StringBuilder loadSql = new StringBuilder("select ");
        loadSql.append(fieldList).append(" from ");
        loadSql.append(tableName);
        WALK_THROUGH_SQL = loadSql.toString();
        loadSql.append(" order by ").append(pkFieldList);
        loadSql.append(" limit 100 offset ");
        LOAD_SQL = loadSql.toString();
        StringBuilder lookupSql = new StringBuilder("select ");
        lookupSql.append(fieldList).append(" from ").append(tableName);
        lookupSql.append(" where ").append(pkCondition);
        LOOKUP_SQL = lookupSql.toString();
        buffer = (T[]) Array.newInstance(recordClass, 100);
        bufferLength = bufferStart = bufferPosition = 0;
        recordCount = -1;
    }
