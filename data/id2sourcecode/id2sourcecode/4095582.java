    void dumpDmcType(String od, String cn, boolean supportsString) throws IOException {
        BufferedWriter out = FileUpdateManager.instance().getWriter(od, "DmcType" + cn + ".java");
        out.write(LGPL.toString());
        out.write("package org.dmd.dms.generated.types;\n\n");
        out.write("import java.io.Serializable;\n");
        out.write("import org.dmd.dmc.DmcInputStreamIF;\n");
        out.write("import org.dmd.dmc.DmcOutputStreamIF;\n");
        out.write("import org.dmd.dmc.DmcAttribute;\n");
        out.write("import org.dmd.dmc.DmcAttributeInfo;\n");
        out.write("import org.dmd.dmc.DmcValueException;\n");
        if (supportsString) out.write("import org.dmd.dms.generated.enums.*;\n\n"); else out.write("import org.dmd.dms.*;\n\n");
        out.write("@SuppressWarnings(\"serial\")\n");
        out.write("/**\n * The DmcType" + cn + " class.\n");
        out.write(" * This code was auto-generated by the createmeta utility and shouldn't be alterred\n");
        out.write(" * manually.\n");
        out.write(" * Generated from: " + DebugInfo.getWhereWeAreNow() + "\n");
        out.write(" */\n");
        out.write("abstract public class DmcType" + cn + " extends DmcAttribute<" + cn + ">" + " implements Serializable {\n\n");
        out.write("    /**\n");
        out.write("     * Default constructor.\n");
        out.write("     */\n");
        out.write("    public DmcType" + cn + "(){\n");
        out.write("    }\n\n");
        out.write("    /**\n");
        out.write("     * Default constructor.\n");
        out.write("     */\n");
        out.write("    public DmcType" + cn + "(DmcAttributeInfo ai){\n");
        out.write("        super(ai);\n");
        out.write("    }\n\n");
        out.write("    protected " + cn + " typeCheck(Object value) throws DmcValueException {\n");
        out.write("        " + cn + " rc = null;\n\n");
        out.write("        if (value instanceof " + cn + "){\n");
        out.write("            rc = (" + cn + ")value;\n");
        out.write("        }\n");
        if (supportsString) {
            out.write("        else if (value instanceof String){\n");
            out.write("            rc = " + cn + ".get((String)value);\n");
            out.write("            if (rc == null){\n");
            out.write("                throw(new DmcValueException(\"Value: \" + value.toString() + \" is not a valid " + cn + " value.\"));\n");
            out.write("            }\n");
            out.write("        }\n");
            out.write("        else if (value instanceof Integer){\n");
            out.write("            rc = " + cn + ".get((Integer)value);\n");
            out.write("            if (rc == null){\n");
            out.write("                throw(new DmcValueException(\"Value: \" + value.toString() + \" is not a valid " + cn + " value.\"));\n");
            out.write("            }\n");
            out.write("        }\n");
        }
        out.write("        else{\n");
        out.write("            throw(new DmcValueException(\"Object of class: \" + value.getClass().getName() + \" passed where object compatible with " + cn + " expected.\"));\n");
        out.write("        }\n");
        out.write("        return(rc);\n");
        out.write("    }\n");
        out.write("\n");
        out.write("    /**\n");
        out.write("     * Returns a clone of a value associated with this type.\n");
        out.write("     */\n");
        out.write("    public " + cn + " cloneValue(" + cn + " val){\n");
        out.write("        " + cn + " rc = val;\n");
        out.write("        return(rc);\n");
        out.write("    }\n\n");
        out.write("    /**\n");
        out.write("     * Writes a " + cn + ".\n");
        out.write("     */\n");
        out.write("    @Override\n");
        out.write("    public void serializeValue(DmcOutputStreamIF dos, " + cn + " value) throws Exception {\n");
        out.write("        dos.writeShort(value.intValue());\n");
        out.write("    }\n\n");
        out.write("    /**\n");
        out.write("     * Reads a " + cn + ".\n");
        out.write("     */\n");
        out.write("    @Override\n");
        out.write("    public " + cn + " deserializeValue(DmcInputStreamIF dis) throws Exception {\n");
        out.write("        return(" + cn + ".get(dis.readShort()));\n");
        out.write("    }\n\n");
        out.write("\n");
        out.write("\n");
        out.write("}\n");
        out.close();
    }
