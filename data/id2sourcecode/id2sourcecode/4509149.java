    private void run(X509Name issuerDN, X509Name subjectDN, String outPath, String tomcatPasswd, String truststorePasswd, String testClientPasswd) throws Exception {
        System.out.println("  Generating CA Certificate...");
        KeyPairGenerator keygen = KeyPairGenerator.getInstance("RSA", "BC");
        keygen.initialize(2048);
        KeyPair cAKeys = keygen.generateKeyPair();
        X509Certificate caCert = genCert(issuerDN, issuerDN, 3650, cAKeys.getPrivate(), cAKeys.getPublic(), true, X509KeyUsage.keyCertSign + X509KeyUsage.cRLSign, null);
        X509Certificate[] cacerts = new X509Certificate[1];
        cacerts[0] = caCert;
        writeCACertToPEM(caCert, outPath);
        System.out.println("  CA Certificate Generated Successfully.");
        System.out.println("  Generating SSL Server (tomcat.jks) Keystore...");
        KeyPair sSLServerKeys = keygen.generateKeyPair();
        ArrayList<String> sSLServerEKU = new ArrayList<String>();
        sSLServerEKU.add("1.3.6.1.5.5.7.3.1");
        X509Certificate sSLServerCert = genCert(issuerDN, subjectDN, 3650, cAKeys.getPrivate(), sSLServerKeys.getPublic(), false, X509KeyUsage.digitalSignature + X509KeyUsage.keyEncipherment, sSLServerEKU);
        KeyStore tomcat = createUserJKS("tomcat", sSLServerKeys.getPrivate(), tomcatPasswd, sSLServerCert, cacerts);
        FileOutputStream fos = new FileOutputStream(outPath + File.separator + "tomcat.jks");
        tomcat.store(fos, tomcatPasswd.toCharArray());
        fos.close();
        System.out.println("  SSL Server Keystore Generated Successfully.");
        System.out.println("  Generating Trust Keystore...");
        KeyStore truststore = createTrustJKS("cacert", truststorePasswd, caCert);
        fos = new FileOutputStream(outPath + File.separator + "truststore.jks");
        truststore.store(fos, truststorePasswd.toCharArray());
        fos.close();
        System.out.println("  Trust Keystore Generated Successfully.");
        System.out.println("  Generating Test Client (testclient.jks) Keystore...");
        KeyPair testClientKeys = keygen.generateKeyPair();
        ArrayList<String> testClientEKU = new ArrayList<String>();
        sSLServerEKU.add("1.3.6.1.5.5.7.3.2");
        X509Name testClientName = new X509Name("CN=testclient");
        X509Certificate testClientCert = genCert(issuerDN, testClientName, 3650, cAKeys.getPrivate(), testClientKeys.getPublic(), false, X509KeyUsage.digitalSignature + X509KeyUsage.keyEncipherment, testClientEKU);
        KeyStore testclient = createUserJKS("testclient", testClientKeys.getPrivate(), testClientPasswd, testClientCert, cacerts);
        fos = new FileOutputStream(outPath + File.separator + "testclient.jks");
        testclient.store(fos, testClientPasswd.toCharArray());
        fos.close();
        System.out.println("   Test Client Keystore Generated Successfully.");
        System.out.println("\nAll Keystores where succesfully generated to the directory : " + outPath);
    }
