    private static void createDeleteItemForPk(DbTableType table) throws Exception {
        DbPrimaryKeyType pk = table.getPrimaryKey();
        if (pk.getColumnsCount() != 1) {
            return;
        }
        DbPrimaryKeyColumnType column = pk.getColumns(0);
        String base = StringTools.capitalizeString(table.getName());
        String className = "Delete" + base + "With" + StringTools.capitalizeString(column.getColumnName());
        String classNameItem = base + config.getClassNameSufix();
        String s = "package " + packageClass + ";\n" + "\n" + (isApplModule ? "import org.riverock.a3.AuthSession;\n" + "import org.riverock.a3.AccessDeniedException;\n" + "import org.riverock.as.ApplicationInterface;\n" + "import org.riverock.schema.appl_server.ResourceRequestType;\n" + "import org.riverock.schema.appl_server.ResourceRequestParameterType;\n" + "import org.riverock.as.server.ApplicationTools;\n" : "") + "import " + config.getJavaPackageXmlSchema() + '.' + base + config.getClassNameSufix() + ";\n" + "\n" + "import java.sql.PreparedStatement;\n" + "import java.sql.ResultSet;\n" + "\n" + "public class " + className + " " + (isApplModule ? "implements ApplicationInterface" : "") + "\n{\n" + initLogging(packageClass + '.' + className) + "\n" + "    public " + className + "(){}\n" + "\n" + "    public static Long processData(" + db.getFactoryMethod() + " db_, long id) " + putExceptionDefinition() + "    {\n" + "        return new Long(process(db_, id));\n" + "    }\n" + "\n" + "    public static long process(" + db.getFactoryMethod() + " db_, long id) " + putExceptionDefinition() + "    {\n" + "        return process(db_, new Long(id));\n" + "    }\n" + "\n" + "    public static long process(" + db.getFactoryMethod() + " db_, Long id) " + putExceptionDefinition() + "    {\n" + "\n" + "        if (id==null) \n " + "            throw new IllegalArgumentException(\"Value of id can not be null\");\n" + "\n" + "        String sql_ =\n" + "            \"delete from " + table.getName() + " \"+\n" + "            \"where " + column.getColumnName() + "=?\";\n" + "\n" + "        PreparedStatement ps = null;\n" + "        ResultSet rs = null;\n" + "        try {\n" + "            ps = db_.prepareStatement(sql_);\n" + "\n" + "            ps.setLong(1, id.longValue() );\n" + "\n" + "            int countDeletedtRecord = ps.executeUpdate();\n" + "\n" + (config.getIsUseLogging() ? "            if (cat.isDebugEnabled())\n" + "                 cat.debug(\"Count of deleted records - \"+countDeletedtRecord);\n" : "") + "\n" + "            return countDeletedtRecord;\n" + "\n" + "        }\n" + "        catch (Exception e) {\n" + (config.getIsUseLogging() ? "             cat.error(\"Error delete from db\", e);\n" : "");
        if (config.getPersistenceExceptionName() != null && config.getPersistenceExceptionName().getExceptionType().getType() == ExceptionDefinitionTypeExceptionTypeType.WRAP_PERSISTENCE_TYPE) {
            if (config.getPersistenceExceptionName().getPersistenceExceptionName() == null) throw new IllegalArgumentException("Not defined PersistebceExceptionName");
            s += "            throw new " + config.getPersistenceExceptionName().getPersistenceExceptionName() + "( e.getMessage(), e );\n";
        } else s += "            throw e;\n";
        s += "        }\n" + "        finally {\n" + putCloseFactoryMethod() + "            rs = null;\n" + "            ps = null;\n" + "        }\n" + "\n" + "    }\n" + "\n" + (isApplModule ? "     public byte[] processRequest( ResourceRequestType applReq, AuthSession authSession )\n" + "         throws Exception\n" + "     {\n" + "          if (applReq==null || applReq.getParametersCount()==0)\n" + "              return null;\n" + "\n" + putAuthCheck(table, "D", className) + "\n" + "          Long item = null;\n" + "          for (int i=0; i<applReq.getParametersCount(); i++)\n" + "          {\n" + "              ResourceRequestParameterType param = applReq.getParameters(i);\n" + "              if (\"mill.id\".equals( param.getNameParameter()))\n" + "              {\n" + "                  String stringParam = ApplicationTools.decodeParameter( param );\n" + "\n" + (config.getIsUseLogging() ? "                  if (cat.isDebugEnabled())\n" + "                      cat.debug(\"Parameter is \"+stringParam);\n" : "") + "\n" + "                  item = new Long (stringParam );\n" + "                  break;\n" + "              }\n" + "          }\n" + "          if (item == null )\n" + "              return null;\n" + "\n" + "          " + db.getFactoryMethod() + " db_ = null;\n" + "          try" + "          {\n" + "              db_ = " + db.getFactoryMethod() + ".getInstance( true );\n" + "              db_.getConnection().setAutoCommit(false);\n" + "              long resultLong = " + className + ".process( db_, item.longValue() );\n" + "              db_.commit();\n" + "              org.riverock.schema.appl_server.LongResultType result = new org.riverock.schema.appl_server.LongResultType();\n" + "              result.setResult(resultLong);\n" + "              return org.riverock.generic.tools.XmlTools.getXml(result, null);\n" + "          }\n" + "          catch(Exception e)\n" + "          {\n" + "              db_.rollback();\n" + (config.getIsUseLogging() ? "              cat.error(\"Exception in " + className + ".process()\", e);\n" : "") + "              throw e;\n" + "          }\n" + "          catch(Error e)\n" + "          {\n" + "              db_.rollback();\n" + (config.getIsUseLogging() ? "              cat.error(\"Error in " + className + ".process()\", e);\n" : "") + "              throw e;\n" + "          }\n" + "          finally\n" + "          {\n" + "              " + db.getFactoryMethod() + ".close( db_ );\n" + "              db_ = null;\n" + "          }\n" + "\n" + "      }\n" + "\n" : "") + getCloseRsPs() + (config.getIsMainMethod() ? "   public static void main(String args[])\n" + "       throws Exception\n" + "   {\n" + "       org.riverock.startup.StartupApplication.init();\n" + "\n" + "       long id = 1;\n" + "\n" + "       long resultLong = " + className + ".process( " + db.getFactoryMethod() + ".getInstance( false ), id );\n" + "\n" + "       org.riverock.schema.appl_server.LongResultType result = new org.riverock.schema.appl_server.LongResultType();\n" + "       result.setResult( resultLong );\n" + "\n" + "       org.riverock.tools.XmlTools.writeToFile(\n" + "           result,\n" + "           org.riverock.startup.InitParam.getMillDebugDir()+\"" + "test-" + table.getName().toLowerCase() + "-item.xml" + "\",\n" + "           \"utf-8\",\n" + "           null\n" + "       );\n" + "   }\n" : "") + "}\n";
        writeClass(className, s);
    }
