    protected void assembleOptions() throws OptionException {
        debug("ASSEMBLE ");
        super.assembleOptions();
        indexfileNameOption = defaultOptionBuilder.withShortName("indexfileName").withShortName("if").withDescription("indexfile name (absolute or relative(NYI)").withArgument(argumentBuilder.withName("index").withMinimum(1).withMaximum(1).create()).create();
        byDirectoryOption = defaultOptionBuilder.withShortName("byDirectory").withShortName("bd").withDescription("If present create index for each directory otherwise index whole repository.").create();
        copyIndexEntryOption = defaultOptionBuilder.withShortName("copyIndexEntry").withShortName("copy").withDescription("copy Entry (true/false)").withArgument(argumentBuilder.withName("copy").withMinimum(1).withMaximum(1).create()).create();
        allowDuplicateEntryOption = defaultOptionBuilder.withShortName("allowDuplicateEntry").withShortName("dup").withDescription("allow duplicate entries in index (true/false)").withArgument(argumentBuilder.withName("dup").withMinimum(1).withMaximum(1).create()).create();
        xpathOption = defaultOptionBuilder.withShortName("xpath").withDescription("xpath(s) for indexing and aggregating").withArgument(argumentBuilder.withName("xpath").withMinimum(1).create()).create();
        Group indexChildrenOption = new GroupBuilder().withName("index").withDescription("index options").withOption(indexfileNameOption).withOption(byDirectoryOption).withOption(copyIndexEntryOption).withOption(allowDuplicateEntryOption).withOption(xpathOption).create();
        indexOption = defaultOptionBuilder.withLongName("index").withDescription("index options").withChildren(indexChildrenOption).create();
        converterOption = defaultOptionBuilder.withShortName("converter").withDescription("run converter (use listConverters to find available)").withArgument(argumentBuilder.withName("class").withMinimum(1).withMaximum(1).create()).create();
        listConverterOption = defaultOptionBuilder.withShortName("list").withDescription("list available converters").withArgument(argumentBuilder.withName("jar name").withMinimum(0).withMaximum(1).create()).create();
        auxfileOption = defaultOptionBuilder.withShortName("auxfile").withShortName("aux").withDescription("auxiliary file").withArgument(argumentBuilder.withName("auxfile").withMinimum(1).withMaximum(1).create()).create();
        insuffixOption = defaultOptionBuilder.withShortName("insuffix").withShortName("is").withDescription("input file suffix").withArgument(argumentBuilder.withName("suffix").withMinimum(1).withMaximum(1).create()).create();
        intypeOption = defaultOptionBuilder.withShortName("intype").withShortName("it").withDescription("input file type").withArgument(argumentBuilder.withName("type").withMinimum(1).withMaximum(1).create()).create();
        outsuffixOption = defaultOptionBuilder.withShortName("outsuffix").withShortName("os").withDescription("output file suffix").withArgument(argumentBuilder.withName("suffix").withMinimum(1).withMaximum(1).create()).create();
        outtypeOption = defaultOptionBuilder.withShortName("outtype").withShortName("ot").withDescription("output file type").withArgument(argumentBuilder.withName("type").withMinimum(1).withMaximum(1).create()).create();
        fileLimitsOption = defaultOptionBuilder.withShortName("fileLimits").withShortName("fl").withDescription("limits of filesizes (exclusive)").withDescription("args(int): minRead maxRead minWrite maxWrite").withDescription("10 200 20 9999999 reads files of 11-199 ytes and writes 21-9999998").withDescription("default 0 MAXINT 0 MAXINT will not read or write zero length files").withArgument(argumentBuilder.withName("size").withMinimum(4).withMaximum(4).create()).create();
        depthOption = defaultOptionBuilder.withShortName("depth").withDescription("maximum depth of walk (-1 = unlimited = default)").withArgument(argumentBuilder.withName("depth").withMinimum(1).withMaximum(1).create()).create();
        forceConvertOption = defaultOptionBuilder.withShortName("onlyNewer").withShortName("newer").withDescription("only convert newer files (default = convert all)").withArgument(argumentBuilder.withName("newer").withMinimum(0).withMaximum(0).create()).create();
        groupBuilder.withOption(converterOption).withOption(listConverterOption).withOption(auxfileOption).withOption(insuffixOption).withOption(intypeOption).withOption(outsuffixOption).withOption(outtypeOption).withOption(indexOption).withOption(depthOption).withOption(xpathOption).withOption(forceConvertOption).withOption(fileLimitsOption);
    }
