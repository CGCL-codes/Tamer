    private static void procedureHDB_gen() {
        String fullRefTableName0 = fr.soleil.sgad.oracle.Constants.schema[0] + "." + fr.soleil.sgad.oracle.Constants.hdbObjects[0];
        String fullRefTableName1 = fr.soleil.sgad.oracle.Constants.schema[0] + "." + fr.soleil.sgad.oracle.Constants.hdbObjects[1];
        String fullRefTableName2 = fr.soleil.sgad.oracle.Constants.schema[0] + "." + fr.soleil.sgad.oracle.Constants.hdbObjects[2];
        String schema = fr.soleil.sgad.oracle.Constants.schema[0];
        fr.soleil.sgad.oracle.Generator.add_object("-- the procedure will insert a row (with timestamp and value) in the table corresponding to the attribut." + fr.soleil.sgad.Constants.newLine + "-- in parameter : attribut's name, timestamp, value" + fr.soleil.sgad.Constants.newLine + "CREATE OR REPLACE PROCEDURE " + schema + "." + "ins_sc_ro_num (att varchar2, vartime timestamp, val number)" + fr.soleil.sgad.Constants.newLine + "\t" + "IS" + fr.soleil.sgad.Constants.newLine + "\t" + "CURSOR C1 IS SELECT id FROM " + fullRefTableName0 + " WHERE full_name LIKE att;" + fr.soleil.sgad.Constants.newLine + "\t" + "var number;" + fr.soleil.sgad.Constants.newLine + "\t" + "req varchar2(500);" + fr.soleil.sgad.Constants.newLine + "\t" + "noatt exception;" + fr.soleil.sgad.Constants.newLine + "\t" + "BEGIN" + fr.soleil.sgad.Constants.newLine + "\t\t" + "OPEN C1;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "fetch C1 into var;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "IF var IS NULL THEN RAISE noatt;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "req :='INSERT INTO " + schema + ".att_' || var || ' VALUES (:1, :2)';" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "execute immediate req using vartime, val;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "CLOSE C1;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "EXCEPTION" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "WHEN noatt THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20001, 'attribut ' || att || ' not referenced in " + fullRefTableName0 + "');" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "WHEN OTHERS THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF sqlcode = -01031 then" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "SELECT user INTO req FROM dual;" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20002, req || ' is not allowed to insert in att_' || var);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSIF sqlcode = -00001 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20003, ' timestamp ' || vartime || ' in att_' || var || ' is already registered');" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-21000, 'attribut(' || var || ') : ' || att || ' at time ' || vartime || ' has generated the following error : ' || sqlerrm);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t" + "END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + "SHOW ERROR;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine);
        fr.soleil.sgad.oracle.Generator.add_object("-- the procedure will insert a row (with timestamp and value) in the table corresponding to the attribut." + fr.soleil.sgad.Constants.newLine + "-- in parameter : attribut's name, timestamp, value" + fr.soleil.sgad.Constants.newLine + "CREATE OR REPLACE PROCEDURE " + schema + ".ins_sc_ro_str (att varchar2, vartime timestamp, val varchar2)" + fr.soleil.sgad.Constants.newLine + "\t" + "IS" + fr.soleil.sgad.Constants.newLine + "\t" + "CURSOR C1 IS SELECT id FROM " + fullRefTableName0 + " WHERE full_name LIKE att;" + fr.soleil.sgad.Constants.newLine + "\t" + "var number;" + fr.soleil.sgad.Constants.newLine + "\t" + "req varchar2(500);" + fr.soleil.sgad.Constants.newLine + "\t" + "noatt exception;" + fr.soleil.sgad.Constants.newLine + "\t" + "BEGIN" + fr.soleil.sgad.Constants.newLine + "\t\t" + "OPEN C1;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "FETCH C1 INTO var;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "IF var IS NULL THEN RAISE noatt;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "req :='INSERT INTO " + schema + ".att_' || var || ' VALUES (:1, :2)';" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "execute immediate req using vartime, val;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "CLOSE C1;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "EXCEPTION" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "WHEN noatt THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20001, 'attribut ' || att || ' not referenced in " + fullRefTableName0 + "');" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + " WHEN OTHERS THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF sqlcode = -01031 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "SELECT user INTO req FROM dual;" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20002, req || ' is not allowed to insert in att_' || var);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSIF sqlcode = -00001 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20003, ' timestamp ' || vartime || ' in att_' || var || ' is already registered');" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-21000, 'attribut(' || var || ') : ' || att || ' at time ' || vartime || ' has generated the following error : ' || sqlerrm);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t" + "END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + "SHOW ERROR;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine);
        fr.soleil.sgad.oracle.Generator.add_object("-- the procedure will insert a row (with timestamp and value) in the table corresponding to the attribut." + fr.soleil.sgad.Constants.newLine + "-- in parameter : attribut's name, timestamp, value" + fr.soleil.sgad.Constants.newLine + "CREATE OR REPLACE PROCEDURE " + schema + ".ins_sc_wo_num (att varchar2, vartime timestamp, val number)" + fr.soleil.sgad.Constants.newLine + "\t" + "IS" + fr.soleil.sgad.Constants.newLine + "\t" + "CURSOR C1 IS SELECT id FROM " + fullRefTableName0 + " WHERE full_name LIKE att;" + fr.soleil.sgad.Constants.newLine + "\t" + "var number;" + fr.soleil.sgad.Constants.newLine + "\t" + "req varchar2(500);" + fr.soleil.sgad.Constants.newLine + "\t" + "noatt exception;" + fr.soleil.sgad.Constants.newLine + "\t" + "BEGIN" + fr.soleil.sgad.Constants.newLine + "\t\t" + "OPEN C1;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "FETCH C1 INTO var;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "IF var IS NULL THEN RAISE noatt;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "req :='INSERT INTO " + schema + ".att_' || var || ' VALUES (:1, :2)';" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "execute immediate req using vartime, val;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "CLOSE C1;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "EXCEPTION" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "WHEN noatt THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20001, 'attribut ' || att || ' not referenced in " + fullRefTableName0 + "');" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "WHEN OTHERS THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF sqlcode = -01031 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "SELECT user INTO req FROM dual;" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20002, req || ' is not allowed to insert in att_' || var);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSIF sqlcode = -00001 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20003, ' timestamp ' || vartime || ' in att_' || var || ' is already registered');" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-21000, 'attribut(' || var || ') : ' || att || ' at time ' || vartime || ' has generated the following error : ' || sqlerrm);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t" + "END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + "SHOW ERROR;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine);
        fr.soleil.sgad.oracle.Generator.add_object("-- the procedure will insert a row (with timestamp and value) in the table corresponding to the attribut." + fr.soleil.sgad.Constants.newLine + "-- in parameter : attribut's name, timestamp, value" + fr.soleil.sgad.Constants.newLine + "CREATE OR REPLACE PROCEDURE " + schema + ".ins_sc_wo_str (att varchar2, vartime timestamp, val varchar2)" + fr.soleil.sgad.Constants.newLine + "\t" + "IS" + fr.soleil.sgad.Constants.newLine + "\t" + "CURSOR C1 IS SELECT id FROM " + fullRefTableName0 + " WHERE full_name LIKE att;" + fr.soleil.sgad.Constants.newLine + "\t" + "var number;" + fr.soleil.sgad.Constants.newLine + "\t" + "req varchar2(500);" + fr.soleil.sgad.Constants.newLine + "\t" + "noatt exception;" + fr.soleil.sgad.Constants.newLine + "\t" + "BEGIN" + fr.soleil.sgad.Constants.newLine + "\t\t" + "OPEN C1;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "FETCH C1 INTO var;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "IF var IS NULL THEN RAISE noatt;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "req :='INSERT INTO " + schema + ".att_' || var || ' VALUES (:1, :2)';" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "execute immediate req using vartime, val;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "CLOSE C1;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "EXCEPTION" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "WHEN noatt THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20001, 'attribut ' || att || ' not referenced in " + fullRefTableName0 + "');" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "WHEN OTHERS THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF sqlcode = -01031 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "SELECT user INTO req FROM dual;" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20002, req || ' is not allowed to insert in att_' || var);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSIF sqlcode = -00001 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20003, ' timestamp ' || vartime || ' in att_' || var || ' is already registered');" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-21000, 'attribut(' || var || ') : ' || att || ' at time ' || vartime || ' has generated the following error : ' || sqlerrm);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t" + "END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + "SHOW ERROR;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine);
        fr.soleil.sgad.oracle.Generator.add_object("-- the procedure will insert a row (with timestamp, read_value, write_value) in the table corresponding to the attribut." + fr.soleil.sgad.Constants.newLine + "-- in parameter : attribut's name, timestamp, read_value, write_value" + fr.soleil.sgad.Constants.newLine + "CREATE OR REPLACE PROCEDURE " + schema + ".ins_sc_rw_num (att varchar2, vartime timestamp, val number, val2 number)" + fr.soleil.sgad.Constants.newLine + "\t" + "IS" + fr.soleil.sgad.Constants.newLine + "\t" + "CURSOR C1 IS SELECT id FROM " + fullRefTableName0 + " WHERE full_name LIKE att;" + fr.soleil.sgad.Constants.newLine + "\t" + "var number;" + fr.soleil.sgad.Constants.newLine + "\t" + "req varchar2(500);" + fr.soleil.sgad.Constants.newLine + "\t" + "noatt exception;" + fr.soleil.sgad.Constants.newLine + "\t" + "BEGIN" + fr.soleil.sgad.Constants.newLine + "\t\t" + "OPEN C1;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "FETCH C1 INTO var;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "IF var IS NULL THEN RAISE noatt;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "req :='INSERT INTO " + schema + ".att_' || var || ' VALUES (:1, :2, :3)';" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "execute immediate req using vartime, val, val2;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "CLOSE C1;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "EXCEPTION" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "WHEN noatt THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20001, 'attribut ' || att || ' not referenced in " + fullRefTableName0 + "');" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "WHEN OTHERS THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF sqlcode = -01031 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "SELECT user INTO req FROM dual;" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20002, req || ' is not allowed to insert in att_' || var);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSIF sqlcode = -00001 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20003, ' timestamp ' || vartime || ' in att_' || var || ' is already registered');" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-21000, 'attribut(' || var || ') : ' || att || ' at time ' || vartime || ' has generated the following error : ' || sqlerrm);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t" + "END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + "SHOW ERROR;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine);
        fr.soleil.sgad.oracle.Generator.add_object("-- the procedure will insert a row (with timestamp, read_value, write_value) in the table corresponding to the attribut." + fr.soleil.sgad.Constants.newLine + "-- in parameter : attribut's name, timestamp, read_value, write_value" + fr.soleil.sgad.Constants.newLine + "CREATE OR REPLACE PROCEDURE " + schema + ".ins_sc_rw_str (att varchar2, vartime timestamp, val varchar2, val2 varchar2)" + fr.soleil.sgad.Constants.newLine + "\t" + "IS" + fr.soleil.sgad.Constants.newLine + "\t" + "CURSOR C1 IS SELECT id FROM " + fullRefTableName0 + " WHERE full_name LIKE att;" + fr.soleil.sgad.Constants.newLine + "\t" + "var number;" + fr.soleil.sgad.Constants.newLine + "\t" + "req varchar2(500);" + fr.soleil.sgad.Constants.newLine + "\t" + "noatt exception;" + fr.soleil.sgad.Constants.newLine + "\t" + "BEGIN" + fr.soleil.sgad.Constants.newLine + "\t\t" + "OPEN C1;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "FETCH C1 INTO var;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "IF var IS NULL THEN RAISE noatt;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "req :='INSERT INTO " + schema + ".att_' || var || ' VALUES (:1, :2, :3)';" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "execute immediate req using vartime, val, val2;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "CLOSE C1;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "EXCEPTION" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "WHEN noatt THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20001, 'attribut ' || att || ' not referenced in " + fullRefTableName0 + "');" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "WHEN OTHERS THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF sqlcode = -01031 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "SELECT user INTO req FROM dual;" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20002, req || ' is not allowed to insert in att_' || var);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSIF sqlcode = -00001 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-20003, ' timestamp ' || vartime || ' in att_' || var || ' is already registered');" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "RAISE_APPLICATION_ERROR(-21000, 'attribut(' || var || ') : ' || att || ' at time ' || vartime || ' has generated the following error : ' || sqlerrm);" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t" + "END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + "SHOW ERROR;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine);
        procCRTAB(schema, fullRefTableName0, fullRefTableName1);
        fr.soleil.sgad.oracle.Generator.add_object("-- this procedure clean the " + schema + " schema: drop attribut's table and delete " + fullRefTableName0 + ", " + fullRefTableName1 + ", " + fullRefTableName2 + " rows" + fr.soleil.sgad.Constants.newLine + "-- no in parameter necessary" + fr.soleil.sgad.Constants.newLine + "CREATE OR REPLACE PROCEDURE " + schema + ".cleanHDB IS" + fr.soleil.sgad.Constants.newLine + "\t" + "CURSOR C1 IS SELECT table_name FROM user_tables WHERE table_name LIKE 'ATT%';" + fr.soleil.sgad.Constants.newLine + "\t" + "var_tab user_tables.table_name%type;" + fr.soleil.sgad.Constants.newLine + "BEGIN" + fr.soleil.sgad.Constants.newLine + "\t" + "DELETE FROM " + fullRefTableName1 + ";" + fr.soleil.sgad.Constants.newLine + "\t" + "DELETE FROM " + fullRefTableName2 + ";" + fr.soleil.sgad.Constants.newLine + "\t" + "DELETE FROM " + fullRefTableName0 + ";" + fr.soleil.sgad.Constants.newLine + "\t" + "execute immediate 'drop SEQUENCE " + schema + ".id' ;" + fr.soleil.sgad.Constants.newLine + "\t" + "execute immediate 'CREATE SEQUENCE " + schema + ".id INCREMENT BY 1 START WITH 1 MAXVALUE 99999 CYCLE NOCACHE';" + fr.soleil.sgad.Constants.newLine + "\t" + "open C1;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "loop" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "fetch C1 into var_tab;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "EXIT WHEN C1%NOTFOUND;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "execute immediate 'drop table ' || var_tab;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "END LOOP;" + fr.soleil.sgad.Constants.newLine + "\t" + "CLOSE C1;" + fr.soleil.sgad.Constants.newLine + "\t" + "commit;" + fr.soleil.sgad.Constants.newLine + "END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + "SHOW ERROR;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine);
        fr.soleil.sgad.oracle.Generator.add_object("CREATE OR REPLACE PROCEDURE cre_user (varnom varchar2, mdp varchar2) IS" + fr.soleil.sgad.Constants.newLine + "\t" + "req varchar2(555);" + fr.soleil.sgad.Constants.newLine + "\t" + "BEGIN" + fr.soleil.sgad.Constants.newLine + "\t\t" + "execute immediate 'create user ' || varnom || ' identified by ' || mdp || ' DEFAULT TABLESPACE CONF QUOTA UNLIMITED ON CONF QUOTA UNLIMITED ON CONF_IND QUOTA UNLIMITED ON SC_DATA QUOTA UNLIMITED ON SC_DATA_IND QUOTA UNLIMITED ON SP_DATA QUOTA UNLIMITED ON SP_DATA_IND QUOTA UNLIMITED ON IM_DATA QUOTA UNLIMITED ON IM_DATA_IND';" + fr.soleil.sgad.Constants.newLine + "\t\t" + "execute immediate 'GRANT CREATE SESSION TO ' || varnom;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "execute immediate 'GRANT rarchiver TO ' || varnom;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "commit;" + fr.soleil.sgad.Constants.newLine + "\t" + "END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + "SHOW ERROR;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine);
    }
