    private static void procedureTDB_gen() {
        String schema = fr.soleil.sgad.oracle.Constants.schema[1];
        String fullRefTableName0 = schema + "." + fr.soleil.sgad.oracle.Constants.tdbObjects[0];
        String fullRefTableName1 = schema + "." + fr.soleil.sgad.oracle.Constants.tdbObjects[1];
        String fullRefTableName2 = schema + "." + fr.soleil.sgad.oracle.Constants.tdbObjects[2];
        fr.soleil.sgad.oracle.Generator.add_object("-- a file is creating for each attribut. the file's name contains table's name of attribut." + fr.soleil.sgad.Constants.newLine + "-- the procedure will OPEN the file and insert rows INTO attribut's table." + fr.soleil.sgad.Constants.newLine + "-- this procedure is used for scalar/spectrums/image, read-only/write-only/read-write/read-with-write attribut." + fr.soleil.sgad.Constants.newLine + "-- in parameter : remotedir, file's name, attribut's name" + fr.soleil.sgad.Constants.newLine + "CREATE OR REPLACE PROCEDURE " + schema + "." + "fast_file_import (emplacement varchar2, nom varchar2, att_name varchar2) IS" + fr.soleil.sgad.Constants.newLine + "\t file_handle UTL_FILE.FILE_TYPE;" + fr.soleil.sgad.Constants.newLine + "\t col1  NUMBER;" + fr.soleil.sgad.Constants.newLine + "\t getline VARCHAR2(32000);" + fr.soleil.sgad.Constants.newLine + "\t var_att varchar2(555);" + fr.soleil.sgad.Constants.newLine + "\t timest varchar2(555);" + fr.soleil.sgad.Constants.newLine + "\t req varchar2(555);" + fr.soleil.sgad.Constants.newLine + "\t var_value number;" + fr.soleil.sgad.Constants.newLine + "\t BEGIN" + fr.soleil.sgad.Constants.newLine + "\t\t file_handle := UTL_FILE.FOPEN(emplacement, nom,'R', 32767);" + fr.soleil.sgad.Constants.newLine + "\t\t <<INCREMENTATION>>" + fr.soleil.sgad.Constants.newLine + "\t\t LOOP" + fr.soleil.sgad.Constants.newLine + "\t\t\t UTL_FILE.GET_LINE (file_handle, getline);" + fr.soleil.sgad.Constants.newLine + "\t\t\t timest := substr(getline, 1, length(getline)-1);" + fr.soleil.sgad.Constants.newLine + "\t\t\t EXIT INCREMENTATION when timest is null;" + fr.soleil.sgad.Constants.newLine + "\t\t\t req := 'insert INTO ' || att_name || ' values (' || timest || ''')';" + fr.soleil.sgad.Constants.newLine + "\t\t\t execute immediate req;" + fr.soleil.sgad.Constants.newLine + "\t\t\t COMMIT;" + fr.soleil.sgad.Constants.newLine + "\t\t END LOOP;" + fr.soleil.sgad.Constants.newLine + "\t\t UTL_FILE.FCLOSE(file_handle);" + fr.soleil.sgad.Constants.newLine + "\t\t EXCEPTION" + fr.soleil.sgad.Constants.newLine + "\t\t\t WHEN NO_DATA_FOUND THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t UTL_FILE.FCLOSE(file_handle);" + fr.soleil.sgad.Constants.newLine + "\t END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + "show error;" + fr.soleil.sgad.Constants.newLine);
        procCRTAB(schema, fullRefTableName0, fullRefTableName1);
        fr.soleil.sgad.oracle.Generator.add_object("-- this procedure clean the TDB schema: drop attribut's table and delete " + fullRefTableName0 + ", " + fullRefTableName1 + ", " + fullRefTableName2 + " rows" + fr.soleil.sgad.Constants.newLine + "-- no in parameter necessary" + fr.soleil.sgad.Constants.newLine + "CREATE OR REPLACE PROCEDURE " + schema + "." + "cleanTDB IS" + fr.soleil.sgad.Constants.newLine + "\t CURSOR C1 is select table_name from user_tables where table_name like 'ATT%';" + fr.soleil.sgad.Constants.newLine + "\t var_tab user_tables.table_name%type;" + fr.soleil.sgad.Constants.newLine + "\t BEGIN" + fr.soleil.sgad.Constants.newLine + "\t\t DELETE FROM " + fullRefTableName1 + ";" + fr.soleil.sgad.Constants.newLine + "\t\t DELETE FROM " + fullRefTableName2 + ";" + fr.soleil.sgad.Constants.newLine + "\t\t DELETE FROM " + fullRefTableName0 + ";" + fr.soleil.sgad.Constants.newLine + "\t\t execute immediate 'drop SEQUENCE " + schema + "." + "id' ;" + fr.soleil.sgad.Constants.newLine + "\t\t execute immediate 'CREATE SEQUENCE " + schema + "." + "id INCREMENT BY 1 START WITH 1 MAXVALUE 99999 CYCLE NOCACHE';" + fr.soleil.sgad.Constants.newLine + "\t\t OPEN C1;" + fr.soleil.sgad.Constants.newLine + "\t\t\t LOOP" + fr.soleil.sgad.Constants.newLine + "\t\t\t         fetch C1 INTO var_tab;" + fr.soleil.sgad.Constants.newLine + "\t\t\t         EXIT WHEN C1%NOTFOUND;" + fr.soleil.sgad.Constants.newLine + "\t\t\t         execute immediate 'drop table ' || var_tab;" + fr.soleil.sgad.Constants.newLine + "\t\t\t END LOOP;" + fr.soleil.sgad.Constants.newLine + "\t\t CLOSE C1;" + fr.soleil.sgad.Constants.newLine + "\t  COMMIT;" + fr.soleil.sgad.Constants.newLine + "\t END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + "" + fr.soleil.sgad.Constants.newLine + "show error;" + fr.soleil.sgad.Constants.newLine);
        fr.soleil.sgad.oracle.Generator.add_object("CREATE OR REPLACE PROCEDURE cre_user (varnom varchar2, mdp varchar2) IS" + fr.soleil.sgad.Constants.newLine + "\t req varchar2(555);" + fr.soleil.sgad.Constants.newLine + "\t BEGIN" + fr.soleil.sgad.Constants.newLine + "\t execute immediate 'create user ' || varnom || ' identified by ' || mdp || ' DEFAULT TABLESPACE CONF QUOTA UNLIMITED ON CONF QUOTA UNLIMITED ON CONF_IND QUOTA UNLIMITED ON SC_DATA QUOTA UNLIMITED ON SC_DATA_IND QUOTA UNLIMITED ON SP_DATA QUOTA UNLIMITED ON SP_DATA_IND QUOTA UNLIMITED ON IM_DATA QUOTA UNLIMITED ON IM_DATA_IND';" + fr.soleil.sgad.Constants.newLine + "\t execute immediate 'GRANT CREATE SESSION TO ' || varnom;" + fr.soleil.sgad.Constants.newLine + "\t execute immediate 'GRANT rarchiver TO ' || varnom;" + fr.soleil.sgad.Constants.newLine + "\t COMMIT;" + fr.soleil.sgad.Constants.newLine + "\t END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + "show error;" + fr.soleil.sgad.Constants.newLine);
    }
