    public static void procCRTAB(String schema, String fullRefTableName0, String fullRefTableName1) {
        fr.soleil.sgad.oracle.Generator.add_object("-- the procedure will create attribut's table and feed " + fullRefTableName0 + " table and " + fullRefTableName1 + " table" + fr.soleil.sgad.Constants.newLine + "--in parameter : time, var_full_name, device, domain, family, member, att_name, data_type, data_format, writable," + fr.soleil.sgad.Constants.newLine + "-- max_dim_x, max_dim_y, level, cs, archivable, substitute, description, label, unit, standard_unit, display_unit," + fr.soleil.sgad.Constants.newLine + "-- format, min_val, max_val, min_alarm, max_alarm, property" + fr.soleil.sgad.Constants.newLine + "CREATE OR REPLACE PROCEDURE " + schema + ".CRTAB ( time date," + fr.soleil.sgad.Constants.newLine + "\t" + "var_full_name varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "device varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "domain varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "family varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "member varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "att_name varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "data_type number," + fr.soleil.sgad.Constants.newLine + "\t" + "data_format number," + fr.soleil.sgad.Constants.newLine + "\t" + "writable number," + fr.soleil.sgad.Constants.newLine + "\t" + "max_dim_x number," + fr.soleil.sgad.Constants.newLine + "\t" + "max_dim_y number," + fr.soleil.sgad.Constants.newLine + "\t" + "level number," + fr.soleil.sgad.Constants.newLine + "\t" + "cs varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "archivable number," + fr.soleil.sgad.Constants.newLine + "\t" + "substitute number," + fr.soleil.sgad.Constants.newLine + "\t" + "description varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "label varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "unit varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "standard_unit varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "display_unit varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "format varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "min_val varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "max_val varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "min_alarm varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "max_alarm varchar2," + fr.soleil.sgad.Constants.newLine + "\t" + "property varchar2)" + fr.soleil.sgad.Constants.newLine + "\t" + "IS" + fr.soleil.sgad.Constants.newLine + "\t" + "seq number;" + fr.soleil.sgad.Constants.newLine + "\t" + "req varchar2(512);" + fr.soleil.sgad.Constants.newLine + "\t" + "var_id number;" + fr.soleil.sgad.Constants.newLine);
        if (2 == Constants.generationMode && schema.equals(fr.soleil.sgad.oracle.Constants.schema[0])) {
            fr.soleil.sgad.oracle.Generator.add_object("\t" + "tbs varchar2(555);" + fr.soleil.sgad.Constants.newLine + "\t" + "tbs1 varchar2(555);" + fr.soleil.sgad.Constants.newLine + "\t" + "vdate varchar2(555);" + fr.soleil.sgad.Constants.newLine + "\t" + "vdate1 varchar2(555);" + fr.soleil.sgad.Constants.newLine);
        } else {
            fr.soleil.sgad.oracle.Generator.add_object("\t" + "TBSname varchar2(555);" + fr.soleil.sgad.Constants.newLine);
        }
        fr.soleil.sgad.oracle.Generator.add_object("BEGIN" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + "\t" + "SELECT COUNT(ID) INTO var_id FROM " + fullRefTableName0 + " WHERE full_name = var_full_name;" + fr.soleil.sgad.Constants.newLine + "\t" + "IF var_id > 0 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t" + "select ID into var_id from " + fullRefTableName0 + " where full_name = var_full_name;" + fr.soleil.sgad.Constants.newLine + "\t" + "ELSE" + fr.soleil.sgad.Constants.newLine);
        if (1 == Constants.generationMode && schema.equals(fr.soleil.sgad.oracle.Constants.schema[0])) {
            fr.soleil.sgad.oracle.Generator.add_object("\t\t" + "TBSname := 'SC_' || replace(domain, '-', '');" + fr.soleil.sgad.Constants.newLine);
        } else if (2 != fr.soleil.sgad.oracle.Constants.generationMode || schema.equals(fr.soleil.sgad.oracle.Constants.schema[1])) {
            fr.soleil.sgad.oracle.Generator.add_object("\t\t" + "TBSname := 'SC_DATA';" + fr.soleil.sgad.Constants.newLine);
        }
        fr.soleil.sgad.oracle.Generator.add_object("\t\t" + "INSERT INTO " + fullRefTableName0 + " VALUES (" + schema + ".id.nextval, time, var_full_name, device, domain, family, member, att_name, data_type, data_format, writable, max_dim_x, max_dim_y, level, cs, archivable, substitute);" + fr.soleil.sgad.Constants.newLine + "\t\t" + "INSERT INTO " + fullRefTableName1 + " VALUES (" + schema + ".id.currval, time, description, label, unit, standard_unit, display_unit, format, min_val, max_val, min_alarm, max_alarm, NULL);" + fr.soleil.sgad.Constants.newLine + "\t\t" + "SELECT " + schema + ".id.currval INTO seq from dual;" + fr.soleil.sgad.Constants.newLine);
        if (2 == Constants.generationMode && schema.equals(fr.soleil.sgad.oracle.Constants.schema[0])) {
            fr.soleil.sgad.oracle.Generator.add_object("\t\t" + "select 'm' || to_char(sysdate, 'MM') || 'y' || to_char(sysdate, 'YY'), 	'm' || to_char(ADD_MONTHS(sysdate,1), 'MM') || 'y' || to_char(sysdate, 'YY'), TO_CHAR(LAST_DAY(sysdate), 'DD/MM/YYYY') || ' 23:59:59',	TO_CHAR(LAST_DAY(ADD_MONTHS(sysdate,1)), 'DD/MM/YYYY') || ' 23:59:59' into tbs, tbs1, vdate, vdate1 from dual;" + fr.soleil.sgad.Constants.newLine);
        }
        fr.soleil.sgad.oracle.Generator.add_object(fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t" + "si String (data_type=8)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t" + "si scalar (data_format=0)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t\t" + "si read -> sc_r_st (writable=0 ou 2)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t\t" + "sinon   -> sc_rw_st (writable=1 ou 3)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t" + "si spectrum" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t\t" + "si read -> sp_r_st (writable=0 ou 2)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t\t" + "sinon   -> sp_rw_st (writable=1 ou 3)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t" + "si matrice" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t\t" + "si read -> im_r_st (writable=0 ou 2)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t\t" + "sinon   -> im_rw_st (writable=1 ou 3)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t" + "sinon" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t" + "si scalar" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t\t" + "si read -> sc_r_n (writable=0 ou 2)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t\t" + "sinon   -> sc_rw_n (writable=1 ou 3)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t" + "si spectrum" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t" + "si read -> sp_r_n (writable=0 ou 2)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t" + "sinon   -> sp_rw_n (writable=1 ou 3)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t" + "si matrice" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t" + "si read -> im_r_n (writable=0 ou 2)" + fr.soleil.sgad.Constants.newLine + "--" + "\t\t\t\t\t" + "sinon   -> im_rw_n (writable=1 ou 3)" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + "\t\t" + "IF data_type = 8 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "IF data_format = 0 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF writable in (0,2) THEN --          si attribut = string / scalar / read" + fr.soleil.sgad.Constants.newLine);
        if (2 == Constants.generationMode && schema.equals(fr.soleil.sgad.oracle.Constants.schema[0])) {
            Generator.add_object("\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), value varchar2(256), CONSTRAINT pkatt' || seq || ' PRIMARY KEY(time)) ORGANIZATION INDEX pctfree 0 PARTITION BY RANGE (time) ';" + fr.soleil.sgad.Constants.newLine);
        } else {
            Generator.add_object("\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), value varchar2(256), CONSTRAINT pkatt' || seq || ' PRIMARY KEY(time)) ORGANIZATION INDEX TABLESPACE \"' || TBSname || '\" pctfree 0 STORAGE (INITIAL 2867200 NEXT 163840) " + ((schema.equals(fr.soleil.sgad.oracle.Constants.schema[1])) ? "NOLOGGING" : "") + "';" + fr.soleil.sgad.Constants.newLine);
        }
        Generator.add_object("\t\t\t\t" + "ELSE --          si attribut = string / scalar / read-write" + fr.soleil.sgad.Constants.newLine);
        if (2 == Constants.generationMode && schema.equals(fr.soleil.sgad.oracle.Constants.schema[0])) {
            Generator.add_object("\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), read_value varchar2(256), write_value varchar2(256), CONSTRAINT pkatt' || seq || ' PRIMARY KEY(time)) ORGANIZATION INDEX pctfree 0 PARTITION BY RANGE (time) ';" + fr.soleil.sgad.Constants.newLine);
        } else {
            Generator.add_object("\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), read_value varchar2(256), write_value varchar2(256), CONSTRAINT pkatt' || seq || ' PRIMARY KEY(time)) ORGANIZATION INDEX TABLESPACE \"' || TBSname || '\" pctfree 0 STORAGE (INITIAL 2867200 NEXT 163840) " + ((schema.equals(fr.soleil.sgad.oracle.Constants.schema[1])) ? "NOLOGGING" : "") + "';" + fr.soleil.sgad.Constants.newLine);
        }
        Generator.add_object("\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "ELSIF data_format = 1 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF writable in (0,2) THEN  -- String / spectrum / read" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), dim_x number, value sp_str) TABLESPACE SP_DATA pctfree 2 pctused 95 NESTED TABLE value.value STORE AS tab_' || seq;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSE  --   ||          si attribut = String / spectrum / read-write           ||" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), dim_x number, read_value sp_str, write_value sp_str) TABLESPACE SP_DATA pctfree 2 pctused 95 NESTED TABLE read_value.value STORE AS tab_' || seq || 'r, NESTED TABLE write_value.value STORE AS tab_' || seq || 'w';" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "ELSIF data_format = 2 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF writable in (0,2) THEN                --          si attribut = String / image / read" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), dim_x number, dim_y number, value BFILE) TABLESPACE IM_DATA pctfree 2 pctused 95 NESTED TABLE value.value STORE AS tab_' || seq;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSE                   --          si attribut = String / image / read-write" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), dim_x number, dim_y number, read_value BFILE) TABLESPACE IM_DATA pctfree 2 pctused 95 NESTED TABLE read_value.value STORE AS tab_' || seq || 'r, NESTED TABLE write_value.value STORE AS tab_' || seq || 'w';" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "ELSE" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "IF data_format = 0 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF writable in (0,2) THEN                --          si attribut = number / scalar / read" + fr.soleil.sgad.Constants.newLine);
        if (2 == Constants.generationMode && schema.equals(fr.soleil.sgad.oracle.Constants.schema[0])) {
            Generator.add_object("\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), value number, CONSTRAINT pkatt' || seq || ' PRIMARY KEY(time)) ORGANIZATION INDEX pctfree 0 PARTITION BY RANGE (time) ';" + fr.soleil.sgad.Constants.newLine);
        } else {
            Generator.add_object("\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), value number, CONSTRAINT pkatt' || seq || ' PRIMARY KEY(time)) ORGANIZATION INDEX TABLESPACE \"' || TBSname || '\" pctfree 0 STORAGE (INITIAL 2867200 NEXT 163840) " + ((schema.equals(Constants.schema[1])) ? "NOLOGGING" : "") + "';" + fr.soleil.sgad.Constants.newLine);
        }
        fr.soleil.sgad.oracle.Generator.add_object("\t\t\t\t" + "ELSE                   --          si attribut = number / scalar / read-write" + fr.soleil.sgad.Constants.newLine);
        if (2 == Constants.generationMode && schema.equals(fr.soleil.sgad.oracle.Constants.schema[0])) {
            Generator.add_object("\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), read_value number, write_value number, CONSTRAINT pkatt' || seq || ' PRIMARY KEY(time)) ORGANIZATION INDEX pctfree 0 PARTITION BY RANGE (time) ';" + fr.soleil.sgad.Constants.newLine);
        } else {
            Generator.add_object("\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), read_value number, write_value number, CONSTRAINT pkatt' || seq || ' PRIMARY KEY(time)) ORGANIZATION INDEX TABLESPACE \"' || TBSname || '\" pctfree 0 STORAGE (INITIAL 2867200 NEXT 163840) " + ((schema.equals(fr.soleil.sgad.oracle.Constants.schema[1])) ? "NOLOGGING" : "") + "';" + fr.soleil.sgad.Constants.newLine);
        }
        fr.soleil.sgad.oracle.Generator.add_object(fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "ELSIF data_format = 1 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF writable in (0,2) THEN                --          si attribut = number / spectrum / read" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), dim_x number, value sp_num) TABLESPACE SP_DATA pctfree 2 pctused 95 NESTED TABLE value.value STORE AS tab_' || seq;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSE                   --          si attribut = number / spectrum / read-write" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), dim_x number, read_value sp_num, write_value sp_num) TABLESPACE SP_DATA pctfree 2 pctused 95 NESTED TABLE read_value.value STORE AS tab_' || seq || 'r, NESTED TABLE write_value.value STORE AS tab_' || seq || 'w';" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "ELSIF data_format = 2 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "IF writable in (0,2) THEN                --          si attribut = number / matrice / read" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), dim_x number, dim_y number, value BFILE) TABLESPACE IM_DATA pctfree 2 pctused 95';" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "ELSE                   --          si attribut = number / matrice / read-write" + fr.soleil.sgad.Constants.newLine + "\t\t\t\t\t" + "req := 'CREATE TABLE " + schema + ".ATT_' || seq || ' (time timestamp(3), dim_x number, dim_y number, read_value BFILE, write_value BFILE) TABLESPACE IM_DATA pctfree 2 pctused 95';" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine + "\t\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine);
        if (2 == Constants.generationMode && schema.equals(fr.soleil.sgad.oracle.Constants.schema[0])) {
            fr.soleil.sgad.oracle.Generator.add_object("\t\t" + "IF data_format = 0 THEN" + fr.soleil.sgad.Constants.newLine + "\t\t\t" + "req := req || '( PARTITION ' || tbs || ' VALUES LESS THAN (to_date(''' || vdate || ''', ''DD/MM/YYYY HH24:MI:SS'')) tablespace ' || tbs || ', PARTITION ' || tbs1 || ' VALUES LESS THAN (to_date(''' || vdate1 || ''', ''DD/MM/YYYY HH24:MI:SS'')) tablespace ' || tbs || ')';" + fr.soleil.sgad.Constants.newLine + "\t\t" + "END IF;" + fr.soleil.sgad.Constants.newLine);
        }
        fr.soleil.sgad.oracle.Generator.add_object("\t\t" + "EXECUTE IMMEDIATE req;" + fr.soleil.sgad.Constants.newLine + "\t\t" + "EXECUTE IMMEDIATE 'GRANT SELECT ON " + schema + ".ATT_' || seq || ' TO " + fr.soleil.sgad.oracle.Constants.roles_prefix + schema + fr.soleil.sgad.oracle.Constants.roles[2] + "';" + fr.soleil.sgad.Constants.newLine + "\t\t" + "EXECUTE IMMEDIATE 'GRANT SELECT ON " + schema + ".ATT_' || seq || ' TO " + fr.soleil.sgad.oracle.Constants.roles_prefix + schema + fr.soleil.sgad.oracle.Constants.roles[0] + "';" + fr.soleil.sgad.Constants.newLine + "\t\t" + "EXECUTE IMMEDIATE 'GRANT INSERT ON " + schema + ".ATT_' || seq || ' TO " + fr.soleil.sgad.oracle.Constants.roles_prefix + schema + fr.soleil.sgad.oracle.Constants.roles[1] + "';" + fr.soleil.sgad.Constants.newLine + ((fr.soleil.sgad.oracle.Constants.schema[1] == schema) ? "\t\t" + "EXECUTE IMMEDIATE 'GRANT DELETE ON " + schema + ".ATT_' || seq || ' TO " + fr.soleil.sgad.oracle.Constants.roles_prefix + schema + fr.soleil.sgad.oracle.Constants.roles[1] + "';" + fr.soleil.sgad.Constants.newLine : "") + "\t" + "END IF;" + fr.soleil.sgad.Constants.newLine + "\t" + "commit;" + fr.soleil.sgad.Constants.newLine + "END;" + fr.soleil.sgad.Constants.newLine + "/" + fr.soleil.sgad.Constants.newLine + "SHOW ERROR;" + fr.soleil.sgad.Constants.newLine + fr.soleil.sgad.Constants.newLine);
    }
