    private void createManagerClass(File targetDir) {
        try {
            File baseClass = new File(new File(targetDir, "impl"), "VModellManagerImpl.java");
            PrintWriter writer = new PrintWriter(baseClass);
            writer.println("package " + packageName + ".impl;");
            writer.println();
            writer.println("// do not change this file - it might eventually be regenerated.");
            writer.println();
            writer.println("import java.util.Set;");
            writer.println("import java.util.HashSet;");
            writer.println("import java.util.Iterator;");
            writer.println();
            writer.println("import org.apache.commons.logging.Log;");
            writer.println("import " + packageName + ".*;");
            writer.println("import com.foursoft.component.Config;");
            writer.println("import com.foursoft.component.exception.ComponentInternalException;");
            writer.println("import com.foursoft.fourever.objectmodel.Instance;");
            writer.println("import com.foursoft.fourever.objectmodel.ComplexInstance;");
            writer.println("import com.foursoft.fourever.objectmodel.ObjectModel;");
            writer.println("import com.foursoft.fourever.objectmodel.Type;");
            writer.println("import com.foursoft.fourever.objectmodel.ComplexType;");
            writer.println("import com.foursoft.fourever.objectmodel.CompositeBinding;");
            writer.println();
            writer.println("public class VModellManagerImpl implements VModellManager {");
            writer.println();
            writer.println("private static VModellManagerImpl instance = null;");
            writer.println();
            writer.println("public static Log log = null;");
            writer.println();
            writer.println("  public static VModellManager createInstance(Log myLog) {");
            writer.println("    if(instance != null) {");
            writer.println("      throw new ComponentInternalException(\"Could not initialize the vmodell manager - already initialized\");");
            writer.println("    }");
            writer.println("    instance = new VModellManagerImpl();");
            writer.println("    if(myLog == null) {");
            writer.println("      throw new ComponentInternalException(\"Could not initialize the log\");");
            writer.println("    }");
            writer.println("    log = myLog;");
            writer.println("    log.debug(\"VModellManager created.\");");
            writer.println("    return instance;");
            writer.println("  }");
            writer.println();
            writer.println("  public void destroy() {");
            writer.println("  }");
            writer.println();
            writer.println("  public Config getConfig() {");
            writer.println("    return null;");
            writer.println("  }");
            writer.println();
            for (String type : createdTypes.keySet()) {
                writer.println("  public " + type + " create" + type + "(ComplexInstance instance) {");
                writer.println("    assert(instance!=null);");
                writer.println("    return new " + type + "Impl(instance);");
                writer.println("  }");
                writer.println();
                writer.println("  public Set<" + type + "> getAll" + type + "s(ObjectModel model) {");
                writer.println("    Set<" + type + "> resultSet = new HashSet<" + type + ">();");
                writer.println("    Type type = getType(model,\"" + createdTypes.get(type) + "\");");
                writer.println("    if(type!=null) {");
                writer.println("      for (Iterator<Instance> iit = type.getInstances(); iit.hasNext();) {");
                writer.println("		ComplexInstance ci = (ComplexInstance) iit.next();");
                writer.println("        resultSet.add(create" + type + "(ci));");
                writer.println("      }");
                writer.println("    }");
                writer.println("    return resultSet;");
                writer.println("  }");
                writer.println();
            }
            writer.println("  private Type getType(ObjectModel model, String bindingName) {");
            writer.println("    for (Iterator<Type> it = model.getTypes(); it.hasNext();) {");
            writer.println("      Type type = it.next();");
            writer.println("      if(type instanceof ComplexType) {");
            writer.println("        Iterator<CompositeBinding> cbit = type.getParentBindings();");
            writer.println("        if (cbit.hasNext()) {");
            writer.println("           CompositeBinding parentBinding = cbit.next();");
            writer.println("           if (parentBinding.getBindingName().equals(bindingName)) {");
            writer.println("              return type;");
            writer.println("           }");
            writer.println("        }");
            writer.println("      }");
            writer.println("    }");
            writer.println("    return null;");
            writer.println("  }");
            writer.println("}");
            writer.close();
        } catch (FileNotFoundException ex) {
            log.error(ex);
            System.exit(1);
        }
    }
