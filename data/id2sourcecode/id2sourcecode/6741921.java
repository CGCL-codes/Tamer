    @Test
    public void testOpenIDSpike() throws Exception {
        LOG.debug("OpenID spike");
        this.servletTester = new ServletTester();
        this.servletTester.addServlet(OpenIDConsumerServlet.class, "/consumer/*");
        this.servletTester.addServlet(OpenIDIdentityServlet.class, "/identity/*");
        this.servletTester.addServlet(OpenIDProducerServlet.class, "/producer");
        Security.addProvider(new BouncyCastleProvider());
        KeyPair keyPair = generateKeyPair();
        DateTime notBefore = new DateTime();
        DateTime notAfter = notBefore.plusMonths(1);
        X509Certificate certificate = generateSelfSignedCertificate(keyPair, "CN=localhost", notBefore, notAfter);
        File tmpP12File = File.createTempFile("ssl-", ".p12");
        tmpP12File.deleteOnExit();
        LOG.debug("p12 file: " + tmpP12File.getAbsolutePath());
        persistKey(tmpP12File, keyPair.getPrivate(), certificate, "secret".toCharArray(), "secret".toCharArray());
        SslSocketConnector sslSocketConnector = new SslSocketConnector();
        sslSocketConnector.setKeystore(tmpP12File.getAbsolutePath());
        sslSocketConnector.setTruststore(tmpP12File.getAbsolutePath());
        sslSocketConnector.setTruststoreType("pkcs12");
        sslSocketConnector.setKeystoreType("pkcs12");
        sslSocketConnector.setPassword("secret");
        sslSocketConnector.setKeyPassword("secret");
        sslSocketConnector.setTrustPassword("secret");
        sslSocketConnector.setMaxIdleTime(30000);
        int sslPort = getFreePort();
        sslSocketConnector.setPort(sslPort);
        this.servletTester.getContext().getServer().addConnector(sslSocketConnector);
        sslLocation = "https://localhost:" + sslPort;
        this.servletTester.start();
        location = this.servletTester.createSocketConnector(true);
        LOG.debug("location: " + location);
        HttpClient httpClient = new HttpClient();
        httpClient.getParams().setParameter("http.protocol.allow-circular-redirects", Boolean.TRUE);
        ProtocolSocketFactory protocolSocketFactory = new MyProtocolSocketFactory(certificate);
        Protocol myProtocol = new Protocol("https", protocolSocketFactory, sslPort);
        Protocol.registerProtocol("https", myProtocol);
        GetMethod getMethod = new GetMethod(sslLocation + "/consumer");
        int statusCode = httpClient.executeMethod(getMethod);
        LOG.debug("status code: " + statusCode);
        assertEquals(HttpServletResponse.SC_OK, statusCode);
        SessionHandler sessionHandler = this.servletTester.getContext().getSessionHandler();
        SessionManager sessionManager = sessionHandler.getSessionManager();
        HashSessionManager hashSessionManager = (HashSessionManager) sessionManager;
        LOG.debug("# sessions: " + hashSessionManager.getSessions());
        assertEquals(1, hashSessionManager.getSessions());
        Map<String, HttpSession> sessionMap = hashSessionManager.getSessionMap();
        LOG.debug("session map: " + sessionMap);
        Entry<String, HttpSession> sessionEntry = sessionMap.entrySet().iterator().next();
        HttpSession httpSession = sessionEntry.getValue();
        String userId = (String) httpSession.getAttribute(OpenIDConsumerServlet.USER_ID_SESSION_ATTRIBUTE);
        LOG.debug("userId session attribute: " + userId);
        assertEquals(sslLocation + "/identity/idp/123456789", userId);
        String firstName = (String) httpSession.getAttribute(OpenIDConsumerServlet.FIRST_NAME_SESSION_ATTRIBUTE);
        assertEquals("sample-first-name", firstName);
    }
