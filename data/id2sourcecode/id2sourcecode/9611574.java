    public void test_Reader() {
        compile("Reader.java", "// @(#)$Id: Reader.java 1199 2009-02-17 19:42:32Z smshaner $\n" + "\n" + "// Copyright (C) 2003 Iowa State University\n" + "\n" + "// This file is part of JML\n" + "\n" + "// JML is free software; you can redistribute it and/or modify\n" + "// it under the terms of the GNU General Public License as published by\n" + "// the Free Software Foundation; either version 2, or (at your option)\n" + "// any later version.\n" + "\n" + "// JML is distributed in the hope that it will be useful,\n" + "// but WITHOUT ANY WARRANTY; without even the implied warranty of\n" + "// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" + "// GNU General Public License for more details.\n" + "\n" + "// You should have received a copy of the GNU General Public License\n" + "// along with JML; see the file COPYING.  If not, write to\n" + "// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n" + "\n" + "\n" + "/** Readers.\n" + " * @author Arnd Poetzsch-Heffter\n" + " *         from an example by K. Rustan M. Leino and Greg Nelson, in\n" + " *         Data abstraction and information hiding,\n" + " *         ACM Transactions on Programming Languages and Systems,\n" + " *         Volume 24, number 5, pp. 491-553, September 2002.\n" + " */\n" + "public interface Reader {\n" + "  //@ public model instance boolean valid;\n" + "  //@ public model instance Object  state;\n" + "\n" + "  /*@ public normal_behavior\n" + "    @   requires    valid;\n" + "    @   assignable  state;\n" + "    @   ensures     -1 <= \\result && \\result <= 65535;\n" + "    @*/\n" + "  public int read();\n" + "\n" + "  /*@ public normal_behavior\n" + "    @   requires    valid;\n" + "    @   assignable  valid, state;\n" + "    @*/\n" + "  public void close();\n" + "  \n" + "}\n" + "// @(#)$Id: BufferedReader.java 1199 2009-02-17 19:42:32Z smshaner $\n" + "\n" + "// Copyright (C) 2003 Iowa State University\n" + "\n" + "// This file is part of JML\n" + "\n" + "// JML is free software; you can redistribute it and/or modify\n" + "// it under the terms of the GNU General Public License as published by\n" + "// the Free Software Foundation; either version 2, or (at your option)\n" + "// any later version.\n" + "\n" + "// JML is distributed in the hope that it will be useful,\n" + "// but WITHOUT ANY WARRANTY; without even the implied warranty of\n" + "// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" + "// GNU General Public License for more details.\n" + "\n" + "// You should have received a copy of the GNU General Public License\n" + "// along with JML; see the file COPYING.  If not, write to\n" + "// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n" + "\n" + "\n" + "/** Buffered readers.\n" + " * @author Arnd Poetzsch-Heffter\n" + " *         from an example by K. Rustan M. Leino and Greg Nelson, in\n" + " *         Data abstraction and information hiding,\n" + " *         ACM Transactions on Programming Languages and Systems,\n" + " *         Volume 24, number 5, pp. 491-553, September 2002.\n" + " */\n" + "abstract class BufferedReader implements Reader {\n" + "\n" + "  protected /*@ spec_public @*/ int lo, hi;\n" + "  protected /*@ spec_public @*/ int cur;\n" + "  protected /*@ spec_public @*/ char[] buff;\n" + "  \n" + "  //@ public model boolean svalid;\n" + "\n" + "  /*@ public represents valid <-\n" + "    @  this != null  &&\n" + "    @  0 <= lo  &&  lo <= cur  &&  cur <= hi  &&\n" + "    @  buff != null  &&  hi-lo <= buff.length &&\n" + "    @  svalid ;\n" + "    @*/\n" + "\n" + "\n" + "  public int read() {\n" + "    if( cur == hi ) refill();\n" + "    if( cur == hi )\n" + "      return -1;\n" + "    else {\n" + "      int result = buff[cur-lo];\n" + "      cur++;\n" + "      return result;\n" + "    }\n" + "  }\n" + "\n" + "\n" + "  /*@ public normal_behavior\n" + "    @   requires    valid;\n" + "    @   assignable  state;\n" + "    @   ensures     cur == \\old(cur) ;\n" + "    @*/\n" + "  public abstract void refill();\n" + "\n" + "  \n" + "}\n" + "\n" + "\n" + "// @(#)$Id: BlankReader.java 1199 2009-02-17 19:42:32Z smshaner $\n" + "\n" + "// Copyright (C) 2003 Iowa State University\n" + "\n" + "// This file is part of JML\n" + "\n" + "// JML is free software; you can redistribute it and/or modify\n" + "// it under the terms of the GNU General Public License as published by\n" + "// the Free Software Foundation; either version 2, or (at your option)\n" + "// any later version.\n" + "\n" + "// JML is distributed in the hope that it will be useful,\n" + "// but WITHOUT ANY WARRANTY; without even the implied warranty of\n" + "// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" + "// GNU General Public License for more details.\n" + "\n" + "// You should have received a copy of the GNU General Public License\n" + "// along with JML; see the file COPYING.  If not, write to\n" + "// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n" + "\n" + "/** A reader that delivers a stream of blanks.\n" + " * @author Arnd Poetzsch-Heffter\n" + " *         from an example by K. Rustan M. Leino and Greg Nelson, in\n" + " *         Data abstraction and information hiding,\n" + " *         ACM Transactions on Programming Languages and Systems,\n" + " *         Volume 24, number 5, pp. 491-553, September 2002.\n" + " */\n" + "class BlankReader extends BufferedReader\n" + "{\n" + "  private int num;\n" + "  //@           in state, svalid;\n" + "\n" + "  //@ private represents svalid <- hi <= num ;\n" + "\n" + "  /*@ public normal_behavior\n" + "    @   requires    0 <= n;\n" + "    @   assignable  valid, state;\n" + "    @   ensures     valid && svalid;\n" + "    @*/\n" + "  public BlankReader( int n ) {\n" + "    num  = n;\n" + "    buff = new char[ Math.min(n,8192) ];\n" + "    lo  = 0;\n" + "    cur = 0;\n" + "    hi  = buff.length;\n" + "    for( int i = 0; i < hi; i++ ) {\n" + "      buff[i] = 32;\n" + "    }\n" + "  }\n" + "\n" + "  public void refill() {\n" + "    lo = cur;\n" + "    hi = Math.min( lo+buff.length, num );\n" + "  }\n" + "\n" + "  public void close() {}\n" + "\n" + "}\n" + "\n" + "// @(#)$Id: ReaderTest.java 1199 2009-02-17 19:42:32Z smshaner $\n" + "\n" + "// Copyright (C) 2003 Iowa State University\n" + "\n" + "// This file is part of JML\n" + "\n" + "// JML is free software; you can redistribute it and/or modify\n" + "// it under the terms of the GNU General Public License as published by\n" + "// the Free Software Foundation; either version 2, or (at your option)\n" + "// any later version.\n" + "\n" + "// JML is distributed in the hope that it will be useful,\n" + "// but WITHOUT ANY WARRANTY; without even the implied warranty of\n" + "// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" + "// GNU General Public License for more details.\n" + "\n" + "// You should have received a copy of the GNU General Public License\n" + "// along with JML; see the file COPYING.  If not, write to\n" + "// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n" + "\n" + "\n" + "/** Tests for the readers example.\n" + " * @author Arnd Poetzsch-Heffter\n" + " *         from an example by K. Rustan M. Leino and Greg Nelson, in\n" + " *         Data abstraction and information hiding,\n" + " *         ACM Transactions on Programming Languages and Systems,\n" + " *         Volume 24, number 5, pp. 491-553, September 2002.\n" + " */\n" + "class  ReaderTest {\n" + "  \n" + "  /** Run the tests. */\n" + "  public static void main( String[] args ) {\n" + "\n" + "    int EXPECTED = 1000000;\n" + "    Reader rd = new BlankReader(EXPECTED);\n" + "\n" + "    int count = 0;\n" + "    int chr;\n" + "    do {\n" + "      chr = rd.read();\n" + "      count++;\n" + "    } while( chr != -1 );\n" + "    rd.close();\n" + "    if (count == EXPECTED+1) {\n" + "        System.out.println(\"Test passed\");\n" + "    } else {\n" + "        System.out.println(\"Failure: count was \" + count);\n" + "    }\n" + "  }  \n" + "}\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "\n");
    }
