    public void test_impliesLjava_security_Permission() {
        assertFalse("Should not return true for non-subset of actions", readAllFiles.implies(allInCurrent));
        assertFalse("Should not return true for non-subset of files", allInCurrent.implies(readAllFiles));
        assertTrue("Should not return false for subset of actions", allInCurrent.implies(readInCurrent));
        assertTrue("Should not return false for subset of files", readAllFiles.implies(readInCurrent));
        assertTrue("Should not return false for subset of files and actions", allInCurrent.implies(readInFile));
        assertTrue("Should not return false for equal FilePermissions", readAllFiles.implies(alsoReadAllFiles));
        assertTrue("Should not return false for subdir self", readInSubdir.implies(readInSubdir));
        assertTrue("Should not return false for current self", readInCurrent.implies(readInCurrent));
        assertTrue("Should not return false for subdir", readInSubdir.implies(readInCurrent));
        FilePermission fp13 = new FilePermission(File.separator, "read");
        FilePermission fp14 = new FilePermission(File.separator + "*", "read");
        assertFalse("/ should not imply /*", fp13.implies(fp14));
        fp14 = new FilePermission(File.separator + "-", "read");
        assertFalse("/ should not imply /-", fp13.implies(fp14));
        FilePermission fp3 = new FilePermission("/bob/*".replace('/', File.separatorChar), "read,write");
        FilePermission fp4 = new FilePermission("/bob/".replace('/', File.separatorChar), "write");
        assertFalse("Should not return true for same dir using * and not *", fp3.implies(fp4));
        FilePermission fp5 = new FilePermission("/bob/file".replace('/', File.separatorChar), "write");
        assertTrue("Should not return false for same dir using * and file", fp3.implies(fp5));
        FilePermission fp6 = new FilePermission("/bob/".replace('/', File.separatorChar), "read,write");
        FilePermission fp7 = new FilePermission("/bob/*".replace('/', File.separatorChar), "write");
        assertFalse("Should not return true for same dir using not * and *", fp6.implies(fp7));
        assertTrue("Should not return false for same subdir", fp6.implies(fp4));
        FilePermission fp8 = new FilePermission("/".replace('/', File.separatorChar), "read,write");
        FilePermission fp9 = new FilePermission("/".replace('/', File.separatorChar), "write");
        assertTrue("Should not return false for same dir", fp8.implies(fp9));
        FilePermission fp10 = new FilePermission("/".replace('/', File.separatorChar), "read,write");
        FilePermission fp11 = new FilePermission("/".replace('/', File.separatorChar), "write");
        assertTrue("Should not return false for same dir", fp10.implies(fp11));
        FilePermission fp12 = new FilePermission("/*".replace('/', File.separatorChar), "read,write");
        assertFalse("Should not return true for same dir using * and dir", fp12.implies(fp10));
        char separator = File.separatorChar;
        char nonSeparator = (separator == '/') ? '\\' : '/';
        FilePermission fp1 = new FilePermission(nonSeparator + "*", "read");
        FilePermission fp2 = new FilePermission(separator + "a", "read");
        assertFalse("Assert 0: non-separator worked", fp1.implies(fp2));
        fp1 = new FilePermission(nonSeparator + "-", "read");
        assertFalse("Assert 1: non-separator worked", fp1.implies(fp2));
    }
